using System;
using GTA;
using GTA.Native;
using GTA.Math;
using GTA.UI;
using static GTA.Script;
using Screen = GTA.UI.Screen;
using System.Windows.Forms;
using System.Drawing;
using System.Collections.Specialized;
using System.Security.Permissions;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Runtime.CompilerServices;
using System.Net.Mime;
using Main = CruelMastersOnlineOffline.CruelMastersOnlineOffline;
using static System.Runtime.InteropServices.Marshal;
using System.Text;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Media;
using LemonUI.Menus;
using LemonUI.Scaleform;
using LemonUI;
using System.Xml;
using System.Xml.Linq;
using System.IO;
using System.Drawing.Imaging;
using System.Xml.Serialization;
using LemonUI.Elements;
using System.Net.Http.Headers;
using System.CodeDom;
using System.Runtime.Remoting.Channels;

namespace CruelMastersOnlineOffline
{
    public class CruelMastersOnlineOffline : Script
    {
        #region Important Variables (Debug Stuff)
        public static ScriptSettings Config;
        //bool dlcInstalled = Function.Call<bool>(Hash.IS_​DLC_​PRESENT, Game.GenerateHash("mphcctb"));
        public static bool DEBUG = true;
        public static int TeleTimer;
        public static int TeleSwitch;
        public static int lastHelpTime = 0;
        public static int helpInterval = 5000;
        public static TextElement myUIText;
        public static bool ContinueCOO = false;
        public static string Player_Name = Function.Call<string>(Hash.GET_PLAYER_NAME, Function.Call<int>(Hash.PLAYER_ID));
        public static int handle;
        public static bool NoCopsOnMission = false;
        public static bool FuckOffCivilians = false;
        public static bool RadioAllowed = true;
        public static bool LoadMPData = true;
        public static bool OnMission = false;
        public static bool IsFreemodeMale = false;
        public static bool IsFreemodeFemale = false;
        public static int TestSwitch = 0;
        public static Vector3 prevpos = Game.Player.Character.Position;
        public static float prevhead = Game.Player.Character.Heading;
        int test = 0;
        #endregion
        #region Peds
        public static Ped CutsceneExtra1;
        public static Ped CutsceneExtra2;
        public static Ped CutsceneExtra3;
        public static Ped CutsceneExtra4;
        public static Ped CutsceneExtra5;
        public static Ped CutsceneExtra6;
        public static Ped CutsceneExtra7;
        public static Ped CutsceneExtra8;
        public static Ped CutsceneExtra9;
        public static Ped CutsceneExtra10;
        #endregion

        #region Props
        public static Prop Container;
        public static Prop ContainerColl;
        public static Prop Lock;

        public static Prop FakeCutsceneProp1;
        public static Prop FakeCutsceneProp2;
        public static Prop FakeCutsceneProp3;
        public static Prop FakeCutsceneProp4;
        public static Prop FakeCutsceneProp5;
        public static Prop FakeCutsceneProp6;
        public static Prop FakeCutsceneProp7;
        public static Prop FakeCutsceneProp8;
        public static Prop FakeCutsceneProp9;
        public static Prop FakeCutsceneProp10;
        #endregion

        #region Pickups
        #endregion

        #region Blips
        public static Blip missionBlip;
        public static Blip ImportantStoryBlip;
        #endregion

        #region Cameras
        public static Camera CutsceneCam;
        public static Camera CutsceneCam2;
        public static Camera CutsceneCam3;
        public static Camera CutsceneCam4;

        public static Camera MenuCam;
        #endregion
        
        #region Ints
        public static int Menu_Switch = 0;
        public static int checkpoint = -1;
        public static int StorySwitch = 0;
        public static int currentselection;
        public static int getcurrentselection;
        public static int MouseCheck;
        public static int getcurrentselection2;
        public static int getcurrentselection3;
        public static int GrinderSwitch = 0;

        public static int TestCutsceneAnim;
        public static int TestCutsceneAnim2;
        public static int TestCutsceneAnim3;
        public static int TestCutsceneAnim4;
        public static int TestCutsceneAnim5;
        public static int TestCutsceneAnim6;

        public static int SoundID;
        public static int SoundID2;
        public static int SoundID3;
        public static int SoundID4;
        public static int SoundID5;
        public static int SoundID6;
        public static int ScaleID;
        public static int ScaleID2;
        public static int ScaleID3;
        public static int ScaleID4;
        public static int ScaleID5;
        public static int ScaleID6;
        public static int RenderID;
        public static int RenderID2;
        public static int RenderID3;
        public static int RenderID4;
        public static int RenderID5;
        public static int RenderID6;
        public static int PTFXID;
        public static int PTFXID2;
        public static int PTFXID3;
        public static int PTFXID4;
        public static int PTFXID5;
        public static int PTFXID6;

        public static int LoadScreen;
        public static int FullLoadTime;
        public static int LoadTime;
        public static bool Loading;
        public static float fVar0 = 0f;
        public static float fVar1 = 0f;
        public static float fVar2 = 0f;
        public static int fVar3 = 0;
        public static int GuardAlertCountdown = -1;

        public static float Potential_Cut = 0;
        #endregion

        #region Scaleforms
        public static Scaleform ContactText = new Scaleform("MP_MISSION_NAME_FREEMODE");
        #endregion

        #region Bools (remember to turn InLobby to false when releaseing new builds
        public static bool doorunlocked = false;
        public static bool OwnsGrinder = false;

        public static bool ALERTED = false;
        public static bool InLobby = true;
        #endregion

        #region Vehicles
        public static Vehicle PlayerVehicle;
        public static Vehicle Manchez;
        #endregion

        #region LemonUI
        public static ObjectPool MenuPool = new ObjectPool();
        public static NativeMenu CharCreator;
        public static NativeMenu MainMenu;
        #endregion

        #region Videos

        #endregion

        #region
        public static int MPHairColor = 0;
        public static int MPEyeColor = 0;
        public static int MPMakeupColor = 0;
        public static int MPLipstickColor = 0;
        public static int MPGender = 0;
        public static int PosSaveTimer = 0;
        public static float PreviousPosX = 0f;
        public static float PreviousPosY = 0f;
        public static float PreviousPosZ = 0f;
        #endregion
        public static string LoadTexureDict(string dict)
        {
            while (!Function.Call<bool>(Hash.HAS_STREAMED_TEXTURE_DICT_LOADED, dict))
            {
                Function.Call(Hash.REQUEST_STREAMED_TEXTURE_DICT, dict);
                Script.Yield();
            }

            return dict;
        }
        public static string LoadCutsceneWithFlag(string cutscene, int playbackflag)
        {
            while (!Function.Call<bool>(Hash.HAS_CUTSCENE_LOADED, cutscene))
            {
                Function.Call(Hash.REQUEST_CUTSCENE_WITH_PLAYBACK_LIST, cutscene, playbackflag, 8);
                Script.Yield();
            }

            return cutscene;
        }
        public static string LoadCutscene(string cutscene)
        {
            while (!Function.Call<bool>(Hash.HAS_CUTSCENE_LOADED, cutscene))
            {
                Function.Call(Hash.REQUEST_CUTSCENE, cutscene, 8);
                Script.Yield();
            }

            return cutscene;
        }
        public static string LoadDict(string dict)
        {
            while (!Function.Call<bool>(Hash.HAS_ANIM_DICT_LOADED, dict))
            {
                Function.Call(Hash.REQUEST_ANIM_DICT, dict);
                Script.Yield();
            }

            return dict;
        }
        public static string LoadStream(string name, string dict)
        {
            while (!Function.Call<bool>(Hash.LOAD_STREAM, name, dict))
            {
                Function.Call(Hash.LOAD_STREAM, name, dict);
                Script.Yield();
            }

            return dict;
        }
        public static int LoadStream(string name, int dict)
        {
            while (!Function.Call<bool>(Hash.LOAD_STREAM, name, dict))
            {
                Function.Call(Hash.LOAD_STREAM, name, dict);
                Script.Yield();
            }

            return dict;
        }

        #region Set & Get Ped Cutscene
        public static void SetPedOutfitCutscene(string MP, Ped NonCutscene)
        {
            if (MP.Equals("MP_1"))
            {
                CutscenePed1Comp[0] = "0_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 0) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 0);
                CutscenePed1Comp[1] = "1_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 1) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 1);
                CutscenePed1Comp[2] = "2_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 2) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 2);
                CutscenePed1Comp[3] = "3_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 3) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 3);
                CutscenePed1Comp[4] = "4_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 4) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 4);
                CutscenePed1Comp[5] = "5_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 5) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 5);
                CutscenePed1Comp[6] = "6_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 6) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 6);
                CutscenePed1Comp[7] = "7_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 7) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 7);
                CutscenePed1Comp[8] = "8_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 8) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 8);
                CutscenePed1Comp[9] = "9_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 9) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 9);
                CutscenePed1Comp[10] = "10_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 10) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 10);
                CutscenePed1Comp[11] = "11_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 11) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 11);
            }

        }
        public static void GetPedOutfitCutscene(string MP, Ped NonCutscene)
        {
            if (MP.Equals("MP_1"))
            {
                string[] part = CutscenePed1Comp[0].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 0, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed1Comp[1].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 1, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed1Comp[2].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 2, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed1Comp[3].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 3, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed1Comp[4].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 4, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed1Comp[5].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 5, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed1Comp[6].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 6, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed1Comp[7].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 7, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed1Comp[8].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 8, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed1Comp[9].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 9, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed1Comp[10].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 10, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed1Comp[11].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 11, int.Parse(part[1]), int.Parse(part[2]), 1);

            }
        }
        public static List<string> CutscenePed1Comp = new List<string>()
        {
             { "0_0_0" },
             { "1_0_0" },
             { "2_0_0" },
             { "3_0_0" },
             { "4_0_0" },
             { "5_0_0" },
             { "6_0_0" },
             { "7_0_0" },
             { "8_0_0" },
             { "9_0_0" },
             { "10_0_0" },
             { "11_0_0" }

        };
        public static void SetPedOutfitCutscene_MP2(string MP, Ped NonCutscene)
        {
            if (MP.Equals("MP_2"))
            {
                CutscenePed2Comp[0] = "0_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 0) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 0);
                CutscenePed2Comp[1] = "1_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 1) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 1);
                CutscenePed2Comp[2] = "2_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 2) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 2);
                CutscenePed2Comp[3] = "3_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 3) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 3);
                CutscenePed2Comp[4] = "4_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 4) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 4);
                CutscenePed2Comp[5] = "5_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 5) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 5);
                CutscenePed2Comp[6] = "6_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 6) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 6);
                CutscenePed2Comp[7] = "7_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 7) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 7);
                CutscenePed2Comp[8] = "8_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 8) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 8);
                CutscenePed2Comp[9] = "9_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 9) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 9);
                CutscenePed2Comp[10] = "10_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 10) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 10);
                CutscenePed2Comp[11] = "11_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 11) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 11);
            }

        }
        public static void GetPedOutfitCutscene_MP2(string MP, Ped NonCutscene)
        {
            if (MP.Equals("MP_2"))
            {
                string[] part = CutscenePed2Comp[0].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 0, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed2Comp[1].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 1, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed2Comp[2].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 2, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed2Comp[3].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 3, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed2Comp[4].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 4, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed2Comp[5].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 5, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed2Comp[6].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 6, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed2Comp[7].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 7, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed2Comp[8].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 8, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed2Comp[9].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 9, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed2Comp[10].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 10, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed2Comp[11].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 11, int.Parse(part[1]), int.Parse(part[2]), 1);

            }
        }
        public static List<string> CutscenePed2Comp = new List<string>()
        {
             { "0_0_0" },
             { "1_0_0" },
             { "2_0_0" },
             { "3_0_0" },
             { "4_0_0" },
             { "5_0_0" },
             { "6_0_0" },
             { "7_0_0" },
             { "8_0_0" },
             { "9_0_0" },
             { "10_0_0" },
             { "11_0_0" }

        };
        public static void SetPedOutfitCutscene_MP3(string MP, Ped NonCutscene)
        {
            if (MP.Equals("MP_3"))
            {
                CutscenePed3Comp[0] = "0_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 0) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 0);
                CutscenePed3Comp[1] = "1_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 1) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 1);
                CutscenePed3Comp[2] = "2_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 2) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 2);
                CutscenePed3Comp[3] = "3_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 3) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 3);
                CutscenePed3Comp[4] = "4_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 4) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 4);
                CutscenePed3Comp[5] = "5_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 5) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 5);
                CutscenePed3Comp[6] = "6_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 6) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 6);
                CutscenePed3Comp[7] = "7_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 7) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 7);
                CutscenePed3Comp[8] = "8_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 8) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 8);
                CutscenePed3Comp[9] = "9_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 9) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 9);
                CutscenePed3Comp[10] = "10_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 10) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 10);
                CutscenePed3Comp[11] = "11_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 11) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 11);
            }

        }
        public static void GetPedOutfitCutscene_MP3(string MP, Ped NonCutscene)
        {
            if (MP.Equals("MP_3"))
            {
                string[] part = CutscenePed3Comp[0].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 0, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed3Comp[1].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 1, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed3Comp[2].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 2, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed3Comp[3].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 3, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed3Comp[4].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 4, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed3Comp[5].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 5, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed3Comp[6].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 6, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed3Comp[7].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 7, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed3Comp[8].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 8, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed3Comp[9].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 9, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed3Comp[10].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 10, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed3Comp[11].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 11, int.Parse(part[1]), int.Parse(part[2]), 1);

            }
        }
        public static List<string> CutscenePed3Comp = new List<string>()
        {
             { "0_0_0" },
             { "1_0_0" },
             { "2_0_0" },
             { "3_0_0" },
             { "4_0_0" },
             { "5_0_0" },
             { "6_0_0" },
             { "7_0_0" },
             { "8_0_0" },
             { "9_0_0" },
             { "10_0_0" },
             { "11_0_0" }

        };
        public static void SetPedOutfitCutscene_MP4(string MP, Ped NonCutscene)
        {
            if (MP.Equals("MP_4"))
            {
                CutscenePed4Comp[0] = "0_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 0) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 0);
                CutscenePed4Comp[1] = "1_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 1) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 1);
                CutscenePed4Comp[2] = "2_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 2) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 2);
                CutscenePed4Comp[3] = "3_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 3) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 3);
                CutscenePed4Comp[4] = "4_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 4) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 4);
                CutscenePed4Comp[5] = "5_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 5) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 5);
                CutscenePed4Comp[6] = "6_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 6) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 6);
                CutscenePed4Comp[7] = "7_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 7) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 7);
                CutscenePed4Comp[8] = "8_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 8) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 8);
                CutscenePed4Comp[9] = "9_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 9) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 9);
                CutscenePed4Comp[10] = "10_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 10) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 10);
                CutscenePed4Comp[11] = "11_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 11) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 11);
            }

        }
        public static void GetPedOutfitCutscene_MP4(string MP, Ped NonCutscene)
        {
            if (MP.Equals("MP_4"))
            {
                string[] part = CutscenePed4Comp[0].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 0, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed4Comp[1].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 1, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed4Comp[2].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 2, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed4Comp[3].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 3, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed4Comp[4].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 4, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed4Comp[5].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 5, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed4Comp[6].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 6, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed4Comp[7].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 7, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed4Comp[8].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 8, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed4Comp[9].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 9, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed4Comp[10].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 10, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed4Comp[11].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 11, int.Parse(part[1]), int.Parse(part[2]), 1);

            }
        }
        public static List<string> CutscenePed4Comp = new List<string>()
        {
             { "0_0_0" },
             { "1_0_0" },
             { "2_0_0" },
             { "3_0_0" },
             { "4_0_0" },
             { "5_0_0" },
             { "6_0_0" },
             { "7_0_0" },
             { "8_0_0" },
             { "9_0_0" },
             { "10_0_0" },
             { "11_0_0" }

        };

        public static void SetPedOutfitCutscene_MP5(string MP, Ped NonCutscene)
        {
            if (MP.Equals("MP_5"))
            {
                CutscenePed5Comp[0] = "0_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 0) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 0);
                CutscenePed5Comp[1] = "1_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 1) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 1);
                CutscenePed5Comp[2] = "2_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 2) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 2);
                CutscenePed5Comp[3] = "3_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 3) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 3);
                CutscenePed5Comp[4] = "4_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 4) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 4);
                CutscenePed5Comp[5] = "5_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 5) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 5);
                CutscenePed5Comp[6] = "6_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 6) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 6);
                CutscenePed5Comp[7] = "7_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 7) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 7);
                CutscenePed5Comp[8] = "8_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 8) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 8);
                CutscenePed5Comp[9] = "9_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 9) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 9);
                CutscenePed5Comp[10] = "10_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 10) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 10);
                CutscenePed5Comp[11] = "11_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 11) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 11);
            }

        }
        public static void GetPedOutfitCutscene_MP5(string MP, Ped NonCutscene)
        {
            if (MP.Equals("MP_5"))
            {
                string[] part = CutscenePed5Comp[0].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 0, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed5Comp[1].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 1, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed5Comp[2].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 2, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed5Comp[3].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 3, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed5Comp[4].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 4, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed5Comp[5].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 5, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed5Comp[6].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 6, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed5Comp[7].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 7, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed5Comp[8].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 8, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed5Comp[9].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 9, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed5Comp[10].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 10, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed5Comp[11].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 11, int.Parse(part[1]), int.Parse(part[2]), 1);

            }
        }
        public static List<string> CutscenePed5Comp = new List<string>()
        {
             { "0_0_0" },
             { "1_0_0" },
             { "2_0_0" },
             { "3_0_0" },
             { "4_0_0" },
             { "5_0_0" },
             { "6_0_0" },
             { "7_0_0" },
             { "8_0_0" },
             { "9_0_0" },
             { "10_0_0" },
             { "11_0_0" }

        };

        public static void SetPedOutfitCutscene_MP6(string MP, Ped NonCutscene)
        {
            if (MP.Equals("MP_6"))
            {
                CutscenePed6Comp[0] = "0_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 0) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 0);
                CutscenePed6Comp[1] = "1_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 1) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 1);
                CutscenePed6Comp[2] = "2_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 2) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 2);
                CutscenePed6Comp[3] = "3_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 3) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 3);
                CutscenePed6Comp[4] = "4_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 4) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 4);
                CutscenePed6Comp[5] = "5_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 5) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 5);
                CutscenePed6Comp[6] = "6_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 6) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 6);
                CutscenePed6Comp[7] = "7_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 7) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 7);
                CutscenePed6Comp[8] = "8_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 8) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 8);
                CutscenePed6Comp[9] = "9_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 9) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 9);
                CutscenePed6Comp[10] = "10_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 10) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 10);
                CutscenePed6Comp[11] = "11_" + Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 11) + "_" + Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 11);
            }

        }
        public static void GetPedOutfitCutscene_MP6(string MP, Ped NonCutscene)
        {
            if (MP.Equals("MP_6"))
            {
                string[] part = CutscenePed6Comp[0].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 0, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed6Comp[1].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 1, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed6Comp[2].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 2, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed6Comp[3].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 3, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed6Comp[4].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 4, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed6Comp[5].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 5, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed6Comp[6].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 6, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed6Comp[7].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 7, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed6Comp[8].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 8, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed6Comp[9].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 9, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed6Comp[10].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 10, int.Parse(part[1]), int.Parse(part[2]), 1);
                part = CutscenePed6Comp[11].Split('_');
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 11, int.Parse(part[1]), int.Parse(part[2]), 1);

            }
        }
        public static List<string> CutscenePed6Comp = new List<string>()
        {
             { "0_0_0" },
             { "1_0_0" },
             { "2_0_0" },
             { "3_0_0" },
             { "4_0_0" },
             { "5_0_0" },
             { "6_0_0" },
             { "7_0_0" },
             { "8_0_0" },
             { "9_0_0" },
             { "10_0_0" },
             { "11_0_0" }

        };
        #endregion
        
        public CruelMastersOnlineOffline()
        {
            Tick += onTick;
            LoadIniFile("scripts\\CruelMastersOnlineOffline.ini");
            StorySwitch = Config.GetValue<int>("Main", "Progression", StorySwitch);
            Aborted += onShutdown;
            KeyDown += onKeyDown;
            foreach (string ipls in RemoveOnlyIPLS)
            {
                Function.Call(Hash.REMOVE_IPL, ipls);
            }
            foreach (string ipl in LoadAllIPLS)
            {
                Function.Call(Hash.REMOVE_IPL, ipl);

                Function.Call(Hash.REQUEST_IPL, ipl);
            }
            //PedOutfit.InitHeadBlendData();
            //PedOutfit.InitExtensionListGet();
            //Game.Player.Character.Position = new Vector3(924.4473f, 46.73679f, 81.10636f - 1f);
            //Game.Player.Character.Position = new Vector3(800.000f, -3000.000f, -70.000f);
            
            SETUP_CHAR_CREATOR_MENU();
            SETUP_MAIN_MENU();
        }
        
        public static List<string> LoadAllIPLS = new List<string>()
        {
            "xm_hatch_01_cutscene",
            "xm_hatch_02_cutscene",
            "xm_hatch_03_cutscene",
            "xm_hatch_04_cutscene",
            "xm_hatch_05_cutscene",
            "xm_hatch_06_cutscene",
            "xm_hatch_07_cutscene",
            "xm_hatch_08_cutscene",
            "xm_hatch_09_cutscene",
            "xm_hatch_10_cutscene",
            "xm_hatch_closed",
            "xm_hatches_terrain",
            "xm_hatches_terrain_lod",
            "sm_smugdlc_interior_placement",
            "xm_mpchristmasadditions",
            "xm_siloentranceclosed_x17",
            "id2_14_during1",
            "shr_int",
            "xm_x17dlc_int_placement_interior_8_x17dlc_int_sub_milo_",
            "bkr_bi_hw1_13_int",
            "bkr_bi_id1_23_door",
            "vw_dlc_casino_door",
            "xm_x17dlc_int_placement_interior_4_x17dlc_int_facility_milo_",
            "xm_x17dlc_int_placement_interior_5_x17dlc_int_facility2_milo_",
            "xm_x17dlc_int_placement_interior_0_x17dlc_int_base_ent_milo_",
            "xm_x17dlc_int_placement_interior_1_x17dlc_int_base_loop_milo_",
            "xm_x17dlc_int_placement_interior_2_x17dlc_int_bse_tun_milo_",
            "xm_x17dlc_int_placement_interior_3_x17dlc_int_base_milo_",
            "xm_x17dlc_int_placement_interior_6_x17dlc_int_silo_01_milo_",
            "xm_x17dlc_int_placement_interior_7_x17dlc_int_silo_02_milo_",
            "xm_x17dlc_int_placement_interior_10_x17dlc_int_tun_straight_milo_",
            "xm_x17dlc_int_placement_interior_11_x17dlc_int_tun_slope_flat_milo_",
            "xm_x17dlc_int_placement_interior_12_x17dlc_int_tun_flat_slope_milo_",
            "xm_x17dlc_int_placement_interior_13_x17dlc_int_tun_30d_r_milo_",
            "xm_x17dlc_int_placement_interior_14_x17dlc_int_tun_30d_l_milo_",
            "xm_x17dlc_int_placement_interior_15_x17dlc_int_tun_straight_milo_",
            "xm_x17dlc_int_placement_interior_16_x17dlc_int_tun_straight_milo_",
            "xm_x17dlc_int_placement_interior_17_x17dlc_int_tun_slope_flat_milo_",
            "xm_x17dlc_int_placement_interior_18_x17dlc_int_tun_slope_flat_milo_",
            "xm_x17dlc_int_placement_interior_19_x17dlc_int_tun_flat_slope_milo_",
            "xm_x17dlc_int_placement_interior_20_x17dlc_int_tun_flat_slope_milo_",
            "xm_x17dlc_int_placement_interior_21_x17dlc_int_tun_30d_r_milo_",
            "xm_x17dlc_int_placement_interior_22_x17dlc_int_tun_30d_r_milo_",
            "xm_x17dlc_int_placement_interior_23_x17dlc_int_tun_30d_r_milo_",
            "xm_x17dlc_int_placement_interior_24_x17dlc_int_tun_30d_r_milo_",
            "xm_x17dlc_int_placement_interior_25_x17dlc_int_tun_30d_l_milo_",
            "xm_x17dlc_int_placement_interior_26_x17dlc_int_tun_30d_l_milo_",
            "xm_x17dlc_int_placement_interior_27_x17dlc_int_tun_30d_l_milo_",
            "xm_x17dlc_int_placement_interior_28_x17dlc_int_tun_30d_l_milo_",
            "xm_x17dlc_int_placement_interior_29_x17dlc_int_tun_30d_l_milo_",
            "xm_x17dlc_int_placement_interior_34_x17dlc_int_lab_milo_",
            "xm_x17dlc_int_placement_interior_35_x17dlc_int_tun_entry_milo_",
            "xm_x17dlc_int_placement_strm_0",
            "xm_x17dlc_int_placement_interior_33_x17dlc_int_02_milo_",
            "xm_prop_x17_tem_control_01",
            "SP1_10_real_interior",
            "post_hiest_unload",
            "facelobby",
            "FIBlobby",
            "Coroner_Int_on",
            "h4_ch2_mansion_final",
            "hei_ch1_06e_strm_1",
            "ex_exec_warehouse_placement_interior_1_int_warehouse_s_dlc_milo",
            "FINBANK",
            "h4_islandairstrip_doorsopen",
            "v_tunnel_hole",
            "plane_crash_trench",
            "hei_dlc_casino_door",
            "vw_casino_main",
            "vw_casino_carpark",
            "vw_casino_garage",
            "vw_casino_penthouse",
            "hei_dlc_casino_aircon",
            "hei_dlc_casino_aircon_lod",
            "hei_dlc_casino_door",
            "hei_dlc_casino_door_lod",
            "hei_dlc_vw_roofdoors_locked",
            "hei_dlc_windows_casino",
            "hei_dlc_windows_casino_lod",
            "ch_chint09_closed",
            "bkr_biker_interior_placement_interior_0_biker_dlc_int_01_milo",
            "bkr_biker_interior_placement_interior_1_biker_dlc_int_02_milo",
            "h4_island_padlock_props",
            "h4_BoatBlockers",
            "h4_Mansion_Gate_Closed",
            "xm3_collision_fixes",
            "xm3_cutscene_doors",
            "xm3_doc_sign",
            "xm3_doc_sign_lod",
            "xm3_garage_fix",
            "xm3_garage_fix_lod",
            "xm3_security_fix",
            "xm3_stash_cams",
            "xm3_sum2_fix",
            "xm3_sum2_fix_lod",
            "xm3_warehouse",
            "xm3_warehouse_grnd",
            "xm3_warehouse_lod",
        };
        public static List<string> RemoveOnlyIPLS = new List<string>()
        {
            //"ch_prop_ch_vault_wall_damage",
            "xm_bunkerentrance_door",
            "chemgrill_grp1",
            "id2_14_pre_no_int",
            "id2_14_post_no_int",
            "id2_14_on_fire",
            "id2_14_during_door",
            "id2_14_during2",
            "burnt_switch_off",
            "id2_14_during1",
            "fakeint",
            "fakeint_boards",
            "shr_int",
            "carshowroom_boarded",
            "carshowroom_broken",
            "SP1_10_fake_interior",
            "bh1_16_refurb",
            "jewel2fake",
            "FIBlobbyfake",
            "h4_islandairstrip_doorsclosed",
            "hei_po1_07_strm_2",
            "v_tunnel_hole_swap",
            "dt1_03_shutter",
            "dt1_03_gr_closed",
            "atriumglcut",
            "atriumglstatic",
            "atriumglmission",
            "FBI_repair",
            "FBI_colPLUG",
            "DT1_05_rubble",
            "DT1_05_HC_REMOVE",
            "DT1_05_HC_REQ",
            "dt1_05_slod",
            "dt1_05_damage_slod",
            "dt1_05_build1_damage_lod",
            "dt1_05_build1_damage",
            "dt1_05_build1_h",
            "DT1_05_REQUEST",
            "FBI_repair_lod",
            "dt1_05_build1_h",
            "dt1_05_build1_damage",
            "dt1_05_build1_damage_lod",
            "h4_island_padlock_props",
            "h4_islandxdock_water_hatch",
            "h4_islandx_barrack_hatch",
            "h4_BoatBlockers",
            "h4_underwater_gate_closed",
            "h4_Mansion_Gate_Broken",
            "h4_Mansion_Gate_Closed",
            "hei_ch1_06e_strm_2",
            "hei_ch1_06e_strm_1",
        };

        public static void LoadIniFile(string iniName)
        {
            Config = ScriptSettings.Load(iniName);

            #region Character
            int iVar0 = 1;
            float fVar0 = 0f;
            while (iVar0 < 20)
            {
                PedOutfit.FaceFeaturePart[iVar0] = Config.GetValue<float>("Character", $"Face Feature {iVar0}", PedOutfit.FaceFeaturePart[iVar0]);
                //Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, iVar0, fVar3);
                iVar0++;
            }

            PedOutfit.Data.ShapeFirst = Config.GetValue<int>("Character", "Head Blend Data 1", PedOutfit.Data.ShapeFirst);
            PedOutfit.Data.ShapeSecond = Config.GetValue<int>("Character", "Head Blend Data 2", PedOutfit.Data.ShapeSecond);
            PedOutfit.Data.SkinFirst = Config.GetValue<int>("Character", "Head Blend Data 3", PedOutfit.Data.SkinFirst);

            PedOutfit.HairPart[0] = Config.GetValue<int>("Character", "Hair", PedOutfit.HairPart[0]);
            MPHairColor = Config.GetValue<int>("Character", "Hair Color", MPHairColor);
            MPEyeColor = Config.GetValue<int>("Character", "Eye Color", MPEyeColor);
            MPMakeupColor = Config.GetValue<int>("Character", "Makeup Color", MPMakeupColor);
            MPLipstickColor = Config.GetValue<int>("Character", "Lipstick Color", MPLipstickColor);

            iVar0 = 0;
            while (iVar0 < 10)
            {
                PedOutfit.OverlayPart[iVar0] = Config.GetValue<int>("Character", $"Overlay {iVar0}", PedOutfit.OverlayPart[iVar0]);
                PedOutfit.OpacityPart[iVar0] = Config.GetValue<float>("Character", $"Overlay Opacity {iVar0}", PedOutfit.OpacityPart[iVar0]);
                //Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, iVar0, fVar3);
                iVar0++;
            }

            iVar0 = 0;
            while (iVar0 < PedOutfit.OutfitPart.Length)
            {
                PedOutfit.OutfitPart[iVar0] = Config.GetValue<int>("Character", $"Outfit {iVar0}", PedOutfit.OutfitPart[iVar0]);
                PedOutfit.OutfitPart2[iVar0] = Config.GetValue<int>("Character", $"Outfit Variation {iVar0}", PedOutfit.OutfitPart2[iVar0]);
                iVar0++;
            }

            iVar0 = 0;
            while (iVar0 < PedOutfit.OutfitPart3.Length)
            {
                PedOutfit.OutfitPart3[iVar0] = Config.GetValue<int>("Character", $"Accessory {iVar0}", PedOutfit.OutfitPart3[iVar0]);
                PedOutfit.OutfitPart4[iVar0] = Config.GetValue<int>("Character", $"Accessory Variation {iVar0}", PedOutfit.OutfitPart4[iVar0]);
                iVar0++;
            }

            MPGender = Config.GetValue<int>("Character", "Gender", MPGender);

            #endregion

            #region Level
            MPRank.PlayerLevel = Config.GetValue<int>("Rank", "Player Level", MPRank.PlayerLevel);
            MPRank.CurrentXP = Config.GetValue<int>("Rank", "Player RP", MPRank.CurrentXP);
            MPRank.PreviousXP = Config.GetValue<int>("Rank", "Player Previous RP", MPRank.PreviousXP);
            #endregion
            
            #region Cash
            MPCash.Cash = Config.GetValue<int>("Cash", "Player Cash", MPCash.Cash);
            MPCash.PreviousCash = Config.GetValue<int>("Cash", "Player Previous Cash", MPCash.PreviousCash);
            MPCash.Bank = Config.GetValue<int>("Cash", "Player Bank", MPCash.Bank);
            MPCash.PreviousBank = Config.GetValue<int>("Cash", "Player Previous Bank", MPCash.PreviousBank);
            #endregion
        }
        
        public static void GET_MAIN_CHARACTER()
        {
            LoadIniFile("scripts\\CruelMastersOnlineOffline.ini");
            Wait(50);

            Game.Player.ChangeModel(RequestModel(PedHash.Michael));
            Function.Call(Hash.SET_PED_DEFAULT_COMPONENT_VARIATION, Game.Player.Character);
            Wait(500);
            if (MPGender == 0)
            {
                Game.Player.ChangeModel(RequestModel(PedHash.FreemodeMale01));
            }
            else
            {
                Game.Player.ChangeModel(RequestModel(PedHash.FreemodeFemale01));
            }
            Function.Call(Hash.SET_PED_DEFAULT_COMPONENT_VARIATION, Game.Player.Character);
            Function.Call(Hash.SET_PED_HEAD_BLEND_DATA, Game.Player.Character, PedOutfit.Data.ShapeFirst, PedOutfit.Data.ShapeSecond, 0, PedOutfit.Data.SkinFirst, 0, 0, 0f, 0f, 0f, false);
            
            int iVar0 = 1;
            while (iVar0 < 20)
            {
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, iVar0, PedOutfit.FaceFeaturePart[iVar0]);
                iVar0++;
            }

            iVar0 = 0;
            while (iVar0 < 10)
            {
                if (PedOutfit.OverlayPart[iVar0] != -1)
                {
                    Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, iVar0, PedOutfit.OverlayPart[iVar0], PedOutfit.OpacityPart[iVar0]);
                }
                if (iVar0 != 4 || iVar0 != 5 || iVar0 != 8)
                {
                    Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, iVar0, 1, MPHairColor, 0);
                }
                iVar0++;
            }

            Function.Call(Hash.SET_PED_HAIR_TINT, Game.Player.Character, MPHairColor, 0);
            Function.Call(Hash.SET_HEAD_BLEND_EYE_COLOR, Game.Player.Character, MPEyeColor);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 4, 1, MPMakeupColor, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 5, 1, MPMakeupColor, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 8, 1, MPLipstickColor, 0);

            PedOutfit outfits = new PedOutfit()
            {
                Components = new List<PedOutfit.OutfitComponent>(),
                Props = new List<PedOutfit.OutfitProp>()
            };
            
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)2, DrawableId = PedOutfit.HairPart[0], TextureId = 0, PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = PedOutfit.OutfitPart[3], TextureId = PedOutfit.OutfitPart2[3], PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = PedOutfit.OutfitPart[4], TextureId = PedOutfit.OutfitPart2[4], PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = PedOutfit.OutfitPart[5], TextureId = PedOutfit.OutfitPart2[5], PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = PedOutfit.OutfitPart[6], TextureId = PedOutfit.OutfitPart2[6], PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = PedOutfit.OutfitPart[7], TextureId = PedOutfit.OutfitPart2[7], PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = PedOutfit.OutfitPart[8], TextureId = PedOutfit.OutfitPart2[8], PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = PedOutfit.OutfitPart[9], TextureId = PedOutfit.OutfitPart2[9], PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = PedOutfit.OutfitPart[10], TextureId = PedOutfit.OutfitPart2[10], PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = PedOutfit.OutfitPart[11], TextureId = PedOutfit.OutfitPart2[11], PaletteId = 0 });
            
            outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = PedOutfit.OutfitPart3[0], TextureId = PedOutfit.OutfitPart4[0] });
            outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)1, DrawableId = PedOutfit.OutfitPart3[1], TextureId = PedOutfit.OutfitPart4[1] });
            outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)2, DrawableId = PedOutfit.OutfitPart3[2], TextureId = PedOutfit.OutfitPart4[2] });
            outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)6, DrawableId = PedOutfit.OutfitPart3[3], TextureId = PedOutfit.OutfitPart4[3] });
            outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)7, DrawableId = PedOutfit.OutfitPart3[4], TextureId = PedOutfit.OutfitPart4[4] });

            outfits.Equip(Game.Player.Character);
        }
        public static void GET_MAIN_CHARACTER_WITHOUT_MODEL()
        {
            LoadIniFile("scripts\\CruelMastersOnlineOffline.ini");
            Wait(50);

            Function.Call(Hash.SET_PED_DEFAULT_COMPONENT_VARIATION, Game.Player.Character);
            Function.Call(Hash.SET_PED_HEAD_BLEND_DATA, Game.Player.Character, PedOutfit.Data.ShapeFirst, PedOutfit.Data.ShapeSecond, 0, PedOutfit.Data.SkinFirst, 0, 0, 0f, 0f, 0f, false);

            int iVar0 = 1;
            while (iVar0 < 20)
            {
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, iVar0, PedOutfit.FaceFeaturePart[iVar0]);
                iVar0++;
            }

            iVar0 = 0;
            while (iVar0 < 10)
            {
                if (PedOutfit.OverlayPart[iVar0] != -1)
                {
                    Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, iVar0, PedOutfit.OverlayPart[iVar0], PedOutfit.OpacityPart[iVar0]);
                }
                if (iVar0 != 4 || iVar0 != 5 || iVar0 != 8)
                {
                    Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, iVar0, 1, MPHairColor, 0);
                }
                iVar0++;
            }

            Function.Call(Hash.SET_PED_HAIR_TINT, Game.Player.Character, MPHairColor, 0);
            Function.Call(Hash.SET_HEAD_BLEND_EYE_COLOR, Game.Player.Character, MPEyeColor);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 4, 1, MPMakeupColor, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 5, 1, MPMakeupColor, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 8, 1, MPLipstickColor, 0);

            PedOutfit outfits = new PedOutfit()
            {
                Components = new List<PedOutfit.OutfitComponent>(),
                Props = new List<PedOutfit.OutfitProp>()
            };

            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)2, DrawableId = PedOutfit.HairPart[0], TextureId = 0, PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = PedOutfit.OutfitPart[3], TextureId = PedOutfit.OutfitPart2[3], PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = PedOutfit.OutfitPart[4], TextureId = PedOutfit.OutfitPart2[4], PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = PedOutfit.OutfitPart[5], TextureId = PedOutfit.OutfitPart2[5], PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = PedOutfit.OutfitPart[6], TextureId = PedOutfit.OutfitPart2[6], PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = PedOutfit.OutfitPart[7], TextureId = PedOutfit.OutfitPart2[7], PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = PedOutfit.OutfitPart[8], TextureId = PedOutfit.OutfitPart2[8], PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = PedOutfit.OutfitPart[9], TextureId = PedOutfit.OutfitPart2[9], PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = PedOutfit.OutfitPart[10], TextureId = PedOutfit.OutfitPart2[10], PaletteId = 0 });
            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = PedOutfit.OutfitPart[11], TextureId = PedOutfit.OutfitPart2[11], PaletteId = 0 });

            outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = PedOutfit.OutfitPart3[0], TextureId = PedOutfit.OutfitPart4[0] });
            outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)1, DrawableId = PedOutfit.OutfitPart3[1], TextureId = PedOutfit.OutfitPart4[1] });
            outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)2, DrawableId = PedOutfit.OutfitPart3[2], TextureId = PedOutfit.OutfitPart4[2] });
            outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)6, DrawableId = PedOutfit.OutfitPart3[3], TextureId = PedOutfit.OutfitPart4[3] });
            outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)7, DrawableId = PedOutfit.OutfitPart3[4], TextureId = PedOutfit.OutfitPart4[4] });

            outfits.Equip(Game.Player.Character);
        }
        public static void SETUP_MAIN_MENU()
        {
            MainMenu = new NativeMenu("Online-Offline", "SELECT AN OPTION");
            MainMenu.Banner.Color = Color.Aqua;
            MainMenu.UseMouse = false;
            MenuPool.Add(MainMenu);

            NativeItem StartNewSessionButton = new NativeItem("Start a New Session", "Enter a new Online - Offline Session.");
            MainMenu.Add(StartNewSessionButton);
            
            StartNewSessionButton.Activated += (sender, e) =>
            {

                Function.Call(Hash.SET_MINIMAP_HIDE_FOW, true);
                Function.Call((Hash)0x9BAE5AD2508DF078, true);
                GlobalVariable.Get(4).Write<int>(1);
                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "cellphone_controller");
                //Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "stats_controller");
                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "restrictedareas");
                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "respawn_controller");
                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "gunclub_shop");
                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "clothes_shop_sp");
                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "clothes_shop_mp");
                Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "shop_controller");

                Function.Call(Hash.DISABLE_HOSPITAL_RESTART​, 0, true);
                Function.Call(Hash.DISABLE_HOSPITAL_RESTART​, 1, true);
                Function.Call(Hash.DISABLE_HOSPITAL_RESTART​, 2, true);
                Function.Call(Hash.DISABLE_HOSPITAL_RESTART​, 3, true);
                Function.Call(Hash.DISABLE_HOSPITAL_RESTART​, 4, true);

                Function.Call(Hash.DISABLE_POLICE_RESTART, 0, true);
                Function.Call(Hash.DISABLE_POLICE_RESTART, 1, true);
                Function.Call(Hash.DISABLE_POLICE_RESTART, 2, true);
                Function.Call(Hash.DISABLE_POLICE_RESTART, 3, true);
                Function.Call(Hash.DISABLE_POLICE_RESTART, 4, true);
                Function.Call(Hash.DISABLE_POLICE_RESTART, 5, true);
                Function.Call(Hash.DISABLE_POLICE_RESTART, 6, true);

                LoadingPrompt.Show("Loading New Session", LoadingSpinnerType.Clockwise1);
                LoadIniFile("scripts\\CruelMastersOnlineOffline.ini");
                Wait(50);
                Main.MainMenu.Visible = !Main.MainMenu.Visible;
                Mobile_Phone.CAN_OPEN_PHONE = false;
                Wait(3000);
                PlayerSwitch._SWITCH_OUT_PLAYER(Game.Player.Character, 3, 1);
                int i = Game.GameTime + 2000;//2000
                while (Game.GameTime < i)
                {
                    Wait(0);
                }
                
                GET_MAIN_CHARACTER();

                LoadingPrompt.Show("Getting Character", LoadingSpinnerType.Clockwise1);
                i = Game.GameTime + 2000;//2000
                while (Game.GameTime < i)
                {
                    Wait(0);
                }

                MPLoadout.GET_CURRENT_LOADOUT();

                if (PlayerVehicle != null)
                {
                    PlayerVehicle.Delete();
                    PlayerVehicle = null;
                }
                while (PlayerVehicle == null)
                {
                    if (File.Exists("scripts\\CruelMastersOnlineOfflineAssets\\Vehicles\\CurrentVehicle.xml"))
                    {
                        PlayerVehicle = MPVehicleLoadout.GET_VEHICLE_LOADOUT("scripts\\CruelMastersOnlineOfflineAssets\\Vehicles\\CurrentVehicle.xml", new Vector3(-1034.005f, -2730.309f, 19.49528f), 240.448f);
                    }
                    else
                    {
                        break;
                    }
                    Wait(0);
                }
                if (PlayerVehicle != null)
                {
                    while (PlayerVehicle.AttachedBlip == null)
                    {
                        PlayerVehicle.AddBlip();
                        Wait(0);
                    }
                    PlayerVehicle.AttachedBlip.Sprite = BlipSprite.PersonalVehicleCar;
                    if (PlayerVehicle.Model.IsBike || PlayerVehicle.Model.IsAmphibiousQuadBike || PlayerVehicle.Model.IsQuadBike)
                    {
                        PlayerVehicle.AttachedBlip.Sprite = BlipSprite.PersonalVehicleBike;
                    }
                    PlayerVehicle.AttachedBlip.Color = BlipColor.White;
                    PlayerVehicle.AttachedBlip.Name = "Personal Vehicle";
                }

                LoadingPrompt.Show("Getting Save Data", LoadingSpinnerType.Clockwise1);
                i = Game.GameTime + 2000;//2000
                while (Game.GameTime < i)
                {
                    Wait(0);
                }

                World.RemoveWaypoint();

                if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                {
                    LOAD_SCENES.NEW_LOAD_SCENE_START(-1037.893f, -2737.811f, 20.16927f, 0f, 0f, 0f, 500f, 0);
                }

                LoadingPrompt.Show("Setting Up New Session", LoadingSpinnerType.Clockwise1);
                i = Game.GameTime + 2000;//2000
                while (Game.GameTime < i)
                {
                    if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                    {
                        LOAD_SCENES.NEW_LOAD_SCENE_START(-1037.893f, -2737.811f, 20.16927f, 0f, 0f, 0f, 500f, 0);
                    }
                    Wait(0);
                }
                Main.LoadDict("anim@heists@team_respawn@respawn_01");
                Main.LoadDict("anim@heists@team_respawn@respawn_01");
                Wait(50);
                Game.Player.Character.Position = new Vector3(-1037.661f, -2737.689f, 20.16927f - 1f);
                Game.Player.Character.Heading = 330.0444f;
                Game.Player.Character.IsPositionFrozen = true;
                LoadingPrompt.Show("Entering New Session", LoadingSpinnerType.Clockwise1);
                i = Game.GameTime + 2000;//2000
                while (Game.GameTime < i)
                {
                    Game.Player.Character.Position = new Vector3(-1037.661f, -2737.689f, 20.16927f - 1f);
                    Game.Player.Character.Heading = 330.0444f;
                    Game.Player.Character.IsPositionFrozen = true;
                    Cameras.RESET_GAMEPLAY_CAM();
                    Wait(0);
                }
                Function.Call((Hash)0xAD5FDF34B81BFE79);
                Function.Call((Hash)0x43D1680C6D19A8E9);
                PlayerSwitch.SWITCH_IN_PLAYER(Game.Player.Character);
                Cameras.RESET_GAMEPLAY_CAM();
                while (PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                {
                    HudHandler.HudandRadar(false, false);
                    Game.Player.Character.Task.ClearAll();
                    Game.Player.Character.Task.PlayAnimation("anim@heists@team_respawn@respawn_01", "heist_spawn_01_ped_b", 1000.0f, -1.0f, -1, AnimationFlags.CancelableWithMovement, -1000.0f);
                    Wait(0);
                }
                LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                LoadingPrompt.Hide();
                HudHandler.HudandRadar(true, true);
                Game.Player.Character.IsPositionFrozen = false;
                Mobile_Phone.CAN_OPEN_PHONE = true;
                Cameras.RESET_GAMEPLAY_CAM();
                StorySwitch = 2;
            };
        }
        public static void SETUP_CHAR_CREATOR_MENU()
        {
            #region MainMenu
            CharCreator = new NativeMenu("Character Creator", "New Character");
            CharCreator.Banner.Color = Color.Aqua;
            CharCreator.UseMouse = false;
            MenuPool.Add(CharCreator);

            NativeListItem<string> Sexbutton = new NativeListItem<string>("Sex", "Select the gender of your Character.~n~(WARNING - This WILL reset your characters current features when changed.)", "Male", "Female");
            CharCreator.Add(Sexbutton);
            
            //------------------------------------------------ Heritage -------------------------------------------------------
            NativeMenu HeritageMenu = new NativeMenu("Character Creator", "Heritage", "Select to choose your parents.");
            MenuPool.Add(HeritageMenu);
            NativeSubmenuItem HeritageSubbutton = new NativeSubmenuItem(HeritageMenu, CharCreator);
            HeritageSubbutton.AltTitle = "";
            CharCreator.Add(HeritageSubbutton);
            
            HeritageSubbutton.Activated += (sender, e) =>
            {
                while (Main.CutsceneCam2 == null)
                {
                    Main.CutsceneCam2 = World.CreateCamera(Vector3.Zero, Vector3.Zero, 50.0f);
                    Wait(0);
                }
                Function.Call(Hash.SET_CAM_ACTIVE, Main.CutsceneCam, true);
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0.1f, 1f, 0.6f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0f, 0f, 0.6f, true);
                Main.CutsceneCam2.FieldOfView = 43.0f;
                Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 200, 0, 0);
                Function.Call(Hash.PLAY_SOUND, -1, "Zoom_In", "MUGSHOT_CHARACTER_CREATION_SOUNDS", false, 0, true);
            };
            HeritageSubbutton.Menu.Closing += (sender, e) =>
            {
                Main.CutsceneCam2.InterpTo(Main.CutsceneCam, 200, 0, 0);
                Function.Call(Hash.PLAY_SOUND, -1, "Zoom_Out", "MUGSHOT_CHARACTER_CREATION_SOUNDS", false, 0, true);
                Main.CutsceneCam2.Delete();
                Main.CutsceneCam2 = null;
            };

            NativeListItem<int> FaceList = new NativeListItem<int>("Face", "", 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45);
            NativeListItem<int> ParentList = new NativeListItem<int>("Parent", "", 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45);
            NativeListItem<int> STList = new NativeListItem<int>("Skin Tone", "", 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);
            HeritageMenu.Add(FaceList);
            HeritageMenu.Add(ParentList);
            HeritageMenu.Add(STList);
            
            FaceList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_BLEND_DATA, Game.Player.Character, FaceList.SelectedItem, ParentList.SelectedItem, 0, STList.SelectedItem, 0, 0, 0f, 0f, 0f, false);
            };
            ParentList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_BLEND_DATA, Game.Player.Character, FaceList.SelectedItem, ParentList.SelectedItem, 0, STList.SelectedItem, 0, 0, 0f, 0f, 0f, false);
            };
            
            STList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_BLEND_DATA, Game.Player.Character, FaceList.SelectedItem, ParentList.SelectedItem, 0, STList.SelectedItem, 0, 0, 0f, 0f, 0f, false);
            };
            //------------------------------------------------ Features -------------------------------------------------------
            NativeMenu FeaturesMenu = new NativeMenu("Character Creator", "Features", "Select to alter your facial features.");
            MenuPool.Add(FeaturesMenu);
            FeaturesMenu.UseMouse = true;
            FeaturesMenu.CloseOnInvalidClick = false;
            NativeSubmenuItem FeaturesSubbutton = new NativeSubmenuItem(FeaturesMenu, CharCreator);
            FeaturesSubbutton.AltTitle = "";
            CharCreator.Add(FeaturesSubbutton);

            FeaturesSubbutton.Activated += (sender, e) =>
            {
                while (Main.CutsceneCam2 == null)
                {
                    Main.CutsceneCam2 = World.CreateCamera(Vector3.Zero, Vector3.Zero, 50.0f);
                    Wait(0);
                }
                Function.Call(Hash.SET_CAM_ACTIVE, Main.CutsceneCam, true);
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0.1f, 1f, 0.6f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0f, 0f, 0.6f, true);
                Main.CutsceneCam2.FieldOfView = 43.0f;
                Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 200, 0, 0);
                Function.Call(Hash.PLAY_SOUND, -1, "Zoom_In", "MUGSHOT_CHARACTER_CREATION_SOUNDS", false, 0, true);
            };
            FeaturesSubbutton.Menu.Closing += (sender, e) =>
            {
                Main.CutsceneCam2.InterpTo(Main.CutsceneCam, 200, 0, 0);
                Function.Call(Hash.PLAY_SOUND, -1, "Zoom_Out", "MUGSHOT_CHARACTER_CREATION_SOUNDS", false, 0, true);
                Main.CutsceneCam2.Delete();
                Main.CutsceneCam2 = null;
            };

            #region Brow
            NativeListItem<int> HairCList = new NativeListItem<int>("Hair Color", "Make changes to your Appearance.");
            int iVar2 = 0;
            while (iVar2 < Function.Call<int>(Hash.GET_NUM_PED_HAIR_TINTS))
            {
                HairCList.Add(iVar2);
                iVar2++;
            }
            
            NativeListItem<int> EyeBrowList = new NativeListItem<int>("Eyebrows", "Make changes to your Appearance.", -1);
            iVar2 = 0;
            while (iVar2 < Function.Call<int>(Hash.GET_PED_HEAD_OVERLAY_NUM, 2))
            {
                EyeBrowList.Add(iVar2);
                iVar2++;
            }

            NativeListItem<int> BrowList = new NativeListItem<int>("Brow", "Make changes to your physical features.", -1);
            int iVar0 = 0;
            while (iVar0 < Function.Call<int>(Hash.GET_PED_HEAD_OVERLAY_NUM, 2))
            {
                BrowList.Add(iVar0);
                iVar0++;
            }
            FeaturesMenu.Add(BrowList);
            NativeGridPanel BrowPanel = new NativeGridPanel();
            BrowPanel.LabelLeft = "In";
            BrowPanel.LabelTop = "Up";
            BrowPanel.LabelRight = "Out";
            BrowPanel.LabelBottom = "Down";
            BrowList.Panel = BrowPanel;

            BrowList.ItemChanged += (sender, e) =>
            {        
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 2, BrowList.SelectedItem, 1f);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 2, 1, HairCList.SelectedItem, 0);
                EyeBrowList.SelectedItem = BrowList.SelectedItem;
            };

            BrowPanel.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 6, (BrowPanel.Y * 2.0f) - 1.0f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 7, (BrowPanel.X * 2.0f) - 1.0f);
            };
            #endregion

            #region Eye
            NativeItem EyeItem = new NativeItem("Eyes", "Make changes to your physical features.");
            FeaturesMenu.Add(EyeItem);
            NativeGridPanel EyePanel = new NativeGridPanel();
            EyePanel.LabelLeft = "Wide";
            EyePanel.LabelRight = "Squint";
            EyePanel.Style = GridStyle.Row;
            EyeItem.Panel = EyePanel;

            EyePanel.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 11, (EyePanel.X * 2.0f) - 1.0f);
            };
            #endregion
            
            #region Nose
            NativeItem NoseItem = new NativeItem("Nose", "Make changes to your physical features.");
            FeaturesMenu.Add(NoseItem);
            NativeGridPanel NosePanel = new NativeGridPanel();
            NosePanel.LabelLeft = "Narrow";
            NosePanel.LabelTop = "Up";
            NosePanel.LabelRight = "Wide";
            NosePanel.LabelBottom = "Down";
            NoseItem.Panel = NosePanel;

            NosePanel.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 0, (NosePanel.X * 2.0f) - 1.0f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 1, (NosePanel.Y * 2.0f) - 1.0f);
            };
            #endregion

            #region Nose Profile
            NativeItem NosePItem = new NativeItem("Nose Profile", "Make changes to your physical features.");
            FeaturesMenu.Add(NosePItem);
            NativeGridPanel NosePPanel = new NativeGridPanel();
            NosePPanel.LabelLeft = "Short";
            NosePPanel.LabelTop = "Crooked";
            NosePPanel.LabelRight = "Long";
            NosePPanel.LabelBottom = "Curved";
            NosePItem.Panel = NosePPanel;

            NosePPanel.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 2, (NosePPanel.X * 2.0f) - 1.0f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 3, (NosePPanel.Y * 2.0f) - 1.0f);
            };
            #endregion

            #region Nose Tip
            NativeItem NoseTItem = new NativeItem("Nose Tip", "Make changes to your physical features.");
            FeaturesMenu.Add(NoseTItem);
            NativeGridPanel NoseTPanel = new NativeGridPanel();
            NoseTPanel.LabelLeft = "Broken Left";
            NoseTPanel.LabelTop = "Tip Up";
            NoseTPanel.LabelRight = "Broken Right";
            NoseTPanel.LabelBottom = "Tip Down";
            NoseTItem.Panel = NoseTPanel;

            NoseTPanel.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 4, (NoseTPanel.Y * 2.0f) - 1.0f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 5, (NoseTPanel.X * 2.0f) - 1.0f);
            };
            #endregion

            #region CheekBones
            NativeItem CheekBItem = new NativeItem("Cheekbones", "Make changes to your physical features.");
            FeaturesMenu.Add(CheekBItem);
            NativeGridPanel CheekBPanel = new NativeGridPanel();
            CheekBPanel.LabelLeft = "In";
            CheekBPanel.LabelTop = "Up";
            CheekBPanel.LabelRight = "Out";
            CheekBPanel.LabelBottom = "Down";
            CheekBItem.Panel = CheekBPanel;

            CheekBPanel.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 8, (CheekBPanel.Y * 2.0f) - 1.0f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 9, (CheekBPanel.X * 2.0f) - 1.0f);
            };
            #endregion

            #region Cheeks
            NativeItem CheeksItem = new NativeItem("Cheeks", "Make changes to your physical features.");
            FeaturesMenu.Add(CheeksItem);
            NativeGridPanel CheeksPanel = new NativeGridPanel();
            CheeksPanel.LabelLeft = "Puffed";
            CheeksPanel.LabelRight = "Gaunt";
            CheeksPanel.Style = GridStyle.Row;
            CheeksItem.Panel = CheeksPanel;

            CheeksPanel.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 10, (CheeksPanel.X * 2.0f) - 1.0f);
            };
            #endregion

            #region Lips
            NativeItem LipsItem = new NativeItem("Lips", "Make changes to your physical features.");
            FeaturesMenu.Add(LipsItem);
            NativeGridPanel LipsPanel = new NativeGridPanel();
            LipsPanel.LabelLeft = "Fat";
            LipsPanel.LabelRight = "Thin";
            LipsPanel.Style = GridStyle.Row;
            LipsItem.Panel = LipsPanel;

            LipsPanel.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 12, (LipsPanel.X * 2.0f) - 1.0f);
            };
            #endregion

            #region Jaw
            NativeItem JawItem = new NativeItem("Jaw", "Make changes to your physical features.");
            FeaturesMenu.Add(JawItem);
            NativeGridPanel JawPanel = new NativeGridPanel();
            JawPanel.LabelLeft = "Narrow";
            JawPanel.LabelTop = "Round";
            JawPanel.LabelRight = "Wide";
            JawPanel.LabelBottom = "Squared";
            JawItem.Panel = JawPanel;

            JawPanel.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 13, (JawPanel.X * 2.0f) - 1.0f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 14, (JawPanel.Y * 2.0f) - 1.0f);
            };
            #endregion

            #region Chin Profile
            NativeItem ChinPItem = new NativeItem("Chin Profile", "Make changes to your physical features.");
            FeaturesMenu.Add(ChinPItem);
            NativeGridPanel ChinPPanel = new NativeGridPanel();
            ChinPPanel.LabelLeft = "In";
            ChinPPanel.LabelTop = "Up";
            ChinPPanel.LabelRight = "Out";
            ChinPPanel.LabelBottom = "Down";
            ChinPItem.Panel = ChinPPanel;
            
            ChinPPanel.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 15, (ChinPPanel.Y * 2.0f) - 1.0f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 16, (ChinPPanel.X * 2.0f) - 1.0f);
            };
            #endregion
            
            #region Chin Shape
            NativeItem ChinSItem = new NativeItem("Chin Shape", "Make changes to your physical features.");
            FeaturesMenu.Add(ChinSItem);
            NativeGridPanel ChinSPanel = new NativeGridPanel();
            ChinSPanel.LabelLeft = "Pointed";
            ChinSPanel.LabelTop = "Rounded";
            ChinSPanel.LabelRight = "Square";
            ChinSPanel.LabelBottom = "Bum";
            ChinSItem.Panel = ChinSPanel;

            ChinSPanel.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 17, (ChinSPanel.X * 2.0f) - 1.0f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, Game.Player.Character, 18, (ChinSPanel.Y * 2.0f) - 1.0f);
            };
            #endregion
            
            //------------------------------------------------ Appearance -------------------------------------------------------
            NativeMenu AppearanceMenu = new NativeMenu("Character Creator", "Appearance", "Select to change your Appearance.");
            MenuPool.Add(AppearanceMenu);
            AppearanceMenu.UseMouse = true;
            AppearanceMenu.CloseOnInvalidClick = false;
            NativeSubmenuItem AppearanceSubbutton = new NativeSubmenuItem(AppearanceMenu, CharCreator);
            AppearanceSubbutton.AltTitle = "";
            CharCreator.Add(AppearanceSubbutton);

            AppearanceSubbutton.Activated += (sender, e) =>
            {
                while (Main.CutsceneCam2 == null)
                {
                    Main.CutsceneCam2 = World.CreateCamera(Vector3.Zero, Vector3.Zero, 50.0f);
                    Wait(0);
                }
                Function.Call(Hash.SET_CAM_ACTIVE, Main.CutsceneCam, true);
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0.1f, 1f, 0.6f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0f, 0f, 0.6f, true);
                Main.CutsceneCam2.FieldOfView = 43.0f;
                Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 200, 0, 0);
                Function.Call(Hash.PLAY_SOUND, -1, "Zoom_In", "MUGSHOT_CHARACTER_CREATION_SOUNDS", false, 0, true);
            };
            AppearanceSubbutton.Menu.Closing += (sender, e) =>
            {
                Main.CutsceneCam2.InterpTo(Main.CutsceneCam, 200, 0, 0);
                Function.Call(Hash.PLAY_SOUND, -1, "Zoom_Out", "MUGSHOT_CHARACTER_CREATION_SOUNDS", false, 0, true);
                Main.CutsceneCam2.Delete();
                Main.CutsceneCam2 = null;
            };

            #region Hair
            NativeListItem<int> HairList = new NativeListItem<int>("Hair", "Make changes to your Appearance.");
            int iVar1 = 0;
            while (iVar1 < 23)
            {
                HairList.Add(iVar1);
                iVar1++;
            }
            AppearanceMenu.Add(HairList);
            #endregion

            #region Hair Color
            AppearanceMenu.Add(HairCList);

            MPHairColor = 0;
            HairList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 2, HairList.SelectedItem, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 1, 1, HairCList.SelectedItem, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 2, 1, HairCList.SelectedItem, 0);
            };
            HairCList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HAIR_TINT, Game.Player.Character, HairCList.SelectedItem, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 1, 1, HairCList.SelectedItem, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 2, 1, HairCList.SelectedItem, 0);
                MPHairColor = HairCList.SelectedItem;
            };
            
            HairList.GoRight();
            HairList.GoLeft();
            HairList.Enabled = true;
            HairCList.GoRight();
            HairCList.GoLeft();
            HairCList.Enabled = true;
            #endregion

            #region Eyebrows
            AppearanceMenu.Add(EyeBrowList);
            NativeGridPanel Opac2 = new NativeGridPanel();
            Opac2.LabelLeft = "0%";
            Opac2.LabelRight = "100%";
            Opac2.Style = GridStyle.Row;
            EyeBrowList.Panel = Opac2;

            PedOutfit.OverlayPart[2] = -1;
            PedOutfit.OpacityPart[2] = 0f;
            EyeBrowList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 2, EyeBrowList.SelectedItem, Opac2.X);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 2, 1, HairCList.SelectedItem, 0);
                PedOutfit.OverlayPart[2] = EyeBrowList.SelectedItem;
                PedOutfit.OpacityPart[2] = Opac2.X;
            };

            Opac2.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 2, EyeBrowList.SelectedItem, Opac2.X);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 2, 1, HairCList.SelectedItem, 0);
                PedOutfit.OverlayPart[2] = EyeBrowList.SelectedItem;
                PedOutfit.OpacityPart[2] = Opac2.X;
            };

            EyeBrowList.GoRight();
            EyeBrowList.GoLeft();
            EyeBrowList.Enabled = true;
            #endregion

            #region Facial Hair
            NativeListItem<int> FacialHairList = new NativeListItem<int>("Facial Hair", "Make changes to your Appearance.", -1);
            iVar2 = 0;
            while (iVar2 < Function.Call<int>(Hash.GET_PED_HEAD_OVERLAY_NUM, 1))
            {
                FacialHairList.Add(iVar2);
                iVar2++;
            }
            AppearanceMenu.Add(FacialHairList);
            NativeGridPanel Opac1 = new NativeGridPanel();
            Opac1.LabelLeft = "0%";
            Opac1.LabelRight = "100%";
            Opac1.Style = GridStyle.Row;
            FacialHairList.Panel = Opac1;

            PedOutfit.OverlayPart[1] = -1;
            PedOutfit.OpacityPart[1] = 0f;

            FacialHairList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 1, FacialHairList.SelectedItem, Opac1.X);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 1, 1, HairCList.SelectedItem, 0);
                PedOutfit.OverlayPart[1] = FacialHairList.SelectedItem;
                PedOutfit.OpacityPart[1] = Opac1.X;
            };

            Opac1.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 1, FacialHairList.SelectedItem, Opac1.X);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 1, 1, HairCList.SelectedItem, 0);
                PedOutfit.OverlayPart[1] = FacialHairList.SelectedItem;
                PedOutfit.OpacityPart[1] = Opac1.X;
            };
            
            FacialHairList.GoRight();
            FacialHairList.GoLeft();
            FacialHairList.Enabled = true;
            #endregion

            #region Skin Blemishes
            NativeListItem<int> SkinBlemList = new NativeListItem<int>("Skin Blemishes", "Make changes to your Appearance.", -1);
            iVar2 = 0;
            while (iVar2 < Function.Call<int>(Hash.GET_PED_HEAD_OVERLAY_NUM, 0))
            {
                SkinBlemList.Add(iVar2);
                iVar2++;
            }
            AppearanceMenu.Add(SkinBlemList);
            NativeGridPanel Opac0 = new NativeGridPanel();
            Opac0.LabelLeft = "0%";
            Opac0.LabelRight = "100%";
            Opac0.Style = GridStyle.Row;
            SkinBlemList.Panel = Opac0;

            SkinBlemList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 0, SkinBlemList.SelectedItem, Opac0.X);
                PedOutfit.OverlayPart[0] = SkinBlemList.SelectedItem;
                PedOutfit.OpacityPart[0] = Opac0.X;
            };

            Opac0.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 0, SkinBlemList.SelectedItem, Opac0.X);
                PedOutfit.OverlayPart[0] = SkinBlemList.SelectedItem;
                PedOutfit.OpacityPart[0] = Opac0.X;
            };

            SkinBlemList.GoRight();
            SkinBlemList.GoLeft();
            SkinBlemList.Enabled = true;
            #endregion

            #region Skin Aging
            NativeListItem<int> SkinAgeList = new NativeListItem<int>("Skin Aging", "Make changes to your Appearance.", -1);
            iVar2 = 0;
            while (iVar2 < Function.Call<int>(Hash.GET_PED_HEAD_OVERLAY_NUM, 3))
            {
                SkinAgeList.Add(iVar2);
                iVar2++;
            }
            AppearanceMenu.Add(SkinAgeList);
            NativeGridPanel Opac3 = new NativeGridPanel();
            Opac3.LabelLeft = "0%";
            Opac3.LabelRight = "100%";
            Opac3.Style = GridStyle.Row;
            SkinAgeList.Panel = Opac3;

            SkinAgeList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 3, SkinAgeList.SelectedItem, Opac3.X);
                PedOutfit.OverlayPart[3] = SkinAgeList.SelectedItem;
                PedOutfit.OpacityPart[3] = Opac3.X;
            };

            Opac3.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 3, SkinAgeList.SelectedItem, Opac3.X);
                PedOutfit.OverlayPart[3] = SkinAgeList.SelectedItem;
                PedOutfit.OpacityPart[3] = Opac3.X;
            };

            SkinAgeList.GoRight();
            SkinAgeList.GoLeft();
            SkinAgeList.Enabled = true;
            #endregion

            #region Skin Complexion
            NativeListItem<int> SkinCompList = new NativeListItem<int>("Skin Complexion", "Make changes to your Appearance.", -1);
            iVar2 = 0;
            while (iVar2 < Function.Call<int>(Hash.GET_PED_HEAD_OVERLAY_NUM, 6))
            {
                SkinCompList.Add(iVar2);
                iVar2++;
            }
            AppearanceMenu.Add(SkinCompList);
            NativeGridPanel Opac6 = new NativeGridPanel();
            Opac6.LabelLeft = "0%";
            Opac6.LabelRight = "100%";
            Opac6.Style = GridStyle.Row;
            SkinCompList.Panel = Opac6;

            SkinCompList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 6, SkinCompList.SelectedItem, Opac6.X);
                PedOutfit.OverlayPart[6] = SkinCompList.SelectedItem;
                PedOutfit.OpacityPart[6] = Opac6.X;
            };

            Opac6.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 6, SkinCompList.SelectedItem, Opac6.X);
                PedOutfit.OverlayPart[6] = SkinCompList.SelectedItem;
                PedOutfit.OpacityPart[6] = Opac6.X;
            };

            SkinCompList.GoRight();
            SkinCompList.GoLeft();
            SkinCompList.Enabled = true;
            #endregion

            #region Moles & Freckles
            NativeListItem<int> MAFList = new NativeListItem<int>("Moles & Freckles", "Make changes to your Appearance.", -1);
            iVar2 = 0;
            while (iVar2 < Function.Call<int>(Hash.GET_PED_HEAD_OVERLAY_NUM, 9))
            {
                MAFList.Add(iVar2);
                iVar2++;
            }
            AppearanceMenu.Add(MAFList);
            NativeGridPanel Opac9 = new NativeGridPanel();
            Opac9.LabelLeft = "0%";
            Opac9.LabelRight = "100%";
            Opac9.Style = GridStyle.Row;
            MAFList.Panel = Opac9;

            MAFList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 9, MAFList.SelectedItem, Opac9.X);
                PedOutfit.OverlayPart[9] = MAFList.SelectedItem;
                PedOutfit.OpacityPart[9] = Opac9.X;
            };

            Opac9.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 9, MAFList.SelectedItem, Opac9.X);
                PedOutfit.OverlayPart[9] = MAFList.SelectedItem;
                PedOutfit.OpacityPart[9] = Opac9.X;
            };

            MAFList.GoRight();
            MAFList.GoLeft();
            MAFList.Enabled = true;
            #endregion

            #region Skin Damage
            NativeListItem<int> SDList = new NativeListItem<int>("Skin Damage", "Make changes to your Appearance.", -1);
            iVar2 = 0;
            while (iVar2 < Function.Call<int>(Hash.GET_PED_HEAD_OVERLAY_NUM, 7))
            {
                SDList.Add(iVar2);
                iVar2++;
            }
            AppearanceMenu.Add(SDList);
            NativeGridPanel Opac7 = new NativeGridPanel();
            Opac7.LabelLeft = "0%";
            Opac7.LabelRight = "100%";
            Opac7.Style = GridStyle.Row;
            SDList.Panel = Opac7;

            SDList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 7, SDList.SelectedItem, Opac7.X);
                PedOutfit.OverlayPart[7] = SDList.SelectedItem;
                PedOutfit.OpacityPart[7] = Opac7.X;
            };

            Opac7.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 7, SDList.SelectedItem, Opac7.X);
                PedOutfit.OverlayPart[7] = SDList.SelectedItem;
                PedOutfit.OpacityPart[7] = Opac7.X;
            };

            SDList.GoRight();
            SDList.GoLeft();
            SDList.Enabled = true;
            #endregion

            #region Eye Color
            NativeListItem<int> EyeCList = new NativeListItem<int>("Eye Color", "Make changes to your Appearance.");
            iVar2 = 0;
            while (iVar2 < 32)
            {
                EyeCList.Add(iVar2);
                iVar2++;
            }
            AppearanceMenu.Add(EyeCList);

            EyeCList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_HEAD_BLEND_EYE_COLOR, Game.Player.Character, EyeCList.SelectedItem);
                MPEyeColor = EyeCList.SelectedItem;
            };

            EyeCList.GoRight();
            EyeCList.GoLeft();
            EyeCList.Enabled = true;
            #endregion

            #region Eye makeup
            NativeListItem<int> EyeMList = new NativeListItem<int>("Eye Makeup", "Make changes to your Appearance.", -1);
            iVar2 = 0;
            while (iVar2 < Function.Call<int>(Hash.GET_PED_HEAD_OVERLAY_NUM, 4))
            {
                EyeMList.Add(iVar2);
                iVar2++;
            }
            AppearanceMenu.Add(EyeMList);
            NativeGridPanel Opac4 = new NativeGridPanel();
            Opac4.LabelLeft = "0%";
            Opac4.LabelRight = "100%";
            Opac4.Style = GridStyle.Row;
            EyeMList.Panel = Opac4;

            EyeMList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 4, EyeMList.SelectedItem, Opac4.X);
                PedOutfit.OverlayPart[4] = EyeMList.SelectedItem;
                PedOutfit.OpacityPart[4] = Opac4.X;
            };

            Opac4.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 4, EyeMList.SelectedItem, Opac4.X);
                PedOutfit.OverlayPart[4] = EyeMList.SelectedItem;
                PedOutfit.OpacityPart[4] = Opac4.X;
            };

            EyeMList.GoRight();
            EyeMList.GoLeft();
            EyeMList.Enabled = true;
            #endregion

            #region Blush
            NativeListItem<int> BlushList = new NativeListItem<int>("Blush", "Make changes to your Appearance.", -1);
            iVar2 = 0;
            while (iVar2 < Function.Call<int>(Hash.GET_PED_HEAD_OVERLAY_NUM, 5))
            {
                BlushList.Add(iVar2);
                iVar2++;
            }
            AppearanceMenu.Add(BlushList);
            NativeGridPanel Opac5 = new NativeGridPanel();
            Opac5.LabelLeft = "0%";
            Opac5.LabelRight = "100%";
            Opac5.Style = GridStyle.Row;
            BlushList.Panel = Opac5;

            BlushList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 5, BlushList.SelectedItem, Opac5.X);
                PedOutfit.OverlayPart[5] = BlushList.SelectedItem;
                PedOutfit.OpacityPart[5] = Opac5.X;
            };

            Opac5.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 5, BlushList.SelectedItem, Opac5.X);
                PedOutfit.OverlayPart[5] = BlushList.SelectedItem;
                PedOutfit.OpacityPart[5] = Opac5.X;
            };

            BlushList.GoRight();
            BlushList.GoLeft();
            BlushList.Enabled = true;
            #endregion

            #region Makeup Color
            NativeListItem<int> MakeupCList = new NativeListItem<int>("Makeup Color", "Make changes to your Appearance.");
            iVar2 = 0;
            while (iVar2 < Function.Call<int>(Hash.GET_NUM_PED_MAKEUP_TINTS))
            {
                MakeupCList.Add(iVar2);
                iVar2++;
            }
            AppearanceMenu.Add(MakeupCList);
            
            EyeMList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 4, EyeMList.SelectedItem, Opac4.X);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 4, 1, MakeupCList.SelectedItem, 0);
                MPMakeupColor = MakeupCList.SelectedItem;

                PedOutfit.OverlayPart[4] = EyeMList.SelectedItem;
                PedOutfit.OpacityPart[4] = Opac4.X;
            };

            BlushList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 5, BlushList.SelectedItem, Opac5.X);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 5, 1, MakeupCList.SelectedItem, 0);
                PedOutfit.OverlayPart[5] = BlushList.SelectedItem;
                PedOutfit.OpacityPart[5] = Opac5.X;
            };

            MakeupCList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 4, EyeMList.SelectedItem, Opac4.X);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 4, 1, MakeupCList.SelectedItem, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 5, 1, MakeupCList.SelectedItem, 0);
                MPMakeupColor = MakeupCList.SelectedItem;
                
                PedOutfit.OverlayPart[4] = EyeMList.SelectedItem;
                PedOutfit.OpacityPart[4] = Opac4.X;
            };

            EyeMList.GoRight();
            EyeMList.GoLeft();
            EyeMList.Enabled = true;
            BlushList.GoRight();
            BlushList.GoLeft();
            BlushList.Enabled = true;
            MakeupCList.GoRight();
            MakeupCList.GoLeft();
            MakeupCList.Enabled = true;
            #endregion
            
            #region Lipstick
            NativeListItem<int> LipstickList = new NativeListItem<int>("Lipstick", "Make changes to your Appearance.", -1);
            iVar2 = 0;
            while (iVar2 < Function.Call<int>(Hash.GET_PED_HEAD_OVERLAY_NUM, 8))
            {
                LipstickList.Add(iVar2);
                iVar2++;
            }
            AppearanceMenu.Add(LipstickList);
            NativeGridPanel Opac8 = new NativeGridPanel();
            Opac8.LabelLeft = "0%";
            Opac8.LabelRight = "100%";
            Opac8.Style = GridStyle.Row;
            LipstickList.Panel = Opac8;

            LipstickList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 8, LipstickList.SelectedItem, Opac8.X);
                PedOutfit.OverlayPart[8] = LipstickList.SelectedItem;
                PedOutfit.OpacityPart[8] = Opac8.X;
            };
            
            Opac8.ValuesChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 8, LipstickList.SelectedItem, Opac8.X);
                PedOutfit.OverlayPart[8] = LipstickList.SelectedItem;
                PedOutfit.OpacityPart[8] = Opac8.X;
            };

            LipstickList.GoRight();
            LipstickList.GoLeft();
            LipstickList.Enabled = true;
            #endregion

            #region Lipstick Color
            NativeListItem<int> LipstickCList = new NativeListItem<int>("Lipstick Color", "Make changes to your Appearance.");
            iVar2 = 0;
            while (iVar2 < Function.Call<int>(Hash.GET_NUM_PED_MAKEUP_TINTS))
            {
                LipstickCList.Add(iVar2);
                iVar2++;
            }
            AppearanceMenu.Add(LipstickCList);

            LipstickList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 8, LipstickList.SelectedItem, Opac8.X);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 8, 1, LipstickCList.SelectedItem, 0);
                MPLipstickColor = LipstickCList.SelectedItem;

                PedOutfit.OverlayPart[8] = LipstickList.SelectedItem;
                PedOutfit.OpacityPart[8] = Opac8.X;
            };
            LipstickCList.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, Game.Player.Character, 8, LipstickList.SelectedItem, Opac8.X);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, Game.Player.Character, 8, 1, LipstickCList.SelectedItem, 0);
                MPLipstickColor = LipstickCList.SelectedItem;

                PedOutfit.OverlayPart[8] = LipstickList.SelectedItem;
                PedOutfit.OpacityPart[8] = Opac8.X;
            };

            LipstickList.GoRight();
            LipstickList.GoLeft();
            LipstickList.Enabled = true;
            LipstickCList.GoRight();
            LipstickCList.GoLeft();
            LipstickCList.Enabled = true;
            #endregion
            
            //------------------------------------------------ Apparel -------------------------------------------------------
            NativeMenu ApparelMenu = new NativeMenu("Character Creator", "Apparel", "Select to change your Apparel.");
            MenuPool.Add(ApparelMenu);
            NativeSubmenuItem ApparelSubbutton = new NativeSubmenuItem(ApparelMenu, CharCreator);
            ApparelSubbutton.AltTitle = "";
            CharCreator.Add(ApparelSubbutton);

            NativeListItem<int> GlassesList = new NativeListItem<int>("Glasses", "Make changes to your Apparel.");
            NativeListItem<int> GlassesVList = new NativeListItem<int>("Glasses Variation", "Make changes to your Apparel.", -1);

            ApparelSubbutton.Activated += (sender, e) =>
            {
                while (Main.CutsceneCam2 == null)
                {
                    Main.CutsceneCam2 = World.CreateCamera(Vector3.Zero, Vector3.Zero, 50.0f);
                    Wait(0);
                }
                Function.Call(Hash.SET_CAM_ACTIVE, Main.CutsceneCam, true);
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0.5f, 4f, 0.1f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0f, 0f, 0.1f, true);
                Main.CutsceneCam2.FieldOfView = 35.0f;
                Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 200, 0, 0);
                Function.Call(Hash.PLAY_SOUND, -1, "Zoom_In", "MUGSHOT_CHARACTER_CREATION_SOUNDS", false, 0, true);

                Game.Player.Character.Task.PlayAnimation(LoadDict("mp_character_creation@customise@male_a"), "drop_intro", 8.0f, 8.0f, -1, AnimationFlags.StayInEndFrame, -1000.0f);

                GlassesList.Clear();

                if (Game.Player.Character.Gender == Gender.Male)
                {
                    int iVar3 = -1;
                    while (iVar3 < 40)
                    {
                        GlassesList.Add(iVar3 + 1, iVar3);
                        iVar3++;
                    }
                }
                else
                {
                    int iVar3 = -1;
                    while (iVar3 < 42)
                    {
                        GlassesList.Add(iVar3 + 1, iVar3);
                        iVar3++;
                    }
                }
                GlassesList.GoRight();
                GlassesList.GoLeft();
                GlassesList.Enabled = true;
            };
            ApparelSubbutton.Menu.Closing += (sender, e) =>
            {
                Main.CutsceneCam2.InterpTo(Main.CutsceneCam, 200, 0, 0);
                Function.Call(Hash.PLAY_SOUND, -1, "Zoom_Out", "MUGSHOT_CHARACTER_CREATION_SOUNDS", false, 0, true);
                Main.CutsceneCam2.Delete();
                Main.CutsceneCam2 = null;
                
                Game.Player.Character.Task.PlayAnimation(LoadDict("mp_character_creation@customise@male_a"), "drop_outro", 8.0f, 8.0f, -1, AnimationFlags.StayInEndFrame, -1000.0f);
            };
            
            #region Outfit
            NativeListItem<string> OutfitList = new NativeListItem<string>("Outfit", "Make changes to your Apparel.", "The Man", "The Felon", "The Corner", "The Hustler");
            #endregion
            
            #region Style
            NativeListItem<string> StyleList = new NativeListItem<string>("Style", "Make changes to your Apparel.", "Street", "Flashy", "Party", "Beach", "Smart", "Sporty", "Eccentric", "Casual");
            ApparelMenu.Add(StyleList);
            
            StyleList.ItemChanged += (sender, e) =>
            {
                OutfitList.Clear();
                
                switch (StyleList.SelectedItem)
                {
                    case "Street":
                        if (Game.Player.Character.Gender == Gender.Male)
                        {
                            OutfitList.Add(0, "The Man");
                            OutfitList.Add(1, "The Felon");
                            OutfitList.Add(2, "The Corner");
                            OutfitList.Add(3, "The Hustler");
                            OutfitList.GoRight();
                            OutfitList.GoLeft();
                            OutfitList.Enabled = true;

                            PedOutfit outfits = new PedOutfit()
                            {
                                Components = new List<PedOutfit.OutfitComponent>(),
                                Props = new List<PedOutfit.OutfitProp>()
                            };

                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 15, TextureId = 9, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 12, TextureId = 12, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 17, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 2, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 0, TextureId = 2, PaletteId = 0 });

                            outfits.Equip(Game.Player.Character);
                        }
                        else
                        {
                            OutfitList.Add(0, "The Mamacita");
                            OutfitList.Add(1, "The Militia");
                            OutfitList.Add(2, "The Convict");
                            OutfitList.Add(3, "The Community");
                            OutfitList.GoRight();
                            OutfitList.GoLeft();
                            OutfitList.Enabled = true;

                            PedOutfit outfits = new PedOutfit()
                            {
                                Components = new List<PedOutfit.OutfitComponent>(),
                                Props = new List<PedOutfit.OutfitProp>()
                            };

                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 4, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 3, TextureId = 8, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 4, TextureId = 2, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 1, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 32, TextureId = 0, PaletteId = 0 });

                            outfits.Equip(Game.Player.Character);
                        }
                        break;
                    case "Flashy":
                        if (Game.Player.Character.Gender == Gender.Male)
                        {
                            OutfitList.Add(0, "The Blues");
                            OutfitList.Add(1, "The Musician");
                            OutfitList.Add(2, "The Royal");
                            OutfitList.Add(3, "The V.I.P");
                            OutfitList.GoRight();
                            OutfitList.GoLeft();
                            OutfitList.Enabled = true;

                            PedOutfit outfits = new PedOutfit()
                            {
                                Components = new List<PedOutfit.OutfitComponent>(),
                                Props = new List<PedOutfit.OutfitProp>()
                            };

                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 12, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 25, TextureId = 2, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 10, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 29, TextureId = 2, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 31, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 31, TextureId = 2, PaletteId = 0 });

                            outfits.Equip(Game.Player.Character);
                        }
                        else
                        {
                            OutfitList.Add(0, "The A List");
                            OutfitList.Add(1, "The Benefit");
                            OutfitList.Add(2, "The Stylish");
                            OutfitList.GoRight();
                            OutfitList.GoLeft();
                            OutfitList.Enabled = true;

                            PedOutfit outfits = new PedOutfit()
                            {
                                Components = new List<PedOutfit.OutfitComponent>(),
                                Props = new List<PedOutfit.OutfitProp>()
                            };

                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 5, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 8, TextureId = 4, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 19, TextureId = 3, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 10, TextureId = 3, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 13, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 35, TextureId = 8, PaletteId = 0 });

                            outfits.Equip(Game.Player.Character);
                        }
                        break;
                    case "Party":
                        if (Game.Player.Character.Gender == Gender.Male)
                        {
                            OutfitList.Add(0, "The All Night");
                            OutfitList.Add(1, "The DJ");
                            OutfitList.Add(2, "The Sky High");
                            OutfitList.GoRight();
                            OutfitList.GoLeft();
                            OutfitList.Enabled = true;

                            PedOutfit outfits = new PedOutfit()
                            {
                                Components = new List<PedOutfit.OutfitComponent>(),
                                Props = new List<PedOutfit.OutfitProp>()
                            };

                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 14, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 26, TextureId = 8, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 22, TextureId = 11, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 23, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 35, TextureId = 6, PaletteId = 0 });

                            outfits.Equip(Game.Player.Character);
                        }
                        else
                        {
                            OutfitList.Add(0, "The Spirit");
                            OutfitList.Add(1, "The Stripe");
                            OutfitList.GoRight();
                            OutfitList.GoLeft();
                            OutfitList.Enabled = true;

                            PedOutfit outfits = new PedOutfit()
                            {
                                Components = new List<PedOutfit.OutfitComponent>(),
                                Props = new List<PedOutfit.OutfitProp>()
                            };

                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 4, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 0, TextureId = 7, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 20, TextureId = 5, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 11, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 33, TextureId = 4, PaletteId = 0 });

                            outfits.Equip(Game.Player.Character);
                        }
                        break;
                    case "Beach":
                        if (Game.Player.Character.Gender == Gender.Male)
                        {
                            OutfitList.Add(0, "The Dude");
                            OutfitList.Add(1, "The Heat");
                            OutfitList.Add(2, "The Paradise");
                            OutfitList.Add(3, "The Skimpy");
                            OutfitList.GoRight();
                            OutfitList.GoLeft();
                            OutfitList.Enabled = true;

                            PedOutfit outfits = new PedOutfit()
                            {
                                Components = new List<PedOutfit.OutfitComponent>(),
                                Props = new List<PedOutfit.OutfitProp>()
                            };

                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 5, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 16, TextureId = 5, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 17, TextureId = 4, PaletteId = 0 });
                            
                            outfits.Equip(Game.Player.Character);
                        }
                        else
                        {
                            OutfitList.Add(0, "The Beach Babe");
                            OutfitList.Add(1, "The Day Tripper");
                            OutfitList.Add(2, "The Lifeguard");
                            OutfitList.Add(3, "The Siesta");
                            OutfitList.GoRight();
                            OutfitList.GoLeft();
                            OutfitList.Enabled = true;

                            PedOutfit outfits = new PedOutfit()
                            {
                                Components = new List<PedOutfit.OutfitComponent>(),
                                Props = new List<PedOutfit.OutfitProp>()
                            };

                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 12, TextureId = 14, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 3, TextureId = 13, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 11, TextureId = 1, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 18, TextureId = 9, PaletteId = 0 });

                            outfits.Equip(Game.Player.Character);
                        }
                        break;
                    case "Smart":
                        if (Game.Player.Character.Gender == Gender.Male)
                        {
                            OutfitList.Add(0, "The Anchor");
                            OutfitList.Add(1, "The Grind");
                            OutfitList.Add(2, "The Sharp Gray Suit");
                            OutfitList.GoRight();
                            OutfitList.GoLeft();
                            OutfitList.Enabled = true;

                            PedOutfit outfits = new PedOutfit()
                            {
                                Components = new List<PedOutfit.OutfitComponent>(),
                                Props = new List<PedOutfit.OutfitProp>()
                            };

                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 12, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 22, TextureId = 5, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 21, TextureId = 10, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 21, TextureId = 12, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 28, TextureId = 13, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 24, TextureId = 5, PaletteId = 0 });

                            outfits.Equip(Game.Player.Character);
                        }
                        else
                        {
                            OutfitList.Add(0, "The Campaign");
                            OutfitList.Add(1, "The Suit");
                            OutfitList.Add(2, "The Trader");
                            OutfitList.GoRight();
                            OutfitList.GoLeft();
                            OutfitList.Enabled = true;

                            PedOutfit outfits = new PedOutfit()
                            {
                                Components = new List<PedOutfit.OutfitComponent>(),
                                Props = new List<PedOutfit.OutfitProp>()
                            };

                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 6, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 36, TextureId = 2, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 20, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 6, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 13, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 25, TextureId = 2, PaletteId = 0 });

                            outfits.Equip(Game.Player.Character);
                        }
                        break;
                    case "Sporty":
                        if (Game.Player.Character.Gender == Gender.Male)
                        {
                            OutfitList.Add(0, "The Athlete");
                            OutfitList.Add(1, "The Pro");
                            OutfitList.Add(2, "The Sweats");
                            OutfitList.Add(3, "The Trainer");
                            OutfitList.GoRight();
                            OutfitList.GoLeft();
                            OutfitList.Enabled = true;

                            PedOutfit outfits = new PedOutfit()
                            {
                                Components = new List<PedOutfit.OutfitComponent>(),
                                Props = new List<PedOutfit.OutfitProp>()
                            };

                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 18, TextureId = 1, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 9, TextureId = 7, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 39, TextureId = 0, PaletteId = 0 });

                            outfits.Equip(Game.Player.Character);
                        }
                        else
                        {
                            OutfitList.Add(0, "The Olympian");
                            OutfitList.Add(1, "The Pump");
                            OutfitList.Add(2, "The Stretch");
                            OutfitList.Add(3, "The Winner");
                            OutfitList.GoRight();
                            OutfitList.GoLeft();
                            OutfitList.Enabled = true;

                            PedOutfit outfits = new PedOutfit()
                            {
                                Components = new List<PedOutfit.OutfitComponent>(),
                                Props = new List<PedOutfit.OutfitProp>()
                            };

                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 14, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 12, TextureId = 8, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 10, TextureId = 3, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 3, TextureId = 4, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 14, TextureId = 10, PaletteId = 0 });

                            outfits.Equip(Game.Player.Character);
                        }
                        break;
                    case "Eccentric":
                        if (Game.Player.Character.Gender == Gender.Male)
                        {
                            OutfitList.Add(0, "The Animal");
                            OutfitList.Add(1, "The Cool Cat");
                            OutfitList.Add(2, "The Dork");
                            OutfitList.Add(3, "The Prince");
                            OutfitList.GoRight();
                            OutfitList.GoLeft();
                            OutfitList.Enabled = true;

                            PedOutfit outfits = new PedOutfit()
                            {
                                Components = new List<PedOutfit.OutfitComponent>(),
                                Props = new List<PedOutfit.OutfitProp>()
                            };

                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 4, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 28, TextureId = 12, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 20, TextureId = 2, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 12, TextureId = 2, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 10, TextureId = 14, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 35, TextureId = 4, PaletteId = 0 });
                            
                            outfits.Equip(Game.Player.Character);
                        }
                        else
                        {
                            OutfitList.Add(0, "The Amazon");
                            OutfitList.Add(1, "The Art Attack");
                            OutfitList.Add(2, "The Pretty Kitty");
                            OutfitList.Add(3, "The Spooky");
                            OutfitList.GoRight();
                            OutfitList.GoLeft();
                            OutfitList.Enabled = true;

                            PedOutfit outfits = new PedOutfit()
                            {
                                Components = new List<PedOutfit.OutfitComponent>(),
                                Props = new List<PedOutfit.OutfitProp>()
                            };

                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 4, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 24, TextureId = 9, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 8, TextureId = 8, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 11, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 33, TextureId = 8, PaletteId = 0 });

                            outfits.Equip(Game.Player.Character);
                        }
                        break;
                    case "Casual":
                        if (Game.Player.Character.Gender == Gender.Male)
                        {
                            OutfitList.Add(0, "The Plain White");
                            OutfitList.Add(1, "The Simple");
                            OutfitList.Add(2, "The Denims");
                            OutfitList.Add(3, "The Hangout");
                            OutfitList.GoRight();
                            OutfitList.GoLeft();
                            OutfitList.Enabled = true;

                            PedOutfit outfits = new PedOutfit()
                            {
                                Components = new List<PedOutfit.OutfitComponent>(),
                                Props = new List<PedOutfit.OutfitProp>()
                            };

                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 0, TextureId = 2, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 0, TextureId = 10, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 1, TextureId = 0, PaletteId = 0 });

                            outfits.Equip(Game.Player.Character);
                        }
                        else
                        {
                            OutfitList.Add(0, "The Casual");
                            OutfitList.Add(1, "The Comfort");
                            OutfitList.Add(2, "The Daily");
                            OutfitList.Add(3, "The Easy");
                            OutfitList.GoRight();
                            OutfitList.GoLeft();
                            OutfitList.Enabled = true;

                            PedOutfit outfits = new PedOutfit()
                            {
                                Components = new List<PedOutfit.OutfitComponent>(),
                                Props = new List<PedOutfit.OutfitProp>()
                            };

                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 16, TextureId = 4, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 2, TextureId = 5, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 2, TextureId = 1, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                            outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 0, TextureId = 11, PaletteId = 0 });
                            
                            outfits.Equip(Game.Player.Character);
                        }
                        break;
                }
            };

            ApparelMenu.Add(OutfitList);

            OutfitList.ItemChanged += (sender, e) =>
            {
                {
                    switch (StyleList.SelectedItem)
                    {
                        case "Street":
                            {
                                if (Game.Player.Character.Gender == Gender.Male)
                                {
                                    switch (OutfitList.SelectedItem)
                                    {
                                        case "The Man":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 15, TextureId = 9, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 12, TextureId = 12, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 17, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 2, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 0, TextureId = 2, PaletteId = 0 });
                                                
                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Felon":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 6, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 7, TextureId = 15, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 1, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 1, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 7, TextureId = 1, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Corner":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 5, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 6, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 17, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 1, TextureId = 0, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Hustler":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 5, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 7, TextureId = 4, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 12, TextureId = 4, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 17, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 5, TextureId = 0, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (OutfitList.SelectedItem)
                                    {
                                        case "The Mamacita":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 4, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 3, TextureId = 8, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 4, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 1, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 32, TextureId = 0, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Militia":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 4, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 30, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 24, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 5, TextureId = 4, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 4, TextureId = 14, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Convict":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 3, TextureId = 15, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 3, TextureId = 15, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 3, TextureId = 1, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Community":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 11, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 3, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 1, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 3, TextureId = 12, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                    }
                                }
                            }
                            break;
                        case "Flashy":
                            {
                                if (Game.Player.Character.Gender == Gender.Male)
                                {
                                    switch (OutfitList.SelectedItem)
                                    {
                                        case "The Blues":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 12, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 25, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 10, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 29, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 31, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 31, TextureId = 2, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Musician":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 6, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 4, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 10, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 5, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 4, TextureId = 0, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Royal":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 6, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 26, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 20, TextureId = 3, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 5, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 5, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 4, TextureId = 14, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The V.I.P":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 12, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 24, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 10, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 27, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 35, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 30, TextureId = 0, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (OutfitList.SelectedItem)
                                    {
                                        case "The A List":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 5, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 8, TextureId = 4, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 19, TextureId = 3, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 10, TextureId = 3, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 13, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 35, TextureId = 8, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Benefit":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 5, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 8, TextureId = 12, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 8, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 11, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 13, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 8, TextureId = 1, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Stylish":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 5, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 23, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 42, TextureId = 4, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 7, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 13, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 24, TextureId = 9, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                    }
                                }
                            }
                            break;
                        case "Party":
                            {
                                if (Game.Player.Character.Gender == Gender.Male)
                                {
                                    switch (OutfitList.SelectedItem)
                                    {
                                        case "The All Night":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 14, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 26, TextureId = 8, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 22, TextureId = 11, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 23, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 35, TextureId = 6, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The DJ":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 27, TextureId = 4, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 1, TextureId = 9, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 22, TextureId = 0, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Sky High":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 26, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 7, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 44, TextureId = 3, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (OutfitList.SelectedItem)
                                    {
                                        case "The Spirit":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 4, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 0, TextureId = 7, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 20, TextureId = 5, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 11, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 33, TextureId = 4, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Stripe":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 5, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 27, TextureId = 7, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 19, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 4, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 28, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 31, TextureId = 6, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                    }
                                }
                            }
                            break;
                        case "Beach":
                            {
                                if (Game.Player.Character.Gender == Gender.Male)
                                {
                                    switch (OutfitList.SelectedItem)
                                    {
                                        case "The Dude":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 5, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 16, TextureId = 5, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 17, TextureId = 4, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Heat":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 5, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 18, TextureId = 3, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 16, TextureId = 4, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 5, TextureId = 7, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Paradise":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 18, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 1, TextureId = 3, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 1, TextureId = 0, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Skimpy":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 18, TextureId = 11, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 5, TextureId = 3, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 15, TextureId = 0, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (OutfitList.SelectedItem)
                                    {
                                        case "The Beach Babe":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 12, TextureId = 14, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 3, TextureId = 13, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 11, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 18, TextureId = 9, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Day Tripper":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 5, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 16, TextureId = 10, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 16, TextureId = 7, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 10, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 16, TextureId = 4, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 31, TextureId = 5, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Lifeguard":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 11, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 17, TextureId = 4, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 16, TextureId = 7, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 3, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 11, TextureId = 10, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Siesta":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 25, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 16, TextureId = 9, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 1, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 18, TextureId = 10, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                    }
                                }
                            }
                            break;
                        case "Smart":
                            {
                                if (Game.Player.Character.Gender == Gender.Male)
                                {
                                    switch (OutfitList.SelectedItem)
                                    {
                                        case "The Anchor":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 12, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 22, TextureId = 5, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 21, TextureId = 10, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 21, TextureId = 12, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 28, TextureId = 13, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 24, TextureId = 5, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Grind":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 11, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 25, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 21, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 21, TextureId = 11, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 26, TextureId = 2, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Sharp Gray Suit":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 12, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 25, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 10, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 32, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 31, TextureId = 1, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (OutfitList.SelectedItem)
                                    {
                                        case "The Campaign":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 6, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 36, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 20, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 6, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 13, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 25, TextureId = 2, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Suit":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 6, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 6, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 13, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 6, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 25, TextureId = 6, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 7, TextureId = 0, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Trader":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 7, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 19, TextureId = 9, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 1, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 24, TextureId = 3, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 28, TextureId = 10, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                    }
                                }
                            }
                            break;
                        case "Sporty":
                            {
                                if (Game.Player.Character.Gender == Gender.Male)
                                {
                                    switch (OutfitList.SelectedItem)
                                    {
                                        case "The Athlete":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 18, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 9, TextureId = 7, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 39, TextureId = 0, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Pro":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 6, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 9, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 9, TextureId = 10, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Sweats":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 1, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 3, TextureId = 4, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 7, TextureId = 15, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 41, TextureId = 3, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 7, TextureId = 4, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Trainer":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 8, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 14, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 2, TextureId = 13, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 38, TextureId = 0, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (OutfitList.SelectedItem)
                                    {
                                        case "The Olympian":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 14, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 12, TextureId = 8, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 10, TextureId = 3, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 3, TextureId = 4, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 14, TextureId = 10, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Pump":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 7, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 2, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 11, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 16, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 10, TextureId = 7, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Stretch":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 7, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 10, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 1, TextureId = 13, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 1, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 5, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 10, TextureId = 10, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Winner":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 14, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 12, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 4, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 14, TextureId = 4, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                    }
                                }
                            }
                            break;
                        case "Eccentric":
                            {
                                if (Game.Player.Character.Gender == Gender.Male)
                                {
                                    switch (OutfitList.SelectedItem)
                                    {
                                        case "The Animal":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 4, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 28, TextureId = 12, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 20, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 12, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 10, TextureId = 14, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 35, TextureId = 4, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Cool Cat":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 27, TextureId = 6, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 12, TextureId = 15, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 22, TextureId = 1, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Dork":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 12, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 27, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 23, TextureId = 10, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 22, TextureId = 6, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 26, TextureId = 6, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 35, TextureId = 2, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Prince":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 14, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 26, TextureId = 10, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 23, TextureId = 8, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 23, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 24, TextureId = 2, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (OutfitList.SelectedItem)
                                    {
                                        case "The Amazon":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 4, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 24, TextureId = 9, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 8, TextureId = 8, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 11, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 33, TextureId = 8, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Art Attack":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 7, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 0, TextureId = 14, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 19, TextureId = 4, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 16, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 10, TextureId = 15, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Pretty Kitty":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 12, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 27, TextureId = 9, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 42, TextureId = 5, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 10, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 26, TextureId = 11, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Spooky":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 4, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 27, TextureId = 5, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 8, TextureId = 3, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 2, TextureId = 5, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 13, TextureId = 8, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 13, TextureId = 8, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                    }
                                }
                            }
                            break;
                        case "Casual":
                            {
                                if (Game.Player.Character.Gender == Gender.Male)
                                {
                                    switch (OutfitList.SelectedItem)
                                    {
                                        case "The Plain White":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 0, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 0, TextureId = 10, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 1, TextureId = 0, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Simple":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 1, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 1, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 22, TextureId = 1, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Denims":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 8, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 4, TextureId = 4, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 4, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 38, TextureId = 0, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Hangout":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 0, TextureId = 5, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 1, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 17, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 15, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 33, TextureId = 0, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (OutfitList.SelectedItem)
                                    {
                                        case "The Casual":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 16, TextureId = 4, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 2, TextureId = 5, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 2, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 0, TextureId = 11, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Comfort":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 2, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 2, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 2, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 5, TextureId = 4, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 2, TextureId = 6, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Daily":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 9, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 4, TextureId = 9, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 13, TextureId = 12, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 1, TextureId = 2, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 9, TextureId = 9, PaletteId = 0 });

                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                        case "The Easy":
                                            {
                                                PedOutfit outfits = new PedOutfit()
                                                {
                                                    Components = new List<PedOutfit.OutfitComponent>(),
                                                    Props = new List<PedOutfit.OutfitProp>()
                                                };

                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 2, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 16, TextureId = 6, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 2, TextureId = 1, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                                outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 3, TextureId = 11, PaletteId = 0 });
                                                
                                                outfits.Equip(Game.Player.Character);
                                            }
                                            break;
                                    }
                                }
                            }
                            break;
                    }
                }
            };
            #endregion
            
            #region Hats
            NativeListItem<string> HatList = new NativeListItem<string>("Hat", "Make changes to your Apparel.", "Off", "Black Winter Hat", "Rasta Winter Hat", "Maroon Winter Hat", "Black LS Fitted Cap", "Gray LS Fitted Cap", "Black Saggy Beanie", "Blue Saggy Beanie", "Red Saggy Beanie", "Green Army Cap", "Woodland Army Cap", "Ranch Brown Army Cap", "White Flat Cap", "Black Flat Cap", "Brown Flat Cap", "Fruntalot Green Cap Back", "Stank Purple Cap Back", "Fruntalot Green Cap Front", "Stank Purple Cap Front", "Black Fedora", "White Fedora", "Red Fedora", "Black Cowboy Hat", "Brown Cowboy Hat", "Chocolate Cowboy Hat", "White Paisley Bandana", "Black Paisley Bandana", "Camo Bandana", "Beat Off White Headphones", "Beat Off Black Headphones", "Beat Off Red Headphones", "Red Canvas Hat", "Floral Canvas Hat", "Woodland Canvas Hat", "Tan Pork Pie", "Ushero Purple Pork Pie", "Black Pork Pie", "Black Bowler Hat", "Vintage Bowler Hat", "Ash Bowler Hat", "Black Top Hat", "Vintage Top Hat", "Ash Top Hat", "Cream Trilby", "Black & Red Trilby", "Blue Trilby");
            ApparelMenu.Add(HatList);
            
            HatList.ItemChanged += (sender, e) =>
            {
                if (Game.Player.Character.Gender == Gender.Male)
                {
                    switch (HatList.SelectedItem)
                    {
                        case "Off":
                            Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            break;
                        case "Black Winter Hat"://"Black Winter Hat", "Rasta Winter Hat", "Maroon Winter Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 2, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Rasta Winter Hat"://"Black Winter Hat", "Rasta Winter Hat", "Maroon Winter Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 2, TextureId = 3 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Maroon Winter Hat"://"Black Winter Hat", "Rasta Winter Hat", "Maroon Winter Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 2, TextureId = 7 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Black LS Fitted Cap"://"Black LS Fitted Cap", "Gray LS Fitted Cap"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 4, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Gray LS Fitted Cap"://"Black LS Fitted Cap", "Gray LS Fitted Cap"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 4, TextureId = 1 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Black Saggy Beanie"://"Black Saggy Beanie", "Blue Saggy Beanie", "Red Saggy Beanie"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 5, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Blue Saggy Beanie"://"Black Saggy Beanie", "Blue Saggy Beanie", "Red Saggy Beanie"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 28, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Red Saggy Beanie"://"Black Saggy Beanie", "Blue Saggy Beanie", "Red Saggy Beanie"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 28, TextureId = 2 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Green Army Cap"://"Green Army Cap", "Woodland Army Cap", "Ranch Brown Army Cap"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 6, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Woodland Army Cap"://"Green Army Cap", "Woodland Army Cap", "Ranch Brown Army Cap"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 6, TextureId = 5 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Ranch Brown Army Cap"://"Green Army Cap", "Woodland Army Cap", "Ranch Brown Army Cap"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 6, TextureId = 7 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "White Flat Cap"://"White Flat Cap", "Black Flat Cap", "Brown Flat Cap"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 7, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Black Flat Cap"://"White Flat Cap", "Black Flat Cap", "Brown Flat Cap"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 7, TextureId = 2 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Brown Flat Cap"://"White Flat Cap", "Black Flat Cap", "Brown Flat Cap"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 7, TextureId = 5 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Fruntalot Green Cap Back"://"Fruntalot Green Cap Back", "Stank Purple Cap Back", "Fruntalot Green Cap Front", "Stank Purple Cap Front"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 9, TextureId = 5 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Stank Purple Cap Back"://"Fruntalot Green Cap Back", "Stank Purple Cap Back", "Fruntalot Green Cap Front", "Stank Purple Cap Front"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 10, TextureId = 7 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Fruntalot Green Cap Front"://"Fruntalot Green Cap Back", "Stank Purple Cap Back", "Fruntalot Green Cap Front", "Stank Purple Cap Front"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 9, TextureId = 5 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Stank Purple Cap Front"://"Fruntalot Green Cap Back", "Stank Purple Cap Back", "Fruntalot Green Cap Front", "Stank Purple Cap Front"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 10, TextureId = 7 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Black Fedora"://"Black Fedora", "White Fedora", "Red Fedora"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 12, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "White Fedora"://"Black Fedora", "White Fedora", "Red Fedora"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 12, TextureId = 1 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Red Fedora"://"Black Fedora", "White Fedora", "Red Fedora"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 30, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Black Cowboy Hat"://"Black Cowboy Hat", "Brown Cowboy Hat", "Chocolate Cowboy Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 13, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Brown Cowboy Hat"://"Black Cowboy Hat", "Brown Cowboy Hat", "Chocolate Cowboy Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 13, TextureId = 1 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Chocolate Cowboy Hat"://"Black Cowboy Hat", "Brown Cowboy Hat", "Chocolate Cowboy Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 13, TextureId = 2 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "White Paisley Bandana"://"White Paisley Bandana", "Black Paisley Bandana", "Camo Bandana"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 14, TextureId = 2 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Black Paisley Bandana"://"White Paisley Bandana", "Black Paisley Bandana", "Camo Bandana"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 14, TextureId = 1 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Camo Bandana"://"White Paisley Bandana", "Black Paisley Bandana", "Camo Bandana"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 14, TextureId = 6 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Beat Off White Headphones"://"Beat Off White Headphones", "Beat Off Black Headphones", "Beat Off Red Headphones"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 15, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Beat Off Black Headphones"://"Beat Off White Headphones", "Beat Off Black Headphones", "Beat Off Red Headphones"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 15, TextureId = 1 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Beat Off Red Headphones"://"Beat Off White Headphones", "Beat Off Black Headphones", "Beat Off Red Headphones"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 15, TextureId = 2 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Red Canvas Hat"://"Red Canvas Hat", "Floral Canvas Hat", "Woodland Canvas Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 20, TextureId = 3 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Floral Canvas Hat"://"Red Canvas Hat", "Floral Canvas Hat", "Woodland Canvas Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 20, TextureId = 4 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Woodland Canvas Hat"://"Red Canvas Hat", "Floral Canvas Hat", "Woodland Canvas Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 20, TextureId = 5 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Tan Pork Pie"://"Tan Pork Pie", "Ushero Purple Pork Pie", "Black Pork Pie"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 21, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Ushero Purple Pork Pie"://"Tan Pork Pie", "Ushero Purple Pork Pie", "Black Pork Pie"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 21, TextureId = 4 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Black Pork Pie"://"Tan Pork Pie", "Ushero Purple Pork Pie", "Black Pork Pie"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 21, TextureId = 5 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Black Bowler Hat"://"Black Bowler Hat", "Vintage Bowler Hat", "Ash Bowler Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 26, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Vintage Bowler Hat"://"Black Bowler Hat", "Vintage Bowler Hat", "Ash Bowler Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 26, TextureId = 8 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Ash Bowler Hat"://"Black Bowler Hat", "Vintage Bowler Hat", "Ash Bowler Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 26, TextureId = 9 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Black Top Hat"://"Black Top Hat", "Vintage Top Hat", "Ash Top Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 27, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Vintage Top Hat"://"Black Top Hat", "Vintage Top Hat", "Ash Top Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 27, TextureId = 8 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Ash Top Hat"://"Black Top Hat", "Vintage Top Hat", "Ash Top Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 27, TextureId = 9 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Cream Trilby"://"Cream Trilby", "Black & Red Trilby", "Blue Trilby"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 29, TextureId = 2 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Black & Red Trilby"://"Cream Trilby", "Black & Red Trilby", "Blue Trilby"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 29, TextureId = 5 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Blue Trilby"://"Cream Trilby", "Black & Red Trilby", "Blue Trilby"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 29, TextureId = 7 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                    }
                }
                else
                {
                    switch (HatList.SelectedItem)
                    {
                        case "Off":
                            Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            break;
                        case "Black Winter Hat"://"Black Winter Hat", "Rasta Winter Hat", "Maroon Winter Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 12, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Rasta Winter Hat"://"Black Winter Hat", "Rasta Winter Hat", "Maroon Winter Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 29, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Maroon Winter Hat"://"Black Winter Hat", "Rasta Winter Hat", "Maroon Winter Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 29, TextureId = 1 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Black LS Fitted Cap"://"Black LS Fitted Cap", "Gray LS Fitted Cap"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 4, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Gray LS Fitted Cap"://"Black LS Fitted Cap", "Gray LS Fitted Cap"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Black Saggy Beanie"://"Black Saggy Beanie", "Blue Saggy Beanie", "Red Saggy Beanie"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 5, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Blue Saggy Beanie"://"Black Saggy Beanie", "Blue Saggy Beanie", "Red Saggy Beanie"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 5, TextureId = 5 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Red Saggy Beanie"://"Black Saggy Beanie", "Blue Saggy Beanie", "Red Saggy Beanie"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 5, TextureId = 4 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Green Army Cap"://"Green Army Cap", "Woodland Army Cap", "Ranch Brown Army Cap"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 6, TextureId = 1 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Woodland Army Cap"://"Green Army Cap", "Woodland Army Cap", "Ranch Brown Army Cap"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 6, TextureId = 7 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Ranch Brown Army Cap"://"Green Army Cap", "Woodland Army Cap", "Ranch Brown Army Cap"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "White Flat Cap"://"White Flat Cap", "Black Flat Cap", "Brown Flat Cap"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 7, TextureId = 1 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Black Flat Cap"://"White Flat Cap", "Black Flat Cap", "Brown Flat Cap"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 168, TextureId = 2 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Brown Flat Cap"://"White Flat Cap", "Black Flat Cap", "Brown Flat Cap"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 7, TextureId = 3 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Fruntalot Green Cap Back"://"Fruntalot Green Cap Back", "Stank Purple Cap Back", "Fruntalot Green Cap Front", "Stank Purple Cap Front"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Stank Purple Cap Back"://"Fruntalot Green Cap Back", "Stank Purple Cap Back", "Fruntalot Green Cap Front", "Stank Purple Cap Front"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Fruntalot Green Cap Front"://"Fruntalot Green Cap Back", "Stank Purple Cap Back", "Fruntalot Green Cap Front", "Stank Purple Cap Front"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Stank Purple Cap Front"://"Fruntalot Green Cap Back", "Stank Purple Cap Back", "Fruntalot Green Cap Front", "Stank Purple Cap Front"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Black Fedora"://"Black Fedora", "White Fedora", "Red Fedora"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 13, TextureId = 6 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "White Fedora"://"Black Fedora", "White Fedora", "Red Fedora"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 13, TextureId = 1 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Red Fedora"://"Black Fedora", "White Fedora", "Red Fedora"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Black Cowboy Hat"://"Black Cowboy Hat", "Brown Cowboy Hat", "Chocolate Cowboy Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 20, TextureId = 2 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Brown Cowboy Hat"://"Black Cowboy Hat", "Brown Cowboy Hat", "Chocolate Cowboy Hat"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Chocolate Cowboy Hat"://"Black Cowboy Hat", "Brown Cowboy Hat", "Chocolate Cowboy Hat"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "White Paisley Bandana"://"White Paisley Bandana", "Black Paisley Bandana", "Camo Bandana"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Black Paisley Bandana"://"White Paisley Bandana", "Black Paisley Bandana", "Camo Bandana"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Camo Bandana"://"White Paisley Bandana", "Black Paisley Bandana", "Camo Bandana"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Beat Off White Headphones"://"Beat Off White Headphones", "Beat Off Black Headphones", "Beat Off Red Headphones"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 0, TextureId = 4 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Beat Off Black Headphones"://"Beat Off White Headphones", "Beat Off Black Headphones", "Beat Off Red Headphones"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 0, TextureId = 5 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Beat Off Red Headphones"://"Beat Off White Headphones", "Beat Off Black Headphones", "Beat Off Red Headphones"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 0, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Red Canvas Hat"://"Red Canvas Hat", "Floral Canvas Hat", "Woodland Canvas Hat"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Floral Canvas Hat"://"Red Canvas Hat", "Floral Canvas Hat", "Woodland Canvas Hat"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Woodland Canvas Hat"://"Red Canvas Hat", "Floral Canvas Hat", "Woodland Canvas Hat"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Tan Pork Pie"://"Tan Pork Pie", "Ushero Purple Pork Pie", "Black Pork Pie"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Ushero Purple Pork Pie"://"Tan Pork Pie", "Ushero Purple Pork Pie", "Black Pork Pie"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Black Pork Pie"://"Tan Pork Pie", "Ushero Purple Pork Pie", "Black Pork Pie"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Black Bowler Hat"://"Black Bowler Hat", "Vintage Bowler Hat", "Ash Bowler Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 26, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Vintage Bowler Hat"://"Black Bowler Hat", "Vintage Bowler Hat", "Ash Bowler Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 26, TextureId = 8 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Ash Bowler Hat"://"Black Bowler Hat", "Vintage Bowler Hat", "Ash Bowler Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 26, TextureId = 9 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Black Top Hat"://"Black Top Hat", "Vintage Top Hat", "Ash Top Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 27, TextureId = 0 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Vintage Top Hat"://"Black Top Hat", "Vintage Top Hat", "Ash Top Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 27, TextureId = 8 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Ash Top Hat"://"Black Top Hat", "Vintage Top Hat", "Ash Top Hat"
                            {
                                PedOutfit outfits = new PedOutfit()
                                {
                                    Components = new List<PedOutfit.OutfitComponent>(),
                                    Props = new List<PedOutfit.OutfitProp>()
                                };

                                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)0, DrawableId = 27, TextureId = 9 });

                                outfits.Equip(Game.Player.Character);
                            }
                            break;
                        case "Cream Trilby"://"Cream Trilby", "Black & Red Trilby", "Blue Trilby"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Black & Red Trilby"://"Cream Trilby", "Black & Red Trilby", "Blue Trilby"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                        case "Blue Trilby"://"Cream Trilby", "Black & Red Trilby", "Blue Trilby"
                            {
                                Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                            }
                            break;
                    }
                }
            };
            #endregion

            #region Glasses
            ApparelMenu.Add(GlassesList);
            
            GlassesList.ItemChanged += (sender, e) =>
            {
                GlassesVList.Clear();

                int iVar3 = 0;
                while (iVar3 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS, Game.Player.Character, 1, GlassesList.SelectedItem))
                {
                    GlassesVList.Add(iVar3, iVar3);
                    iVar3++;
                }
                GlassesVList.GoRight();
                GlassesVList.GoLeft();
                GlassesVList.Enabled = true;

                if (GlassesList.SelectedItem != -1)
                {
                    PedOutfit outfits = new PedOutfit()
                    {
                        Components = new List<PedOutfit.OutfitComponent>(),
                        Props = new List<PedOutfit.OutfitProp>()
                    };

                    outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)1, DrawableId = GlassesList.SelectedItem, TextureId = 0 });

                    outfits.Equip(Game.Player.Character);
                }
                else
                {
                    Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 1, 0);
                }
            };
            #endregion

            #region Glasses Variation
            ApparelMenu.Add(GlassesVList);
            
            GlassesVList.ItemChanged += (sender, e) =>
            {
                PedOutfit outfits = new PedOutfit()
                {
                    Components = new List<PedOutfit.OutfitComponent>(),
                    Props = new List<PedOutfit.OutfitProp>()
                };

                outfits.Props.Add(new PedOutfit.OutfitProp() { ComponentId = (PedOutfit.PedPropsData)1, DrawableId = GlassesList.SelectedItem, TextureId = GlassesVList.SelectedItem });

                outfits.Equip(Game.Player.Character);
            };
            #endregion

            //------------------------------------------------ Save & Continue -------------------------------------------------------
            Sexbutton.ItemChanged += (sender, e) =>
            {
                if (Sexbutton.SelectedItem == "Male")
                {
                    Game.Player.ChangeModel(RequestModel(PedHash.FreemodeMale01));
                    Function.Call(Hash.SET_PED_DEFAULT_COMPONENT_VARIATION, Game.Player.Character);
                    Function.Call(Hash.SET_PED_HEAD_BLEND_DATA, Game.Player.Character, 0, 0, 0, 0, 0, 0, 0f, 0f, 0f, false);
                    PedOutfit outfits = new PedOutfit()
                    {
                        Components = new List<PedOutfit.OutfitComponent>(),
                        Props = new List<PedOutfit.OutfitProp>()
                    };

                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 15, TextureId = 9, PaletteId = 0 });
                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 12, TextureId = 12, PaletteId = 0 });
                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 17, TextureId = 0, PaletteId = 0 });
                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 2, TextureId = 0, PaletteId = 0 });
                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 0, TextureId = 2, PaletteId = 0 });

                    outfits.Equip(Game.Player.Character);

                    TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "loop", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "loop", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);

                    Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, Props.propList[0], Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                    Function.Call((Hash)0x40FDEDB72F8293B2, Props.propList[0]);
                    Anims.SET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim, 1.0f);
                    StyleList.GoRight();
                    StyleList.GoLeft();

                    MPGender = 0;
                }
                if (Sexbutton.SelectedItem == "Female")
                {
                    Game.Player.ChangeModel(RequestModel(PedHash.FreemodeFemale01));
                    Function.Call(Hash.SET_PED_DEFAULT_COMPONENT_VARIATION, Game.Player.Character);
                    Function.Call(Hash.SET_PED_HEAD_BLEND_DATA, Game.Player.Character, 0, 0, 0, 0, 0, 0, 0f, 0f, 0f, false);
                    PedOutfit outfits = new PedOutfit()
                    {
                        Components = new List<PedOutfit.OutfitComponent>(),
                        Props = new List<PedOutfit.OutfitProp>()
                    };

                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 4, TextureId = 0, PaletteId = 0 });
                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 3, TextureId = 8, PaletteId = 0 });
                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 4, TextureId = 2, PaletteId = 0 });
                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 1, TextureId = 0, PaletteId = 0 });
                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 3, TextureId = 0, PaletteId = 0 });
                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                    outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 32, TextureId = 0, PaletteId = 0 });

                    outfits.Equip(Game.Player.Character);

                    TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "loop", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "loop", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);

                    Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, Props.propList[0], Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                    Function.Call((Hash)0x40FDEDB72F8293B2, Props.propList[0]);
                    Anims.SET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim, 1.0f);
                    StyleList.GoRight();
                    StyleList.GoLeft();
                    MPGender = 1;
                }
            };
            
            NativeItem SACButton = new NativeItem("Save & Continue", "Ready to start playing GTA Online-Offline?", "");
            CharCreator.Add(SACButton);
            
            SACButton.Activated += (sender, e) =>
            {
                if (Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) >= 1f || Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, LoadDict("mp_character_creation@customise@male_a"), "drop_outro", 3))
                {
                    CharCreator.Visible = !CharCreator.Visible;
                    Menu_Switch = 2;
                }
            };
            #endregion
        }
        
        public void onTick(object sender, EventArgs e)
        {
            if (DEBUG)
            {
                //Screen.ShowHelpTextThisFrame("b");
                //Screen.ShowSubtitle("b");
                //1100.000f, 220.000f, -50.0000f casino main interior pos
                if (Main.CutsceneCam != null)
                {
                    //myUIText = new TextElement(Cameras.CAM_SPLINE_PHASE(Main.CutsceneCam).ToString(), new Point(10, 10), 0.4f, Color.WhiteSmoke, 0);
                    //myUIText.Draw();
                }
                //Function.Call(Hash.GET_INTERIOR_INFO, 173825, &bruh1, &bruh2);
                //RaycastResult ray = World.RaycastCapsule(new Vector3(6.565957f, -1100.139f, 29.79702f), Game.Player.Character.Position, 0.5f, 0.5f, IntersectFlags.Everything);
                myUIText = new TextElement(Cutscenes.GET_CUTSCENE_TIME().ToString(), new Point(10, 10), 0.4f, Color.WhiteSmoke, 0);
                //myUIText = new TextElement(Interiors.GET_INTERIOR_FROM_ENTITY(Game.Player.Character).ToString(), new Point(10, 10), 0.4f, Color.WhiteSmoke, 0);
                //myUIText = new TextElement(Interiors.GET_ROOM_KEY_FROM_ENTITY(Game.Player.Character).ToString(), new Point(10, 10), 0.4f, Color.WhiteSmoke, 0);
                //myUIText = new TextElement(Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim).ToString(), new Point(10, 10), 0.4f, Color.WhiteSmoke, 0);
                //myUIText = new TextElement(HudHandler.traveldistance.ToString(), new Point(10, 10), 0.4f, Color.WhiteSmoke, 0);
                //myUIText = new TextElement(Game.Player.Character.Heading.ToString(), new Point(10, 10), 0.4f, Color.WhiteSmoke, 0);
                myUIText.Draw();
                if (Game.IsControlJustPressed(GTA.Control.Context))
                {
                    //Game.Player.CanControlCharacter = false;
                }
                if (Game.IsControlJustPressed(GTA.Control.VehicleDuck))
                {
                    //Interiors.IslandLoad(true);
                    //Game.Player.Character.Kill();
                    test = 1;
                }
                switch (TeleSwitch)
                {
                    case 0:
                        {

                        }
                        break;
                    case 1:
                        {
                            if (Game.GameTime > TeleTimer)
                            {
                                Function.Call(Hash.SET_NEW_WAYPOINT, Game.Player.Character.Position.X, Game.Player.Character.Position.Y);
                                Vector3 waypointPos = World.WaypointPosition;
                                if (Game.Player.Character.CurrentVehicle == null)
                                {
                                    Game.Player.Character.Position = waypointPos;
                                    Game.Player.Character.IsPositionFrozen = false;
                                }
                                else if (Game.Player.Character.CurrentVehicle != null)
                                {
                                    Game.Player.Character.CurrentVehicle.Position = waypointPos;
                                    Game.Player.Character.CurrentVehicle.IsPositionFrozen = false;
                                }
                                TeleTimer = 0;
                                TeleSwitch = 0;
                            }
                        }
                        break;
                }
                //Function.Call((Hash)0x2D3B147AFAD49DE0, "", const char* textureName, float x, float y, float width, float height, float p6, int red, int green, int blue, int alpha, Any p11);
                switch (test)
                {
                    case 1://
                        {

                            test = 2;
                        }
                        break;
                    case 2:
                        {

                        }
                        break;
                }
                //Main.FindObjectModel(1f);
                //Main.FindObjectPos(1f);
            }
            if (Game.IsControlJustPressed(GTA.Control.Context))
            {
                //MPCash.ADD_CASH(1525);

                //MPVehicleLoadout.SAVE_VEHICLE(Game.Player.Character.CurrentVehicle, "scripts\\CruelMastersOnlineOfflineAssets\\Vehicles\\CurrentVehicle.xml");
            }
            if (Game.IsControlJustPressed(GTA.Control.VehicleDuck))
            {
                //MPCash.ADD_BANK(1525);

                
            }

            if (MenuPool != null && MenuPool.AreAnyVisible)
            {
                MenuPool.Process();
            }

            if (!ContinueCOO)
            {
                if (!Game.IsLoading && !Function.Call<bool>(Hash.GET_IS_LOADING_SCREEN_ACTIVE) && !Screen.IsFadingIn)
                {
                    //LoadIniFile("scripts\\HCCTB Assets\\HCCTB.ini");
                    if (!Interiors.IS_IPL_ACTIVE("xm_hatch_closed"))
                    {
                        Function.Call(Hash.ON_ENTER_SP);
                        Function.Call(Hash.ON_ENTER_MP);
                        LoadingPrompt.Hide();
                        foreach (string ipls in RemoveOnlyIPLS)
                        {
                            Function.Call(Hash.REMOVE_IPL, ipls);
                        }
                        foreach (string ipl in LoadAllIPLS)
                        {
                            Function.Call(Hash.REMOVE_IPL, ipl);

                            Function.Call(Hash.REQUEST_IPL, ipl);
                        }
                        Function.Call(Hash.CLEAR_ALL_HELP_MESSAGES);
                    }
                    if (DEBUG)
                    {
                        //Game.Player.ChangeModel(RequestModel(PedHash.FreemodeMale01));
                        LoadDict("anim@move_m@grooving@");
                        Wait(50);
                        Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Game.Player.Character, "anim@move_m@grooving@", 1.0f);
                        //GetPedOutfitOnline(Game.Player.Character);
                        Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();
                        MPLoadout.GET_CURRENT_LOADOUT();
                        Screen.ShowHelpTextThisFrame("b");
                        Screen.ShowSubtitle("b");

                        Function.Call(Hash.SET_MINIMAP_HIDE_FOW, true);
                        Function.Call((Hash)0x9BAE5AD2508DF078, true);
                        GlobalVariable.Get(4).Write<int>(1);
                        Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "cellphone_controller");
                        //Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "stats_controller");
                        Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "restrictedareas");
                        Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "respawn_controller");
                        Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "gunclub_shop");
                        Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "clothes_shop_sp");
                        Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "clothes_shop_mp");
                        Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "shop_controller");

                        Function.Call(Hash.DISABLE_HOSPITAL_RESTART​, 0, true);
                        Function.Call(Hash.DISABLE_HOSPITAL_RESTART​, 1, true);
                        Function.Call(Hash.DISABLE_HOSPITAL_RESTART​, 2, true);
                        Function.Call(Hash.DISABLE_HOSPITAL_RESTART​, 3, true);
                        Function.Call(Hash.DISABLE_HOSPITAL_RESTART​, 4, true);

                        Function.Call(Hash.DISABLE_POLICE_RESTART, 0, true);
                        Function.Call(Hash.DISABLE_POLICE_RESTART, 1, true);
                        Function.Call(Hash.DISABLE_POLICE_RESTART, 2, true);
                        Function.Call(Hash.DISABLE_POLICE_RESTART, 3, true);
                        Function.Call(Hash.DISABLE_POLICE_RESTART, 4, true);
                        Function.Call(Hash.DISABLE_POLICE_RESTART, 5, true);
                        Function.Call(Hash.DISABLE_POLICE_RESTART, 6, true);
                    }
                    Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "cellphone_controller");
                    //Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "stats_controller");
                    Function.Call(Hash.TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, "restrictedareas");
                    LoadDict("anim@move_m@grooving@");
                    Main.LoadDict("mp_facial");
                    Main.LoadDict("anim@amb@carmeet@checkout_engine@");
                    //if (dlcInstalled)
                    {
                        //LoadTexureDict("HCCTB_txd");
                    }
                    Wait(50);
                    //Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Game.Player.Character, "anim@move_m@grooving@", 1.0f);
                    ContinueCOO = true;
                }
            }
            else
            {
                if (InLobby)
                {
                    StorySwitch = 2;
                }
                switch (StorySwitch)
                {
                    case 0://Has not created character yet
                        {
                            switch (Menu_Switch)
                            {
                                case 0://enter mugshot creater room
                                    {
                                        Mobile_Phone.CAN_OPEN_PHONE = false;
                                        Wait(3000);
                                        
                                        PlayerSwitch._SWITCH_OUT_PLAYER(Game.Player.Character, 3, 1);
                                        int i = Game.GameTime + 5000;
                                        while (Game.GameTime < i)
                                        {
                                            Wait(0);
                                        }
                                        Game.Player.Character.Position = new Vector3(405.9204f, -997.1423f, -99.00402f - 1f);
                                        Game.Player.Character.Heading = 93.56179f;
                                        Cameras.RESET_GAMEPLAY_CAM();
                                        HudHandler.HudandRadar(false, false);
                                        Function.Call((Hash)0xAD5FDF34B81BFE79);
                                        Function.Call((Hash)0x43D1680C6D19A8E9);
                                        PlayerSwitch.SWITCH_IN_PLAYER(Game.Player.Character);
                                        while (PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                                        {
                                            LOAD_SCENES.LOAD_SCENE(405.9204f, -997.1423f, -99.00402f);
                                            Wait(0);
                                        }
                                        Screen.FadeOut(0);
                                        Wait(2000);

                                        Game.Player.Character.Position = new Vector3(405.9204f, -997.1423f, -99.00402f - 1f);
                                        Game.Player.Character.Heading = 93.56179f;
                                        Cameras.RESET_GAMEPLAY_CAM();

                                        if (Function.Call<bool>(Hash.IS_NAMED_RENDERTARGET_REGISTERED, "ID_Text"))
                                        {
                                            Function.Call(Hash.RELEASE_NAMED_RENDERTARGET, "ID_Text");
                                        }
                                        Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "Mugshot_Character_Creator");
                                        Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_GTAO/MUGSHOT_ROOM");

                                        LoadDict("mp_character_creation@customise@male_a");
                                        LoadDict("mp_character_creation@customise@male_a");
                                        Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "DLC_GTAO/MUGSHOT_ROOM", false, -1);
                                        Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "Mugshot_Character_Creator", false, -1);
                                        Wait(50);

                                        unsafe
                                        {
                                            int handle = ScaleID;
                                            Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                                            ScaleID = 0;

                                            int handle2 = ScaleID2;
                                            Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle2);
                                            ScaleID2 = 0;
                                        }
                                        Script.Yield();
                                        Wait(500);
                                        ScaleID = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "MUGSHOT_BOARD_01");
                                        Wait(500);
                                        ScaleID2 = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "DIGITAL_CAMERA");
                                        Wait(500);
                                        
                                        while (Function.Call<bool>(Hash.IS_NAMED_RENDERTARGET_REGISTERED, "ID_Text"))
                                        {
                                            Function.Call(Hash.RELEASE_NAMED_RENDERTARGET, "ID_Text");
                                            Wait(0);
                                        }
                                        while (!Function.Call<bool>(Hash.IS_NAMED_RENDERTARGET_REGISTERED, "ID_Text"))
                                        {
                                            Function.Call(Hash.REGISTER_NAMED_RENDERTARGET, "ID_Text", 0);
                                            Wait(0);
                                        }
                                        Function.Call(Hash.LINK_NAMED_RENDERTARGET, Game.GenerateHash("prop_police_id_text"));
                                        RenderID = Function.Call<int>(Hash.GET_NAMED_RENDERTARGET_RENDER_ID, "ID_Text");
                                        
                                        Wall_Creator.CallFunction(ScaleID, "SET_BOARD", Main.Player_Name, "0000000001", "LOS SANTOS POLICE DEPT", "ONLINE - OFFLINE", "", 1, 1);

                                        Game.Player.ChangeModel(RequestModel(PedHash.Michael));
                                        Function.Call(Hash.SET_PED_DEFAULT_COMPONENT_VARIATION, Game.Player.Character);
                                        Wait(500);
                                        Game.Player.ChangeModel(RequestModel(PedHash.FreemodeMale01));
                                        Function.Call(Hash.SET_PED_DEFAULT_COMPONENT_VARIATION, Game.Player.Character);
                                        Function.Call(Hash.SET_PED_HEAD_BLEND_DATA, Game.Player.Character, 0, 0, 0, 0, 0, 0, 0f, 0f, 0f, false);
                                        PedOutfit outfits = new PedOutfit()
                                        {
                                            Components = new List<PedOutfit.OutfitComponent>(),
                                            Props = new List<PedOutfit.OutfitProp>()
                                        };

                                        outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)3, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                        outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)4, DrawableId = 15, TextureId = 9, PaletteId = 0 });
                                        outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)5, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                        outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)6, DrawableId = 12, TextureId = 12, PaletteId = 0 });
                                        outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)7, DrawableId = 17, TextureId = 0, PaletteId = 0 });
                                        outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)8, DrawableId = 2, TextureId = 0, PaletteId = 0 });
                                        outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)9, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                        outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)10, DrawableId = 0, TextureId = 0, PaletteId = 0 });
                                        outfits.Components.Add(new PedOutfit.OutfitComponent() { ComponentId = (PedOutfit.PedVarComp)11, DrawableId = 0, TextureId = 2, PaletteId = 0 });

                                        outfits.Equip(Game.Player.Character);
                                        
                                        Props.RemoveProps();
                                        Props.SPAWN_PROP_NO_OFFSET(RequestModel("prop_police_id_board"), Game.Player.Character.Position, Vector3.Zero, false, true, false, true, true);
                                        Props.SPAWN_PROP_NO_OFFSET(RequestModel("prop_police_id_text"), Game.Player.Character.Position, Vector3.Zero, false, true, false, true, true);
                                        Props.propList[1].AttachTo(Props.propList[0], new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f));
                                        
                                        Function.Call(Hash.SET_TIMECYCLE_MODIFIER, "mugshot");
                                        Function.Call(Hash.CLEAR_ALL_HELP_MESSAGES);
                                        
                                        while (Main.CutsceneCam == null)
                                        {
                                            Main.CutsceneCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SPLINE_CAMERA", 0);
                                            Wait(0);
                                        }
                                        World.RenderingCamera = Main.CutsceneCam;
                                        Main.CutsceneCam.FieldOfView = 50.0f;

                                        TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                                        Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "intro", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                                        Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "intro", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);
                                        Function.Call(Hash.PLAY_FACIAL_ANIM, Game.Player.Character, "intro_facial", LoadDict("mp_character_creation@customise@male_a"));

                                        Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, Props.propList[0], Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                        Function.Call((Hash)0x40FDEDB72F8293B2, Props.propList[0]);

                                        //CutsceneCam.Shake(CameraShake.Hand, 0.2f);
                                        Function.Call(Hash.SET_CAM_SPLINE_PHASE, CutsceneCam, 1f);
                                        Function.Call(Hash.SET_CAM_SPLINE_DURATION, CutsceneCam, 13000);
                                        Function.Call(Hash.ADD_CAM_SPLINE_NODE, CutsceneCam, 402.865f, -1003.475f, -98.36557f, 0f, 0f, 358.6678f, 1, 100, 0);
                                        Function.Call(Hash.ADD_CAM_SPLINE_NODE, CutsceneCam, 402.8563f, -999.9777f, -98.44982f, -6.103765f, 0.008221734f, 0.5733333f, 1, 100, 0);
                                        
                                        Screen.FadeIn(1000);
                                        Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Lights_on", "GTAO_MUGSHOT_ROOM_SOUNDS", false);
                                        while (Cameras.CAM_SPLINE_PHASE(Main.CutsceneCam) < 1f)
                                        {
                                            Function.Call((Hash)0xE6A9F00D4240B519, ScaleID, 2);
                                            Function.Call(Hash.SET_TEXT_RENDER_ID, RenderID);
                                            Function.Call((Hash)0x61BB1D9B3A95D802, 4);
                                            Function.Call((Hash)0xC6372ECD45D73BCD, 1);
                                            //Function.Call(Hash.DRAW_RECT, 0.5f, 0.5f, 1.0f, 1.0f, 0, 0, 0, 255);
                                            Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.1080f, 0.1250f, 0.3000f, 0.2500f, 255, 255, 255, 255);
                                            Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));
                                            Wait(0);
                                        }

                                        Main.CutsceneCam.Delete();
                                        Main.CutsceneCam = null;
                                        while (Main.CutsceneCam == null)
                                        {
                                            Function.Call((Hash)0xE6A9F00D4240B519, ScaleID, 2);
                                            Function.Call(Hash.SET_TEXT_RENDER_ID, RenderID);
                                            Function.Call((Hash)0x61BB1D9B3A95D802, 4);
                                            Function.Call((Hash)0xC6372ECD45D73BCD, 1);
                                            //Function.Call(Hash.DRAW_RECT, 0.5f, 0.5f, 1.0f, 1.0f, 0, 0, 0, 255);
                                            Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.1080f, 0.1250f, 0.3000f, 0.2500f, 255, 255, 255, 255);
                                            Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));
                                            Main.CutsceneCam = World.CreateCamera(new Vector3(402.8563f, -999.9777f, -98.44982f), new Vector3(-6.103765f, 0.008221734f, 0.5733333f), 50.0f);
                                            Wait(0);
                                        }
                                        //Main.CutsceneCam.Shake(CameraShake.Hand, 0.2f);
                                        World.RenderingCamera = Main.CutsceneCam;
                                        
                                        TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                                        Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "loop", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                                        Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "loop", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);
                                        
                                        Function.Call(Hash.CLEAR_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character);
                                        Function.Call(Hash.SET_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character, "mood_Happy_1", 0);


                                        Menu_Switch = 1;
                                    }
                                    break;
                                case 1://create character / rotate head left or right for better view
                                    {
                                        Function.Call((Hash)0xE6A9F00D4240B519, ScaleID, 2);
                                        Function.Call(Hash.SET_TEXT_RENDER_ID, RenderID);
                                        Function.Call((Hash)0x61BB1D9B3A95D802, 4);
                                        Function.Call((Hash)0xC6372ECD45D73BCD, 1);
                                        //Function.Call(Hash.DRAW_RECT, 0.5f, 0.5f, 1.0f, 1.0f, 0, 0, 0, 255);
                                        Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.1080f, 0.1250f, 0.3000f, 0.2500f, 255, 255, 255, 255);
                                        Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));

                                        if (Function.Call<bool>(Hash.IS_USING_KEYBOARD_AND_MOUSE, 2))
                                        {
                                            if (Game.IsControlPressed(GTA.Control.Cover))
                                            {
                                                if (Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) >= 1f || Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, LoadDict("mp_character_creation@customise@male_a"), "drop_outro", 3))
                                                {
                                                    TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "profile_l_intro", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "profile_l_intro", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);

                                                    while (Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) < 1f)
                                                    {
                                                        Function.Call((Hash)0xE6A9F00D4240B519, ScaleID, 2);
                                                        Function.Call(Hash.SET_TEXT_RENDER_ID, RenderID);
                                                        Function.Call((Hash)0x61BB1D9B3A95D802, 4);
                                                        Function.Call((Hash)0xC6372ECD45D73BCD, 1);
                                                        //Function.Call(Hash.DRAW_RECT, 0.5f, 0.5f, 1.0f, 1.0f, 0, 0, 0, 255);
                                                        Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.1080f, 0.1250f, 0.3000f, 0.2500f, 255, 255, 255, 255);
                                                        Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));
                                                        if (MenuPool != null && MenuPool.AreAnyVisible)
                                                        {
                                                            MenuPool.Process();
                                                        }
                                                        Wait(0);
                                                    }

                                                    TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "profile_l_loop", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "profile_l_loop", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);
                                                    Anims.SET_SYNCHRONIZED_SCENE_LOOPED(TestCutsceneAnim, true);

                                                    while (Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) >= 1f || Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) < 1f)
                                                    {
                                                        Function.Call((Hash)0xE6A9F00D4240B519, ScaleID, 2);
                                                        Function.Call(Hash.SET_TEXT_RENDER_ID, RenderID);
                                                        Function.Call((Hash)0x61BB1D9B3A95D802, 4);
                                                        Function.Call((Hash)0xC6372ECD45D73BCD, 1);
                                                        //Function.Call(Hash.DRAW_RECT, 0.5f, 0.5f, 1.0f, 1.0f, 0, 0, 0, 255);
                                                        Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.1080f, 0.1250f, 0.3000f, 0.2500f, 255, 255, 255, 255);
                                                        Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));
                                                        if (MenuPool != null && MenuPool.AreAnyVisible)
                                                        {
                                                            MenuPool.Process();
                                                        }
                                                        if (!Game.IsControlPressed(GTA.Control.Cover))
                                                        {
                                                            break;
                                                        }
                                                        Wait(0);
                                                    }

                                                    TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "profile_l_outro", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "profile_l_outro", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);
                                                    Anims.SET_SYNCHRONIZED_SCENE_LOOPED(TestCutsceneAnim, false);
                                                }
                                            }
                                            if (Game.IsControlPressed(GTA.Control.Context))
                                            {
                                                if (Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) >= 1f || Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, LoadDict("mp_character_creation@customise@male_a"), "drop_outro", 3))
                                                {
                                                    TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "profile_r_intro", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "profile_r_intro", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);

                                                    while (Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) < 1f)
                                                    {
                                                        Function.Call((Hash)0xE6A9F00D4240B519, ScaleID, 2);
                                                        Function.Call(Hash.SET_TEXT_RENDER_ID, RenderID);
                                                        Function.Call((Hash)0x61BB1D9B3A95D802, 4);
                                                        Function.Call((Hash)0xC6372ECD45D73BCD, 1);
                                                        //Function.Call(Hash.DRAW_RECT, 0.5f, 0.5f, 1.0f, 1.0f, 0, 0, 0, 255);
                                                        Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.1080f, 0.1250f, 0.3000f, 0.2500f, 255, 255, 255, 255);
                                                        Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));
                                                        if (MenuPool != null && MenuPool.AreAnyVisible)
                                                        {
                                                            MenuPool.Process();
                                                        }
                                                        Wait(0);
                                                    }

                                                    TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "profile_r_loop", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "profile_r_loop", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);
                                                    Anims.SET_SYNCHRONIZED_SCENE_LOOPED(TestCutsceneAnim, true);

                                                    while (Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) >= 1f || Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) < 1f)
                                                    {
                                                        Function.Call((Hash)0xE6A9F00D4240B519, ScaleID, 2);
                                                        Function.Call(Hash.SET_TEXT_RENDER_ID, RenderID);
                                                        Function.Call((Hash)0x61BB1D9B3A95D802, 4);
                                                        Function.Call((Hash)0xC6372ECD45D73BCD, 1);
                                                        //Function.Call(Hash.DRAW_RECT, 0.5f, 0.5f, 1.0f, 1.0f, 0, 0, 0, 255);
                                                        Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.1080f, 0.1250f, 0.3000f, 0.2500f, 255, 255, 255, 255);
                                                        Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));
                                                        if (MenuPool != null && MenuPool.AreAnyVisible)
                                                        {
                                                            MenuPool.Process();
                                                        }
                                                        if (!Game.IsControlPressed(GTA.Control.Context))
                                                        {
                                                            break;
                                                        }
                                                        Wait(0);
                                                    }

                                                    TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "profile_r_outro", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "profile_r_outro", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);
                                                    Anims.SET_SYNCHRONIZED_SCENE_LOOPED(TestCutsceneAnim, false);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (Game.IsControlPressed(GTA.Control.SelectWeapon))
                                            {
                                                if (Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) >= 1f || Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, LoadDict("mp_character_creation@customise@male_a"), "drop_outro", 3))
                                                {
                                                    TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "profile_l_intro", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "profile_l_intro", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);

                                                    while (Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) < 1f)
                                                    {
                                                        Function.Call((Hash)0xE6A9F00D4240B519, ScaleID, 2);
                                                        Function.Call(Hash.SET_TEXT_RENDER_ID, RenderID);
                                                        Function.Call((Hash)0x61BB1D9B3A95D802, 4);
                                                        Function.Call((Hash)0xC6372ECD45D73BCD, 1);
                                                        //Function.Call(Hash.DRAW_RECT, 0.5f, 0.5f, 1.0f, 1.0f, 0, 0, 0, 255);
                                                        Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.1080f, 0.1250f, 0.3000f, 0.2500f, 255, 255, 255, 255);
                                                        Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));
                                                        if (MenuPool != null && MenuPool.AreAnyVisible)
                                                        {
                                                            MenuPool.Process();
                                                        }
                                                        Wait(0);
                                                    }

                                                    TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "profile_l_loop", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "profile_l_loop", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);
                                                    Anims.SET_SYNCHRONIZED_SCENE_LOOPED(TestCutsceneAnim, true);

                                                    while (Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) >= 1f || Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) < 1f)
                                                    {
                                                        Function.Call((Hash)0xE6A9F00D4240B519, ScaleID, 2);
                                                        Function.Call(Hash.SET_TEXT_RENDER_ID, RenderID);
                                                        Function.Call((Hash)0x61BB1D9B3A95D802, 4);
                                                        Function.Call((Hash)0xC6372ECD45D73BCD, 1);
                                                        //Function.Call(Hash.DRAW_RECT, 0.5f, 0.5f, 1.0f, 1.0f, 0, 0, 0, 255);
                                                        Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.1080f, 0.1250f, 0.3000f, 0.2500f, 255, 255, 255, 255);
                                                        Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));
                                                        if (MenuPool != null && MenuPool.AreAnyVisible)
                                                        {
                                                            MenuPool.Process();
                                                        }
                                                        if (!Game.IsControlPressed(GTA.Control.Cover))
                                                        {
                                                            break;
                                                        }
                                                        Wait(0);
                                                    }

                                                    TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "profile_l_outro", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "profile_l_outro", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);
                                                    Anims.SET_SYNCHRONIZED_SCENE_LOOPED(TestCutsceneAnim, false);
                                                }
                                            }
                                            if (Game.IsControlPressed(GTA.Control.Cover))
                                            {
                                                if (Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) >= 1f || Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, LoadDict("mp_character_creation@customise@male_a"), "drop_outro", 3))
                                                {
                                                    TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "profile_r_intro", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "profile_r_intro", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);

                                                    while (Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) < 1f)
                                                    {
                                                        Function.Call((Hash)0xE6A9F00D4240B519, ScaleID, 2);
                                                        Function.Call(Hash.SET_TEXT_RENDER_ID, RenderID);
                                                        Function.Call((Hash)0x61BB1D9B3A95D802, 4);
                                                        Function.Call((Hash)0xC6372ECD45D73BCD, 1);
                                                        //Function.Call(Hash.DRAW_RECT, 0.5f, 0.5f, 1.0f, 1.0f, 0, 0, 0, 255);
                                                        Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.1080f, 0.1250f, 0.3000f, 0.2500f, 255, 255, 255, 255);
                                                        Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));
                                                        if (MenuPool != null && MenuPool.AreAnyVisible)
                                                        {
                                                            MenuPool.Process();
                                                        }
                                                        Wait(0);
                                                    }

                                                    TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "profile_r_loop", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "profile_r_loop", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);
                                                    Anims.SET_SYNCHRONIZED_SCENE_LOOPED(TestCutsceneAnim, true);

                                                    while (Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) >= 1f || Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) < 1f)
                                                    {
                                                        Function.Call((Hash)0xE6A9F00D4240B519, ScaleID, 2);
                                                        Function.Call(Hash.SET_TEXT_RENDER_ID, RenderID);
                                                        Function.Call((Hash)0x61BB1D9B3A95D802, 4);
                                                        Function.Call((Hash)0xC6372ECD45D73BCD, 1);
                                                        //Function.Call(Hash.DRAW_RECT, 0.5f, 0.5f, 1.0f, 1.0f, 0, 0, 0, 255);
                                                        Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.1080f, 0.1250f, 0.3000f, 0.2500f, 255, 255, 255, 255);
                                                        Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));
                                                        if (MenuPool != null && MenuPool.AreAnyVisible)
                                                        {
                                                            MenuPool.Process();
                                                        }
                                                        if (!Game.IsControlPressed(GTA.Control.Context))
                                                        {
                                                            break;
                                                        }
                                                        Wait(0);
                                                    }

                                                    TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "profile_r_outro", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "profile_r_outro", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);
                                                    Anims.SET_SYNCHRONIZED_SCENE_LOOPED(TestCutsceneAnim, false);
                                                }
                                            }
                                        }
                                        
                                        string[] randomletter = { "a", "b", "c" };
                                        if (Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, LoadDict("mp_character_creation@customise@male_a"), "drop_loop", 3))
                                        {
                                            Game.Player.Character.Task.PlayAnimation(LoadDict("mp_character_creation@customise@male_a"), "drop_clothes_" + randomletter[Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, randomletter.Length)], 8.0f, 8.0f, -1, AnimationFlags.StayInEndFrame, -1000.0f);
                                        }
                                        if (Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, LoadDict("mp_character_creation@customise@male_a"), "drop_intro", 3) || Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, LoadDict("mp_character_creation@customise@male_a"), "drop_clothes_a", 3) || Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, LoadDict("mp_character_creation@customise@male_a"), "drop_clothes_b", 3) || Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, LoadDict("mp_character_creation@customise@male_a"), "drop_clothes_c", 3))
                                        {
                                            Game.Player.Character.Task.PlayAnimation(LoadDict("mp_character_creation@customise@male_a"), "drop_loop", 8.0f, 8.0f, -1, AnimationFlags.StayInEndFrame, -1000.0f);
                                        }
                                        if (!MenuPool.AreAnyVisible)
                                        {
                                            CharCreator.Visible = !CharCreator.Visible;
                                        }
                                    }
                                    break;
                                case 2://Pose For Mugshot
                                    {
                                        while (Main.CutsceneCam2 == null)
                                        {
                                            Main.CutsceneCam2 = World.CreateCamera(Vector3.Zero, Vector3.Zero, 50.0f);
                                            Wait(0);
                                        }
                                        Function.Call(Hash.SET_CAM_ACTIVE, Main.CutsceneCam, true);
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0.1f, 1f, 0.6f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0f, 0f, 0.6f, true);
                                        Main.CutsceneCam2.FieldOfView = 43.0f;
                                        Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 200, 0, 0);
                                        Function.Call(Hash.PLAY_SOUND, -1, "Zoom_In", "MUGSHOT_CHARACTER_CREATION_SOUNDS", false, 0, true);
                                        Wall_Creator.CallFunction(ScaleID2, "SHOW_REMAINING_PHOTOS", false);
                                        Wall_Creator.CallFunction(ScaleID2, "SHOW_PHOTO_FRAME", true);
                                        Wall_Creator.CallFunction(ScaleID2, "SHOW_PHOTO_BORDER", false);
                                        Wall_Creator.CallFunction(ScaleID2, "OPEN_SHUTTER");
                                        
                                        string[] randlet = { "", "_a", "_b", "_c", "_d" };
                                        int randletnum = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, randlet.Length);
                                        Game.Player.Character.Task.ClearAllImmediately();
                                        TestCutsceneAnim = 0;
                                        TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                                        Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "outro", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                                        Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "outro", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);
                                        while (Anims.GET_SYNCHRONIZED_SCENE_PHASE(TestCutsceneAnim) < 1f)
                                        {
                                            Function.Call((Hash)0xE6A9F00D4240B519, ScaleID, 2);
                                            Function.Call(Hash.SET_TEXT_RENDER_ID, RenderID);
                                            Function.Call((Hash)0x61BB1D9B3A95D802, 4);
                                            Function.Call((Hash)0xC6372ECD45D73BCD, 1);
                                            //Function.Call(Hash.DRAW_RECT, 0.5f, 0.5f, 1.0f, 1.0f, 0, 0, 0, 255);
                                            Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.1080f, 0.1250f, 0.3000f, 0.2500f, 255, 255, 255, 255);
                                            Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));

                                            Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN, ScaleID2, 255, 255, 255, 255, 0);

                                            var InstructionButtons = new Scaleform("instructional_buttons");
                                            InstructionButtons.CallFunction("CLEAR_ALL");
                                            InstructionButtons.CallFunction("TOGGLE_MOUSE_BUTTONS", 0);
                                            InstructionButtons.CallFunction("CREATE_CONTAINER");
                                            InstructionButtons.CallFunction("SET_DATA_SLOT", 0, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 2, (int)GTA.Control.FrontendAccept, 0), "Accept");
                                            InstructionButtons.CallFunction("SET_DATA_SLOT", 1, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 2, (int)GTA.Control.PhoneCancel, 0), "Return to Menu");
                                            InstructionButtons.CallFunction("DRAW_INSTRUCTIONAL_BUTTONS", -1);
                                            InstructionButtons.Render2D();
                                            Wait(0);
                                        }

                                        TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                                        Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "outro_loop", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                                        Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "outro_loop", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);
                                        Anims.SET_SYNCHRONIZED_SCENE_LOOPED(TestCutsceneAnim, true);

                                        Menu_Switch = 3;
                                    }
                                    break;
                                case 3://Save Character / Go Back
                                    {
                                        var InstructionButtons = new Scaleform("instructional_buttons");
                                        InstructionButtons.CallFunction("CLEAR_ALL");
                                        InstructionButtons.CallFunction("TOGGLE_MOUSE_BUTTONS", 0);
                                        InstructionButtons.CallFunction("CREATE_CONTAINER");
                                        InstructionButtons.CallFunction("SET_DATA_SLOT", 0, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 2, (int)GTA.Control.FrontendAccept, 0), "Accept");
                                        InstructionButtons.CallFunction("SET_DATA_SLOT", 1, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 2, (int)GTA.Control.PhoneCancel, 0), "Return to Menu");
                                        InstructionButtons.CallFunction("DRAW_INSTRUCTIONAL_BUTTONS", -1);
                                        InstructionButtons.Render2D();

                                        Function.Call((Hash)0xE6A9F00D4240B519, ScaleID, 2);
                                        Function.Call(Hash.SET_TEXT_RENDER_ID, RenderID);
                                        Function.Call((Hash)0x61BB1D9B3A95D802, 4);
                                        Function.Call((Hash)0xC6372ECD45D73BCD, 1);
                                        //Function.Call(Hash.DRAW_RECT, 0.5f, 0.5f, 1.0f, 1.0f, 0, 0, 0, 255);
                                        Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.1080f, 0.1250f, 0.3000f, 0.2500f, 255, 255, 255, 255);
                                        Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));
                                        
                                        Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN, ScaleID2, 255, 255, 255, 255, 0);

                                        if (Game.IsControlJustPressed(GTA.Control.PhoneCancel))
                                        {
                                            Main.CutsceneCam2.InterpTo(Main.CutsceneCam, 200, 0, 0);
                                            Function.Call(Hash.PLAY_SOUND, -1, "Zoom_Out", "MUGSHOT_CHARACTER_CREATION_SOUNDS", false, 0, true);
                                            Main.CutsceneCam2.Delete();
                                            Main.CutsceneCam2 = null;
                                            
                                            TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, 404.9315f, -997.8859f, -98.8500f, 0.0, 0.0, -40f, 2);
                                            Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, TestCutsceneAnim, LoadDict("mp_character_creation@customise@male_a"), "loop", 0.0, 0.0, 0, 0, 0x447a0000, 0);
                                            Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Game.Player.Character, TestCutsceneAnim, "loop", LoadDict("mp_character_creation@customise@male_a"), 1000.0f, 0.0f, 0, 1000.0f);

                                            Menu_Switch = 1;
                                        }
                                        if (Game.IsControlJustPressed(GTA.Control.FrontendAccept))
                                        {
                                            LoadingPrompt.Show("Saving Character", LoadingSpinnerType.SocialClubSaving);
                                            Wall_Creator.CallFunction(ScaleID2, "CLOSE_SHUTTER", 250);
                                            Function.Call(Hash.PLAY_SOUND, -1, "Take_Picture", "MUGSHOT_CHARACTER_CREATION_SOUNDS", false, 0, true);
                                            Function.Call(Hash.SET_TIMECYCLE_MODIFIER, "mp_gr_int01_white");
                                            int iVar0 = Game.GameTime + 5000;//5000
                                            while (Game.GameTime < iVar0)
                                            {
                                                Function.Call((Hash)0xE6A9F00D4240B519, ScaleID, 2);
                                                Function.Call(Hash.SET_TEXT_RENDER_ID, RenderID);
                                                Function.Call((Hash)0x61BB1D9B3A95D802, 4);
                                                Function.Call((Hash)0xC6372ECD45D73BCD, 1);
                                                //Function.Call(Hash.DRAW_RECT, 0.5f, 0.5f, 1.0f, 1.0f, 0, 0, 0, 255);
                                                Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.1080f, 0.1250f, 0.3000f, 0.2500f, 255, 255, 255, 255);
                                                Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));

                                                Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN, ScaleID2, 255, 255, 255, 255, 0);
                                                Wait(0);
                                            }
                                            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                            Function.Call(Hash.CLEAR_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character);
                                            LoadingPrompt.Show("Loading Online - Offline Session", LoadingSpinnerType.SocialClubSaving);
                                            Wall_Creator.CallFunction(ScaleID2, "SHOW_PHOTO_FRAME", false);
                                            Wall_Creator.CallFunction(ScaleID2, "SHOW_PHOTO_BORDER", true);
                                            Wall_Creator.CallFunction(ScaleID2, "OPEN_SHUTTER", 250);
                                            iVar0 = Game.GameTime + 11000;//11000
                                            while (Game.GameTime < iVar0)
                                            {
                                                Function.Call((Hash)0xE6A9F00D4240B519, ScaleID, 2);
                                                Function.Call(Hash.SET_TEXT_RENDER_ID, RenderID);
                                                Function.Call((Hash)0x61BB1D9B3A95D802, 4);
                                                Function.Call((Hash)0xC6372ECD45D73BCD, 1);
                                                //Function.Call(Hash.DRAW_RECT, 0.5f, 0.5f, 1.0f, 1.0f, 0, 0, 0, 255);
                                                Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.1080f, 0.1250f, 0.3000f, 0.2500f, 255, 255, 255, 255);
                                                Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));

                                                Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN, ScaleID2, 255, 255, 255, 255, 0);
                                                Wait(0);
                                            }


                                            PedOutfit.InitHeadBlendData();
                                            PedOutfit.InitExtensionListGet();

                                            iVar0 = Game.GameTime + 2000;//11000
                                            while (Game.GameTime < iVar0)
                                            {
                                                Function.Call((Hash)0xE6A9F00D4240B519, ScaleID, 2);
                                                Function.Call(Hash.SET_TEXT_RENDER_ID, RenderID);
                                                Function.Call((Hash)0x61BB1D9B3A95D802, 4);
                                                Function.Call((Hash)0xC6372ECD45D73BCD, 1);
                                                //Function.Call(Hash.DRAW_RECT, 0.5f, 0.5f, 1.0f, 1.0f, 0, 0, 0, 255);
                                                Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.1080f, 0.1250f, 0.3000f, 0.2500f, 255, 255, 255, 255);
                                                Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));

                                                Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN, ScaleID2, 255, 255, 255, 255, 0);
                                                Wait(0);
                                            }

                                            PedOutfit.GET_FACE(Game.Player.Character);
                                            PedOutfit.GET_OUTFIT(Game.Player.Character);
                                            
                                            iVar0 = 1;
                                            float fVar0 = 0f;
                                            while (iVar0 < 20)
                                            {
                                                Main.Config.SetValue<float>("Character", $"Face Feature {iVar0}", PedOutfit.FaceFeaturePart[iVar0]);
                                                Main.Config.Save();
                                                //Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, iVar0, fVar3);
                                                iVar0++; 
                                            }
                                            
                                            Main.Config.SetValue<int>("Character", "Head Blend Data 1", PedOutfit.Data.ShapeFirst);
                                            Main.Config.Save();
                                            Main.Config.SetValue<int>("Character", "Head Blend Data 2", PedOutfit.Data.ShapeSecond);
                                            Main.Config.Save();
                                            Main.Config.SetValue<int>("Character", "Head Blend Data 3", PedOutfit.Data.SkinFirst);
                                            Main.Config.Save();
                                            
                                            Main.Config.SetValue<int>("Character", "Hair", PedOutfit.HairPart[0]);
                                            Main.Config.Save();
                                            
                                            Main.Config.SetValue<int>("Character", "Hair Color", MPHairColor);
                                            Main.Config.Save();
                                            Main.Config.SetValue<int>("Character", "Eye Color", MPEyeColor);
                                            Main.Config.Save();
                                            Main.Config.SetValue<int>("Character", "Makeup Color", MPMakeupColor);
                                            Main.Config.Save();
                                            Main.Config.SetValue<int>("Character", "Lipstick Color", MPLipstickColor);
                                            Main.Config.Save();

                                            iVar0 = 0;
                                            while (iVar0 < 11)
                                            {
                                                Config.SetValue<int>("Character", $"Overlay {iVar0}", PedOutfit.OverlayPart[iVar0]);
                                                Main.Config.Save();
                                                Config.SetValue<float>("Character", $"Overlay Opacity {iVar0}", PedOutfit.OpacityPart[iVar0]);
                                                Main.Config.Save();
                                                //Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, iVar0, fVar3);
                                                iVar0++;
                                            }
                                            
                                            iVar0 = 0;
                                            while (iVar0 < PedOutfit.OutfitPart.Length)
                                            {
                                                Config.SetValue<int>("Character", $"Outfit {iVar0}", PedOutfit.OutfitPart[iVar0]);
                                                Main.Config.Save();
                                                Config.SetValue<int>("Character", $"Outfit Variation {iVar0}", PedOutfit.OutfitPart2[iVar0]);
                                                Main.Config.Save();
                                                iVar0++;
                                            }
                                            
                                            iVar0 = 0;
                                            while (iVar0 < PedOutfit.OutfitPart3.Length)
                                            {
                                                Config.SetValue<int>("Character", $"Accessory {iVar0}", PedOutfit.OutfitPart3[iVar0]);
                                                Main.Config.Save();
                                                Config.SetValue<int>("Character", $"Accessory Variation {iVar0}", PedOutfit.OutfitPart4[iVar0]);
                                                Main.Config.Save();
                                                iVar0++;
                                            }

                                            Config.SetValue<int>("Character", "Gender", MPGender);
                                            Main.Config.Save();
                                            
                                            Screen.FadeOut(1000);
                                            iVar0 = Game.GameTime + 1000;//11000
                                            while (Game.GameTime < iVar0)
                                            {
                                                Function.Call((Hash)0xE6A9F00D4240B519, ScaleID, 2);
                                                Function.Call(Hash.SET_TEXT_RENDER_ID, RenderID);
                                                Function.Call((Hash)0x61BB1D9B3A95D802, 4);
                                                Function.Call((Hash)0xC6372ECD45D73BCD, 1);
                                                //Function.Call(Hash.DRAW_RECT, 0.5f, 0.5f, 1.0f, 1.0f, 0, 0, 0, 255);
                                                Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.1080f, 0.1250f, 0.3000f, 0.2500f, 255, 255, 255, 255);
                                                Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));

                                                Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN, ScaleID2, 255, 255, 255, 255, 0);
                                                Wait(0);
                                            }
                                            if (Main.CutsceneCam != null)
                                            {
                                                Main.CutsceneCam.Delete();
                                                Main.CutsceneCam = null;
                                            }
                                            if (Main.CutsceneCam2 != null)
                                            {
                                                Main.CutsceneCam2.Delete();
                                                Main.CutsceneCam2 = null;
                                            }
                                            World.RenderingCamera = null;

                                            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                            LoadingPrompt.Hide();

                                            Props.RemoveProps();
                                            if (Function.Call<bool>(Hash.IS_NAMED_RENDERTARGET_REGISTERED, "ID_Text"))
                                            {
                                                Function.Call(Hash.RELEASE_NAMED_RENDERTARGET, "ID_Text");
                                            }
                                            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "Mugshot_Character_Creator");
                                            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_GTAO/MUGSHOT_ROOM");

                                            unsafe
                                            {
                                                int handle = ScaleID;
                                                Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                                                ScaleID = 0;

                                                int handle2 = ScaleID2;
                                                Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle2);
                                                ScaleID2 = 0;
                                            }
                                            Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                            Screen_Effects.StopAllAnimPostFX();
                                            Function.Call(Hash.STOP_AUDIO_SCENES);
                                            Game.Player.Character.Task.ClearAllImmediately();
                                            Game.Player.Character.Position = new Vector3(-1042.083f, -2746.112f, 21.35938f - 1f);
                                            Game.Player.Character.Heading = 328.8272f;
                                            Cameras.RESET_GAMEPLAY_CAM();
                                            HudHandler.HudandRadar(true, true);

                                            Wait(1000);
                                            Menu_Switch = 4;
                                        }
                                    }
                                    break;
                                case 4://short intro into online-offline
                                    {
                                        Screen.FadeOut(0);
                                        Wait(1000);
                                        
                                        while (!Audios.TRIGGER_MUSIC_EVENT_BOOL("FM_INTRO_START"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("FM_INTRO_START");
                                            Wait(0);
                                        }

                                        //Main.FuckOffCivilians = true;
                                        
                                        Function.Call(Hash.SET_CLOCK_TIME, 19, 6, 0);
                                        
                                        

                                        int iTimer = 0;
                                        HudHandler.HudandRadar(false, false);
                                        Game.Player.CanControlCharacter = false;
                                        while (Main.CutsceneCam == null)
                                        {
                                            Main.CutsceneCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", false);
                                            Wait(0);
                                        }
                                        Main.CutsceneCam.MotionBlurStrength = 1f;
                                        while (Main.CutsceneCam2 == null)
                                        {
                                            Main.CutsceneCam2 = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", false);
                                            Wait(0);
                                        }
                                        Main.CutsceneCam2.MotionBlurStrength = 1f;

                                        Main.CutsceneCam.Detach();
                                        Main.CutsceneCam.StopPointing();
                                        Main.CutsceneCam2.Detach();
                                        Main.CutsceneCam2.StopPointing();

                                        Main.CutsceneCam.Position = new Vector3(-383.228f, -2303.435f, 54.77275f - 0.3f);
                                        Main.CutsceneCam.Rotation = new Vector3(0f, 0f, 71.39185f);
                                        Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 40f);

                                        Main.CutsceneCam2.Position = new Vector3(-353.5453f, -2273.986f, 51.67134f);
                                        Main.CutsceneCam2.Rotation = new Vector3(10f, 0f, 89.32073f);
                                        Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam2, 36f);
                                        World.RenderingCamera = Main.CutsceneCam;
                                        Function.Call(Hash.SET_CAM_ACTIVE_WITH_INTERP, Main.CutsceneCam2, Main.CutsceneCam, 15000, 3, 1);
                                        
                                        Screen.FadeIn(1000);

                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                        iTimer = Game.GameTime + 6000;
                                        while (Game.GameTime < iTimer)
                                        {
                                            Screen.ShowHelpTextThisFrame("Welcome to GTA ~r~Online~w~-~p~Offline~w~.");
                                            if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                            {
                                                LOAD_SCENES.NEW_LOAD_SCENE_START(-383.228f, -2303.435f, 54.77275f, 0.0f, 0.0f, 0.0f, 530f, 0);
                                            }
                                            Wait(0);
                                        }

                                        Main.CutsceneCam.Detach();
                                        Main.CutsceneCam.StopPointing();
                                        Main.CutsceneCam2.Detach();
                                        Main.CutsceneCam2.StopPointing();

                                        Main.CutsceneCam.Position = new Vector3(-104.7599f, -1192.881f, 131.2377f - 0.3f);
                                        Main.CutsceneCam.Rotation = new Vector3(0f, 0f, 2.333637f);
                                        Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 40f);

                                        Main.CutsceneCam2.Position = new Vector3(-18.9879f, -1108.691f, 142.1894f);
                                        Main.CutsceneCam2.Rotation = new Vector3(15f, 0f, 37.67196f);
                                        Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam2, 36f);
                                        World.RenderingCamera = Main.CutsceneCam;
                                        Function.Call(Hash.SET_CAM_ACTIVE_WITH_INTERP, Main.CutsceneCam2, Main.CutsceneCam, 15000, 3, 1);

                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                        iTimer = Game.GameTime + 8000;
                                        while (Game.GameTime < iTimer)
                                        {
                                            Screen.ShowHelpTextThisFrame("With this mod you can play gta online but for singleplayer, so no more griefers or all of the other bs that comes with normal online.");
                                            if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                            {
                                                LOAD_SCENES.NEW_LOAD_SCENE_START(-104.7599f, -1192.881f, 131.2377f, 0.0f, 0.0f, 0.0f, 530f, 0);
                                            }
                                            Wait(0);
                                        }

                                        Main.CutsceneCam.Detach();
                                        Main.CutsceneCam.StopPointing();
                                        Main.CutsceneCam2.Detach();
                                        Main.CutsceneCam2.StopPointing();
                                        
                                        Main.CutsceneCam.Position = new Vector3(-1582.727f, -1032.249f, 25.57088f);
                                        Main.CutsceneCam.Rotation = new Vector3(0f, 0f, 123.3521f);
                                        Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 40f);

                                        Main.CutsceneCam2.Position = new Vector3(-1584.004f, -1034.765f, 14.5873f);
                                        Main.CutsceneCam2.Rotation = new Vector3(15f, 0f, 123.3521f);
                                        Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam2, 36f);
                                        World.RenderingCamera = Main.CutsceneCam;
                                        Function.Call(Hash.SET_CAM_ACTIVE_WITH_INTERP, Main.CutsceneCam2, Main.CutsceneCam, 15000, 3, 1);

                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                        iTimer = Game.GameTime + 8000;
                                        while (Game.GameTime < iTimer)
                                        {
                                            Screen.ShowHelpTextThisFrame("Everything will be free meaning no shark cards and everything will be properly priced, instead of needing 9 mil for every update.");
                                            if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                            {
                                                LOAD_SCENES.NEW_LOAD_SCENE_START(-1582.727f, -1032.249f, 14.57088f, 0.0f, 0.0f, 0.0f, 530f, 0);
                                            }
                                            Wait(0);
                                        }

                                        Main.CutsceneCam.Detach();
                                        Main.CutsceneCam.StopPointing();
                                        Main.CutsceneCam2.Detach();
                                        Main.CutsceneCam2.StopPointing();

                                        Main.CutsceneCam.Position = new Vector3(-1815.689f, -608.5884f, 25.5873f);
                                        Main.CutsceneCam.Rotation = new Vector3(0f, 0f, 52.75578f);
                                        Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 40f);

                                        Main.CutsceneCam2.Position = new Vector3(-1877.89f, -561.4197f, 27.19258f);
                                        Main.CutsceneCam2.Rotation = new Vector3(15f, 0f, 57.8666f);
                                        Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam2, 36f);
                                        World.RenderingCamera = Main.CutsceneCam;
                                        Function.Call(Hash.SET_CAM_ACTIVE_WITH_INTERP, Main.CutsceneCam2, Main.CutsceneCam, 13000, 0, 0);

                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                        iTimer = Game.GameTime + 13000;
                                        while (Game.GameTime < iTimer)
                                        {
                                            Screen.ShowHelpTextThisFrame("Thank you for your continued support and for downloading my mod and I hope you enjoy your experience.");
                                            if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                            {
                                                LOAD_SCENES.NEW_LOAD_SCENE_START(-1815.689f, -608.5884f, 12.7987f, 0.0f, 0.0f, 0.0f, 530f, 0);
                                            }
                                            Wait(0);
                                        }

                                        Main.CutsceneCam.Detach();
                                        Main.CutsceneCam.StopPointing();
                                        Main.CutsceneCam2.Detach();
                                        Main.CutsceneCam2.StopPointing();

                                        Main.CutsceneCam.Position = new Vector3(-1877.89f, -561.4197f, 27.19258f);
                                        Main.CutsceneCam.Rotation = new Vector3(15f, 0f, 57.8666f);
                                        Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 36f);

                                        Main.CutsceneCam2.Position = new Vector3(-1897.446f, -558.2964f, 44.4261f);
                                        Main.CutsceneCam2.Rotation = new Vector3(10f, 0f, 96.37088f);
                                        Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam2, 40f);
                                        World.RenderingCamera = Main.CutsceneCam;
                                        Function.Call(Hash.SET_CAM_ACTIVE_WITH_INTERP, Main.CutsceneCam2, Main.CutsceneCam, 18000, 0, 0);

                                        unsafe
                                        {
                                            int handle = ScaleID;
                                            Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                                            ScaleID = 0;
                                        }
                                        Wait(500);
                                        ScaleID = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "GTAV_ONLINE");
                                        
                                        iTimer = Game.GameTime + 6000;
                                        while (Game.GameTime < iTimer)
                                        {
                                            Wait(0);
                                        }
                                        Screen_Effects.PlayAnimPostFX("MP_intro_logo", 0, false);
                                        iTimer = Game.GameTime + 500;
                                        while (Game.GameTime < iTimer)
                                        {
                                            Wait(0);
                                        }
                                        Wall_Creator.CallFunction(ScaleID, "SET_BIG_LOGO_VISIBLE", true, true);

                                        float y = 0;
                                        iTimer = Game.GameTime + 1500;
                                        while (Game.GameTime < iTimer)
                                        {
                                            y += 0.08f;
                                            Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN, ScaleID, 255, 255, 255, 255);
                                            myUIText = new TextElement("OFFLINE", new PointF(630f, 430f - y), 3f, Color.Purple, GTA.UI.Font.Pricedown, Alignment.Center, true, true);
                                            myUIText.Draw();
                                            Wait(0);
                                        }

                                        iTimer = Game.GameTime + 4000;
                                        while (Game.GameTime < iTimer)
                                        {
                                            y += 0.08f;
                                            Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN, ScaleID, 255, 255, 255, 255);
                                            myUIText = new TextElement("OFFLINE", new PointF(630f, 430f - y), 3f, Color.Purple, GTA.UI.Font.Pricedown, Alignment.Center, true, true);
                                            myUIText.Draw();

                                            Wait(0);
                                        }

                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                        if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                        {
                                            LOAD_SCENES.NEW_LOAD_SCENE_START(-1188.608f, -1644.653f, 4.373932f, 0.0f, 0.0f, 0.0f, 530f, 0);
                                        }


                                        Main.PlayerModelSet(Game.Player.Character);
                                        if (Game.Player.Character.Gender == Gender.Male)
                                        {
                                            LoadCutsceneWithFlag("mp_intro_concat", 31);
                                        }
                                        else if (Game.Player.Character.Gender == Gender.Female)
                                        {
                                            LoadCutsceneWithFlag("mp_intro_concat", 103);
                                        }

                                        Main.CutsceneExtra1 = World.CreateRandomPed(new Vector3(-1188.608f, -1644.653f, 4.373932f));
                                        Main.CutsceneExtra1.IsVisible = false;
                                        Main.CutsceneExtra2 = World.CreateRandomPed(new Vector3(-1188.608f, -1644.653f, 4.373932f));
                                        Main.CutsceneExtra2.IsVisible = false;
                                        Main.CutsceneExtra3 = World.CreateRandomPed(new Vector3(-1188.608f, -1644.653f, 4.373932f));
                                        Main.CutsceneExtra3.IsVisible = false;
                                        Main.CutsceneExtra4 = World.CreateRandomPed(new Vector3(-1188.608f, -1644.653f, 4.373932f));
                                        Main.CutsceneExtra4.IsVisible = false;
                                        Main.CutsceneExtra5 = World.CreateRandomPed(new Vector3(-1188.608f, -1644.653f, 4.373932f));
                                        Main.CutsceneExtra5.IsVisible = false;
                                        Main.CutsceneExtra6 = World.CreateRandomPed(new Vector3(-1188.608f, -1644.653f, 4.373932f));
                                        Main.CutsceneExtra6.IsVisible = false;
                                        Main.CutsceneExtra7 = World.CreateRandomPed(new Vector3(-1188.608f, -1644.653f, 4.373932f));
                                        Main.CutsceneExtra7.IsVisible = false;
                                        Main.CutsceneExtra8 = World.CreateRandomPed(new Vector3(-1188.608f, -1644.653f, 4.373932f));
                                        Main.CutsceneExtra8.IsVisible = false;

                                        if (Game.Player.Character.Gender == Gender.Male)
                                        {
                                            Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Game.Player.Character, "MP_Male_Character", 0, 0, 64); //"MP_Male_Character"
                                            Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, CutsceneExtra1, "MP_Female_Character", 0, 0, 64); //"MP_Male_Character"
                                        }
                                        else
                                        {
                                            Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Game.Player.Character, "MP_Female_Character", 0, 0, 64); //"MP_Male_Character"
                                            Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, CutsceneExtra1, "MP_Male_Character", 0, 0, 64); //"MP_Male_Character"
                                        }
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, CutsceneExtra2, "MP_Plane_Passenger_1", 0, 0, 64); //"MP_Male_Character"
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, CutsceneExtra3, "MP_Plane_Passenger_2", 0, 0, 64); //"MP_Male_Character"
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, CutsceneExtra4, "MP_Plane_Passenger_3", 0, 0, 64); //"MP_Male_Character"
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, CutsceneExtra5, "MP_Plane_Passenger_4", 0, 0, 64); //"MP_Male_Character"
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, CutsceneExtra6, "MP_Plane_Passenger_5", 0, 0, 64); //"MP_Male_Character"
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, CutsceneExtra7, "MP_Plane_Passenger_6", 0, 0, 64); //"MP_Male_Character"
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, CutsceneExtra8, "MP_Plane_Passenger_7", 0, 0, 64); //"MP_Male_Character"
                                        Function.Call(Hash.START_CUTSCENE, 0);
                                        Script.Wait(50);

                                        unsafe
                                        {
                                            int handle = ScaleID;
                                            Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                                            ScaleID = 0;
                                        }
                                        GET_MAIN_CHARACTER_WITHOUT_MODEL();
                                        PlayerModelSetBack(Game.Player.Character);
                                        while (Cutscenes.GET_CUTSCENE_TIME() < 10000)
                                        {
                                            Wait(0);
                                        }
                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                        while (Cutscenes.GET_CUTSCENE_TIME() < 30000)
                                        {
                                            Wait(0);
                                        }

                                        Screen.FadeOut(1000);
                                        Wait(1000);

                                        Function.Call(Hash.STOP_CUTSCENE_IMMEDIATELY);
                                        Function.Call(Hash.REMOVE_CUTSCENE);

                                        Main.CutsceneExtra1.Delete();
                                        Main.CutsceneExtra1 = null;
                                        Main.CutsceneExtra2.Delete();
                                        Main.CutsceneExtra2 = null;
                                        Main.CutsceneExtra3.Delete();
                                        Main.CutsceneExtra3 = null;
                                        Main.CutsceneExtra4.Delete();
                                        Main.CutsceneExtra4 = null;
                                        Main.CutsceneExtra5.Delete();
                                        Main.CutsceneExtra5 = null;
                                        Main.CutsceneExtra6.Delete();
                                        Main.CutsceneExtra6 = null;
                                        Main.CutsceneExtra7.Delete();
                                        Main.CutsceneExtra7 = null;
                                        Main.CutsceneExtra8.Delete();
                                        Main.CutsceneExtra8 = null;

                                        Main.CutsceneCam.Detach();
                                        Main.CutsceneCam.StopPointing();
                                        Main.CutsceneCam2.Detach();
                                        Main.CutsceneCam2.StopPointing();
                                        
                                        Main.CutsceneCam.Position = new Vector3(-1038.94f, -2745.068f, 20.53538f);
                                        Main.CutsceneCam.Rotation = new Vector3(0f, 0f, 108.2044f);
                                        Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 30f);

                                        Main.CutsceneCam2.Position = new Vector3(-1037.35f, -2742.746f, 19.6799f);
                                        Main.CutsceneCam2.Rotation = new Vector3(0f, 0f, 93.1311f);
                                        Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam2, 26f);
                                        World.RenderingCamera = Main.CutsceneCam;
                                        Function.Call(Hash.SET_CAM_ACTIVE_WITH_INTERP, Main.CutsceneCam2, Main.CutsceneCam, 5000, 3, 1);
                                        
                                        Wait(1000);
                                        Screen.FadeIn(1000);
                                        Game.Player.Character.Position = new Vector3(-1042.76f, -2746.389f, 21.35847f - 1f);
                                        Game.Player.Character.Heading = 330.0414f;
                                        Cameras.RESET_GAMEPLAY_CAM();
                                        Game.Player.Character.Task.ClearAll();
                                        Function.Call(Hash.FORCE_PED_MOTION_STATE, Game.Player.Character, 0xD827C3DB, true, 0, 0);
                                        Game.Player.Character.Task.GoStraightTo(new Vector3(-1037.638f, -2737.672f, 20.16465f), -1, 334.5631f, 0f);
                                        
                                        iTimer = Game.GameTime + 4000;
                                        while (Game.GameTime < iTimer)
                                        {
                                            Wait(0);
                                        }

                                        Main.CutsceneCam.Detach();
                                        Main.CutsceneCam.StopPointing();
                                        Main.CutsceneCam2.Detach();
                                        Main.CutsceneCam2.StopPointing();

                                        Main.CutsceneCam.AttachTo(Game.Player.Character, new Vector3(0.0f, 2.0f, 0.3f));
                                        Main.CutsceneCam.PointAt(Game.Player.Character, new Vector3(0.0f, 0.0f, 0.3f));
                                        Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 30f);
                                        
                                        Main.CutsceneCam2.AttachTo(Game.Player.Character, new Vector3(0.0f, 3.0f, 0.6f));
                                        Main.CutsceneCam2.PointAt(Game.Player.Character, new Vector3(0.0f, 0.0f, 0.6f));
                                        Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam2, 26f);
                                        World.RenderingCamera = Main.CutsceneCam;
                                        Function.Call(Hash.SET_CAM_ACTIVE_WITH_INTERP, Main.CutsceneCam2, Main.CutsceneCam, 5000, 0, 0);

                                        //(VehicleHash)0xA7EDE74D, new Vector3(-1026.734f, -2726.84f, 19.7794f - 1f ), -130.4012f
                                        if (PlayerVehicle != null)
                                        {
                                            PlayerVehicle.Delete();
                                            PlayerVehicle = null;
                                        }
                                        int randomcar = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, 4);
                                        while (PlayerVehicle == null)
                                        {
                                            switch (randomcar)
                                            {
                                                case 0:
                                                    {
                                                        PlayerVehicle = World.CreateVehicle((VehicleHash)0xA7EDE74D, new Vector3(-1034.609f, -2730.188f, 19.66122f), 239.668f);
                                                    }
                                                    break;
                                                case 1:
                                                    {
                                                        PlayerVehicle = World.CreateVehicle((VehicleHash)0xEC8F7094, new Vector3(-1034.609f, -2730.188f, 19.66122f), 239.668f);
                                                    }
                                                    break;
                                                case 2:
                                                    {
                                                        PlayerVehicle = World.CreateVehicle((VehicleHash)0x94B395C5, new Vector3(-1034.609f, -2730.188f, 19.66122f), 239.668f);
                                                    }
                                                    break;
                                                case 3:
                                                    {
                                                        PlayerVehicle = World.CreateVehicle(VehicleHash.Kuruma, new Vector3(-1034.609f, -2730.188f, 19.66122f), 239.668f);
                                                    }
                                                    break;
                                            }
                                            Wait(0);
                                        }
                                        if (PlayerVehicle != null)
                                        {
                                            while (PlayerVehicle.AttachedBlip == null)
                                            {
                                                PlayerVehicle.AddBlip();
                                                Wait(0);
                                            }
                                            PlayerVehicle.AttachedBlip.Sprite = BlipSprite.PersonalVehicleCar;
                                            if (PlayerVehicle.Model.IsBike || PlayerVehicle.Model.IsAmphibiousQuadBike || PlayerVehicle.Model.IsQuadBike)
                                            {
                                                PlayerVehicle.AttachedBlip.Sprite = BlipSprite.PersonalVehicleBike;
                                            }
                                            PlayerVehicle.AttachedBlip.Color = BlipColor.White;
                                            PlayerVehicle.AttachedBlip.Name = "Personal Vehicle";

                                            MPVehicleLoadout.SAVE_VEHICLE(PlayerVehicle, "scripts\\CruelMastersOnlineOfflineAssets\\Vehicles\\CurrentVehicle.xml");
                                        }

                                        iTimer = Game.GameTime + 2500;
                                        while (Game.GameTime < iTimer)
                                        {
                                            Wait(0);
                                        }

                                        Function.Call(Hash.SET_FOLLOW_PED_CAM_VIEW_MODE, 0);
                                        Cameras.RESET_GAMEPLAY_CAM();
                                        Game.Player.Character.Task.ClearAll();
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 0.7983f, -0.9226f, 0.5243f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, -0.2782f, 1.8498f, 0.1298f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 30f);
                                        Function.Call(Hash.SET_CAM_NEAR_CLIP, Main.CutsceneCam2, 0.15f);
                                        Function.Call(Hash.SET_GAMEPLAY_CAM_RELATIVE_HEADING, 0f);
                                        Function.Call(Hash.SET_GAMEPLAY_CAM_RELATIVE_PITCH, 0f, 1f);

                                        Main.CutsceneCam2.Detach();
                                        Main.CutsceneCam2.StopPointing();
                                        Main.CutsceneCam2.Position = new Vector3(GameplayCamera.Position.X, GameplayCamera.Position.Y, GameplayCamera.Position.Z);
                                        Main.CutsceneCam2.Rotation = new Vector3(GameplayCamera.Rotation.X, GameplayCamera.Rotation.Y, GameplayCamera.Rotation.Z);
                                        Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam2, GameplayCamera.FieldOfView);
                                        Function.Call(Hash.SET_CAM_ACTIVE, Main.CutsceneCam, true);
                                        Function.Call(Hash.SET_CAM_ACTIVE_WITH_INTERP, Main.CutsceneCam2, Main.CutsceneCam, 3000, 3, 1);
                                        Function.Call((Hash)0x1CBA05AE7BD7EE05, 7f);
                                        Function.Call(Hash.SET_HIDOF_OVERRIDE, 0, 0, 0f, 0f, 0f, 0f);

                                        iTimer = Game.GameTime + 3000;
                                        while (Game.GameTime < iTimer)
                                        {
                                            HudHandler.HudandRadar(false, false);
                                            Wait(0);
                                        }
                                        Main.CutsceneCam.Delete();
                                        Main.CutsceneCam = null;
                                        Main.CutsceneCam2.Delete();
                                        Main.CutsceneCam2 = null;
                                        Function.Call(Hash.SET_FOLLOW_PED_CAM_VIEW_MODE, 0);
                                        Function.Call(Hash.RENDER_SCRIPT_CAMS, false, true, 1000, false, false, 0);
                                        Wait(1000);
                                        Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                        Screen_Effects.PlayAnimPostFX("MinigameTransitionOut", 1000, false);
                                        Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Hit", "RESPAWN_SOUNDSET", true);
                                        Game.Player.CanControlCharacter = true;
                                        HudHandler.HudandRadar(true, true);

                                        MPRank.SET_RP(0);
                                        MPRank.SET_RANK(1);

                                        MPCash.SET_CASH(5000);
                                        MPCash.SET_BANK(20000);

                                        Game.Player.Character.Weapons.RemoveAll();
                                        Game.Player.Character.Weapons.Give(WeaponHash.Pistol, 10000, false, true);
                                        MPLoadout.SAVE_CURRENT_LOADOUT();

                                        StorySwitch = 1;
                                        Mobile_Phone.CAN_OPEN_PHONE = true;
                                        Main.SET_INI_VALUE_INT(Main.Config, "Main", "Progression", StorySwitch);
                                        Screen.ShowHelpText("You can open up the session menu using the 'L' Key to then start your GTA ~r~Online~w~-~p~Offline~w~ Session.", 7000, true, false);
                                    }
                                    break;
                            }
                        }
                        break;
                    case 1://enter new session
                        {
                            
                        }
                        break;
                    case 2://Freeroam
                        {
                            InLobby = true;
                            if (!Main.OnMission)
                            {

                            }
                        }
                        break;
                }
                if (Mobile_Phone.PHONE_OPEN && Mobile_Phone.MobileID != -1)
                {

                }
            }
        }
        
        
        public void onShutdown(object sender, EventArgs e)
        {
            var A_0 = true;
            if (A_0)
            {
                //OutfitOFF(Game.Player.Character);
                //MaskOFF(Game.Player.Character);
                #region Vehicles
                if (PlayerVehicle != null)
                {
                    PlayerVehicle.Delete();
                }
                if (Manchez != null)
                {
                    Manchez.Delete();
                }
                #endregion
                #region Peds
                //RemoveEnemyPeds();

                if (CutsceneExtra1 != null)
                {
                    CutsceneExtra1.Delete();
                }
                if (CutsceneExtra2 != null)
                {
                    CutsceneExtra2.Delete();
                }
                if (CutsceneExtra3 != null)
                {
                    CutsceneExtra3.Delete();
                }
                if (CutsceneExtra4 != null)
                {
                    CutsceneExtra4.Delete();
                }
                if (CutsceneExtra5 != null)
                {
                    CutsceneExtra5.Delete();
                }
                if (CutsceneExtra6 != null)
                {
                    CutsceneExtra6.Delete();
                }
                if (CutsceneExtra7 != null)
                {
                    CutsceneExtra7.Delete();
                }
                if (CutsceneExtra8 != null)
                {
                    CutsceneExtra8.Delete();
                }
                if (CutsceneExtra9 != null)
                {
                    CutsceneExtra9.Delete();
                }
                if (CutsceneExtra10 != null)
                {
                    CutsceneExtra10.Delete();
                }
                #endregion
                #region Props
                if (Container != null)
                {
                    Container.Delete();
                }
                if (ContainerColl != null)
                {
                    ContainerColl.Delete();
                }
                if (Lock != null)
                {
                    Lock.Delete();
                }

                if (FakeCutsceneProp1 != null)
                {
                    FakeCutsceneProp1.Delete();
                }
                if (FakeCutsceneProp2 != null)
                {
                    FakeCutsceneProp2.Delete();
                }
                if (FakeCutsceneProp3 != null)
                {
                    FakeCutsceneProp3.Delete();
                }
                if (FakeCutsceneProp4 != null)
                {
                    FakeCutsceneProp4.Delete();
                }
                if (FakeCutsceneProp5 != null)
                {
                    FakeCutsceneProp5.Delete();
                }
                if (FakeCutsceneProp6 != null)
                {
                    FakeCutsceneProp6.Delete();
                }
                if (FakeCutsceneProp7 != null)
                {
                    FakeCutsceneProp7.Delete();
                }
                if (FakeCutsceneProp8 != null)
                {
                    FakeCutsceneProp8.Delete();
                }
                if (FakeCutsceneProp9 != null)
                {
                    FakeCutsceneProp9.Delete();
                }
                if (FakeCutsceneProp10 != null)
                {
                    FakeCutsceneProp10.Delete();
                }
                #endregion
                #region Blips
                if (missionBlip != null)
                {
                    missionBlip.Delete();
                }
                if (ImportantStoryBlip != null)
                {
                    ImportantStoryBlip.Delete();
                }
                #endregion
                #region Cameras
                if (Main.CutsceneCam != null)
                {
                    CutsceneCam.Delete();
                }
                if (Main.CutsceneCam2 != null)
                {
                    CutsceneCam2.Delete();
                }
                if (Main.CutsceneCam3 != null)
                {
                    CutsceneCam3.Delete();
                }
                if (Main.CutsceneCam4 != null)
                {
                    CutsceneCam4.Delete();
                }
                if (Main.MenuCam != null)
                {
                    MenuCam.Delete();
                }
                #endregion
                #region Pickups
                #endregion
                #region Sound Players
                #endregion
                #region Cleanups
                if (Function.Call<bool>(Hash.IS_NAMED_RENDERTARGET_REGISTERED, "ID_Text"))
                {
                    Function.Call(Hash.RELEASE_NAMED_RENDERTARGET, "ID_Text");
                }
                #endregion
                #region PTFX
                if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, PTFXID))
                {
                    Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, PTFXID, 0);
                }
                if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, PTFXID2))
                {
                    Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, PTFXID2, 0);
                }
                if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, PTFXID3))
                {
                    Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, PTFXID3, 0);
                }
                if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, PTFXID4))
                {
                    Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, PTFXID4, 0);
                }
                if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, PTFXID5))
                {
                    Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, PTFXID5, 0);
                }
                if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, PTFXID6))
                {
                    Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, PTFXID6, 0);
                }
                #endregion
                Blip[] allblips = World.GetAllBlips((BlipSprite)1);
                foreach (Blip b in allblips)
                {
                    if (b != null)
                    {
                        b.Delete();
                    }
                }
                if (ContactText.IsLoaded)
                {
                    ContactText.Dispose();
                }
                HudHandler.CLEAR_GPS_ROUTE();
                Function.Call(Hash.SET_PED_USING_ACTION_MODE, Game.Player.Character, false, -1, "DEFAULT_ACTION");
                Function.Call(Hash.SET_PED_STEALTH_MOVEMENT, Game.Player.Character, false, "DEFAULT_ACTION");
                Screen_Effects.StopAllAnimPostFX();
                HudHandler.Remove_Wanted_Level();
                HudHandler.Set_Fake_Wanted_Level(0);
                Interiors.IslandLoad(false);
                //Function.Call(Hash.DELETE_ALL_TRAINS);
                //GetPedOutfitOnline(Game.Player.Character);
                Main.PlayerModelSetBack(Game.Player.Character);
                LoadingPrompt.Hide();
                Audio.StopSound(Alarms.Alarm_Sounds);
                Audio.ReleaseSound(Alarms.Alarm_Sounds);
                Alarms.STOP_ALL_ALARMS(true);
                Audio.StopSound(SoundID);
                Audio.ReleaseSound(SoundID);
                Audio.StopSound(SoundID2);
                Audio.ReleaseSound(SoundID2);
                Audio.StopSound(SoundID3);
                Audio.ReleaseSound(SoundID3);
                Audio.StopSound(SoundID4);
                Audio.ReleaseSound(SoundID4);
                Audio.StopSound(SoundID5);
                Audio.ReleaseSound(SoundID5);
                Audio.StopSound(SoundID6);
                Audio.ReleaseSound(SoundID6);
                if (ScaleID != 0)
                {
                    unsafe
                    {
                        int handle = ScaleID;
                        Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                        ScaleID = 0;
                    }
                }
                if (ScaleID2 != 0)
                {
                    unsafe
                    {
                        int handle = ScaleID2;
                        Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                        ScaleID2 = 0;
                    }
                }
                if (ScaleID3 != 0)
                {
                    unsafe
                    {
                        int handle = ScaleID3;
                        Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                        ScaleID3 = 0;
                    }
                }
                if (ScaleID4 != 0)
                {
                    unsafe
                    {
                        int handle = ScaleID4;
                        Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                        ScaleID4 = 0;
                    }
                }
                if (ScaleID5 != 0)
                {
                    unsafe
                    {
                        int handle = ScaleID5;
                        Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                        ScaleID5 = 0;
                    }
                }
                if (ScaleID6 != 0)
                {
                    unsafe
                    {
                        int handle = ScaleID6;
                        Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                        ScaleID6 = 0;
                    }
                }
                Function.Call(Hash.RESET_WANTED_LEVEL_DIFFICULTY, Game.Player);
                Function.Call(Hash.CANCEL_ALL_POLICE_REPORTS);
                Function.Call(Hash.STOP_CUTSCENE_IMMEDIATELY);
                Function.Call(Hash.REMOVE_CUTSCENE);
                Game.Player.Character.IsCollisionEnabled = true;
                Game.Player.Character.IsPositionFrozen = false;
                Function.Call(Hash.RESET_PED_MOVEMENT_CLIPSET, Game.Player.Character, 1.0f);
                for (int i = 0; i <= 32; i++)
                {
                    if (Function.Call<bool>(Hash.IS_PEDHEADSHOT_VALID, i))
                    {
                        Function.Call(Hash.UNREGISTER_PEDHEADSHOT, i);
                    }
                }
                Function.Call(Hash.SET_NIGHTVISION, false);
                Function.Call(Hash.SET_ARTIFICIAL_LIGHTS_STATE, false);
                Function.Call(Hash.SET_TIME_SCALE, 1f);
                Game.Player.Character.CanSwitchWeapons = true;
                Function.Call(Hash.CLEAR_TIMECYCLE_MODIFIER);
                Function.Call(Hash.STOP_PLAYER_SWITCH);
                Function.Call(Hash.STOP_AUDIO_SCENES);
                Game.Player.Character.Task.ClearAll();
                Game.Player.Character.IsVisible = true;
                Game.Player.CanControlCharacter = true;
                Function.Call(Hash.SET_PLAYER_CONTROL, Game.Player, true, 0);
                Function.Call(Hash.SET_WIDESCREEN_BORDERS, false, 0);
                HudHandler.HudandRadar(true, true);
                World.RenderingCamera = null;
                World.DestroyAllCameras();
                if (Screen.IsFadedOut || Screen.IsFadingOut)
                {
                    Screen.FadeIn(0);
                }
                Function.Call((Hash)0xEFACC8AEF94430D5, 0f);
                Function.Call(Hash.PAUSE_CLOCK, false);
                GlobalVariable.Get(4).Write<int>(0);
                Function.Call(Hash.DISABLE_HOSPITAL_RESTART​, 0, false);
                Function.Call(Hash.DISABLE_HOSPITAL_RESTART​, 1, false);
                Function.Call(Hash.DISABLE_HOSPITAL_RESTART​, 2, false);
                Function.Call(Hash.DISABLE_HOSPITAL_RESTART​, 3, false);
                Function.Call(Hash.DISABLE_HOSPITAL_RESTART​, 4, false);

                Function.Call(Hash.DISABLE_POLICE_RESTART, 0, false);
                Function.Call(Hash.DISABLE_POLICE_RESTART, 1, false);
                Function.Call(Hash.DISABLE_POLICE_RESTART, 2, false);
                Function.Call(Hash.DISABLE_POLICE_RESTART, 3, false);
                Function.Call(Hash.DISABLE_POLICE_RESTART, 4, false);
                Function.Call(Hash.DISABLE_POLICE_RESTART, 5, false);
                Function.Call(Hash.DISABLE_POLICE_RESTART, 6, false);
                Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                Function.Call(Hash.TRIGGER_MUSIC_EVENT, "GTA_ONLINE_STOP_SCORE");
                if (Function.Call<Hash>(Hash.GET_CURRENT_FRONTEND_MENU_VERSION) == Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"))
                {
                    Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), false, -1);
                }
                if (Function.Call<bool>(Hash.IS_PLAYER_SWITCH_IN_PROGRESS))
                {
                    Function.Call(Hash.STOP_PLAYER_SWITCH);
                }
                Function.Call(Hash.SET_HIDOF_OVERRIDE, 0, 0, 0f, 0f, 0f, 0f);
                Function.Call(Hash.FORCE_CLOSE_TEXT_INPUT_BOX);
                Function.Call(Hash.SET_RADAR_ZOOM_PRECISE, 0f);
            }
        }
        public void onKeyDown(object sender, KeyEventArgs e)//remember to switch the menu back to storyswitch == 1 so they can actually start the mod
        {
            {
                #region Debuging Stuff
                if (e.KeyCode == Keys.Delete)
                {
                    if (DEBUG)
                    {
                        Function.Call(Hash.STOP_CUTSCENE_IMMEDIATELY);
                        if (Game.IsWaypointActive)
                        {
                            Vector3 waypointPos = World.WaypointPosition;
                            if (Game.Player.Character.CurrentVehicle == null)
                            {
                                Game.Player.Character.Position = waypointPos;
                                Game.Player.Character.IsPositionFrozen = true;
                            }
                            else if (Game.Player.Character.CurrentVehicle != null)
                            {
                                Game.Player.Character.CurrentVehicle.Position = waypointPos;
                                Game.Player.Character.CurrentVehicle.IsPositionFrozen = true;
                            }
                            TeleTimer = Game.GameTime + 600;
                            TeleSwitch = 1;
                        }
                        if (!Game.IsWaypointActive)
                        {
                            Notification.Show("Waypoint not set");
                        }
                    }
                }
                if (e.KeyCode == Keys.J)
                {
                    Screen.FadeIn(300);
                    if (!Function.Call<bool>(Hash.HAS_CUTSCENE_FINISHED))
                    {
                        if (Game.IsControlPressed(GTA.Control.VehicleHandbrake))
                        {
                            Function.Call(Hash.STOP_CUTSCENE, true);
                        }
                    }
                    if (DEBUG)
                    {
                        if (Game.Player.Character != null)
                        {
                            //Function.Call(Hash.TRIGGER_MUSIC_EVENT, "GTA_ONLINE_STOP_SCORE");
                            Thread thread;
                            if (Game.Player.Character.IsInVehicle())
                            {
                                Notification.Show(Game.Player.Character.CurrentVehicle.IsSeatFree(VehicleSeat.LeftRear).ToString());
                                Notification.Show(Function.Call<int>(Hash.GET_VEHICLE_MODEL_NUMBER_OF_SEATS, Game.Player.Character.CurrentVehicle.Model.Hash).ToString());
                                if (Game.Player.Character.CurrentVehicle != null) Notification.Show("" + Game.Player.Character.CurrentVehicle.Model.Hash);
                                thread = new Thread(() => Clipboard.SetText(Game.Player.Character.CurrentVehicle.Position.X + "f, " + Game.Player.Character.CurrentVehicle.Position.Y + "f, " + Game.Player.Character.CurrentVehicle.Position.Z + "f" + ", " + Game.Player.Character.CurrentVehicle.Heading));
                            }
                            else
                            {
                                Notification.Show("" + Game.Player.Character.Model.Hash);
                                Function.Call(Hash.STOP_CUTSCENE);
                                thread = new Thread(() => Clipboard.SetText(Game.Player.Character.Position.X + "f, " + Game.Player.Character.Position.Y + "f, " + Game.Player.Character.Position.Z + "f" + ", " + Game.Player.Character.Heading));
                            }
                            thread.SetApartmentState(ApartmentState.STA); //Set the thread to STA
                            thread.Start();
                            thread.Join();
                        }
                    }
                }
                if (e.KeyCode == Keys.L)
                {
                    if (DEBUG)
                    {
                        RaycastResult result = World.GetCrosshairCoordinates();

                        if (result.HitEntity != null)
                        {
                            //GTA.UI.ShowSubtitle("you are aiming at an entity");
                            GTA.UI.Screen.ShowSubtitle("you are aiming at an entity");
                            if (Function.Call<int>(Hash.GET_ENTITY_TYPE, result.HitEntity) == 2)
                            {
                                CopyToClipboard($"(VehicleHash){result.HitEntity.Model}, new Vector3({result.HitEntity.Position.X}f, {result.HitEntity.Position.Y}f, {result.HitEntity.Position.Z}f - 1f ), {result.HitEntity.Rotation.Z}f");
                            }
                            if (Function.Call<int>(Hash.GET_ENTITY_TYPE, result.HitEntity) == 3)
                            {
                                CopyToClipboard($"Main.RequestModel({result.HitEntity.Model.GetHashCode()}), new Vector3({result.HitEntity.Position.X}f, {result.HitEntity.Position.Y}f, {result.HitEntity.Position.Z}f ), new Vector3({result.HitEntity.Rotation.X}f, {result.HitEntity.Rotation.Y}f, {result.HitEntity.Rotation.Z}f)");
                            }
                            if (Function.Call<int>(Hash.GET_ENTITY_TYPE, result.HitEntity) == 1)
                            {
                                CopyToClipboard($"(PedHash){result.HitEntity.Model}, new Vector3({result.HitEntity.Position.X}f, {result.HitEntity.Position.Y}f, {result.HitEntity.Position.Z}f - 1f), {result.HitEntity.Rotation.Z}f");
                            }
                        }
                    }
                }
                #endregion
            }
            if (Function.Call<bool>(Hash.GET_PED_STEALTH_MOVEMENT, Game.Player.Character))
            {
                Function.Call(Hash.SET_PED_STEALTH_MOVEMENT, Game.Player.Character, 1, "DEFAULT_ACTION");
            }
            if (Main.StorySwitch == 1)
            {
                if (e.KeyCode == Keys.L)
                {
                    Main.MainMenu.Visible = !Main.MainMenu.Visible;
                }

            }
        }
        
        #region Methods

        public static void TriggerGuard(Ped Guard)
        {
            if (Guard != null)
            {
                if (Guard.IsAlive)
                {
                    if (Guard.AttachedBlip != null)
                    {
                        Function.Call(Hash.SET_BLIP_SHOW_CONE, Guard.AttachedBlip.Handle, false);

                    }
                    Function.Call(Hash.SET_PED_ALERTNESS, Guard, 3);
                    Function.Call(Hash.TASK_COMBAT_PED, Guard, Game.Player.Character, 0, 16);
                }
            }
        }
        public static void CallFunctionFrontend(string name, params object[] args)
        {
            while (!Function.Call<bool>((Hash)0xAB58C27C2E6123C6, name))
            {
                Wait(0);
            }
            pushArgs(args);
            Function.Call((Hash)0xc6796a8ffa375e53);
        }
        public static void CallFunctionFrontendHeader(string name, params object[] args)
        {
            while (!Function.Call<bool>((Hash)0xB9449845F73F5E9C, name))
            {
                Wait(0);
            }
            pushArgs(args);
            Function.Call((Hash)0xc6796a8ffa375e53);
        }
        protected static void pushArgs(object[] args)
        {
            foreach (object x in args)
            {
                if (x.GetType() == typeof(int)) Function.Call<int>((Hash)0xc3d0841a0cc546a6, (int)x);
                else if (x.GetType() == typeof(float)) Function.Call((Hash)0xd69736aae04db51a, (float)x);
                else if (x.GetType() == typeof(double)) Function.Call((Hash)0xd69736aae04db51a, (float)(double)x);
                else if (x.GetType() == typeof(bool)) Function.Call((Hash)0xc58424ba936eb458, (bool)x);
                else if (x.GetType() == typeof(string))
                {
                    Function.Call((Hash)0x80338406f3475e55, "STRING");
                    Function.Call((Hash)0x6c188be134e074aa, (string)x);
                    Function.Call((Hash)0x362e2d3fe93a9959);
                }
                else if (x.GetType() == typeof(char))
                {
                    Function.Call((Hash)0x80338406f3475e55, "STRING");
                    Function.Call((Hash)0x6c188be134e074aa, ((char)x).ToString());
                    Function.Call((Hash)0x362e2d3fe93a9959);
                }
            }
        }

        public static void PlayerModelSet(Ped ped)
        {
            if (IsFreemodeMale || IsFreemodeFemale)
            {
                unsafe
                {
                    var PedPtr = (ulong)ped.MemoryAddress;
                    ulong SkinPtr = *((ulong*)(PedPtr + 0x20));
                    *((ulong*)(SkinPtr + 0x18)) = (ulong)PedHash.Michelle;
                }
            }
        }
        public static void PlayerModelSetBack(Ped ped)
        {
            unsafe
            {
                if (IsFreemodeMale)
                {
                    var PedPtr = (ulong)ped.MemoryAddress;
                    ulong SkinPtr = *((ulong*)(PedPtr + 0x20));
                    *((ulong*)(SkinPtr + 0x18)) = (ulong)PedHash.FreemodeMale01;
                }
                if (IsFreemodeFemale)
                {
                    var PedPtr = (ulong)ped.MemoryAddress;
                    ulong SkinPtr = *((ulong*)(PedPtr + 0x20));
                    *((ulong*)(SkinPtr + 0x18)) = (ulong)PedHash.FreemodeFemale01;
                }
            }
        }
        public static void GetPedOutfitOnline(Ped NonCutscene)
        {
            if (NonCutscene != null)
            {
                //SetPedOutfitOnline(Game.Player.Character);
                Function.Call(Hash.SET_PED_HEAD_BLEND_DATA, NonCutscene, 44, 27, 0, 0, 0, 0, 0f, 0f, 0f, false);
                Function.Call(Hash.SET_PED_HAIR_TINT, NonCutscene, 19, 0);
                Function.Call(Hash.SET_HEAD_BLEND_EYE_COLOR, NonCutscene, 1);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 0, 0, 0, 1);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 1, 0, 0, 1);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 2, 54, 0, 2);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 3, 1, 0, 1);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 4, 24, 0, 1);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 5, 0, 0, 1);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 6, 10, 0, 1);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 7, 38, 14, 1);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 8, 38, 14, 1);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 9, 154, 0, 1);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 10, 0, 0, 1);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 11, 322, 0, 1);

                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 0, 0, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 1, 1, 19, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 2, 1, 19, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 3, 0, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 4, 2, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 5, 2, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 6, 0, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 7, 0, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 8, 2, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 9, 0, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 10, 1, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 11, 0, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 12, 0, 0, 0);

                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 0, 0f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 1, 1f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 2, -1f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 3, 1f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 4, 0f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 5, 0f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 6, 1f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 7, -1f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 8, -1f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 9, -1f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 10, 1f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 11, -1f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 12, 1f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 13, -1f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 14, -1f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 15, 1f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 16, 1f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 17, -1f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 18, 1f);
                Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 19, -1f);

                Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 0, -1, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 1, 19, 1f);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 2, 14, 1f);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 3, -1, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 4, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 5, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 6, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 7, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 8, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 9, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 10, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 11, 0, 0);
                Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 12, 0, 0);
                Function.Call(Hash.SET_PED_PROP_INDEX, NonCutscene, 0, 27, 0, true);
                Function.Call(Hash.SET_PED_PROP_INDEX, NonCutscene, 1, 19, 7, true);

                //Notification.Show("outfit saved");
            }
        }
        public static void GetJoeOutfit(Ped NonCutscene)
        {
            Function.Call(Hash.SET_PED_HEAD_BLEND_DATA, NonCutscene, 44, 27, 0, 0, 0, 0, 0f, 0f, 0f, false);
            Function.Call(Hash.SET_PED_HAIR_TINT, NonCutscene, 19, 0);
            Function.Call(Hash.SET_HEAD_BLEND_EYE_COLOR, NonCutscene, 1);
            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 0, 0, 0, 1);
            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 1, 0, 0, 1);
            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 2, 54, 0, 2);
            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 3, 30, 0, 1);
            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 4, 24, 1, 1);
            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 5, 0, 0, 1);
            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 6, 10, 0, 1);
            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 7, -1, -1, 1);
            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 8, 38, 14, 1);
            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 9, 0, 0, 1);
            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 10, 0, 0, 1);
            Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 11, 242, 0, 1);

            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 0, 0, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 1, 1, 19, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 2, 1, 19, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 3, 0, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 4, 2, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 5, 2, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 6, 0, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 7, 0, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 8, 2, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 9, 0, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 10, 1, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 11, 0, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY_TINT, NonCutscene, 12, 0, 0, 0);

            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 0, -1f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 1, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 2, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 3, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 4, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 5, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 6, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 7, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 8, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 9, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 10, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 11, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 12, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 13, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 14, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 15, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 16, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 17, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 18, 0f);
            Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, 19, 0f);

            Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 0, -1, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 1, 20, 1f);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 2, 14, 1f);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 3, -1, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 4, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 5, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 6, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 7, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 8, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 9, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 10, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 11, 0, 0);
            Function.Call(Hash.SET_PED_HEAD_OVERLAY, NonCutscene, 12, 0, 0);
            Function.Call(Hash.SET_PED_PROP_INDEX, NonCutscene, 0, 26, 0, true);
            Function.Call(Hash.SET_PED_PROP_INDEX, NonCutscene, 1, 17, 0, true);
        }
        public static void SET_MISSION_CONDITIONS(int hour, int minutes, int weather, bool pauseclock)
        {
            Function.Call(Hash.PAUSE_CLOCK, false);
            Function.Call(Hash.SET_CLOCK_TIME, hour, minutes, 0);
            World.Weather = (Weather)weather;
            Function.Call(Hash.PAUSE_CLOCK, pauseclock);
        }
        public static void SET_MISSION(bool noCopsOnMission, bool fuckOffCivilians, bool radioAllowed, bool onMission)
        {
            Main.NoCopsOnMission = noCopsOnMission;
            Main.FuckOffCivilians = fuckOffCivilians;
            Main.RadioAllowed = radioAllowed;
            Main.OnMission = onMission;
        }

        public static void SET_INI_VALUE_INT(ScriptSettings config, string section, string name, int value)
        {
            config.SetValue(section, name, value);
            config.Save();
        }
        public static void SET_INI_VALUE_STRING(ScriptSettings config, string section, string name, string value)
        {
            config.SetValue(section, name, value);
            config.Save();
        }
        public static void SET_INI_VALUE_FLOAT(ScriptSettings config, string section, string name, float value)
        {
            config.SetValue(section, name, value);
            config.Save();
        }
        public static void SET_INI_VALUE_BOOL(ScriptSettings config, string section, string name, bool value)
        {
            config.SetValue(section, name, value);
            config.Save();
        }
        public static void GetPedDuffelBagOn(Ped NonCutscene)
        {
            if (IsFreemodeMale || IsFreemodeFemale)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 5, 82, 0, 1);
            }
            if (Game.Player.Character.Model == PedHash.Franklin || Game.Player.Character.Model == PedHash.Michael || Game.Player.Character.Model == PedHash.Trevor)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 9, 1, 0, 2);
            }
        }
        public static void GetPedDuffelBagOff(Ped NonCutscene)
        {
            if (IsFreemodeMale || IsFreemodeFemale)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 5, 0, 0, 1);
            }
            if (Game.Player.Character.Model == PedHash.Franklin || Game.Player.Character.Model == PedHash.Michael || Game.Player.Character.Model == PedHash.Trevor)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 9, 0, 0, 2);
            }
        }
        public static Model RequestModel(int Name)
        {

            var model = new Model(Name);
            model.Request(10000);

            // Check the model is valid
            if (model.IsInCdImage && model.IsValid)
            {
                // Ensure the model is loaded before we try to create it in the world
                while (!model.IsLoaded) Script.Wait(50);
                return model;




            }

            // Mark the model as no longer needed to remove it from memory.

            model.MarkAsNoLongerNeeded();
            return model;
        }
        public static Model RequestModel(PedHash Name)
        {

            var model = new Model(Name);
            model.Request(10000);

            // Check the model is valid
            if (model.IsInCdImage && model.IsValid)
            {
                // Ensure the model is loaded before we try to create it in the world
                while (!model.IsLoaded) Script.Wait(50);
                return model;




            }

            // Mark the model as no longer needed to remove it from memory.

            model.MarkAsNoLongerNeeded();
            return model;
        }
        public static Model RequestModel(VehicleHash Name)
        {

            var model = new Model(Name);
            model.Request(10000);

            // Check the model is valid
            if (model.IsInCdImage && model.IsValid)
            {
                // Ensure the model is loaded before we try to create it in the world
                while (!model.IsLoaded) Script.Wait(50);
                return model;




            }

            // Mark the model as no longer needed to remove it from memory.

            model.MarkAsNoLongerNeeded();
            return model;
        }
        public static Model RequestModel(string Name)
        {

            var model = new Model(Name);
            model.Request(250);

            // Check the model is valid
            if (model.IsInCdImage && model.IsValid)
            {
                // Ensure the model is loaded before we try to create it in the world
                while (!model.IsLoaded) Script.Wait(50);
                return model;




            }

            // Mark the model as no longer needed to remove it from memory.

            model.MarkAsNoLongerNeeded();
            return model;
        }
        public static Hash joaat(string hash) => Function.Call<Hash>(Hash.GET_HASH_KEY, hash);
        public static void FindObjectModel(float distance)
        {
            Prop[] PP = World.GetNearbyProps(Game.Player.Character.Position, distance);
            foreach (Prop P in PP)
            {
                GTA.World.DrawMarker(MarkerType.DebugSphere, P.Position, Vector3.Zero, Vector3.Zero, new Vector3(0.35f, 0.35f, 35f), Color.LightBlue);
                if (Game.IsControlJustPressed(GTA.Control.VehicleDuck))
                {

                    Notification.Show("P.Model" + P.Model.Hash);

                }
            }
        }
        public static void FindObjectPos(float distance)
        {
            Prop[] PP = World.GetNearbyProps(Game.Player.Character.Position, distance);
            foreach (Prop P in PP)
            {
                GTA.World.DrawMarker(MarkerType.DebugSphere, P.Position, Vector3.Zero, Vector3.Zero, new Vector3(0.35f, 0.35f, 35f), Color.LightBlue);
                if (Game.IsControlJustPressed(GTA.Control.VehicleDuck))
                {

                    Notification.Show("P.Model" + P.Position);

                }
            }
        }
        public static void DisplayHelpText(string text)
        {
            InputArgument[] arguments = new InputArgument[] { "STRING" };
            Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_HELP, arguments);
            InputArgument[] argumentArray2 = new InputArgument[] { text };
            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, argumentArray2);
            InputArgument[] argumentArray3 = new InputArgument[] { 0, 0, 1, -1 };
            Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_HELP, argumentArray3);
        }
        public static void SetRelationshipBetweenGroups(Relationship relationship, int group1, int group2)
        {
            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, (int)relationship, group1, group2);
            Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, (int)relationship, group2, group1);
        }
        public static int ShowNotification(string text, string txdname, string textureName, string sender, string subject, bool blink = false)
        {
            LoadTexureDict(txdname);
            LoadTexureDict(txdname);
            Wait(50);
            Function.Call(Hash.BEGIN_TEXT_COMMAND_THEFEED_POST, CellEmailBcon);
            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "<textarea maxlength=\"1000\" rows=\"1000\" cols=\"1000\">" + text + "</textarea>");
            Function.Call<int>(Hash.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT, txdname, textureName, true, 1, sender, subject);

            return Function.Call<int>(Hash.END_TEXT_COMMAND_THEFEED_POST_TICKER, blink, true);
        }
        public static int ShowNotificationLong(string text, string text2, string text3, string txdname, string textureName, string sender, string subject, bool blink = false)
        {
            LoadTexureDict(txdname);
            LoadTexureDict(txdname);
            Wait(50);
            Function.Call(Hash.BEGIN_TEXT_COMMAND_THEFEED_POST, CellEmailBcon);
            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, text);
            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, text2);
            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, text3);
            Function.Call<int>(Hash.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT, txdname, textureName, true, 1, sender, subject);

            return Function.Call<int>(Hash.END_TEXT_COMMAND_THEFEED_POST_TICKER, blink, true);
        }
        public static void PictureNotification()
        {
            //template of texture = <img src='img://TextureDict/NameOfTexture'>;
        }
        public static IntPtr CellEmailBcon => StringToCoTaskMemUTF8("CELL_EMAIL_BCON");
        static byte[] _strBufferForStringToCoTaskMemUTF8 = new byte[100];
        public unsafe static IntPtr StringToCoTaskMemUTF8(string s)
        {
            if (s == null)
                return IntPtr.Zero;

            int byteCountUtf8 = Encoding.UTF8.GetByteCount(s);
            if (byteCountUtf8 > _strBufferForStringToCoTaskMemUTF8.Length)
            {
                _strBufferForStringToCoTaskMemUTF8 = new byte[byteCountUtf8 * 2];
            }

            Encoding.UTF8.GetBytes(s, 0, s.Length, _strBufferForStringToCoTaskMemUTF8, 0);
            IntPtr dest = AllocCoTaskMem(byteCountUtf8 + 1);
            if (dest == IntPtr.Zero)
                throw new OutOfMemoryException();

            Copy(_strBufferForStringToCoTaskMemUTF8, 0, dest, byteCountUtf8);
            // Add null-terminator to end
            ((byte*)dest.ToPointer())[byteCountUtf8] = 0;

            return dest;
        }
        public static int ShowContactAdded(string text, string txdname, string textureName, string nameofcontact)
        {
            LoadTexureDict(txdname);
            LoadTexureDict(txdname);
            Wait(50);
            Function.Call(Hash.BEGIN_TEXT_COMMAND_THEFEED_POST, "INT");
            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, text);
            return Function.Call<int>(Hash.END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT, txdname, textureName, true, 3, "Contact Added: ", nameofcontact);
        }
        public static void CopyToClipboard(string text)
        {
            GTA.UI.Screen.ShowSubtitle("~y~Copied~s~: to clipboard!");
            Thread thread = new Thread(() => Clipboard.SetText(text));
            thread.SetApartmentState(ApartmentState.STA);
            thread.Start();
        }
        #endregion
    }
    
    #region Contact Mission Controllers
    internal class MPGeraldCMS : Script // Gerald Contact Missions
    {
        public static Blip GeraldBlip;

        public static int GeraldSwitch = 0;
        public static int PreviousSelection = 0;
        public MPGeraldCMS()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }

        public void onTick(object sender, EventArgs e)
        {
            if (Main.StorySwitch >= 2 || Main.DEBUG)
            {
                switch (GeraldSwitch)
                {
                    case 0://where the missions are stored
                        {
                            if (!Main.OnMission)
                            {
                                if (GeraldBlip == null)
                                {
                                    GeraldBlip = World.CreateBlip(new Vector3(-90.81058f, -1525.272f, 33.6386f));
                                }
                                else
                                {
                                    GeraldBlip.Sprite = BlipSprite.Gerald;
                                    GeraldBlip.Color = BlipColor.Yellow;
                                    GeraldBlip.Alpha = 255;
                                }
                                if (Game.Player.Character.Position.DistanceTo(new Vector3(-90.81058f, -1525.272f, 33.6386f)) < 10f)
                                {
                                    World.DrawMarker(MarkerType.VerticalCylinder, new Vector3(-90.81058f, -1525.272f, 33.6386f - 1.6f), Vector3.Zero, Vector3.Zero, new Vector3(1.5f, 1.5f, 1.5f), Color.Yellow);
                                }
                                if (Game.Player.Character.Position.DistanceTo(new Vector3(-90.81058f, -1525.272f, 33.6386f)) < 1.3f)
                                {
                                    Screen.ShowHelpTextThisFrame("Press ~INPUT_CONTEXT~ to enter.");
                                    if (Game.IsControlJustPressed(GTA.Control.Context))
                                    {
                                        int player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                        Ped ped2;
                                        ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                        Ped ped3;
                                        ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                        Ped ped4;
                                        ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);

                                        Mobile_Phone.CAN_OPEN_PHONE = false;
                                        int Timer = Game.GameTime + 4000;
                                        Main.OnMission = true;
                                        Game.Player.CanControlCharacter = false;
                                        PlayerSwitch._SWITCH_OUT_PLAYER(Game.Player.Character, 8, 1);
                                        while (Game.GameTime < Timer)
                                        {
                                            Wait(0);
                                        }
                                        
                                        while (Function.Call<Hash>(Hash.GET_CURRENT_FRONTEND_MENU_VERSION) != Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"))
                                        {
                                            Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                            Script.Wait(200);
                                        }

                                        if (!Main.IsFreemodeMale && !Main.IsFreemodeFemale)
                                        {
                                            Main.CallFunctionFrontendHeader("SET_CHAR_IMG", 0);
                                        }
                                        Main.CallFunctionFrontendHeader("SHIFT_CORONA_DESC", false, false);
                                        Main.CallFunctionFrontendHeader("SHIFT_CORONA_DESC", true, false);
                                        Main.CallFunctionFrontendHeader("SET_ALL_HIGHLIGHTS", 1, 25);//144,24 - Pink|105,26 - Blue|99 - Doomsday Color?|94,47,33,25,20 - Green|27,8 - Red|

                                        //Main.CallFunctionFrontend("SET_COLUMN_TITLE", 0, "SETTINGS", "", 0, 0, 0, "", "", "", 0, 0, 0, 0, 0, "", "");
                                        //CallFunctionFrontend("SET_COLUMN_TITLE", 2, "THE UNION DEPOSITORY HEIST", "", "", 0, 0, 0, 0, 0, "", "");

                                        Function.Call((Hash)0xB9449845F73F5E9C, "SET_HEADER_TITLE");
                                        Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Learning The Ropes");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $" (Gerald)");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                        Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                        Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                        Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                        Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                        Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                        Function.Call((Hash)0xc6796a8ffa375e53);
                                        

                                        Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 0);

                                        //Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 1, 0, 0, 0, 25, 1, "Weapon Loadout", "", 0, "Aggressive", 0, false);
                                        //Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 2, 0, 0, 0, 3, 1, "Ready to Play", false, "Bruh", 0, 0, 0, false, false, 0, false, 0, 0, -1082130432, 0, -1);
                                        //Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 2, 0, 0, 2, 3, 1, "Ready to Play", false, -1, 0, 25, true);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 0, 0, 0, 0, 0, 1, "Learning The Ropes");
                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 1, 0, 0, 0, 0, 1, "Pier Pressure");
                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 2, 0, 0, 0, 0, 1, "Death Metal");
                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 3, 0, 0, 0, 0, 1, "Deal Breaker");
                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 4, 0, 0, 0, 0, 1, "Flood in the LS River");
                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 5, 0, 0, 0, 0, 1, "No Hay Bronca");
                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 6, 0, 0, 0, 0, 1, "Gassed Up");
                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 7, 0, 0, 0, 0, 1, "Violent Duct");
                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 8, 0, 0, 0, 0, 1, "War and Pieces");
                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 9, 0, 0, 0, 0, 1, "Dish the Dirt");

                                        Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 0);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 1);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 0, 0, 0, 0, 3, 0, "From", "Gerald", false, 0);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 1, 0, 0, 0, 3, 0, "Opens at Rank", "1", false, 0);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 2, 0, 0, 0, 3, 0, "Players", "1-4", false, 0);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 3, 5, 5, 2, 3, 0, "Type", "Mission", false, 12);

                                        Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 1);

                                        Main.CallFunctionFrontend("SET_COLUMN_TITLE", 1, "GERALD - LEARNING THE ROPES", "Gerald - Learning The Ropes", "", "pause_map", "pm_dlc_geraldslast", "", "", 0, 0, 0, "", "", "", "", "");

                                        Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 3);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 0, 0, 0, 2, 100, true, Main.Player_Name, 18, false, 0, 1, 0, "", false, "HOST", 18);

                                        int groupcount = 1;
                                        if (ped2.Exists())
                                        {
                                            string groupmname = "Ai Friend 1";
                                            if (ped2.AttachedBlip != null)
                                            {
                                                groupmname = ped2.AttachedBlip.Name;
                                            }
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 1, 0, 0, 2, 100, true, groupmname, 18, false, 0, 1, 0, "", false, "JOINED", 18);
                                            groupcount += 1;
                                        }
                                        else
                                        {
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 1, 0, 0, 0, 100, true, "", 2, false, 0, 1, 0, "", false, "", 4);
                                        }

                                        if (ped3.Exists())
                                        {
                                            string groupmname = "Ai Friend 2";
                                            if (ped3.AttachedBlip != null)
                                            {
                                                groupmname = ped3.AttachedBlip.Name;
                                            }
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 2, 0, 0, 2, 100, true, groupmname, 18, false, 0, 1, 0, "", false, "JOINED", 18);
                                            groupcount += 1;
                                        }
                                        else
                                        {
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 2, 0, 0, 0, 100, true, "", 2, false, 0, 1, 0, "", false, "", 4);
                                        }
                                        
                                        if (ped4.Exists())
                                        {
                                            string groupmname = "Ai Friend 3";
                                            if (ped4.AttachedBlip != null)
                                            {
                                                groupmname = ped4.AttachedBlip.Name;
                                            }
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 3, 0, 0, 2, 100, true, groupmname, 18, false, 0, 1, 0, "", false, "JOINED", 18);
                                            groupcount += 1;
                                        }
                                        else
                                        {
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 3, 0, 0, 0, 100, true, "", 2, false, 0, 1, 0, "", false, "", 4);
                                        }

                                        Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 3);

                                        Main.CallFunctionFrontend("SET_DESCRIPTION", 0, "Select a Contact Mission.", true);
                                        
                                        Main.CallFunctionFrontendHeader("SET_HEADING_DETAILS", "", "", "", false);
                                        Main.CallFunctionFrontendHeader("SHOW_HEADING_DETAILS", false);
                                        Main.CallFunctionFrontend("SET_MENU_HEADER_TEXT_BY_INDEX", 0, "CONTACT MISSIONS", 1.0f, true);
                                        Main.CallFunctionFrontend("SET_MENU_HEADER_TEXT_BY_INDEX", 1, $"PLAYERS {groupcount} OF 1-4", 1.0f, true);
                                        Main.CallFunctionFrontend("SET_MENU_HEADER_TEXT_BY_INDEX", 2, "DETAILS", 1.0f, true);

                                        Main.CallFunctionFrontend("LOCK_MOUSE_SUPPORT", true, true);
                                        Main.CallFunctionFrontend("SET_COLUMN_FOCUS", 0, true, true, true);
                                        Main.CallFunctionFrontend("PAGE_FADE_IN");
                                        
                                        GeraldSwitch = 1;
                                    }
                                }
                            }
                            else
                            {
                                if (GeraldBlip != null)
                                {
                                    GeraldBlip.Alpha = 0;
                                }
                            }
                        }
                        break;
                    case 1://selection of the menu/mission
                        {
                            CHECK_MOUSE_INPUT();
                            if (Game.IsControlJustPressed(GTA.Control.PhoneCancel))
                            {
                                Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                Mobile_Phone.CAN_OPEN_PHONE = true;
                                Game.Player.CanControlCharacter = true;
                                Main.OnMission = false;
                                PlayerSwitch.STOP_PLAYER_SWITCH();
                                GeraldSwitch = 0;
                            }
                            switch (getcurrentselection)
                            {
                                case 0://learning the ropes
                                    {                    
                                        if (PreviousSelection != getcurrentselection)
                                        {
                                            PreviousSelection = getcurrentselection;
                                            Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 1);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 0, 0, 0, 0, 3, 0, "From", "Gerald", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 1, 0, 0, 0, 3, 0, "Opens at Rank", "1", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 2, 0, 0, 0, 3, 0, "Players", "1-4", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 3, 5, 5, 2, 3, 0, "Type", "Mission", false, 12);

                                            Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 1);

                                            Main.CallFunctionFrontend("SET_COLUMN_TITLE", 1, "GERALD - LEARNING THE ROPES", "Gerald - Learning The Ropes", "", "pause_map", "pm_dlc_geraldslast", "", "", 0, 0, 0, "", "", "", "", "");

                                            Function.Call((Hash)0xB9449845F73F5E9C, "SET_HEADER_TITLE");
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Learning The Ropes");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $" (Gerald)");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call((Hash)0xc6796a8ffa375e53);
                                        }
                                        if (Game.IsControlJustPressed(GTA.Control.FrontendAccept))
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SELECT" /* GXT: Filter List */, "HUD_FREEMODE_SOUNDSET", true);
                                            Wait(500);
                                            Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                            HudHandler.HudandRadar(false, false);
                                            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                            Function.Call((Hash)0xA328A24AAA6B7FDC, 1f);
                                            Function.Call(Hash.ANIMPOSTFX_PLAY, "MP_job_load", 0, false);
                                            Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SCREEN_FLASH", "CELEBRATION_SOUNDSET", true);
                                            LoadingPrompt.Show("Loading Contact Mission", LoadingSpinnerType.RegularClockwise);
                                            Wait(5000);
                                            
                                            Main.RadioAllowed = false;
                                            Main.NoCopsOnMission = true;
                                            Main.FuckOffCivilians = false;
                                            LTMMissionSwitch = 0;
                                            GeraldSwitch = 0;
                                        }
                                    }
                                    break;
                                case 1://Pier Pressure
                                    {
                                        if (PreviousSelection != getcurrentselection)
                                        {
                                            PreviousSelection = getcurrentselection;
                                            Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 1);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 0, 0, 0, 0, 3, 0, "From", "Gerald", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 1, 0, 0, 0, 3, 0, "Opens at Rank", "1", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 2, 0, 0, 0, 3, 0, "Players", "1-4", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 3, 5, 5, 2, 3, 0, "Type", "Mission", false, 12);

                                            Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 1);

                                            Main.CallFunctionFrontend("SET_COLUMN_TITLE", 1, "GERALD - Pier Pressure", "Gerald - Pier Pressure", "", "pause_map", "pm_dlc_geraldslast", "", "", 0, 0, 0, "", "", "", "", "");
                                            
                                            Function.Call((Hash)0xB9449845F73F5E9C, "SET_HEADER_TITLE");
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Pier Pressure");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $" (Gerald)");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Sticking punks up is the perfect hustle for the new kid in town. Marks ain't gonna recognize you, ");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "won't be able to come back. Take advantage of that low profile at a meet under the Del Perror Pier");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, ". I don't care what happens to the Lost and Vagos dudes involved, long as the product finds ");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "it's way to my spot. Oh yeah, there'll be some change in it for you.");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call((Hash)0xc6796a8ffa375e53);
                                        }
                                        if (Game.IsControlJustPressed(GTA.Control.FrontendAccept))
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SELECT" /* GXT: Filter List */, "HUD_FREEMODE_SOUNDSET", true);
                                            Wait(500);
                                            Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                            HudHandler.HudandRadar(false, false);
                                            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                            Function.Call((Hash)0xA328A24AAA6B7FDC, 1f);
                                            Function.Call(Hash.ANIMPOSTFX_PLAY, "MP_job_load", 0, false);
                                            Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SCREEN_FLASH", "CELEBRATION_SOUNDSET", true);
                                            LoadingPrompt.Show("Loading Contact Mission", LoadingSpinnerType.RegularClockwise);
                                            Wait(2000);

                                            Main.RadioAllowed = false;
                                            Main.NoCopsOnMission = true;
                                            Main.FuckOffCivilians = false;
                                            MissionsSwitch = 0;
                                            GeraldSwitch = 0;
                                        }
                                    }
                                    break;
                                case 2://Death Metal
                                    {
                                        if (PreviousSelection != getcurrentselection)
                                        {
                                            PreviousSelection = getcurrentselection;
                                            Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 1);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 0, 0, 0, 0, 3, 0, "From", "Gerald", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 1, 0, 0, 0, 3, 0, "Opens at Rank", "1", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 2, 0, 0, 0, 3, 0, "Players", "1-4", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 3, 5, 5, 2, 3, 0, "Type", "Mission", false, 12);

                                            Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 1);

                                            Main.CallFunctionFrontend("SET_COLUMN_TITLE", 1, "GERALD - Death Metal", "Gerald - Death Metal", "", "pause_map", "pm_dlc_geraldslast", "", "", 0, 0, 0, "", "", "", "", "");

                                            Function.Call((Hash)0xB9449845F73F5E9C, "SET_HEADER_TITLE");
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Death Metal");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $" (Gerald)");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "So, Roger's Scrapyard - you know that joint. The Ballas are conversating with some professional ");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "type dudes out that way on topic of uncut product. You gonna get hold of the package, and");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, " bring it back to my joint. I'll break you off something, and we go about our day like nothing's");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, " gone down. Straight?");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call((Hash)0xc6796a8ffa375e53);
                                        }
                                        if (Game.IsControlJustPressed(GTA.Control.FrontendAccept))
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SELECT" /* GXT: Filter List */, "HUD_FREEMODE_SOUNDSET", true);
                                            Wait(500);
                                            Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                            HudHandler.HudandRadar(false, false);
                                            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                            Function.Call((Hash)0xA328A24AAA6B7FDC, 1f);
                                            Function.Call(Hash.ANIMPOSTFX_PLAY, "MP_job_load", 0, false);
                                            Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SCREEN_FLASH", "CELEBRATION_SOUNDSET", true);
                                            LoadingPrompt.Show("Loading Contact Mission", LoadingSpinnerType.RegularClockwise);
                                            Wait(2000);

                                            Main.RadioAllowed = false;
                                            Main.NoCopsOnMission = true;
                                            Main.FuckOffCivilians = false;
                                            MissionsSwitch = 1;
                                            GeraldSwitch = 0;
                                        }
                                    }
                                    break;
                                case 3://Deal Breaker
                                    {
                                        if (PreviousSelection != getcurrentselection)
                                        {
                                            PreviousSelection = getcurrentselection;
                                            Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 1);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 0, 0, 0, 0, 3, 0, "From", "Gerald", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 1, 0, 0, 0, 3, 0, "Opens at Rank", "1", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 2, 0, 0, 0, 3, 0, "Players", "1-4", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 3, 5, 5, 2, 3, 0, "Type", "Mission", false, 12);

                                            Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 1);

                                            Main.CallFunctionFrontend("SET_COLUMN_TITLE", 1, "GERALD - Deal Breaker", "Gerald - Deal Breaker", "", "pause_map", "pm_dlc_geraldslast", "", "", 0, 0, 0, "", "", "", "", "");
                                            
                                            Function.Call((Hash)0xB9449845F73F5E9C, "SET_HEADER_TITLE");
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Deal Breaker");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $" (Gerald)");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Alright, so today you're gonna stick up some cats for they stash, if you down. It's some ");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "across the lines thing between the Ballas and the Vagos at the Los Santos State ");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Gas Company yard in Banning. Get over there, interrupt it, and get the package. Bring it back to m");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "e, I'll break off some change, we pretend like nothing happened. That's the lick. You good?");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call((Hash)0xc6796a8ffa375e53);
                                        }
                                        if (Game.IsControlJustPressed(GTA.Control.FrontendAccept))
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SELECT" /* GXT: Filter List */, "HUD_FREEMODE_SOUNDSET", true);
                                            Wait(500);
                                            Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                            HudHandler.HudandRadar(false, false);
                                            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                            Function.Call((Hash)0xA328A24AAA6B7FDC, 1f);
                                            Function.Call(Hash.ANIMPOSTFX_PLAY, "MP_job_load", 0, false);
                                            Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SCREEN_FLASH", "CELEBRATION_SOUNDSET", true);
                                            LoadingPrompt.Show("Loading Contact Mission", LoadingSpinnerType.RegularClockwise);
                                            Wait(2000);
                                            
                                            Main.RadioAllowed = false;
                                            Main.NoCopsOnMission = true;
                                            Main.FuckOffCivilians = false;
                                            MissionsSwitch = 2;
                                            GeraldSwitch = 0;
                                        }
                                    }
                                    break;
                                case 4://Flood In The LS River
                                    {
                                        if (PreviousSelection != getcurrentselection)
                                        {
                                            PreviousSelection = getcurrentselection;
                                            Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 1);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 0, 0, 0, 0, 3, 0, "From", "Gerald", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 1, 0, 0, 0, 3, 0, "Opens at Rank", "1", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 2, 0, 0, 0, 3, 0, "Players", "1-4", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 3, 5, 5, 2, 3, 0, "Type", "Mission", false, 12);

                                            Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 1);

                                            Main.CallFunctionFrontend("SET_COLUMN_TITLE", 1, "GERALD - Flood In The LS River", "Gerald - Flood In The LS River", "", "pause_map", "pm_dlc_geraldslast", "", "", 0, 0, 0, "", "", "", "", "");

                                            Function.Call((Hash)0xB9449845F73F5E9C, "SET_HEADER_TITLE");
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Flood In The LS River");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $" (Gerald)");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "A'ight, so you wanna hustle? This your hustle - the Lost and the Vagos is having a meeting of mind"); 
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "s down in the LS River. It'd suit my purposes if they got stuck up. Light'em up, bring whatever t");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "hey holding to the crib, you gonna make some bills. Straight up.");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call((Hash)0xc6796a8ffa375e53);
                                        }
                                        if (Game.IsControlJustPressed(GTA.Control.FrontendAccept))
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SELECT" /* GXT: Filter List */, "HUD_FREEMODE_SOUNDSET", true);
                                            Wait(500);
                                            Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                            HudHandler.HudandRadar(false, false);
                                            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                            Function.Call((Hash)0xA328A24AAA6B7FDC, 1f);
                                            Function.Call(Hash.ANIMPOSTFX_PLAY, "MP_job_load", 0, false);
                                            Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SCREEN_FLASH", "CELEBRATION_SOUNDSET", true);
                                            LoadingPrompt.Show("Loading Contact Mission", LoadingSpinnerType.RegularClockwise);
                                            Wait(2000);

                                            Main.RadioAllowed = false;
                                            Main.NoCopsOnMission = true;
                                            Main.FuckOffCivilians = false;
                                            MissionsSwitch = 3;
                                            GeraldSwitch = 0;
                                        }
                                    }
                                    break;
                                case 5://No Hay Bronca
                                    {
                                        if (PreviousSelection != getcurrentselection)
                                        {
                                            PreviousSelection = getcurrentselection;
                                            Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 1);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 0, 0, 0, 0, 3, 0, "From", "Gerald", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 1, 0, 0, 0, 3, 0, "Opens at Rank", "1", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 2, 0, 0, 0, 3, 0, "Players", "1-4", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 3, 5, 5, 2, 3, 0, "Type", "Mission", false, 12);

                                            Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 1);

                                            Main.CallFunctionFrontend("SET_COLUMN_TITLE", 1, "GERALD - No Hay Bronca", "Gerald - No Hay Bronca", "", "pause_map", "pm_dlc_geraldslast", "", "", 0, 0, 0, "", "", "", "", "");

                                            Function.Call((Hash)0xB9449845F73F5E9C, "SET_HEADER_TITLE");
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "No Hay Bronca");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $" (Gerald)");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "So, I got the homie Stanley selling product to the Vagos in Rancho. Only I got a bad feeling since ");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, " we jacked most of that stuff off them to begin with, and I'm told they got the whole block down t");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "here. For my peace of mind I'd like your ass down there on the lookout tip. Keep my dude safe, and ");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, " don't lose the product.");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call((Hash)0xc6796a8ffa375e53);
                                        }
                                        if (Game.IsControlJustPressed(GTA.Control.FrontendAccept))
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SELECT" /* GXT: Filter List */, "HUD_FREEMODE_SOUNDSET", true);
                                            Wait(500);
                                            Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                            HudHandler.HudandRadar(false, false);
                                            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                            Function.Call((Hash)0xA328A24AAA6B7FDC, 1f);
                                            Function.Call(Hash.ANIMPOSTFX_PLAY, "MP_job_load", 0, false);
                                            Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SCREEN_FLASH", "CELEBRATION_SOUNDSET", true);
                                            LoadingPrompt.Show("Loading Contact Mission", LoadingSpinnerType.RegularClockwise);
                                            Wait(2000);

                                            Main.RadioAllowed = false;
                                            Main.NoCopsOnMission = true;
                                            Main.FuckOffCivilians = false;
                                            MissionsSwitch = 4;
                                            GeraldSwitch = 0;
                                        }
                                    }
                                    break;
                                case 6://Gassed Up
                                    {
                                        if (PreviousSelection != getcurrentselection)
                                        {
                                            PreviousSelection = getcurrentselection;
                                            Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 1);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 0, 0, 0, 0, 3, 0, "From", "Gerald", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 1, 0, 0, 0, 3, 0, "Opens at Rank", "1", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 2, 0, 0, 0, 3, 0, "Players", "1-4", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 3, 5, 5, 2, 3, 0, "Type", "Mission", false, 12);

                                            Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 1);

                                            Main.CallFunctionFrontend("SET_COLUMN_TITLE", 1, "GERALD - Gassed Up", "Gerald - Gassed Up", "", "pause_map", "pm_dlc_geraldslast", "", "", 0, 0, 0, "", "", "", "", "");
                                            
                                            Function.Call((Hash)0xB9449845F73F5E9C, "SET_HEADER_TITLE");
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Gassed Up");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $" (Gerald)");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "A'ight, word is the Vagos got a new connect for the cocaine they bringing cross border. These some ");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, " professional dudes who can distribute weight, so you know we wanna screw that up. First exchange");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, " is happening at the Los Santos Stage Gas Company in Cypress Flats. Take'em out and bring the ");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "package round my spot.");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call((Hash)0xc6796a8ffa375e53);
                                        }
                                        if (Game.IsControlJustPressed(GTA.Control.FrontendAccept))
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SELECT" /* GXT: Filter List */, "HUD_FREEMODE_SOUNDSET", true);
                                            Wait(500);
                                            Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                            HudHandler.HudandRadar(false, false);
                                            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                            Function.Call((Hash)0xA328A24AAA6B7FDC, 1f);
                                            Function.Call(Hash.ANIMPOSTFX_PLAY, "MP_job_load", 0, false);
                                            Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SCREEN_FLASH", "CELEBRATION_SOUNDSET", true);
                                            LoadingPrompt.Show("Loading Contact Mission", LoadingSpinnerType.RegularClockwise);
                                            Wait(2000);

                                            Main.RadioAllowed = false;
                                            Main.NoCopsOnMission = true;
                                            Main.FuckOffCivilians = false;
                                            MissionsSwitch = 5;
                                            GeraldSwitch = 0;
                                        }
                                    }
                                    break;
                                case 7://Violent Duct
                                    {
                                        if (PreviousSelection != getcurrentselection)
                                        {
                                            PreviousSelection = getcurrentselection;
                                            Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 1);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 0, 0, 0, 0, 3, 0, "From", "Gerald", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 1, 0, 0, 0, 3, 0, "Opens at Rank", "1", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 2, 0, 0, 0, 3, 0, "Players", "1-4", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 3, 5, 5, 2, 3, 0, "Type", "Mission", false, 12);

                                            Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 1);

                                            Main.CallFunctionFrontend("SET_COLUMN_TITLE", 1, "GERALD - Violent Duct", "Gerald - Violent Duct", "", "pause_map", "pm_dlc_geraldslast", "", "", 0, 0, 0, "", "", "", "", "");

                                            Function.Call((Hash)0xB9449845F73F5E9C, "SET_HEADER_TITLE");
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Violent Duct");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $" (Gerald)");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Eh fool, I got a stick up for you if you interested. The Lost selling yayo down at Mission Row by ");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "the Unicorn, and we are talking weight. I can move this stuff if you can get the right discount, ");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "you know what i mean. Bring the package round my spot, I'll hook you up, if you caught and they ");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "sweat you, you don't know me.");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call((Hash)0xc6796a8ffa375e53);
                                        }
                                        if (Game.IsControlJustPressed(GTA.Control.FrontendAccept))
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SELECT" /* GXT: Filter List */, "HUD_FREEMODE_SOUNDSET", true);
                                            Wait(500);
                                            Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                            HudHandler.HudandRadar(false, false);
                                            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                            Function.Call((Hash)0xA328A24AAA6B7FDC, 1f);
                                            Function.Call(Hash.ANIMPOSTFX_PLAY, "MP_job_load", 0, false);
                                            Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SCREEN_FLASH", "CELEBRATION_SOUNDSET", true);
                                            LoadingPrompt.Show("Loading Contact Mission", LoadingSpinnerType.RegularClockwise);
                                            Wait(2000);

                                            Main.RadioAllowed = false;
                                            Main.NoCopsOnMission = true;
                                            Main.FuckOffCivilians = false;
                                            MissionsSwitch = 6;
                                            GeraldSwitch = 0;
                                        }
                                    }
                                    break;
                                case 8://War And Pieces - HAS_MENU_TRIGGER_EVENT_OCCURRED - HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED - GET_MENU_TRIGGER_EVENT_DETAILS - GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS
                                    {
                                        if (PreviousSelection != getcurrentselection)
                                        {
                                            PreviousSelection = getcurrentselection;
                                            Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 1);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 0, 0, 0, 0, 3, 0, "From", "Gerald", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 1, 0, 0, 0, 3, 0, "Opens at Rank", "1", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 2, 0, 0, 0, 3, 0, "Players", "1-4", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 3, 5, 5, 2, 3, 0, "Type", "Mission", false, 12);
                                            
                                            Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 1);

                                            Main.CallFunctionFrontend("SET_COLUMN_TITLE", 1, "GERALD - War And Pieces", "Gerald - War And Pieces", "", "pause_map", "pm_dlc_geraldslast", "", "", 0, 0, 0, "", "", "", "", "");

                                            Function.Call((Hash)0xB9449845F73F5E9C, "SET_HEADER_TITLE");
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "War And Pieces");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $" (Gerald)");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Someone told me, so I'm telling you - the Lost MC about to sell piece of white to some free love ");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "types at the Senora Desert Trailer Park. They hippies, but i guess the dudes love yuppie drugs. ");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Who knows. Just bring the product round my spot and I'll pay you for it.");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call((Hash)0xc6796a8ffa375e53);
                                        }
                                        if (Game.IsControlJustPressed(GTA.Control.FrontendAccept))
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SELECT" /* GXT: Filter List */, "HUD_FREEMODE_SOUNDSET", true);
                                            Wait(500);
                                            Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                            HudHandler.HudandRadar(false, false);
                                            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                            Function.Call((Hash)0xA328A24AAA6B7FDC, 1f);
                                            Function.Call(Hash.ANIMPOSTFX_PLAY, "MP_job_load", 0, false);
                                            Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SCREEN_FLASH", "CELEBRATION_SOUNDSET", true);
                                            LoadingPrompt.Show("Loading Contact Mission", LoadingSpinnerType.RegularClockwise);
                                            Wait(2000);
                                            
                                            Main.RadioAllowed = false;
                                            Main.NoCopsOnMission = true;
                                            Main.FuckOffCivilians = false;
                                            MissionsSwitch = 7;
                                            GeraldSwitch = 0;
                                        }
                                    }
                                    break;
                                case 9://Dish The Dirt
                                    {
                                        if (PreviousSelection != getcurrentselection)
                                        {
                                            PreviousSelection = getcurrentselection;
                                            Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 1);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 0, 0, 0, 0, 3, 0, "From", "Gerald", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 1, 0, 0, 0, 3, 0, "Opens at Rank", "1", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 2, 0, 0, 0, 3, 0, "Players", "1-4", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 3, 5, 5, 2, 3, 0, "Type", "Mission", false, 12);

                                            Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 1);

                                            Main.CallFunctionFrontend("SET_COLUMN_TITLE", 1, "GERALD - Dish The Dirt", "Gerald - Dish The Dirt", "", "pause_map", "pm_dlc_geraldslast", "", "", 0, 0, 0, "", "", "", "", "");

                                            Function.Call((Hash)0xB9449845F73F5E9C, "SET_HEADER_TITLE");
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Dish The Dirt");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $" (Gerald)");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "You still looking for hustels, or you too big time now? This is a big ass hustle. These prof");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "essional dudes selling weight to the Vagos by the radar array in the desert. They goin' have snipe");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "rs and heavy cats protecting their stuff, but it'll be worth it if you can handle it. Deal with th");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "e shooters, get the package, and bring it back to my spot.");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call((Hash)0xc6796a8ffa375e53);
                                        }
                                        if (Game.IsControlJustPressed(GTA.Control.FrontendAccept))
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SELECT" /* GXT: Filter List */, "HUD_FREEMODE_SOUNDSET", true);
                                            Wait(500);
                                            Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                            HudHandler.HudandRadar(false, false);
                                            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                            Function.Call((Hash)0xA328A24AAA6B7FDC, 1f);
                                            Function.Call(Hash.ANIMPOSTFX_PLAY, "MP_job_load", 0, false);
                                            Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SCREEN_FLASH", "CELEBRATION_SOUNDSET", true);
                                            LoadingPrompt.Show("Loading Contact Mission", LoadingSpinnerType.RegularClockwise);
                                            Wait(2000);

                                            Main.RadioAllowed = false;
                                            Main.NoCopsOnMission = true;
                                            Main.FuckOffCivilians = false;
                                            MissionsSwitch = 8;
                                            GeraldSwitch = 0;
                                        }
                                    }
                                    break;
                            }
                        }
                        break;
                }

                LTM();
                GERALD_MISSION_CONTROLLER();
            }
           
        }
        
        public void onShutdown(object sender, EventArgs e)
        {
            if (GeraldBlip != null)
            {
                GeraldBlip.Delete();
            }

            if (CarryPed != null)
            {
                CarryPed.Delete();
            }
        }

        public static int currentselection;
        public static int getcurrentselection;
        public static int MouseCheck;
        public static int GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(int currentselection)
        {
            return Function.Call<int>(Hash.GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT, currentselection);
        }
        public static void CHECK_MOUSE_INPUT()
        {
            if (Game.GameTime > MouseCheck)
            {
                if (Function.Call<bool>(Hash.BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND, "GET_COLUMN_SELECTION"))
                {
                    Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT, 0);
                    currentselection = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);
                    MouseCheck = Game.GameTime + 100;
                }
            }
            if (Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentselection))
            {
                getcurrentselection = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentselection);
            }
        }
        
        #region Lamar Tutorial Mission
        public static int LTMMissionSwitch = -1;

        public static void LTM()
        {
            switch (LTMMissionSwitch)
            {
                case 0://intro mission
                    {
                        MPLoadout.GET_CURRENT_LOADOUT();
                        if (Main.PlayerVehicle != null)
                        {
                            Main.PlayerVehicle.Delete();
                            Main.PlayerVehicle = null;
                        }
                        while (Main.PlayerVehicle == null)
                        {
                            if (File.Exists("scripts\\CruelMastersOnlineOfflineAssets\\Vehicles\\CurrentVehicle.xml"))
                            {
                                Main.PlayerVehicle = MPVehicleLoadout.GET_VEHICLE_LOADOUT("scripts\\CruelMastersOnlineOfflineAssets\\Vehicles\\CurrentVehicle.xml", new Vector3(-1034.005f, -2730.309f, 19.49528f), 240.448f);
                            }
                            else
                            {
                                break;
                            }
                            Wait(0);
                        }
                        if (Main.PlayerVehicle != null)
                        {
                            while (Main.PlayerVehicle.AttachedBlip == null)
                            {
                                Main.PlayerVehicle.AddBlip();
                                Wait(0);
                            }
                            Main.PlayerVehicle.AttachedBlip.Sprite = BlipSprite.PersonalVehicleCar;
                            if (Main.PlayerVehicle.Model.IsBike || Main.PlayerVehicle.Model.IsAmphibiousQuadBike || Main.PlayerVehicle.Model.IsQuadBike)
                            {
                                Main.PlayerVehicle.AttachedBlip.Sprite = BlipSprite.PersonalVehicleBike;
                            }
                            Main.PlayerVehicle.AttachedBlip.Color = BlipColor.White;
                            Main.PlayerVehicle.AttachedBlip.Name = "Personal Vehicle";
                        }
                        
                        while (Main.CutsceneExtra1 == null)
                        {
                            Main.CutsceneExtra1 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                            Wait(0);
                        }
                        Main.CutsceneExtra1.IsVisible = false;
                        while (Main.CutsceneExtra2 == null)
                        {
                            Main.CutsceneExtra2 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                            Wait(0);
                        }
                        Main.CutsceneExtra2.IsVisible = false;
                        while (Main.CutsceneExtra3 == null)
                        {
                            Main.CutsceneExtra3 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                            Wait(0);
                        }
                        Main.CutsceneExtra3.IsVisible = false;

                        int player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                        Ped ped2;
                        ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                        Ped ped3;
                        ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                        Ped ped4;
                        ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);
                        Main.PlayerModelSet(Game.Player.Character);
                        LoadingPrompt.Show("Starting Cutscene", LoadingSpinnerType.RegularClockwise);
                        //GameplayCamera.RelativeHeading = 161.3774f - Game.Player.Character.Heading;
                        Main.LoadCutscene("mp_intro_mcs_8_a1");
                        while (!Function.Call<bool>(Hash.HAS_CUTSCENE_LOADED))
                        {
                            Main.LoadCutscene("mp_intro_mcs_8_a1");
                            Script.Yield();
                        }
                        player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                        ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                        ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                        ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);

                        Main.SetPedOutfitCutscene("MP_1", Game.Player.Character);
                        Main.SetPedOutfitCutscene_MP2("MP_2", ped2);
                        Main.SetPedOutfitCutscene_MP3("MP_3", ped3);
                        Main.SetPedOutfitCutscene_MP4("MP_4", ped4);// patch this shit its incorrect here

                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Game.Player.Character, "MP_1", 0, 0, 64);
                        if (ped2.Exists())
                        {
                            Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped2, "MP_2", 0, 0, 64);
                        }
                        else
                        {
                            Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra1, "MP_2", 0, 0, 64);
                        }
                        if (ped3.Exists())
                        {
                            Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped3, "MP_3", 0, 0, 64);
                        }
                        else
                        {
                            Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra2, "MP_3", 0, 0, 64);
                        }
                        if (ped4.Exists())
                        {
                            Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped4, "MP_4", 0, 0, 64);
                        }
                        else
                        {
                            Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra3, "MP_4", 0, 0, 64);
                        }
                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.PlayerVehicle, "collision_07hhpq", 0, 0, 64);

                        //Function.Call(Hash.SET_CUTSCENE_ORIGIN, 1568.77f, 3217.713f, 40.41154f, 106.3544f, 0);
                        Function.Call(Hash.START_CUTSCENE, 0);
                        Wait(50);
                        Main.GetPedOutfitCutscene("MP_1", Game.Player.Character);
                        Main.GetPedOutfitCutscene_MP2("MP_2", ped2);
                        Main.GetPedOutfitCutscene_MP3("MP_3", ped3);
                        Main.GetPedOutfitCutscene_MP4("MP_4", ped4);
                        Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();
                        LoadingPrompt.Hide();
                        Function.Call(Hash.STOP_AUDIO_SCENES);
                        Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                        Function.Call((Hash)0xEFACC8AEF94430D5, 1f);
                        Screen_Effects.StopAllAnimPostFX();
                        Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                        Game.Player.CanControlCharacter = true;
                        PlayerSwitch.STOP_PLAYER_SWITCH();
                        Wall_Creator.DeleteMissionPassScaleform();
                        Wall_Creator.RequestMissionPassScaleform();
                        Wait(500);
                        Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                        //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true); //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "PUSH", "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS", true);
                        
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "intro");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "intro");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "intro");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_INTRO_TO_WALL", "intro", "Mission", "Learning The Ropes", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_INTRO_TO_WALL", "intro", "Mission", "Learning The Ropes", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_INTRO_TO_WALL", "intro", "Mission", "Learning The Ropes", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "intro", 3);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "intro", 3);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "intro", 3);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "intro");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "intro");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "intro");

                        Main.PlayerModelSetBack(Game.Player.Character);
                        while (Cutscenes.GET_CUTSCENE_TIME() < 3000)
                        {
                            Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                            Wait(0);
                        }
                        while (!Cutscenes.HAS_CUTSCENE_FINISHED())
                        {
                            Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                            Wait(0);
                        }
                        Function.Call(Hash.STOP_AUDIO_SCENES);
                        Cameras.RESET_GAMEPLAY_CAM();
                        Wall_Creator.DeleteMissionPassScaleform();
                        Main.CutsceneExtra1.Delete();
                        Main.CutsceneExtra1 = null;
                        Main.CutsceneExtra2.Delete();
                        Main.CutsceneExtra2 = null;
                        Main.CutsceneExtra3.Delete();
                        Main.CutsceneExtra3 = null;
                        Mobile_Phone.CAN_OPEN_PHONE = true;
                        //Function.Call(Hash.PREPARE_MUSIC_EVENT, "FH2B_EXPLODE");
                        Audios.TRIGGER_MUSIC_EVENT("MP_MC_TUNER_START_MUSIC");
                        Audios.TRIGGER_MUSIC_EVENT("MP_MC_SUSPENSE_HFIN");
                        Audios.TRIGGER_MUSIC_EVENT("FH2B_EXPLODE");
                        //Audios.TRIGGER_MUSIC_EVENT("MP_CHF_ACTION");
                        HudHandler.HudandRadar(true, true);
                        LTMMissionSwitch = 1;
                    }
                    break;
                case 1://go to the meeting.
                    {
                        Vector3[] randomspawn = { new Vector3(-87.64607f, -1210.909f, 27.88866f), new Vector3(-88.18004f, -1230.904f, 28.73716f) };
                        float[] randomspawnhead = { 183.4736f, 199.8689f };
                        int rand = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, randomspawn.Length);
                        RESPAWN.SET_MIS_STAT(randomspawn[rand], randomspawnhead[rand], 0, true);

                        Screen.ShowSubtitle("Go to the ~y~meeting.~w~");
                        if (Main.missionBlip == null)
                        {
                            if (Main.missionBlip != null)
                            {
                                Main.missionBlip.Delete();
                                Main.missionBlip = null;
                            }
                            while (Main.missionBlip == null)
                            {
                                Main.missionBlip = World.CreateBlip(new Vector3(-87.61136f, -1240.41f, 29.03166f));
                                Wait(0);
                            }
                            HudHandler.SET_GPS(Main.missionBlip, 156, false, true);
                        }
                        else
                        {
                            if (Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 30)
                            {
                                Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                if (Main.missionBlip != null)
                                {
                                    Main.missionBlip.Delete();
                                    Main.missionBlip = null;
                                    HudHandler.CLEAR_GPS_ROUTE();
                                }
                                //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "FocusIn", "HintCamSounds", true);
                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);
                                LTMMissionSwitch = 2;
                            }
                        }
                    }
                    break;
                case 2://spawn everything in allyway
                    {
                        Groups.RemoveEnemyPeds();
                        Groups.SPAWN_AI((PedHash)0x68709618, new Vector3(-69.6613f, -1239.116f, 29.07306f - 1f), 106.0631f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                        Groups.SPAWN_AI((PedHash)0x68709618, new Vector3(-61.88883f, -1228.726f, 28.83621f - 1f), 132.7871f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                        Groups.SPAWN_AI((PedHash)0x68709618, new Vector3(-57.21425f, -1223.035f, 28.7063f - 1f), 63.84563f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                        Groups.SPAWN_AI((PedHash)0x68709618, new Vector3(-47.99805f, -1221.954f, 29.02976f - 1f), -103.3558f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                        Groups.SPAWN_AI((PedHash)0x68709618, new Vector3(-58.79134f, -1212.934f, 28.61197f - 1f), 61.38761f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                        Groups.SPAWN_AI((PedHash)0x68709618, new Vector3(-65.45473f, -1205.618f, 28.07042f - 1f), 55.29708f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                        Groups.BlipUpEnemyPeds();
                        
                        PickupSteal.RemovePickups();
                        PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(-54.51859f, -1225.727f, 27.72827f), new Vector3(0f, 0f, -115.2992f), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Drugs", true, 1f);
                        Screen.ShowHelpText("Non-player enemies are marked in red on the Radar.", 7000, true, false);
                        
                        LTMMissionSwitch = 3;
                    }
                    break;
                case 3://grab the drugs that spawned
                    {
                        Screen.ShowSubtitle("Get the ~g~drugs.~w~");

                        if (PickupSteal.PickupSpawn.Count == 0)
                        {
                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                            Notification.Show("~b~" + Main.Player_Name + "~w~ collected the drugs package.");
                            LTMMissionSwitch = 4;
                        }
                    }
                    break;
                case 4://deliver them to geralds house
                    {
                        Vector3[] randomspawn = { new Vector3(-43.65006f, -1511.964f, 30.86297f), new Vector3(-67.3141f, -1492.429f, 31.8914f) };
                        float[] randomspawnhead = { 70.08898f, 222.2258f };
                        int rand = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, randomspawn.Length);
                        RESPAWN.SET_MIS_STAT(randomspawn[rand], randomspawnhead[rand], 0, true);

                        Screen.ShowSubtitle("Deliver the ~g~drugs~w~ to ~y~Gerald's house.~w~");
                        if (Main.missionBlip == null)
                        {
                            if (Main.missionBlip != null)
                            {
                                Main.missionBlip.Delete();
                                Main.missionBlip = null;
                            }
                            while (Main.missionBlip == null)
                            {
                                Main.missionBlip = World.CreateBlip(new Vector3(-61.89631f, -1514.137f, 33.43623f));
                                Wait(0);
                            }
                            HudHandler.SET_GPS(Main.missionBlip, 156, false, true);
                        }
                        else
                        {
                            if (Game.Player.Character.CurrentVehicle == null && Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 4)
                            {
                                Groups.RemoveEnemyPeds();
                                PickupSteal.RemovePickups();

                                if (Main.missionBlip != null)
                                {
                                    Main.missionBlip.Delete();
                                    Main.missionBlip = null;
                                    HudHandler.CLEAR_GPS_ROUTE();
                                }
                                //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "FocusIn", "HintCamSounds", true);
                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);
                                HudHandler.HudandRadar(false, false);
                                Audios.Stop_Music_Event();
                                Wait(3000);
                                LTMMissionSwitch = 5;
                            }
                        }
                    }
                    break;
                case 5:
                    {
                        while (Main.CutsceneExtra1 == null)
                        {
                            Main.CutsceneExtra1 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                            Wait(0);
                        }
                        Main.CutsceneExtra1.IsVisible = false;
                        while (Main.CutsceneExtra2 == null)
                        {
                            Main.CutsceneExtra2 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                            Wait(0);
                        }
                        Main.CutsceneExtra2.IsVisible = false;
                        while (Main.CutsceneExtra3 == null)
                        {
                            Main.CutsceneExtra3 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                            Wait(0);
                        }
                        Main.CutsceneExtra3.IsVisible = false;

                        int player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                        Ped ped2;
                        ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                        Ped ped3;
                        ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                        Ped ped4;
                        ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);
                        Main.PlayerModelSet(Game.Player.Character);
                        LoadingPrompt.Show("Starting Cutscene", LoadingSpinnerType.RegularClockwise);
                        //GameplayCamera.RelativeHeading = 161.3774f - Game.Player.Character.Heading;
                        Main.LoadCutscene("mp_intro_mcs_10_a1");
                        while (!Function.Call<bool>(Hash.HAS_CUTSCENE_LOADED))
                        {
                            Main.LoadCutscene("mp_intro_mcs_10_a1");
                            Script.Yield();
                        }
                        player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                        ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                        ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                        ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);
                        
                        Main.SetPedOutfitCutscene("MP_1", Game.Player.Character);
                        Main.SetPedOutfitCutscene_MP2("MP_2", ped2);
                        Main.SetPedOutfitCutscene_MP3("MP_3", ped3);
                        Main.SetPedOutfitCutscene_MP4("MP_4", ped4);// patch this shit its incorrect here
                        
                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Game.Player.Character, "MP_1", 0, 0, 64);
                        if (ped2.Exists())
                        {
                            Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped2, "MP_2", 0, 0, 64);
                        }
                        else
                        {
                            Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra1, "MP_2", 0, 0, 64);
                        }
                        if (ped3.Exists())
                        {
                            Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped3, "MP_3", 0, 0, 64);
                        }
                        else
                        {
                            Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra2, "MP_3", 0, 0, 64);
                        }
                        if (ped4.Exists())
                        {
                            Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped4, "MP_4", 0, 0, 64);
                        }
                        else
                        {
                            Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra3, "MP_4", 0, 0, 64);
                        }
                        
                        //Function.Call(Hash.SET_CUTSCENE_ORIGIN, 1568.77f, 3217.713f, 40.41154f, 106.3544f, 0);
                        Function.Call(Hash.START_CUTSCENE, 0);
                        Wait(50);
                        Main.PlayerModelSetBack(Game.Player.Character);
                        Main.GetPedOutfitCutscene("MP_1", Game.Player.Character);
                        Main.GetPedOutfitCutscene_MP2("MP_2", ped2);
                        Main.GetPedOutfitCutscene_MP3("MP_3", ped3);
                        Main.GetPedOutfitCutscene_MP4("MP_4", ped4);
                        Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();
                        LoadingPrompt.Hide();

                        while (Cutscenes.GET_CUTSCENE_TIME() < 65000)
                        {
                            Wait(0);
                        }

                        Groups.RemoveEnemyPeds();
                        Groups.ClearEnemyPedsList2();
                        Vehicles.RemoveVehicles();
                        Props.RemoveProps();
                        Screen_Effects.CLEAR_ALL_HELP_MESSAGES();
                        Screen_Effects.PlayAnimPostFX("HeistCelebEnd", 0, true);
                        Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true);
                        Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                        Wait(1000);
                        Wall_Creator.DeleteMissionPassScaleform();
                        Wait(500);
                        Wall_Creator.DeleteMissionPassScaleform();
                        Wall_Creator.RequestMissionPassScaleform();
                        Wait(500);
                        Screen_Effects.StopAllAnimPostFX();
                        Screen_Effects.PlayAnimPostFX("HeistCelebPass", 0, true);
                        Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                        Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                        Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                        Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                        HudHandler.HudandRadar(false, false);

                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_MISSION");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_MISSION");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_MISSION");
                        
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");

                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);

                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);

                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                        int RandomCashValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 500, 8001);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);

                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);
                        
                        int RandomRPValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 500, 1301);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                        
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_MISSION");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_MISSION");
                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_MISSION");

                        Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
                        int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

                        int getcurrentduration = 0;
                        while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
                        {
                            Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                            Wait(0);
                        }
                        getcurrentduration = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
                        if (Main.DEBUG) Notification.Show($"{getcurrentduration}");
                        
                        int i = Game.GameTime + getcurrentduration;
                        while (Game.GameTime < i)
                        {
                            Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                            Wait(0);
                        }

                        Screen_Effects.StopAllAnimPostFX();
                        Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                        Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                        Function.Call(Hash.STOP_AUDIO_SCENES);
                        Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                        Wall_Creator.DeleteMissionPassScaleform();
                        Game.Player.CanControlCharacter = true;
                        HudHandler.HudandRadar(true, true);
                        
                        int Timer = Game.GameTime + 4000;
                        Game.Player.CanControlCharacter = false;
                        PlayerSwitch._SWITCH_OUT_PLAYER(Game.Player.Character, 3, 1);
                        while (Game.GameTime < Timer)
                        {
                            Wait(0);
                        }

                        Function.Call(Hash.SET_ENTITY_COORDS, Game.Player.Character, -91.57023f, -1523.439f, 33.58508f, true, false, false, true);
                        Function.Call(Hash.SET_ENTITY_HEADING, Game.Player.Character, 170.8833f);
                        Cameras.RESET_GAMEPLAY_CAM();
                        Game.Player.CanControlCharacter = true;

                        Function.Call((Hash)0xAD5FDF34B81BFE79);
                        Function.Call((Hash)0x43D1680C6D19A8E9);
                        PlayerSwitch.SWITCH_IN_PLAYER(Game.Player.Character);
                        while (PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                        {
                            Wait(0);
                        }

                        MPCash.ADD_CASH(RandomCashValue);
                        MPRank.ADD_RP(RandomRPValue);

                        Main.RadioAllowed = true;
                        Main.NoCopsOnMission = false;
                        Main.FuckOffCivilians = false;
                        Main.OnMission = false;
                        LTMMissionSwitch = -1;
                    }
                    break;
            }
        }
        #endregion
        
        #region Main Mission Controls
        public static int MissionsSwitch = -1;
        public static int MissionSwitch = 0;
        public static int TeamLives = 1;
        public static float HardModeMultiplier = 1.5f;
        public static bool HardMode = false;
        
        public static Ped CarryPed;
        public static void GERALD_MISSION_CONTROLLER()
        {
            switch (MissionsSwitch)
            {
                case 0://Pier Pressure
                    {
                        if (Main.checkpoint == 1 || Main.DEBUG)
                        {
                            if (TeamLives > 0)
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_black_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }
                            else
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_red_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 0, 0, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }
                            
                            if (Game.Player.Character.IsDead)
                            {
                                TeamLives -= 1;
                                
                                if (MissionSwitch == 3)
                                {
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    PickupSteal.RemovePickups();
                                    PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(Game.Player.Character.Position.X, Game.Player.Character.Position.Y, World.GetGroundHeight(Game.Player.Character.Position)), new Vector3(0f, 0f, Game.Player.Character.Heading), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Meth", false, 1f);

                                    Notification.Show("The meth has been dropped.");

                                    MissionSwitch = 2;
                                }

                                while (Game.Player.Character.IsDead)
                                {
                                    Wait(0);
                                }
                                
                                if (TeamLives < 0)
                                {
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    while (Wall_Creator.FailCam == null)
                                    {
                                        Wall_Creator.FailCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", 0);
                                        Wait(0);
                                    }
                                    Random rand = new Random();
                                    int index = rand.Next(1, 3);
                                    if (index == 1)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 2.0f, 3.0f, 0.6f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    if (index == 2)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 1.0f, 3.0f, 0.5f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    World.RenderingCamera = Wall_Creator.FailCam;
                                    HudHandler.HudandRadar(false, false);
                                    Wait(1500);
                                    Screen.FadeIn(500);
                                    while (!Screen.IsFadedIn)
                                    {
                                        Wait(0);
                                    }
                                    Weapons.Anim_Weapon_Off();
                                    Audios.Stop_Music_Event();
                                    Game.Player.IsInvincible = true;
                                    Function.Call(Hash.SET_SEETHROUGH, false);
                                    Function.Call(Hash.SET_NIGHTVISION, false);
                                    Function.Call(Hash.SET_ARTIFICIAL_LIGHTS_STATE, false);
                                    Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
                                    Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFail", 0, false);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FAILED_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestHeist2PassScaleform();
                                    Wait(500);
                                    //Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_CELEB_SCREEN_SCENE");
                                    HudHandler.HudandRadar(false, false);
                                    
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_FAILED");

                                    int i = Game.GameTime + 6000;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Screen.FadeOut(1000);
                                    Wait(1000);
                                    if (Wall_Creator.FailCam != null)
                                    {
                                        Wall_Creator.FailCam.Delete();
                                        Wall_Creator.FailCam = null;
                                    }
                                    World.RenderingCamera = null;
                                    Groups.RemoveEnemyPeds();
                                    Vehicles.RemoveVehicles();
                                    PickupSteal.RemovePickups();
                                    Game.Player.IsInvincible = false;
                                    MissionSwitch = 0;
                                    break;
                                }
                            }
                        }
                        switch (MissionSwitch)
                        {
                            case 0://contact mission start
                                {
                                    if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_START(-1561.762f, -891.3643f, 10.17889f, 0.0f, 0.0f, 0.0f, 500f, 0);
                                    }
                                    string[] musicevents = {
                        "MP_MC_CMH_IAA_PREP_START",
                        "MP_MC_CMH_IAA_FINALE_START",
                        "MP_MC_CMH_SUB_PREP_START",
                        "MP_MC_CMH_SUB_FINALE_START",
                        "MP_MC_CMH_SILO_PREP_START",
                        "MP_MC_CMH_SILO_FINALE_START",
                        "MP_MC_CM22_START_TRACK_11",
                        "MP_MC_TUNER_START_MUSIC",
                        "MP_MC_GR_START",
                        "LOWRIDER_START_MUSIC",
                        "LOWRIDER_FINALE_START_MUSIC",
                        "MP_MC_START",
                        };
                                    Audios.TRIGGER_MUSIC_EVENT(musicevents[Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, musicevents.Length)]);
                                    Audios.TRIGGER_MUSIC_EVENT("MP_MC_SUSPENSE_HFIN");
                                    Audios.TRIGGER_MUSIC_EVENT("FH2B_EXPLODE");

                                    MPLoadout.GET_CURRENT_LOADOUT();
                                    MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(-1469.444f, -876.1636f, 9.942012f), 245.6809f);

                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();

                                    Game.Player.Character.Task.ClearAll();
                                    Game.Player.CanControlCharacter = true;
                                    
                                    Game.Player.Character.Position = new Vector3(-1561.762f, -891.3643f, 10.17889f - 1f);
                                    Game.Player.Character.Heading = 131.9006f;
                                    Game.Player.Character.IsPositionFrozen = true;
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    HudHandler.HudandRadar(false, false);

                                    Wait(1000);
                                    LoadingPrompt.Hide();
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Function.Call((Hash)0xEFACC8AEF94430D5, 1f);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    PlayerSwitch.STOP_PLAYER_SWITCH();
                                    if (LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                    }
                                    Game.Player.Character.IsPositionFrozen = false;
                                    
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true); //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "PUSH", "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS", true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_INTRO_TO_WALL", "intro", "Mission", "Pier Pressure", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_INTRO_TO_WALL", "intro", "Mission", "Pier Pressure", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_INTRO_TO_WALL", "intro", "Mission", "Pier Pressure", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "intro");
                                    Screen.FadeIn(1000);

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
                                    int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

                                    int getcurrentduration = 0;
                                    while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    getcurrentduration = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
                                    if (Main.DEBUG) Notification.Show($"{getcurrentduration}");

                                    int i = Game.GameTime + getcurrentduration;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Mobile_Phone.CAN_OPEN_PHONE = true;
                                    //Function.Call(Hash.PREPARE_MUSIC_EVENT, "FH2B_EXPLODE");
                                    //Audios.TRIGGER_MUSIC_EVENT("MP_CHF_ACTION");
                                    HudHandler.HudandRadar(true, true);
                                    Main.checkpoint = 1;
                                    TeamLives = 1;
                                    MissionSwitch = 1;
                                }
                                break;
                            case 1://spawn everything
                                {
                                    Vector3[] randomspawn = { new Vector3(-1511.819f, -972.2967f, 8.230025f), new Vector3(-1604.942f, -935.2919f, 8.710402f) };
                                    float[] randomspawnhead = { 162.6914f, 124.0649f };
                                    int rand = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, randomspawn.Length);
                                    RESPAWN.SET_MIS_STAT(randomspawn[rand], randomspawnhead[rand], 0, true);

                                    Vehicles.RemoveVehicles();
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x9C669788, new Vector3(-1574.839f, -1024.217f, 7.178695f - 1f), 117.2059f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x9C669788, new Vector3(-1595.069f, -1016.254f, 6.898172f - 1f), -28.28053f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x97FA4F36, new Vector3(-1590.929f, -1009.754f, 7.311084f - 1f), 74.42137f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x97FA4F36, new Vector3(-1599.596f, -1011.752f, 7.258459f - 1f), -46.81987f, false, false);

                                    Groups.RemoveEnemyPeds();
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(-1572.794f, -1029.619f, 7.667802f - 1f), 46.85765f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(-1581.408f, -1024.086f, 7.634226f - 1f), 42.32905f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(-1583.662f, -1015.826f, 7.573857f - 1f), 75.41447f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(-1590.897f, -1018.369f, 7.448027f - 1f), 36.00473f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x4F46D607, new Vector3(-1596.487f, -1014.326f, 7.417935f - 1f), -105.9122f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x4F46D607, new Vector3(-1595.275f, -1008.347f, 7.481354f - 1f), -158.9877f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x4F46D607, new Vector3(-1597.8f, -1003.589f, 7.537733f - 1f), -134.162f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x4F46D607, new Vector3(-1604.2f, -1007.981f, 7.55058f - 1f), -111.5396f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.BlipUpEnemyPeds();

                                    if (CarryPed != null)
                                    {
                                        CarryPed.Delete();
                                        CarryPed = null;
                                    }
                                    while (CarryPed == null)
                                    {
                                        CarryPed = World.CreatePed((PedHash)0x32B11CDC, new Vector3(-1600.97f, -1008.759f, 7.500452f - 1f), -115.0161f);
                                        Wait(0);
                                    }
                                    CarryPed.RelationshipGroup = Groups.AiTeam;
                                    CarryPed.Weapons.Give(WeaponHash.Pistol, 10000, true, true);
                                    while (CarryPed.AttachedBlip == null)
                                    {
                                        CarryPed.AddBlip();
                                        Wait(0);
                                    }
                                    CarryPed.AttachedBlip.Sprite = (BlipSprite)1;
                                    CarryPed.AttachedBlip.Color = BlipColor.Green;
                                    CarryPed.AttachedBlip.Name = "Meth";

                                    PickupSteal.RemovePickups();
                                    
                                    MissionSwitch = 2;
                                }
                                break;
                            case 2://steal the meth
                                {
                                    if (Game.Player.Character.IsInCombat || CarryPed != null && CarryPed.IsInCombatAgainst(Game.Player.Character))
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_ACTION_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                        }
                                    }
                                    if (CarryPed != null)
                                    {
                                        if (CarryPed.IsDead)
                                        {
                                            PickupSteal.RemovePickups();
                                            PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(CarryPed.Position.X, CarryPed.Position.Y, World.GetGroundHeight(CarryPed.Position)), new Vector3(0f, 0f, CarryPed.Heading), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Meth", false, 1f);

                                            Notification.Show("The meth has been dropped.");

                                            if (CarryPed.AttachedBlip != null)
                                            {
                                                CarryPed.AttachedBlip.Delete();
                                            }
                                            CarryPed.MarkAsNoLongerNeeded();
                                            CarryPed = null;
                                        }
                                    }
                                    else
                                    {
                                        if (PickupSteal.PickupSpawn.Count == 0)
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                                            Notification.Show("~b~" + Main.Player_Name + "~w~ collected the meth.");
                                            MissionSwitch = 3;
                                        }
                                    }
                                    Screen.ShowSubtitle("Steal the ~g~meth.~w~");
                                }
                                break;
                            case 3://deliver the meth to gerald
                                {
                                    if (Game.Player.Character.IsInCombat || CarryPed != null && CarryPed.IsInCombatAgainst(Game.Player.Character))
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_ACTION_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                        }
                                    }
                                    else
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_AIRBORNE_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                                        }
                                    }
                                    Screen.ShowSubtitle("Deliver the ~g~meth~w~ to ~y~Gerald's apartment.~w~");
                                    
                                    if (Main.missionBlip == null)
                                    {
                                        if (Main.missionBlip != null)
                                        {
                                            Main.missionBlip.Delete();
                                            Main.missionBlip = null;
                                        }
                                        while (Main.missionBlip == null)
                                        {
                                            Main.missionBlip = World.CreateBlip(new Vector3(-61.89631f, -1514.137f, 33.43623f));
                                            Wait(0);
                                        }
                                        HudHandler.SET_GPS(Main.missionBlip, 156, false, true);
                                    }
                                    else
                                    {
                                        if (Game.Player.Character.CurrentVehicle == null && Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 4)
                                        {
                                            Groups.RemoveEnemyPeds();
                                            Vehicles.RemoveVehicles();
                                            PickupSteal.RemovePickups();

                                            if (Main.missionBlip != null)
                                            {
                                                Main.missionBlip.Delete();
                                                Main.missionBlip = null;
                                                HudHandler.CLEAR_GPS_ROUTE();
                                            }
                                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "FocusIn", "HintCamSounds", true);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);
                                            HudHandler.HudandRadar(false, false);
                                            Audios.Stop_Music_Event();
                                            MissionSwitch = 4;
                                        }
                                    }
                                }
                                break;
                            case 4://delviered meth to gerald
                                {
                                    int randcutscene = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 2, 6);
                                    int cutscenetime = 20000;
                                    switch (randcutscene)
                                    {
                                        case 2:
                                            cutscenetime = 20000;
                                            break;
                                        case 3:
                                            cutscenetime = 16000;
                                            break;
                                        case 4:
                                            cutscenetime = 15000;
                                            break;
                                        case 5:
                                            cutscenetime = 15000;
                                            break;
                                    }
                                    while (Main.CutsceneExtra1 == null)
                                    {
                                        Main.CutsceneExtra1 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra1.IsVisible = false;
                                    while (Main.CutsceneExtra2 == null)
                                    {
                                        Main.CutsceneExtra2 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra2.IsVisible = false;
                                    while (Main.CutsceneExtra3 == null)
                                    {
                                        Main.CutsceneExtra3 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra3.IsVisible = false;

                                    int player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                    Ped ped2;
                                    ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                    Ped ped3;
                                    ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                    Ped ped4;
                                    ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);
                                    Main.PlayerModelSet(Game.Player.Character);
                                    LoadingPrompt.Show("Starting Cutscene", LoadingSpinnerType.RegularClockwise);
                                    //GameplayCamera.RelativeHeading = 161.3774f - Game.Player.Character.Heading;
                                    Main.LoadCutscene($"mp_intro_mcs_10_a{randcutscene}");
                                    while (!Function.Call<bool>(Hash.HAS_CUTSCENE_LOADED))
                                    {
                                        Main.LoadCutscene($"mp_intro_mcs_10_a{randcutscene}");
                                        Script.Yield();
                                    }
                                    player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                    ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                    ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                    ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);

                                    Main.SetPedOutfitCutscene("MP_1", Game.Player.Character);
                                    Main.SetPedOutfitCutscene_MP2("MP_2", ped2);
                                    Main.SetPedOutfitCutscene_MP3("MP_3", ped3);
                                    Main.SetPedOutfitCutscene_MP4("MP_4", ped4);// patch this shit its incorrect here

                                    Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Game.Player.Character, "MP_1", 0, 0, 64);
                                    if (ped2.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped2, "MP_2", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra1, "MP_2", 0, 0, 64);
                                    }
                                    if (ped3.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped3, "MP_3", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra2, "MP_3", 0, 0, 64);
                                    }
                                    if (ped4.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped4, "MP_4", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra3, "MP_4", 0, 0, 64);
                                    }

                                    //Function.Call(Hash.SET_CUTSCENE_ORIGIN, 1568.77f, 3217.713f, 40.41154f, 106.3544f, 0);
                                    Function.Call(Hash.START_CUTSCENE, 0);
                                    Wait(50);
                                    Main.PlayerModelSetBack(Game.Player.Character);
                                    Main.GetPedOutfitCutscene("MP_1", Game.Player.Character);
                                    Main.GetPedOutfitCutscene_MP2("MP_2", ped2);
                                    Main.GetPedOutfitCutscene_MP3("MP_3", ped3);
                                    Main.GetPedOutfitCutscene_MP4("MP_4", ped4);
                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();
                                    LoadingPrompt.Hide();

                                    while (Cutscenes.GET_CUTSCENE_TIME() < cutscenetime)
                                    {
                                        Wait(0);
                                    }

                                    Groups.RemoveEnemyPeds();
                                    Groups.ClearEnemyPedsList2();
                                    Vehicles.RemoveVehicles();
                                    Props.RemoveProps();
                                    Screen_Effects.CLEAR_ALL_HELP_MESSAGES();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebEnd", 0, true);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Wait(1000);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebPass", 0, true);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_MISSION");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomCashValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 1500, 12001);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomRPValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 600, 1391);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_MISSION");

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
                                    int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

                                    int getcurrentduration = 0;
                                    while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    getcurrentduration = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
                                    if (Main.DEBUG) Notification.Show($"{getcurrentduration}");

                                    int i = Game.GameTime + getcurrentduration;
                                    while (Game.GameTime < i)
                                    {
                                        HudHandler.HudandRadar(false, false);
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Game.Player.CanControlCharacter = true;

                                    int Timer = Game.GameTime + 4000;
                                    Game.Player.CanControlCharacter = false;
                                    PlayerSwitch._SWITCH_OUT_PLAYER(Game.Player.Character, 3, 1);
                                    while (Game.GameTime < Timer)
                                    {
                                        Wait(0);
                                    }

                                    Function.Call(Hash.SET_ENTITY_COORDS, Game.Player.Character, -91.57023f, -1523.439f, 33.58508f, true, false, false, true);
                                    Function.Call(Hash.SET_ENTITY_HEADING, Game.Player.Character, 170.8833f);
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    Game.Player.CanControlCharacter = true;

                                    Function.Call((Hash)0xAD5FDF34B81BFE79);
                                    Function.Call((Hash)0x43D1680C6D19A8E9);
                                    PlayerSwitch.SWITCH_IN_PLAYER(Game.Player.Character);
                                    while (PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                                    {
                                        Wait(0);
                                    }
                                    HudHandler.HudandRadar(true, true);
                                    MPCash.ADD_CASH(RandomCashValue);
                                    MPRank.ADD_RP(RandomRPValue);

                                    Main.RadioAllowed = true;
                                    Main.NoCopsOnMission = false;
                                    Main.FuckOffCivilians = false;
                                    Main.OnMission = false;
                                    Main.checkpoint = 0;
                                    MissionsSwitch = -1;
                                    MissionSwitch = 0;
                                }
                                break;
                        }
                    }
                    break;
                case 1://Death Metal
                    {
                        if (Main.checkpoint == 1 || Main.DEBUG)
                        {
                            if (TeamLives > 0)
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_black_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }
                            else
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_red_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 0, 0, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }

                            if (Game.Player.Character.IsDead)
                            {
                                TeamLives -= 1;

                                if (MissionSwitch == 3)
                                {
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    PickupSteal.RemovePickups();
                                    PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(Game.Player.Character.Position.X, Game.Player.Character.Position.Y, World.GetGroundHeight(Game.Player.Character.Position)), new Vector3(0f, 0f, Game.Player.Character.Heading), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Coke", false, 1f);

                                    Notification.Show("The coke has been dropped.");

                                    MissionSwitch = 2;
                                }

                                while (Game.Player.Character.IsDead)
                                {
                                    Wait(0);
                                }

                                if (TeamLives < 0)
                                {
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    while (Wall_Creator.FailCam == null)
                                    {
                                        Wall_Creator.FailCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", 0);
                                        Wait(0);
                                    }
                                    Random rand = new Random();
                                    int index = rand.Next(1, 3);
                                    if (index == 1)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 2.0f, 3.0f, 0.6f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    if (index == 2)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 1.0f, 3.0f, 0.5f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    World.RenderingCamera = Wall_Creator.FailCam;
                                    HudHandler.HudandRadar(false, false);
                                    Wait(1500);
                                    Screen.FadeIn(500);
                                    while (!Screen.IsFadedIn)
                                    {
                                        Wait(0);
                                    }
                                    Weapons.Anim_Weapon_Off();
                                    Audios.Stop_Music_Event();
                                    Game.Player.IsInvincible = true;
                                    Function.Call(Hash.SET_SEETHROUGH, false);
                                    Function.Call(Hash.SET_NIGHTVISION, false);
                                    Function.Call(Hash.SET_ARTIFICIAL_LIGHTS_STATE, false);
                                    Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
                                    Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFail", 0, false);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FAILED_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestHeist2PassScaleform();
                                    Wait(500);
                                    //Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_CELEB_SCREEN_SCENE");
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_FAILED");

                                    int i = Game.GameTime + 6000;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Screen.FadeOut(1000);
                                    Wait(1000);
                                    if (Wall_Creator.FailCam != null)
                                    {
                                        Wall_Creator.FailCam.Delete();
                                        Wall_Creator.FailCam = null;
                                    }
                                    World.RenderingCamera = null;
                                    Groups.RemoveEnemyPeds();
                                    Vehicles.RemoveVehicles();
                                    PickupSteal.RemovePickups();
                                    Game.Player.IsInvincible = false;
                                    MissionSwitch = 0;
                                    break;
                                }
                            }
                        }
                        switch (MissionSwitch)
                        {
                            case 0://contact mission start
                                {
                                    if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_START(-386.641f, -1754.883f, 20.3313f, 0.0f, 0.0f, 0.0f, 500f, 0);
                                    }
                                    string[] musicevents = {
                        "MP_MC_CMH_IAA_PREP_START",
                        "MP_MC_CMH_IAA_FINALE_START",
                        "MP_MC_CMH_SUB_PREP_START",
                        "MP_MC_CMH_SUB_FINALE_START",
                        "MP_MC_CMH_SILO_PREP_START",
                        "MP_MC_CMH_SILO_FINALE_START",
                        "MP_MC_CM22_START_TRACK_11",
                        "MP_MC_TUNER_START_MUSIC",
                        "MP_MC_GR_START",
                        "LOWRIDER_START_MUSIC",
                        "LOWRIDER_FINALE_START_MUSIC",
                        "MP_MC_START",
                        };
                                    Audios.TRIGGER_MUSIC_EVENT(musicevents[Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, musicevents.Length)]);
                                    Audios.TRIGGER_MUSIC_EVENT("MP_MC_SUSPENSE_HFIN");
                                    Audios.TRIGGER_MUSIC_EVENT("FH2B_EXPLODE");

                                    MPLoadout.GET_CURRENT_LOADOUT();
                                    MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(-392.27f, -1746.683f, 19.07878f), 349.1884f);

                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();
                                    
                                    Game.Player.Character.Task.ClearAll();
                                    Game.Player.CanControlCharacter = true;

                                    Game.Player.Character.Position = new Vector3(-386.641f, -1754.883f, 20.3313f - 1f);
                                    Game.Player.Character.Heading = 63.12796f;
                                    Game.Player.Character.IsPositionFrozen = true;
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    HudHandler.HudandRadar(false, false);

                                    Wait(1000);
                                    LoadingPrompt.Hide();
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Function.Call((Hash)0xEFACC8AEF94430D5, 1f);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    PlayerSwitch.STOP_PLAYER_SWITCH();
                                    if (LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                    }
                                    Game.Player.Character.IsPositionFrozen = false;

                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true); //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "PUSH", "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS", true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_INTRO_TO_WALL", "intro", "Mission", "Death Metal", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_INTRO_TO_WALL", "intro", "Mission", "Death Metal", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_INTRO_TO_WALL", "intro", "Mission", "Death Metal", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "intro");
                                    Screen.FadeIn(1000);

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
                                    int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

                                    int getcurrentduration = 0;
                                    while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    getcurrentduration = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
                                    if (Main.DEBUG) Notification.Show($"{getcurrentduration}");

                                    int i = Game.GameTime + getcurrentduration;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Mobile_Phone.CAN_OPEN_PHONE = true;
                                    //Function.Call(Hash.PREPARE_MUSIC_EVENT, "FH2B_EXPLODE");
                                    //Audios.TRIGGER_MUSIC_EVENT("MP_CHF_ACTION");
                                    HudHandler.HudandRadar(true, true);
                                    Main.checkpoint = 1;
                                    TeamLives = 1;
                                    MissionSwitch = 1;
                                }
                                break;
                            case 1://spawn everything
                                {
                                    Vector3[] randomspawn = { new Vector3(-415.671f, -1736.399f, 19.8048f), new Vector3(-399.615f, -1695.595f, 18.79686f) };
                                    float[] randomspawnhead = { 355.8192f, 144.3056f };
                                    int rand = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, randomspawn.Length);
                                    RESPAWN.SET_MIS_STAT(randomspawn[rand], randomspawnhead[rand], 0, true);

                                    Vehicles.RemoveVehicles();
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x8E9254FB, new Vector3(-454.9674f, -1705.656f, 18.33305f - 1f), 129.8943f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x8E9254FB, new Vector3(-461.0089f, -1712.186f, 18.18788f - 1f), 127.5357f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(-468.8799f, -1717.695f, 18.50172f - 1f), 104.6522f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(-467.5177f, -1721.279f, 18.46592f - 1f), 102.9076f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(-454.3318f, -1719.629f, 18.50506f - 1f), 159.6244f, false, false);

                                    Groups.RemoveEnemyPeds();
                                    Groups.SPAWN_AI((PedHash)0xF42EE883, new Vector3(-454.0518f, -1707.464f, 18.76344f - 1f), 141.7541f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0xF42EE883, new Vector3(-456.0075f, -1703.82f, 18.85977f - 1f), 120.1553f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0xF42EE883, new Vector3(-458.8076f, -1707.821f, 18.79309f - 1f), 108.8984f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0xF42EE883, new Vector3(-462.6485f, -1710.578f, 18.65545f - 1f), 169.9057f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0xF42EE883, new Vector3(-460.4207f, -1713.729f, 18.65548f - 1f), 106.0308f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x106D9A99, new Vector3(-451.7983f, -1720.589f, 18.72239f - 1f), 19.22449f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x106D9A99, new Vector3(-457.1409f, -1722.853f, 18.68701f - 1f), 24.13794f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x106D9A99, new Vector3(-456.9156f, -1719.471f, 18.66552f - 1f), 45.12213f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x106D9A99, new Vector3(-465.2749f, -1718.893f, 18.68462f - 1f), -39.42915f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.BlipUpEnemyPeds();

                                    if (CarryPed != null)
                                    {
                                        CarryPed.Delete();
                                        CarryPed = null;
                                    }
                                    while (CarryPed == null)
                                    {
                                        CarryPed = World.CreatePed((PedHash)0x106D9A99, new Vector3(-461.1777f, -1721.657f, 18.63889f - 1f), -4.267222f);
                                        Wait(0);
                                    }
                                    CarryPed.RelationshipGroup = Groups.AiTeam;
                                    CarryPed.Weapons.Give(WeaponHash.Pistol, 10000, true, true);
                                    while (CarryPed.AttachedBlip == null)
                                    {
                                        CarryPed.AddBlip();
                                        Wait(0);
                                    }
                                    CarryPed.AttachedBlip.Sprite = (BlipSprite)1;
                                    CarryPed.AttachedBlip.Color = BlipColor.Green;
                                    CarryPed.AttachedBlip.Name = "Coke";

                                    PickupSteal.RemovePickups();

                                    MissionSwitch = 2;
                                }
                                break;
                            case 2://steal the Coke
                                {
                                    if (Game.Player.Character.IsInCombat || CarryPed != null && CarryPed.IsInCombatAgainst(Game.Player.Character))
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_ACTION_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                        }
                                    }
                                    if (CarryPed != null)
                                    {
                                        if (CarryPed.IsDead)
                                        {
                                            PickupSteal.RemovePickups();
                                            PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(CarryPed.Position.X, CarryPed.Position.Y, World.GetGroundHeight(CarryPed.Position)), new Vector3(0f, 0f, CarryPed.Heading), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Coke", false, 1f);

                                            Notification.Show("The coke has been dropped.");

                                            if (CarryPed.AttachedBlip != null)
                                            {
                                                CarryPed.AttachedBlip.Delete();
                                            }
                                            CarryPed.MarkAsNoLongerNeeded();
                                            CarryPed = null;
                                        }
                                    }
                                    else
                                    {
                                        if (PickupSteal.PickupSpawn.Count == 0)
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                                            Notification.Show("~b~" + Main.Player_Name + "~w~ collected the coke.");
                                            MissionSwitch = 3;
                                        }
                                    }
                                    Screen.ShowSubtitle("Steal the ~g~coke.~w~");
                                }
                                break;
                            case 3://deliver the coke to gerald
                                {
                                    if (Game.Player.Character.IsInCombat || CarryPed != null && CarryPed.IsInCombatAgainst(Game.Player.Character))
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_ACTION_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                        }
                                    }
                                    else
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_AIRBORNE_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                                        }
                                    }
                                    Screen.ShowSubtitle("Deliver the ~g~coke~w~ to ~y~Gerald's apartment.~w~");

                                    if (Main.missionBlip == null)
                                    {
                                        if (Main.missionBlip != null)
                                        {
                                            Main.missionBlip.Delete();
                                            Main.missionBlip = null;
                                        }
                                        while (Main.missionBlip == null)
                                        {
                                            Main.missionBlip = World.CreateBlip(new Vector3(-61.89631f, -1514.137f, 33.43623f));
                                            Wait(0);
                                        }
                                        HudHandler.SET_GPS(Main.missionBlip, 156, false, true);
                                    }
                                    else
                                    {
                                        if (Game.Player.Character.CurrentVehicle == null && Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 4)
                                        {
                                            Groups.RemoveEnemyPeds();
                                            Vehicles.RemoveVehicles();
                                            PickupSteal.RemovePickups();

                                            if (Main.missionBlip != null)
                                            {
                                                Main.missionBlip.Delete();
                                                Main.missionBlip = null;
                                                HudHandler.CLEAR_GPS_ROUTE();
                                            }
                                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "FocusIn", "HintCamSounds", true);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);
                                            HudHandler.HudandRadar(false, false);
                                            Audios.Stop_Music_Event();
                                            MissionSwitch = 4;
                                        }
                                    }
                                }
                                break;
                            case 4://delviered coke to gerald
                                {
                                    int randcutscene = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 2, 6);
                                    int cutscenetime = 20000;
                                    switch (randcutscene)
                                    {
                                        case 2:
                                            cutscenetime = 20000;
                                            break;
                                        case 3:
                                            cutscenetime = 16000;
                                            break;
                                        case 4:
                                            cutscenetime = 15000;
                                            break;
                                        case 5:
                                            cutscenetime = 15000;
                                            break;
                                    }
                                    while (Main.CutsceneExtra1 == null)
                                    {
                                        Main.CutsceneExtra1 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra1.IsVisible = false;
                                    while (Main.CutsceneExtra2 == null)
                                    {
                                        Main.CutsceneExtra2 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra2.IsVisible = false;
                                    while (Main.CutsceneExtra3 == null)
                                    {
                                        Main.CutsceneExtra3 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra3.IsVisible = false;

                                    int player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                    Ped ped2;
                                    ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                    Ped ped3;
                                    ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                    Ped ped4;
                                    ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);
                                    Main.PlayerModelSet(Game.Player.Character);
                                    LoadingPrompt.Show("Starting Cutscene", LoadingSpinnerType.RegularClockwise);
                                    //GameplayCamera.RelativeHeading = 161.3774f - Game.Player.Character.Heading;
                                    Main.LoadCutscene($"mp_intro_mcs_10_a{randcutscene}");
                                    while (!Function.Call<bool>(Hash.HAS_CUTSCENE_LOADED))
                                    {
                                        Main.LoadCutscene($"mp_intro_mcs_10_a{randcutscene}");
                                        Script.Yield();
                                    }
                                    player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                    ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                    ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                    ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);

                                    Main.SetPedOutfitCutscene("MP_1", Game.Player.Character);
                                    Main.SetPedOutfitCutscene_MP2("MP_2", ped2);
                                    Main.SetPedOutfitCutscene_MP3("MP_3", ped3);
                                    Main.SetPedOutfitCutscene_MP4("MP_4", ped4);// patch this shit its incorrect here

                                    Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Game.Player.Character, "MP_1", 0, 0, 64);
                                    if (ped2.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped2, "MP_2", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra1, "MP_2", 0, 0, 64);
                                    }
                                    if (ped3.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped3, "MP_3", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra2, "MP_3", 0, 0, 64);
                                    }
                                    if (ped4.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped4, "MP_4", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra3, "MP_4", 0, 0, 64);
                                    }

                                    //Function.Call(Hash.SET_CUTSCENE_ORIGIN, 1568.77f, 3217.713f, 40.41154f, 106.3544f, 0);
                                    Function.Call(Hash.START_CUTSCENE, 0);
                                    Wait(50);
                                    Main.PlayerModelSetBack(Game.Player.Character);
                                    Main.GetPedOutfitCutscene("MP_1", Game.Player.Character);
                                    Main.GetPedOutfitCutscene_MP2("MP_2", ped2);
                                    Main.GetPedOutfitCutscene_MP3("MP_3", ped3);
                                    Main.GetPedOutfitCutscene_MP4("MP_4", ped4);
                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();
                                    LoadingPrompt.Hide();

                                    while (Cutscenes.GET_CUTSCENE_TIME() < cutscenetime)
                                    {
                                        Wait(0);
                                    }

                                    Groups.RemoveEnemyPeds();
                                    Groups.ClearEnemyPedsList2();
                                    Vehicles.RemoveVehicles();
                                    Props.RemoveProps();
                                    Screen_Effects.CLEAR_ALL_HELP_MESSAGES();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebEnd", 0, true);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Wait(1000);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebPass", 0, true);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_MISSION");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomCashValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 3000, 10001);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomRPValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 700, 1421);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_MISSION");

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
                                    int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

                                    int getcurrentduration = 0;
                                    while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    getcurrentduration = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
                                    if (Main.DEBUG) Notification.Show($"{getcurrentduration}");

                                    int i = Game.GameTime + getcurrentduration;
                                    while (Game.GameTime < i)
                                    {
                                        HudHandler.HudandRadar(false, false);
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Game.Player.CanControlCharacter = true;

                                    int Timer = Game.GameTime + 4000;
                                    Game.Player.CanControlCharacter = false;
                                    PlayerSwitch._SWITCH_OUT_PLAYER(Game.Player.Character, 3, 1);
                                    while (Game.GameTime < Timer)
                                    {
                                        Wait(0);
                                    }

                                    Function.Call(Hash.SET_ENTITY_COORDS, Game.Player.Character, -91.57023f, -1523.439f, 33.58508f, true, false, false, true);
                                    Function.Call(Hash.SET_ENTITY_HEADING, Game.Player.Character, 170.8833f);
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    Game.Player.CanControlCharacter = true;

                                    Function.Call((Hash)0xAD5FDF34B81BFE79);
                                    Function.Call((Hash)0x43D1680C6D19A8E9);
                                    PlayerSwitch.SWITCH_IN_PLAYER(Game.Player.Character);
                                    while (PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                                    {
                                        Wait(0);
                                    }
                                    HudHandler.HudandRadar(true, true);
                                    MPCash.ADD_CASH(RandomCashValue);
                                    MPRank.ADD_RP(RandomRPValue);

                                    Main.RadioAllowed = true;
                                    Main.NoCopsOnMission = false;
                                    Main.FuckOffCivilians = false;
                                    Main.OnMission = false;
                                    Main.checkpoint = 0;
                                    MissionsSwitch = -1;
                                    MissionSwitch = 0;
                                }
                                break;
                        }
                    }
                    break;
                case 2://Deal Breaker
                    {
                        if (Main.checkpoint == 1 || Main.DEBUG)
                        {
                            if (TeamLives > 0)
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_black_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }
                            else
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_red_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 0, 0, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }

                            if (Game.Player.Character.IsDead)
                            {
                                TeamLives -= 1;

                                if (MissionSwitch == 4)
                                {
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    PickupSteal.RemovePickups();
                                    PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(Game.Player.Character.Position.X, Game.Player.Character.Position.Y, World.GetGroundHeight(Game.Player.Character.Position)), new Vector3(0f, 0f, Game.Player.Character.Heading), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Coke", false, 1f);

                                    Notification.Show("The coke has been dropped.");

                                    MissionSwitch = 3;
                                }

                                while (Game.Player.Character.IsDead)
                                {
                                    Wait(0);
                                }

                                if (TeamLives < 0)
                                {
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    while (Wall_Creator.FailCam == null)
                                    {
                                        Wall_Creator.FailCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", 0);
                                        Wait(0);
                                    }
                                    Random rand = new Random();
                                    int index = rand.Next(1, 3);
                                    if (index == 1)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 2.0f, 3.0f, 0.6f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    if (index == 2)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 1.0f, 3.0f, 0.5f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    World.RenderingCamera = Wall_Creator.FailCam;
                                    HudHandler.HudandRadar(false, false);
                                    Wait(1500);
                                    Screen.FadeIn(500);
                                    while (!Screen.IsFadedIn)
                                    {
                                        Wait(0);
                                    }
                                    Weapons.Anim_Weapon_Off();
                                    Audios.Stop_Music_Event();
                                    Game.Player.IsInvincible = true;
                                    Function.Call(Hash.SET_SEETHROUGH, false);
                                    Function.Call(Hash.SET_NIGHTVISION, false);
                                    Function.Call(Hash.SET_ARTIFICIAL_LIGHTS_STATE, false);
                                    Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
                                    Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFail", 0, false);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FAILED_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestHeist2PassScaleform();
                                    Wait(500);
                                    //Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_CELEB_SCREEN_SCENE");
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_FAILED");

                                    int i = Game.GameTime + 6000;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Screen.FadeOut(1000);
                                    Wait(1000);
                                    if (Wall_Creator.FailCam != null)
                                    {
                                        Wall_Creator.FailCam.Delete();
                                        Wall_Creator.FailCam = null;
                                    }
                                    World.RenderingCamera = null;
                                    Groups.RemoveEnemyPeds();
                                    Vehicles.RemoveVehicles();
                                    PickupSteal.RemovePickups();
                                    Props.RemoveProps();
                                    Game.Player.IsInvincible = false;
                                    MissionSwitch = 0;
                                    break;
                                }
                            }
                        }
                        switch (MissionSwitch)
                        {
                            case 0://contact mission start
                                {
                                    if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_START(205.6608f, -1825.214f, 28.00045f, 0.0f, 0.0f, 0.0f, 500f, 0);
                                    }
                                    string[] musicevents = {
                        "MP_MC_CMH_IAA_PREP_START",
                        "MP_MC_CMH_IAA_FINALE_START",
                        "MP_MC_CMH_SUB_PREP_START",
                        "MP_MC_CMH_SUB_FINALE_START",
                        "MP_MC_CMH_SILO_PREP_START",
                        "MP_MC_CMH_SILO_FINALE_START",
                        "MP_MC_CM22_START_TRACK_11",
                        "MP_MC_TUNER_START_MUSIC",
                        "MP_MC_GR_START",
                        "LOWRIDER_START_MUSIC",
                        "LOWRIDER_FINALE_START_MUSIC",
                        "MP_MC_START",
                        };
                                    Audios.TRIGGER_MUSIC_EVENT(musicevents[Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, musicevents.Length)]);
                                    Audios.TRIGGER_MUSIC_EVENT("MP_MC_SUSPENSE_HFIN");
                                    Audios.TRIGGER_MUSIC_EVENT("FH2B_EXPLODE");

                                    MPLoadout.GET_CURRENT_LOADOUT();
                                    MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(212.2104f, -1824.561f, 26.91623f), 229.3745f);

                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();

                                    Game.Player.Character.Task.ClearAll();
                                    Game.Player.CanControlCharacter = true;

                                    Game.Player.Character.Position = new Vector3(205.6608f, -1825.214f, 28.00045f - 1f);
                                    Game.Player.Character.Heading = 227.704f;
                                    Game.Player.Character.IsPositionFrozen = true;
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    HudHandler.HudandRadar(false, false);

                                    Wait(1000);
                                    LoadingPrompt.Hide();
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Function.Call((Hash)0xEFACC8AEF94430D5, 1f);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    PlayerSwitch.STOP_PLAYER_SWITCH();
                                    if (LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                    }
                                    Game.Player.Character.IsPositionFrozen = false;

                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true); //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "PUSH", "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS", true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_INTRO_TO_WALL", "intro", "Mission", "Deal Breaker", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_INTRO_TO_WALL", "intro", "Mission", "Deal Breaker", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_INTRO_TO_WALL", "intro", "Mission", "Deal Breaker", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "intro");
                                    Screen.FadeIn(1000);

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
                                    int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

                                    int getcurrentduration = 0;
                                    while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    getcurrentduration = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
                                    if (Main.DEBUG) Notification.Show($"{getcurrentduration}");

                                    int i = Game.GameTime + getcurrentduration;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Mobile_Phone.CAN_OPEN_PHONE = true;
                                    //Function.Call(Hash.PREPARE_MUSIC_EVENT, "FH2B_EXPLODE");
                                    //Audios.TRIGGER_MUSIC_EVENT("MP_CHF_ACTION");
                                    HudHandler.HudandRadar(true, true);
                                    Main.checkpoint = 1;
                                    TeamLives = 1;
                                    MissionSwitch = 1;
                                }
                                break;
                            case 1://go to deal
                                {
                                    Vector3[] randomspawn = { new Vector3(193.2419f, -2180.758f, 7.056179f), new Vector3(181.546f, -2220.342f, 5.950424f) };
                                    float[] randomspawnhead = { 120.1247f, 2.045811f };
                                    int rand = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, randomspawn.Length);
                                    RESPAWN.SET_MIS_STAT(randomspawn[rand], randomspawnhead[rand], 0, true);

                                    Screen.ShowSubtitle("Go to the ~y~drug deal.~w~");

                                    if (Main.missionBlip == null)
                                    {
                                        if (Main.missionBlip != null)
                                        {
                                            Main.missionBlip.Delete();
                                            Main.missionBlip = null;
                                        }
                                        while (Main.missionBlip == null)
                                        {
                                            Main.missionBlip = World.CreateBlip(new Vector3(181.2354f, -2189.321f, 6.564967f));
                                            Wait(0);
                                        }
                                        HudHandler.SET_GPS(Main.missionBlip, 156, false, true);
                                    }
                                    else
                                    {
                                        if (Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 100f)
                                        {
                                            if (Main.missionBlip != null)
                                            {
                                                Main.missionBlip.Delete();
                                                Main.missionBlip = null;
                                                HudHandler.CLEAR_GPS_ROUTE();
                                            }
                                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "FocusIn", "HintCamSounds", true);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);
                                            MissionSwitch = 2;
                                        }
                                    }
                                }
                                break;
                            case 2://spawn everything
                                {
                                    Vehicles.RemoveVehicles();
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(127.1273f, -2187.824f, 5.767961f - 1f), 118.5061f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD7278283, new Vector3(117.7244f, -2190.091f, 5.491157f - 1f), -84.31845f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD7278283, new Vector3(120.8648f, -2195.08f, 5.535892f - 1f), -52.64363f, false, false);

                                    Props.RemoveProps();
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(1367246936), new Vector3(162.3156f, -2186.936f, 4.962397f), new Vector3(0f, 0f, 90.3083f), false, true, true, true, true);
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(1367246936), new Vector3(153.8813f, -2186.906f, 4.962398f), new Vector3(0f, 0f, 90.30757f), false, true, true, true, true);

                                    Groups.RemoveEnemyPeds();
                                    Groups.SPAWN_AI((PedHash)0x231AF63F, new Vector3(146.3028f, -2191.512f, 6.015697f - 1f), 88.36108f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x231AF63F, new Vector3(139.5982f, -2191.672f, 6.01863f - 1f), 87.64391f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x231AF63F, new Vector3(132.1201f, -2189.242f, 5.973956f - 1f), 121.4225f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x231AF63F, new Vector3(132.5236f, -2193.274f, 6.032865f - 1f), 78.22581f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(123.4885f, -2196.742f, 6.032792f - 1f), -56.11592f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(122.3074f, -2189.304f, 5.975276f - 1f), -132.018f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(120.4882f, -2186.968f, 5.952304f - 1f), -107.7561f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.BlipUpEnemyPeds();

                                    if (CarryPed != null)
                                    {
                                        CarryPed.Delete();
                                        CarryPed = null;
                                    }
                                    while (CarryPed == null)
                                    {
                                        CarryPed = World.CreatePed((PedHash)0x31A3498E, new Vector3(124.8233f, -2192.63f, 6.037493f - 1f), -81.24534f);
                                        Wait(0);
                                    }
                                    CarryPed.RelationshipGroup = Groups.AiTeam;
                                    CarryPed.Weapons.Give(WeaponHash.Pistol, 10000, true, true);
                                    while (CarryPed.AttachedBlip == null)
                                    {
                                        CarryPed.AddBlip();
                                        Wait(0);
                                    }
                                    CarryPed.AttachedBlip.Sprite = (BlipSprite)1;
                                    CarryPed.AttachedBlip.Color = BlipColor.Green;
                                    CarryPed.AttachedBlip.Name = "Coke";

                                    PickupSteal.RemovePickups();

                                    MissionSwitch = 3;
                                }
                                break;
                            case 3://steal the Coke
                                {
                                    if (Game.Player.Character.IsInCombat || CarryPed != null && CarryPed.IsInCombatAgainst(Game.Player.Character))
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_ACTION_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                        }
                                    }
                                    if (CarryPed != null)
                                    {
                                        if (CarryPed.IsDead)
                                        {
                                            PickupSteal.RemovePickups();
                                            PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(CarryPed.Position.X, CarryPed.Position.Y, World.GetGroundHeight(CarryPed.Position)), new Vector3(0f, 0f, CarryPed.Heading), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Coke", false, 1f);

                                            Notification.Show("The coke has been dropped.");

                                            if (CarryPed.AttachedBlip != null)
                                            {
                                                CarryPed.AttachedBlip.Delete();
                                            }
                                            CarryPed.MarkAsNoLongerNeeded();
                                            CarryPed = null;
                                        }
                                    }
                                    else
                                    {
                                        if (PickupSteal.PickupSpawn.Count == 0)
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                                            Notification.Show("~b~" + Main.Player_Name + "~w~ collected the coke.");
                                            MissionSwitch = 4;
                                        }
                                    }
                                    Screen.ShowSubtitle("Steal the ~g~coke.~w~");
                                }
                                break;
                            case 4://deliver the coke to gerald
                                {
                                    if (Game.Player.Character.IsInCombat || CarryPed != null && CarryPed.IsInCombatAgainst(Game.Player.Character))
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_ACTION_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                        }
                                    }
                                    else
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_AIRBORNE_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                                        }
                                    }
                                    Screen.ShowSubtitle("Deliver the ~g~coke~w~ to ~y~Gerald's apartment.~w~");

                                    if (Main.missionBlip == null)
                                    {
                                        if (Main.missionBlip != null)
                                        {
                                            Main.missionBlip.Delete();
                                            Main.missionBlip = null;
                                        }
                                        while (Main.missionBlip == null)
                                        {
                                            Main.missionBlip = World.CreateBlip(new Vector3(-61.89631f, -1514.137f, 33.43623f));
                                            Wait(0);
                                        }
                                        HudHandler.SET_GPS(Main.missionBlip, 156, false, true);
                                    }
                                    else
                                    {
                                        if (Game.Player.Character.CurrentVehicle == null && Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 4)
                                        {
                                            Props.RemoveProps();
                                            Groups.RemoveEnemyPeds();
                                            Vehicles.RemoveVehicles();
                                            PickupSteal.RemovePickups();

                                            if (Main.missionBlip != null)
                                            {
                                                Main.missionBlip.Delete();
                                                Main.missionBlip = null;
                                                HudHandler.CLEAR_GPS_ROUTE();
                                            }
                                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "FocusIn", "HintCamSounds", true);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);
                                            HudHandler.HudandRadar(false, false);
                                            Audios.Stop_Music_Event();
                                            MissionSwitch = 5;
                                        }
                                    }
                                }
                                break;
                            case 5://delviered coke to gerald
                                {
                                    int randcutscene = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 2, 6);
                                    int cutscenetime = 20000;
                                    switch (randcutscene)
                                    {
                                        case 2:
                                            cutscenetime = 20000;
                                            break;
                                        case 3:
                                            cutscenetime = 16000;
                                            break;
                                        case 4:
                                            cutscenetime = 15000;
                                            break;
                                        case 5:
                                            cutscenetime = 15000;
                                            break;
                                    }
                                    while (Main.CutsceneExtra1 == null)
                                    {
                                        Main.CutsceneExtra1 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra1.IsVisible = false;
                                    while (Main.CutsceneExtra2 == null)
                                    {
                                        Main.CutsceneExtra2 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra2.IsVisible = false;
                                    while (Main.CutsceneExtra3 == null)
                                    {
                                        Main.CutsceneExtra3 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra3.IsVisible = false;

                                    int player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                    Ped ped2;
                                    ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                    Ped ped3;
                                    ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                    Ped ped4;
                                    ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);
                                    Main.PlayerModelSet(Game.Player.Character);
                                    LoadingPrompt.Show("Starting Cutscene", LoadingSpinnerType.RegularClockwise);
                                    //GameplayCamera.RelativeHeading = 161.3774f - Game.Player.Character.Heading;
                                    Main.LoadCutscene($"mp_intro_mcs_10_a{randcutscene}");
                                    while (!Function.Call<bool>(Hash.HAS_CUTSCENE_LOADED))
                                    {
                                        Main.LoadCutscene($"mp_intro_mcs_10_a{randcutscene}");
                                        Script.Yield();
                                    }
                                    player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                    ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                    ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                    ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);

                                    Main.SetPedOutfitCutscene("MP_1", Game.Player.Character);
                                    Main.SetPedOutfitCutscene_MP2("MP_2", ped2);
                                    Main.SetPedOutfitCutscene_MP3("MP_3", ped3);
                                    Main.SetPedOutfitCutscene_MP4("MP_4", ped4);// patch this shit its incorrect here

                                    Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Game.Player.Character, "MP_1", 0, 0, 64);
                                    if (ped2.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped2, "MP_2", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra1, "MP_2", 0, 0, 64);
                                    }
                                    if (ped3.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped3, "MP_3", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra2, "MP_3", 0, 0, 64);
                                    }
                                    if (ped4.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped4, "MP_4", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra3, "MP_4", 0, 0, 64);
                                    }

                                    //Function.Call(Hash.SET_CUTSCENE_ORIGIN, 1568.77f, 3217.713f, 40.41154f, 106.3544f, 0);
                                    Function.Call(Hash.START_CUTSCENE, 0);
                                    Wait(50);
                                    Main.PlayerModelSetBack(Game.Player.Character);
                                    Main.GetPedOutfitCutscene("MP_1", Game.Player.Character);
                                    Main.GetPedOutfitCutscene_MP2("MP_2", ped2);
                                    Main.GetPedOutfitCutscene_MP3("MP_3", ped3);
                                    Main.GetPedOutfitCutscene_MP4("MP_4", ped4);
                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();
                                    LoadingPrompt.Hide();

                                    while (Cutscenes.GET_CUTSCENE_TIME() < cutscenetime)
                                    {
                                        Wait(0);
                                    }

                                    Groups.RemoveEnemyPeds();
                                    Groups.ClearEnemyPedsList2();
                                    Vehicles.RemoveVehicles();
                                    Props.RemoveProps();
                                    Screen_Effects.CLEAR_ALL_HELP_MESSAGES();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebEnd", 0, true);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Wait(1000);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebPass", 0, true);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_MISSION");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomCashValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 1000, 9001);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomRPValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 400, 1421);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_MISSION");

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
                                    int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

                                    int getcurrentduration = 0;
                                    while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    getcurrentduration = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
                                    if (Main.DEBUG) Notification.Show($"{getcurrentduration}");

                                    int i = Game.GameTime + getcurrentduration;
                                    while (Game.GameTime < i)
                                    {
                                        HudHandler.HudandRadar(false, false);
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Game.Player.CanControlCharacter = true;

                                    int Timer = Game.GameTime + 4000;
                                    Game.Player.CanControlCharacter = false;
                                    PlayerSwitch._SWITCH_OUT_PLAYER(Game.Player.Character, 3, 1);
                                    while (Game.GameTime < Timer)
                                    {
                                        Wait(0);
                                    }

                                    Function.Call(Hash.SET_ENTITY_COORDS, Game.Player.Character, -91.57023f, -1523.439f, 33.58508f, true, false, false, true);
                                    Function.Call(Hash.SET_ENTITY_HEADING, Game.Player.Character, 170.8833f);
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    Game.Player.CanControlCharacter = true;

                                    Function.Call((Hash)0xAD5FDF34B81BFE79);
                                    Function.Call((Hash)0x43D1680C6D19A8E9);
                                    PlayerSwitch.SWITCH_IN_PLAYER(Game.Player.Character);
                                    while (PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                                    {
                                        Wait(0);
                                    }
                                    HudHandler.HudandRadar(true, true);
                                    MPCash.ADD_CASH(RandomCashValue);
                                    MPRank.ADD_RP(RandomRPValue);

                                    Main.RadioAllowed = true;
                                    Main.NoCopsOnMission = false;
                                    Main.FuckOffCivilians = false;
                                    Main.OnMission = false;
                                    Main.checkpoint = 0;
                                    MissionsSwitch = -1;
                                    MissionSwitch = 0;
                                }
                                break;
                        }
                    }
                    break;
                case 3://Flood In The LS River
                    {
                        if (Main.checkpoint == 1 || Main.DEBUG)
                        {
                            if (TeamLives > 0)
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_black_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }
                            else
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_red_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 0, 0, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }

                            if (Game.Player.Character.IsDead)
                            {
                                TeamLives -= 1;

                                if (MissionSwitch == 3)
                                {
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    PickupSteal.RemovePickups();
                                    PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(Game.Player.Character.Position.X, Game.Player.Character.Position.Y, World.GetGroundHeight(Game.Player.Character.Position)), new Vector3(0f, 0f, Game.Player.Character.Heading), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Meth", false, 1f);

                                    Notification.Show("The meth has been dropped.");

                                    MissionSwitch = 2;
                                }

                                while (Game.Player.Character.IsDead)
                                {
                                    Wait(0);
                                }

                                if (TeamLives < 0)
                                {
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    while (Wall_Creator.FailCam == null)
                                    {
                                        Wall_Creator.FailCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", 0);
                                        Wait(0);
                                    }
                                    Random rand = new Random();
                                    int index = rand.Next(1, 3);
                                    if (index == 1)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 2.0f, 3.0f, 0.6f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    if (index == 2)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 1.0f, 3.0f, 0.5f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    World.RenderingCamera = Wall_Creator.FailCam;
                                    HudHandler.HudandRadar(false, false);
                                    Wait(1500);
                                    Screen.FadeIn(500);
                                    while (!Screen.IsFadedIn)
                                    {
                                        Wait(0);
                                    }
                                    Weapons.Anim_Weapon_Off();
                                    Audios.Stop_Music_Event();
                                    Game.Player.IsInvincible = true;
                                    Function.Call(Hash.SET_SEETHROUGH, false);
                                    Function.Call(Hash.SET_NIGHTVISION, false);
                                    Function.Call(Hash.SET_ARTIFICIAL_LIGHTS_STATE, false);
                                    Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
                                    Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFail", 0, false);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FAILED_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestHeist2PassScaleform();
                                    Wait(500);
                                    //Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_CELEB_SCREEN_SCENE");
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_FAILED");

                                    int i = Game.GameTime + 6000;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Screen.FadeOut(1000);
                                    Wait(1000);
                                    if (Wall_Creator.FailCam != null)
                                    {
                                        Wall_Creator.FailCam.Delete();
                                        Wall_Creator.FailCam = null;
                                    }
                                    World.RenderingCamera = null;
                                    Groups.RemoveEnemyPeds();
                                    Vehicles.RemoveVehicles();
                                    PickupSteal.RemovePickups();
                                    Props.RemoveProps();
                                    Game.Player.IsInvincible = false;
                                    MissionSwitch = 0;
                                    break;
                                }
                            }
                        }
                        switch (MissionSwitch)
                        {
                            case 0://contact mission start
                                {
                                    if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_START(-48.17282f, -1510.861f, 31.14882f, 0.0f, 0.0f, 0.0f, 500f, 0);
                                    }
                                    string[] musicevents = {
                        "MP_MC_CMH_IAA_PREP_START",
                        "MP_MC_CMH_IAA_FINALE_START",
                        "MP_MC_CMH_SUB_PREP_START",
                        "MP_MC_CMH_SUB_FINALE_START",
                        "MP_MC_CMH_SILO_PREP_START",
                        "MP_MC_CMH_SILO_FINALE_START",
                        "MP_MC_CM22_START_TRACK_11",
                        "MP_MC_TUNER_START_MUSIC",
                        "MP_MC_GR_START",
                        "LOWRIDER_START_MUSIC",
                        "LOWRIDER_FINALE_START_MUSIC",
                        "MP_MC_START",
                        };
                                    Audios.TRIGGER_MUSIC_EVENT(musicevents[Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, musicevents.Length)]);
                                    Audios.TRIGGER_MUSIC_EVENT("MP_MC_SUSPENSE_HFIN");
                                    Audios.TRIGGER_MUSIC_EVENT("FH2B_EXPLODE");

                                    MPLoadout.GET_CURRENT_LOADOUT();
                                    MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(-66.47482f, -1555.095f, 30.90086f), 49.97379f);

                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();

                                    Game.Player.Character.Task.ClearAll();
                                    Game.Player.CanControlCharacter = true;

                                    Game.Player.Character.Position = new Vector3(-48.17282f, -1510.861f, 31.14882f - 1f);
                                    Game.Player.Character.Heading = 52.46837f;
                                    Game.Player.Character.IsPositionFrozen = true;
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    HudHandler.HudandRadar(false, false);

                                    Wait(1000);
                                    LoadingPrompt.Hide();
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Function.Call((Hash)0xEFACC8AEF94430D5, 1f);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    PlayerSwitch.STOP_PLAYER_SWITCH();
                                    if (LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                    }
                                    Game.Player.Character.IsPositionFrozen = false;

                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true); //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "PUSH", "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS", true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_INTRO_TO_WALL", "intro", "Mission", "Flood In The LS River", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_INTRO_TO_WALL", "intro", "Mission", "Flood In The LS River", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_INTRO_TO_WALL", "intro", "Mission", "Flood In The LS River", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "intro");
                                    Screen.FadeIn(1000);

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
                                    int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

                                    int getcurrentduration = 0;
                                    while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    getcurrentduration = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
                                    if (Main.DEBUG) Notification.Show($"{getcurrentduration}");

                                    int i = Game.GameTime + getcurrentduration;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Mobile_Phone.CAN_OPEN_PHONE = true;
                                    //Function.Call(Hash.PREPARE_MUSIC_EVENT, "FH2B_EXPLODE");
                                    //Audios.TRIGGER_MUSIC_EVENT("MP_CHF_ACTION");
                                    HudHandler.HudandRadar(true, true);
                                    Main.checkpoint = 1;
                                    TeamLives = 1;
                                    MissionSwitch = 1;
                                }
                                break;
                            case 1://spawn everything
                                {
                                    Vector3[] randomspawn = { new Vector3(727.2988f, -1508.577f, 19.77336f), new Vector3(730.5753f, -1497.965f, 19.97569f) };
                                    float[] randomspawnhead = { 140.224f, 141.6418f };
                                    int rand = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, randomspawn.Length);
                                    RESPAWN.SET_MIS_STAT(randomspawn[rand], randomspawnhead[rand], 0, true);

                                    Vehicles.RemoveVehicles();
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xDE05FB87, new Vector3(698.0033f, -1535.508f, 9.168901f - 1f), -142.4816f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xDE05FB87, new Vector3(695.1926f, -1535.211f, 9.168889f - 1f), -140.5316f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xDE05FB87, new Vector3(694.8201f, -1538.137f, 9.169022f - 1f), -135.6737f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x97FA4F36, new Vector3(690.8514f, -1540.882f, 9.524802f - 1f), 33.69438f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(701.9117f, -1551.627f, 9.521536f - 1f), 33.54203f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(695.5085f, -1555.646f, 9.521178f - 1f), 0.06954068f, false, false);

                                    Props.RemoveProps();
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(-629735826), new Vector3(683.1464f, -1541.985f, 8.71011f), new Vector3(0f, 0f, 16.74391f), false, true, true, true, true);
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(1605769687), new Vector3(679.7364f, -1530.819f, 8.709126f), new Vector3(0f, 0f, -162.9435f), false, true, true, true, true);

                                    Groups.RemoveEnemyPeds();
                                    Groups.SPAWN_AI((PedHash)0x4F46D607, new Vector3(701.0018f, -1538.242f, 9.703606f - 1f), -177.2632f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x4F46D607, new Vector3(697.4348f, -1537.164f, 9.704088f - 1f), -175.8817f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x4F46D607, new Vector3(692.0176f, -1535.636f, 9.712887f - 1f), -170.7115f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x4F46D607, new Vector3(695.3073f, -1540.207f, 9.703811f - 1f), -171.0201f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(703.8226f, -1549.636f, 9.703987f - 1f), 27.96499f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(696.7822f, -1548.216f, 9.70446f - 1f), 9.283875f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(692.9766f, -1552.617f, 9.713066f - 1f), -15.64119f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.BlipUpEnemyPeds();

                                    if (CarryPed != null)
                                    {
                                        CarryPed.Delete();
                                        CarryPed = null;
                                    }
                                    while (CarryPed == null)
                                    {
                                        CarryPed = World.CreatePed((PedHash)0x31A3498E, new Vector3(698.1165f, -1552.473f, 9.703755f - 1f), 29.19341f);
                                        Wait(0);
                                    }
                                    CarryPed.RelationshipGroup = Groups.AiTeam;
                                    CarryPed.Weapons.Give(WeaponHash.Pistol, 10000, true, true);
                                    while (CarryPed.AttachedBlip == null)
                                    {
                                        CarryPed.AddBlip();
                                        Wait(0);
                                    }
                                    CarryPed.AttachedBlip.Sprite = (BlipSprite)1;
                                    CarryPed.AttachedBlip.Color = BlipColor.Green;
                                    CarryPed.AttachedBlip.Name = "Meth";

                                    PickupSteal.RemovePickups();

                                    MissionSwitch = 2;
                                }
                                break;
                            case 2://steal meth
                                {
                                    if (Game.Player.Character.IsInCombat || CarryPed != null && CarryPed.IsInCombatAgainst(Game.Player.Character))
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_ACTION_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                        }
                                    }
                                    if (CarryPed != null)
                                    {
                                        if (CarryPed.IsDead)
                                        {
                                            PickupSteal.RemovePickups();
                                            PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(CarryPed.Position.X, CarryPed.Position.Y, World.GetGroundHeight(CarryPed.Position)), new Vector3(0f, 0f, CarryPed.Heading), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Meth", false, 1f);

                                            Notification.Show("The meth has been dropped.");

                                            if (CarryPed.AttachedBlip != null)
                                            {
                                                CarryPed.AttachedBlip.Delete();
                                            }
                                            CarryPed.MarkAsNoLongerNeeded();
                                            CarryPed = null;
                                        }
                                    }
                                    else
                                    {
                                        if (PickupSteal.PickupSpawn.Count == 0)
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                                            Notification.Show("~b~" + Main.Player_Name + "~w~ collected the meth.");
                                            MissionSwitch = 3;
                                        }
                                    }
                                    Screen.ShowSubtitle("Steal the ~g~meth.~w~");
                                }
                                break;
                            case 3://deliver the meth to gerald
                                {
                                    if (Game.Player.Character.IsInCombat || CarryPed != null && CarryPed.IsInCombatAgainst(Game.Player.Character))
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_ACTION_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                        }
                                    }
                                    else
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_AIRBORNE_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                                        }
                                    }
                                    Screen.ShowSubtitle("Deliver the ~g~meth~w~ to ~y~Gerald's apartment.~w~");

                                    if (Main.missionBlip == null)
                                    {
                                        if (Main.missionBlip != null)
                                        {
                                            Main.missionBlip.Delete();
                                            Main.missionBlip = null;
                                        }
                                        while (Main.missionBlip == null)
                                        {
                                            Main.missionBlip = World.CreateBlip(new Vector3(-61.89631f, -1514.137f, 33.43623f));
                                            Wait(0);
                                        }
                                        HudHandler.SET_GPS(Main.missionBlip, 156, false, true);
                                    }
                                    else
                                    {
                                        if (Game.Player.Character.CurrentVehicle == null && Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 4)
                                        {
                                            Groups.RemoveEnemyPeds();
                                            Vehicles.RemoveVehicles();
                                            PickupSteal.RemovePickups();

                                            if (Main.missionBlip != null)
                                            {
                                                Main.missionBlip.Delete();
                                                Main.missionBlip = null;
                                                HudHandler.CLEAR_GPS_ROUTE();
                                            }
                                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "FocusIn", "HintCamSounds", true);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);
                                            HudHandler.HudandRadar(false, false);
                                            Audios.Stop_Music_Event();
                                            MissionSwitch = 4;
                                        }
                                    }
                                }
                                break;
                            case 4://delviered meth to gerald
                                {
                                    int randcutscene = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 2, 6);
                                    int cutscenetime = 20000;
                                    switch (randcutscene)
                                    {
                                        case 2:
                                            cutscenetime = 20000;
                                            break;
                                        case 3:
                                            cutscenetime = 16000;
                                            break;
                                        case 4:
                                            cutscenetime = 15000;
                                            break;
                                        case 5:
                                            cutscenetime = 15000;
                                            break;
                                    }
                                    while (Main.CutsceneExtra1 == null)
                                    {
                                        Main.CutsceneExtra1 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra1.IsVisible = false;
                                    while (Main.CutsceneExtra2 == null)
                                    {
                                        Main.CutsceneExtra2 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra2.IsVisible = false;
                                    while (Main.CutsceneExtra3 == null)
                                    {
                                        Main.CutsceneExtra3 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra3.IsVisible = false;

                                    int player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                    Ped ped2;
                                    ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                    Ped ped3;
                                    ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                    Ped ped4;
                                    ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);
                                    Main.PlayerModelSet(Game.Player.Character);
                                    LoadingPrompt.Show("Starting Cutscene", LoadingSpinnerType.RegularClockwise);
                                    //GameplayCamera.RelativeHeading = 161.3774f - Game.Player.Character.Heading;
                                    Main.LoadCutscene($"mp_intro_mcs_10_a{randcutscene}");
                                    while (!Function.Call<bool>(Hash.HAS_CUTSCENE_LOADED))
                                    {
                                        Main.LoadCutscene($"mp_intro_mcs_10_a{randcutscene}");
                                        Script.Yield();
                                    }
                                    player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                    ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                    ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                    ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);

                                    Main.SetPedOutfitCutscene("MP_1", Game.Player.Character);
                                    Main.SetPedOutfitCutscene_MP2("MP_2", ped2);
                                    Main.SetPedOutfitCutscene_MP3("MP_3", ped3);
                                    Main.SetPedOutfitCutscene_MP4("MP_4", ped4);// patch this shit its incorrect here

                                    Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Game.Player.Character, "MP_1", 0, 0, 64);
                                    if (ped2.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped2, "MP_2", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra1, "MP_2", 0, 0, 64);
                                    }
                                    if (ped3.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped3, "MP_3", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra2, "MP_3", 0, 0, 64);
                                    }
                                    if (ped4.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped4, "MP_4", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra3, "MP_4", 0, 0, 64);
                                    }

                                    //Function.Call(Hash.SET_CUTSCENE_ORIGIN, 1568.77f, 3217.713f, 40.41154f, 106.3544f, 0);
                                    Function.Call(Hash.START_CUTSCENE, 0);
                                    Wait(50);
                                    Main.PlayerModelSetBack(Game.Player.Character);
                                    Main.GetPedOutfitCutscene("MP_1", Game.Player.Character);
                                    Main.GetPedOutfitCutscene_MP2("MP_2", ped2);
                                    Main.GetPedOutfitCutscene_MP3("MP_3", ped3);
                                    Main.GetPedOutfitCutscene_MP4("MP_4", ped4);
                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();
                                    LoadingPrompt.Hide();

                                    while (Cutscenes.GET_CUTSCENE_TIME() < cutscenetime)
                                    {
                                        Wait(0);
                                    }

                                    Groups.RemoveEnemyPeds();
                                    Groups.ClearEnemyPedsList2();
                                    Vehicles.RemoveVehicles();
                                    Props.RemoveProps();
                                    Screen_Effects.CLEAR_ALL_HELP_MESSAGES();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebEnd", 0, true);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Wait(1000);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebPass", 0, true);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_MISSION");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomCashValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 2000, 10001);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomRPValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 600, 1401);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_MISSION");

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
                                    int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

                                    int getcurrentduration = 0;
                                    while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    getcurrentduration = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
                                    if (Main.DEBUG) Notification.Show($"{getcurrentduration}");

                                    int i = Game.GameTime + getcurrentduration;
                                    while (Game.GameTime < i)
                                    {
                                        HudHandler.HudandRadar(false, false);
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Game.Player.CanControlCharacter = true;

                                    int Timer = Game.GameTime + 4000;
                                    Game.Player.CanControlCharacter = false;
                                    PlayerSwitch._SWITCH_OUT_PLAYER(Game.Player.Character, 3, 1);
                                    while (Game.GameTime < Timer)
                                    {
                                        Wait(0);
                                    }

                                    Function.Call(Hash.SET_ENTITY_COORDS, Game.Player.Character, -91.57023f, -1523.439f, 33.58508f, true, false, false, true);
                                    Function.Call(Hash.SET_ENTITY_HEADING, Game.Player.Character, 170.8833f);
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    Game.Player.CanControlCharacter = true;

                                    Function.Call((Hash)0xAD5FDF34B81BFE79);
                                    Function.Call((Hash)0x43D1680C6D19A8E9);
                                    PlayerSwitch.SWITCH_IN_PLAYER(Game.Player.Character);
                                    while (PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                                    {
                                        Wait(0);
                                    }
                                    HudHandler.HudandRadar(true, true);
                                    MPCash.ADD_CASH(RandomCashValue);
                                    MPRank.ADD_RP(RandomRPValue);

                                    Main.RadioAllowed = true;
                                    Main.NoCopsOnMission = false;
                                    Main.FuckOffCivilians = false;
                                    Main.OnMission = false;
                                    Main.checkpoint = 0;
                                    MissionsSwitch = -1;
                                    MissionSwitch = 0;
                                }
                                break;
                        }
                    }
                    break;
                case 4://No Hay Bronca
                    {
                        if (Main.checkpoint == 1 || Main.DEBUG)
                        {
                            if (TeamLives > 0)
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_black_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }
                            else
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_red_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 0, 0, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }

                            if (Game.Player.Character.IsDead)
                            {
                                TeamLives -= 1;

                                while (Game.Player.Character.IsDead)
                                {
                                    Wait(0);
                                }

                                if (TeamLives < 0)
                                {
                                    Chase.SET_CHASE_DEACTIVATE();
                                    if (CarryPed != null)
                                    {
                                        CarryPed.Delete();
                                        CarryPed = null;
                                    }
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    while (Wall_Creator.FailCam == null)
                                    {
                                        Wall_Creator.FailCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", 0);
                                        Wait(0);
                                    }
                                    Random rand = new Random();
                                    int index = rand.Next(1, 3);
                                    if (index == 1)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 2.0f, 3.0f, 0.6f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    if (index == 2)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 1.0f, 3.0f, 0.5f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    World.RenderingCamera = Wall_Creator.FailCam;
                                    HudHandler.HudandRadar(false, false);
                                    Wait(1500);
                                    Screen.FadeIn(500);
                                    while (!Screen.IsFadedIn)
                                    {
                                        Wait(0);
                                    }
                                    Weapons.Anim_Weapon_Off();
                                    Audios.Stop_Music_Event();
                                    Game.Player.IsInvincible = true;
                                    Function.Call(Hash.SET_SEETHROUGH, false);
                                    Function.Call(Hash.SET_NIGHTVISION, false);
                                    Function.Call(Hash.SET_ARTIFICIAL_LIGHTS_STATE, false);
                                    Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
                                    Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFail", 0, false);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FAILED_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestHeist2PassScaleform();
                                    Wait(500);
                                    //Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_CELEB_SCREEN_SCENE");
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_FAILED");

                                    int i = Game.GameTime + 6000;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Screen.FadeOut(1000);
                                    Wait(1000);
                                    if (Wall_Creator.FailCam != null)
                                    {
                                        Wall_Creator.FailCam.Delete();
                                        Wall_Creator.FailCam = null;
                                    }
                                    World.RenderingCamera = null;
                                    Groups.RemoveEnemyPeds();
                                    Vehicles.RemoveVehicles();
                                    PickupSteal.RemovePickups();
                                    Props.RemoveProps();
                                    Game.Player.IsInvincible = false;
                                    MissionSwitch = 0;
                                    break;
                                }
                            }
                        }
                        switch (MissionSwitch)
                        {
                            case 0://contact mission start
                                {
                                    if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_START(808.05f, -1112.48f, 29.11006f, 0.0f, 0.0f, 0.0f, 500f, 0);
                                    }
                                    string[] musicevents = {
                        "MP_MC_CMH_IAA_PREP_START",
                        "MP_MC_CMH_IAA_FINALE_START",
                        "MP_MC_CMH_SUB_PREP_START",
                        "MP_MC_CMH_SUB_FINALE_START",
                        "MP_MC_CMH_SILO_PREP_START",
                        "MP_MC_CMH_SILO_FINALE_START",
                        "MP_MC_CM22_START_TRACK_11",
                        "MP_MC_TUNER_START_MUSIC",
                        "MP_MC_GR_START",
                        "LOWRIDER_START_MUSIC",
                        "LOWRIDER_FINALE_START_MUSIC",
                        "MP_MC_START",
                        };
                                    Audios.TRIGGER_MUSIC_EVENT(musicevents[Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, musicevents.Length)]);
                                    Audios.TRIGGER_MUSIC_EVENT("MP_MC_SUSPENSE_HFIN");
                                    Audios.TRIGGER_MUSIC_EVENT("FH2B_EXPLODE");

                                    MPLoadout.GET_CURRENT_LOADOUT();
                                    MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(801.9265f, -1104.267f, 28.55176f), 5.157526f);

                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();

                                    Game.Player.Character.Task.ClearAll();
                                    Game.Player.CanControlCharacter = true;

                                    Game.Player.Character.Position = new Vector3(808.05f, -1112.48f, 29.11006f - 1f);
                                    Game.Player.Character.Heading = 50.90773f;
                                    Game.Player.Character.IsPositionFrozen = true;
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    HudHandler.HudandRadar(false, false);

                                    Wait(1000);
                                    LoadingPrompt.Hide();
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Function.Call((Hash)0xEFACC8AEF94430D5, 1f);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    PlayerSwitch.STOP_PLAYER_SWITCH();
                                    if (LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                    }
                                    Game.Player.Character.IsPositionFrozen = false;

                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true); //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "PUSH", "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS", true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_INTRO_TO_WALL", "intro", "Mission", "No Hay Bronca", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_INTRO_TO_WALL", "intro", "Mission", "No Hay Bronca", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_INTRO_TO_WALL", "intro", "Mission", "No Hay Bronca", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "intro");
                                    Screen.FadeIn(1000);

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
                                    int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

                                    int getcurrentduration = 0;
                                    while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    getcurrentduration = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
                                    if (Main.DEBUG) Notification.Show($"{getcurrentduration}");

                                    int i = Game.GameTime + getcurrentduration;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Mobile_Phone.CAN_OPEN_PHONE = true;
                                    //Function.Call(Hash.PREPARE_MUSIC_EVENT, "FH2B_EXPLODE");
                                    //Audios.TRIGGER_MUSIC_EVENT("MP_CHF_ACTION");
                                    HudHandler.HudandRadar(true, true);
                                    Main.checkpoint = 1;
                                    TeamLives = 1;
                                    MissionSwitch = 1;
                                }
                                break;
                            case 1://go to deal
                                {
                                    Vector3[] randomspawn = { new Vector3(1007.654f, -1500.453f, 31.01551f), new Vector3(956.3584f, -1548.271f, 30.71068f) };
                                    float[] randomspawnhead = { 129.1078f, 273.9354f };
                                    int rand = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, randomspawn.Length);
                                    RESPAWN.SET_MIS_STAT(randomspawn[rand], randomspawnhead[rand], 0, true);

                                    Screen.ShowSubtitle("Go to the ~y~deal.~w~");

                                    if (Main.missionBlip == null)
                                    {
                                        if (Main.missionBlip != null)
                                        {
                                            Main.missionBlip.Delete();
                                            Main.missionBlip = null;
                                        }
                                        while (Main.missionBlip == null)
                                        {
                                            Main.missionBlip = World.CreateBlip(new Vector3(945.5443f, -1501.287f, 30.40875f));
                                            Wait(0);
                                        }
                                        HudHandler.SET_GPS(Main.missionBlip, 156, false, true);
                                    }
                                    else
                                    {
                                        if (Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 50f)
                                        {
                                            if (Main.missionBlip != null)
                                            {
                                                Main.missionBlip.Delete();
                                                Main.missionBlip = null;
                                                HudHandler.CLEAR_GPS_ROUTE();
                                            }
                                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "FocusIn", "HintCamSounds", true);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);
                                            MissionSwitch = 2;
                                        }
                                    }
                                }
                                break;
                            case 2://spawn everything
                                {
                                    Groups.RemoveEnemyPeds();
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(948.868f, -1502.345f, 30.62276f - 1f), -92.55399f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(945.5135f, -1496.646f, 30.24116f - 1f), -113.793f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(938.6239f, -1493.822f, 30.07064f - 1f), -112.0822f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(937.8539f, -1505.393f, 30.50642f - 1f), -68.27095f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.BlipUpEnemyPeds();

                                    if (CarryPed != null)
                                    {
                                        CarryPed.Delete();
                                        CarryPed = null;
                                    }
                                    while (CarryPed == null)
                                    {
                                        CarryPed = World.CreatePed((PedHash)0x231AF63F, new Vector3(936.4492f, -1498.495f, 30.23044f - 1f), -94.26973f);
                                        Wait(0);
                                    }
                                    CarryPed.RelationshipGroup = Groups.playersTeam;
                                    CarryPed.IsInvincible = true;
                                    CarryPed.CanRagdoll = false;
                                    CarryPed.BlockPermanentEvents = true;
                                    CarryPed.AlwaysKeepTask = true;
                                    CarryPed.Task.StartScenario("WORLD_HUMAN_HANG_OUT_STREET", 29.19341f);
                                    CarryPed.Weapons.Give(WeaponHash.Pistol, 10000, true, true);
                                    while (CarryPed.AttachedBlip == null)
                                    {
                                        CarryPed.AddBlip();
                                        Wait(0);
                                    }
                                    CarryPed.AttachedBlip.Sprite = (BlipSprite)270;
                                    CarryPed.AttachedBlip.Color = BlipColor.Blue;
                                    CarryPed.AttachedBlip.Name = "Stanley";

                                    MissionSwitch = 3;
                                }
                                break;
                            case 3://kill all of the peds
                                {
                                    Heist_Hud.DrawArrow(2, CarryPed.Position.X, CarryPed.Position.Y, CarryPed.Position.Z + 1f, 0f, 0f, 0f, 0, 180, 0, 0.1f, 0.1f, 0.1f, 0, 150, 255, 255, true, true, false, null, null, false);
                                    Screen.ShowSubtitle("Rescue ~b~Stanley.~w~");
                                    if (Groups.pedList.Count == 0)
                                    {
                                        MissionSwitch = 4;
                                    }
                                }
                                break;
                            case 4://go up to stanley to have him drop the package
                                {
                                    Heist_Hud.DrawArrow(2, CarryPed.Position.X, CarryPed.Position.Y, CarryPed.Position.Z + 1f, 0f, 0f, 0f, 0, 180, 0, 0.1f, 0.1f, 0.1f, 0, 150, 255, 255, true, true, false, null, null, false);
                                    Screen.ShowSubtitle("Rescue ~b~Stanley.~w~");
                                    if (Game.Player.Character.Position.DistanceTo(CarryPed.Position) < 3)
                                    {
                                        Notification.Show($"~b~{Main.Player_Name}~w~ arrived at Stanley.");

                                        Function.Call(Hash.PLAY_PED_AMBIENT_SPEECH_NATIVE, CarryPed, "GENERIC_HI", "SPEECH_PARAMS_FORCE_NORMAL_CLEAR", 0);

                                        PickupSteal.RemovePickups();
                                        PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(CarryPed.Position.X, CarryPed.Position.Y, World.GetGroundHeight(CarryPed.Position)), new Vector3(0f, 0f, CarryPed.Heading), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Package", false, 1f);
                                        
                                        Notification.Show("The package has been dropped.");
                                        MissionSwitch = 5;
                                    }
                                }
                                break;
                            case 5://grab the package
                                {
                                    Screen.ShowSubtitle("Retrieve the ~g~package.~w~");

                                    if (PickupSteal.PickupSpawn.Count == 0)
                                    {
                                        Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                        Notification.Show("~b~" + Main.Player_Name + "~w~ collected the package.");
                                        CarryPed.Task.ClearAll();
                                        Groups.SET_INTO_GROUP(CarryPed);

                                        WeaponHash[] pedweapons = { WeaponHash.Pistol, WeaponHash.MicroSMG };
                                        Chase.SET_CHASE_ACTIVATE(VehicleHash.Cavalcade2, PedHash.MexGoon02GMY, pedweapons);
                                        
                                        MissionSwitch = 6;
                                    }
                                }
                                break;
                            case 6://deliver the package to geralds apartment
                                {
                                    Screen.ShowSubtitle("Deliver the ~g~package~w~ to ~y~Gerald's apartment.~w~");
                                    
                                    if (Main.missionBlip == null)
                                    {
                                        if (Main.missionBlip != null)
                                        {
                                            Main.missionBlip.Delete();
                                            Main.missionBlip = null;
                                        }
                                        while (Main.missionBlip == null)
                                        {
                                            Main.missionBlip = World.CreateBlip(new Vector3(-67.46861f, -1520.94f, 34.24006f));
                                            Wait(0);
                                        }
                                        HudHandler.SET_GPS(Main.missionBlip, 156, false, true);
                                    }
                                    else
                                    {
                                        if (Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 100f)
                                        {
                                            if (Chase.ChaseActive)
                                            {
                                                Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                                                Chase.SET_CHASE_DEACTIVATE();
                                                
                                                Groups.RemoveEnemyPeds();
                                                Groups.SPAWN_AI((PedHash)0x23B88069, new Vector3(-69.41287f, -1519.491f, 34.22832f - 1f), -95.44074f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Companion, false, false);
                                                Vehicles.RemoveVehicles();
                                                PickupSteal.RemovePickups();
                                                PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.WeaponPetrolCan, new Vector3(-69.13648f, -1520.46f, 33.26176f + 0.5f), new Vector3(0f, 0f, 87.2752f), Main.RequestModel("w_am_jerrycan"), 10000, 1, BlipColor.Green, "Jerry Can", true, 1f);
                                                Props.RemoveProps();
                                            }
                                        }
                                        if (Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 4)
                                        {
                                            if (Main.missionBlip != null)
                                            {
                                                Main.missionBlip.Delete();
                                                Main.missionBlip = null;
                                                HudHandler.CLEAR_GPS_ROUTE();
                                            }
                                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "FocusIn", "HintCamSounds", true);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);
                                            MissionSwitch = 7;
                                        }
                                    }
                                }
                                break;
                            case 7://spawn dude and jerry can pickup
                                {                      
                                    MissionSwitch = 8;
                                }
                                break;
                            case 8://go to gang territory
                                {
                                    Screen.ShowSubtitle("Go to the ~y~gang territory.~w~");
                                    
                                    if (Main.missionBlip == null)
                                    {
                                        if (Main.missionBlip != null)
                                        {
                                            Main.missionBlip.Delete();
                                            Main.missionBlip = null;
                                        }
                                        while (Main.missionBlip == null)
                                        {
                                            Main.missionBlip = World.CreateBlip(new Vector3(239.5772f, -1942.35f, 23.44912f));
                                            Wait(0);
                                        }
                                        HudHandler.SET_GPS(Main.missionBlip, 156, false, true);
                                    }
                                    else
                                    {
                                        if (Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 100)
                                        {
                                            Main.FuckOffCivilians = true;
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                            if (Main.missionBlip != null)
                                            {
                                                Main.missionBlip.Delete();
                                                Main.missionBlip = null;
                                                HudHandler.CLEAR_GPS_ROUTE();
                                            }
                                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "FocusIn", "HintCamSounds", true);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);
                                            MissionSwitch = 9;
                                        }
                                    }
                                }
                                break;
                            case 9://spawn everything at gang territory
                                {
                                    Vector3[] randomspawn = { new Vector3(118.7037f, -2024.743f, 18.31144f), new Vector3(221.2966f, -1876.709f, 26.63839f) };
                                    float[] randomspawnhead = { 270.1485f, 228.1089f };
                                    int rand = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, randomspawn.Length);
                                    RESPAWN.SET_MIS_STAT(randomspawn[rand], randomspawnhead[rand], 0, true);

                                    Vehicles.RemoveVehicles();
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x831A21D5, new Vector3(212.6774f, -2013.242f, 18.13713f - 1f), 20.53762f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(223.0774f, -2000.572f, 19.27699f - 1f), 31.61187f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x831A21D5, new Vector3(229.5911f, -1994.927f, 18.89655f - 1f), 30.1276f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(248.3638f, -1971.53f, 21.72874f - 1f), 38.25928f, false, false);

                                    if (Vehicles.vehList.Count > 0)
                                    {
                                        foreach (Vehicle veh in Vehicles.vehList.ToList())
                                        {
                                            if (veh != null)
                                            {
                                                veh.LockStatus = VehicleLockStatus.Locked;

                                                while (veh.AttachedBlip == null)
                                                {
                                                    veh.AddBlip();
                                                    Wait(0);
                                                }
                                                veh.AttachedBlip.Sprite = (BlipSprite)1;
                                                veh.AttachedBlip.Color = BlipColor.Red;
                                                veh.AttachedBlip.Name = "Gang Vehicle";
                                            }
                                        }
                                    }

                                    Props.RemoveProps();
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(2090224559), new Vector3(239.2333f, -1979.027f, 20.13009f), new Vector3(0f, 0f, -48.49538f), false, true, true, true, true);
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(-1748303324), new Vector3(232.4639f, -1973.167f, 20.21277f), new Vector3(-3f, 0f, 140.5576f), false, true, true, true, true);
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(1434516869), new Vector3(224.1862f, -1968f, 20.24309f), new Vector3(0f, 0f, -9.137237f), false, true, true, true, true);
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(1270590574), new Vector3(209.6509f, -2012.006f, 18.08074f), new Vector3(0f, 0f, 19.4801f), false, true, true, true, true);
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(1270590574), new Vector3(224.3269f, -1994.006f, 18.96343f), new Vector3(0f, 0f, 35.0901f), false, true, true, true, true);
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(1270590574), new Vector3(249.6673f, -1965.957f, 21.41753f), new Vector3(0f, 0f, 39.38903f), false, true, true, true, true);
                                    
                                    Groups.RemoveEnemyPeds();
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(206.9729f, -2017.359f, 18.55461f - 1f), -158.3541f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(219.3746f, -2005.465f, 19.36876f - 1f), -145.1941f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(230.2089f, -2001.575f, 19.4076f - 1f), 101.543f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(231.2891f, -1992.534f, 19.57805f - 1f), -146.6774f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(245.1822f, -1979.485f, 21.27677f - 1f), 85.52281f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(231.6402f, -1977.233f, 20.84486f - 1f), 21.03459f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(226.0012f, -1964.303f, 21.63833f - 1f), 52.10102f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(252.4405f, -1967.824f, 21.97449f - 1f), -158.4421f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(244.5667f, -1971.756f, 21.99777f - 1f), -142.3721f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(258.1867f, -1968.803f, 22.34169f - 1f), -17.04623f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(264.8035f, -1960.319f, 23.1335f - 1f), 71.90612f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.BlipUpEnemyPeds();

                                    MissionSwitch = 10;
                                }
                                break;
                            case 10://destroy vehicles
                                {
                                    Screen.ShowSubtitle("Destroy the gang's ~r~vehicles.~w~");

                                    if (Vehicles.vehList.Count == 0)
                                    {
                                        MissionSwitch = 11;
                                    }
                                }
                                break;
                            case 11://take out remaining enemys
                                {
                                    Screen.ShowSubtitle("Take out the remaining ~r~gang members.~w~");
                                    if (Groups.pedList.Count == 0)
                                    {
                                        Vehicles.SPAWN_VEHICLE((VehicleHash)0x43779C54, new Vector3(441.8571f, -2031.959f, 22.93988f - 1f), -135.8966f, false, false);

                                        
                                        Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(442.4564f, -2030.557f, 23.61206f - 1f), 178.8811f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, true, true);
                                        Groups.BlipUpEnemyPeds();
                                        Groups.pedList[0].SetIntoVehicle(Vehicles.vehList[0], VehicleSeat.Driver);
                                        Groups.pedList[0].Task.CruiseWithVehicle(Vehicles.vehList[0], 10f, DrivingStyle.Rushed);
                                        MissionSwitch = 12;
                                    }
                                }
                                break;
                            case 12://leader is escaping
                                {
                                    Screen.ShowSubtitle("The ~r~gang leader~w~ is fleeing, take him out.");
                                    if (Groups.pedList.Count > 0)
                                    {
                                        if (Groups.pedList[0] != null)
                                        {
                                            if (Groups.pedList[0].AttachedBlip != null)
                                            {
                                                Groups.pedList[0].AttachedBlip.IsShortRange = false;
                                            }
                                            LOAD_SCENES.NEW_LOAD_SCENE_START(Groups.pedList[0].Position.X, Groups.pedList[0].Position.Y, Groups.pedList[0].Position.Z, 0f, 0f, 0f, 10f, 0);
                                        }
                                    }

                                    if (Groups.pedList.Count == 0)
                                    {
                                        Notification.Show("~b~" + Main.Player_Name + "~w~ killed the gang leader.");
                                        
                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                        MissionSwitch = 13;
                                    }
                                }
                                break;
                            case 13://leader got lit up, mission pass
                                {
                                    Audios.Stop_Music_Event();
                                    Screen_Effects.CLEAR_ALL_HELP_MESSAGES();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebEnd", 0, true);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true);
                                    Wait(2000);

                                    HudHandler.HudandRadar(false, false);
                                    Screen_Effects.CLEAR_ALL_HELP_MESSAGES();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebEnd", 0, true);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Game.Player.CanControlCharacter = false;
                                    Wait(1000);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebPass", 0, true);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_MISSION");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomCashValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 5000, 15001);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomRPValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 700, 1201);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_MISSION");

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
                                    int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

                                    int getcurrentduration = 0;
                                    while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    getcurrentduration = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
                                    if (Main.DEBUG) Notification.Show($"{getcurrentduration}");

                                    int i = Game.GameTime + getcurrentduration;
                                    while (Game.GameTime < i)
                                    {
                                        HudHandler.HudandRadar(false, false);
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Groups.RemoveEnemyPeds();
                                    Groups.ClearEnemyPedsList2();
                                    Vehicles.RemoveVehicles();
                                    Props.RemoveProps();
                                    if (CarryPed != null)
                                    {
                                        CarryPed.Delete();
                                        CarryPed = null;
                                    }
                                    
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Game.Player.CanControlCharacter = true;

                                    int Timer = Game.GameTime + 4000;
                                    Game.Player.CanControlCharacter = false;
                                    PlayerSwitch._SWITCH_OUT_PLAYER(Game.Player.Character, 3, 1);
                                    while (Game.GameTime < Timer)
                                    {
                                        Wait(0);
                                    }

                                    Function.Call(Hash.SET_ENTITY_COORDS, Game.Player.Character, -91.57023f, -1523.439f, 33.58508f, true, false, false, true);
                                    Function.Call(Hash.SET_ENTITY_HEADING, Game.Player.Character, 170.8833f);
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    Game.Player.CanControlCharacter = true;

                                    Function.Call((Hash)0xAD5FDF34B81BFE79);
                                    Function.Call((Hash)0x43D1680C6D19A8E9);
                                    PlayerSwitch.SWITCH_IN_PLAYER(Game.Player.Character);
                                    while (PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                                    {
                                        Wait(0);
                                    }
                                    HudHandler.HudandRadar(true, true);
                                    MPCash.ADD_CASH(RandomCashValue);
                                    MPRank.ADD_RP(RandomRPValue);

                                    Main.RadioAllowed = true;
                                    Main.NoCopsOnMission = false;
                                    Main.FuckOffCivilians = false;
                                    Main.OnMission = false;
                                    Main.checkpoint = 0;
                                    MissionsSwitch = -1;
                                    MissionSwitch = 0;
                                }
                                break;
                        }
                    }
                    break;
                case 5://Gassed Up
                    {
                        if (Main.checkpoint == 1 || Main.DEBUG)
                        {
                            if (TeamLives > 0)
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_black_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }
                            else
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_red_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 0, 0, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }

                            if (Game.Player.Character.IsDead)
                            {
                                TeamLives -= 1;

                                if (MissionSwitch == 3)
                                {
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    PickupSteal.RemovePickups();
                                    PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(Game.Player.Character.Position.X, Game.Player.Character.Position.Y, World.GetGroundHeight(Game.Player.Character.Position)), new Vector3(0f, 0f, Game.Player.Character.Heading), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Coke", false, 1f);

                                    Notification.Show("The coke has been dropped.");

                                    MissionSwitch = 2;
                                }

                                while (Game.Player.Character.IsDead)
                                {
                                    Wait(0);
                                }

                                if (TeamLives < 0)
                                {
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    while (Wall_Creator.FailCam == null)
                                    {
                                        Wall_Creator.FailCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", 0);
                                        Wait(0);
                                    }
                                    Random rand = new Random();
                                    int index = rand.Next(1, 3);
                                    if (index == 1)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 2.0f, 3.0f, 0.6f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    if (index == 2)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 1.0f, 3.0f, 0.5f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    World.RenderingCamera = Wall_Creator.FailCam;
                                    HudHandler.HudandRadar(false, false);
                                    Wait(1500);
                                    Screen.FadeIn(500);
                                    while (!Screen.IsFadedIn)
                                    {
                                        Wait(0);
                                    }
                                    Weapons.Anim_Weapon_Off();
                                    Audios.Stop_Music_Event();
                                    Game.Player.IsInvincible = true;
                                    Function.Call(Hash.SET_SEETHROUGH, false);
                                    Function.Call(Hash.SET_NIGHTVISION, false);
                                    Function.Call(Hash.SET_ARTIFICIAL_LIGHTS_STATE, false);
                                    Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
                                    Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFail", 0, false);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FAILED_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestHeist2PassScaleform();
                                    Wait(500);
                                    //Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_CELEB_SCREEN_SCENE");
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_FAILED");

                                    int i = Game.GameTime + 6000;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Screen.FadeOut(1000);
                                    Wait(1000);
                                    if (Wall_Creator.FailCam != null)
                                    {
                                        Wall_Creator.FailCam.Delete();
                                        Wall_Creator.FailCam = null;
                                    }
                                    World.RenderingCamera = null;
                                    Groups.RemoveEnemyPeds();
                                    Vehicles.RemoveVehicles();
                                    PickupSteal.RemovePickups();
                                    Game.Player.IsInvincible = false;
                                    MissionSwitch = 0;
                                    break;
                                }
                            }
                        }
                        switch (MissionSwitch)
                        {
                            case 0://contact mission start
                                {
                                    if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_START(105.6294f, -1424.869f, 29.30052f, 0.0f, 0.0f, 0.0f, 500f, 0);
                                    }
                                    string[] musicevents = {
                        "MP_MC_CMH_IAA_PREP_START",
                        "MP_MC_CMH_IAA_FINALE_START",
                        "MP_MC_CMH_SUB_PREP_START",
                        "MP_MC_CMH_SUB_FINALE_START",
                        "MP_MC_CMH_SILO_PREP_START",
                        "MP_MC_CMH_SILO_FINALE_START",
                        "MP_MC_CM22_START_TRACK_11",
                        "MP_MC_TUNER_START_MUSIC",
                        "MP_MC_GR_START",
                        "LOWRIDER_START_MUSIC",
                        "LOWRIDER_FINALE_START_MUSIC",
                        "MP_MC_START",
                        };
                                    Audios.TRIGGER_MUSIC_EVENT(musicevents[Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, musicevents.Length)]);
                                    Audios.TRIGGER_MUSIC_EVENT("MP_MC_SUSPENSE_HFIN");
                                    Audios.TRIGGER_MUSIC_EVENT("FH2B_EXPLODE");

                                    MPLoadout.GET_CURRENT_LOADOUT();
                                    MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(112.8146f, -1424.877f, 29.2241f -1f), 139.0578f);

                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();

                                    Game.Player.Character.Task.ClearAll();
                                    Game.Player.CanControlCharacter = true;

                                    Game.Player.Character.Position = new Vector3(105.6294f, -1424.869f, 29.30052f - 1f);
                                    Game.Player.Character.Heading = 169.9969f;
                                    Game.Player.Character.IsPositionFrozen = true;
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    HudHandler.HudandRadar(false, false);

                                    Wait(1000);
                                    LoadingPrompt.Hide();
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Function.Call((Hash)0xEFACC8AEF94430D5, 1f);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    PlayerSwitch.STOP_PLAYER_SWITCH();
                                    if (LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                    }
                                    Game.Player.Character.IsPositionFrozen = false;

                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true); //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "PUSH", "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS", true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_INTRO_TO_WALL", "intro", "Mission", "Gassed Up", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_INTRO_TO_WALL", "intro", "Mission", "Gassed Up", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_INTRO_TO_WALL", "intro", "Mission", "Gassed Up", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "intro");
                                    Screen.FadeIn(1000);

                                    int getdur = Wall_Creator.GET_TOTAL_WALL_DURATION();
                                    int i = Game.GameTime + getdur;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Mobile_Phone.CAN_OPEN_PHONE = true;
                                    //Function.Call(Hash.PREPARE_MUSIC_EVENT, "FH2B_EXPLODE");
                                    //Audios.TRIGGER_MUSIC_EVENT("MP_CHF_ACTION");
                                    HudHandler.HudandRadar(true, true);
                                    Main.checkpoint = 1;
                                    TeamLives = 1;
                                    MissionSwitch = 1;
                                }
                                break;
                            case 1://spawn everything
                                {
                                    Vector3[] randomspawn = { new Vector3(535.6599f, -2255.552f, 8.275635f), new Vector3(482.4745f, -2209.96f, 5.915658f) };
                                    float[] randomspawnhead = { 58.25296f, 241.7118f };
                                    int rand = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, randomspawn.Length);
                                    RESPAWN.SET_MIS_STAT(randomspawn[rand], randomspawnhead[rand], 0, true);

                                    Vehicles.RemoveVehicles();
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xA4F52C13, new Vector3(514.2247f, -2184.077f, 5.404271f - 1f), -23.42256f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xA4F52C13, new Vector3(520.3787f, -2187.147f, 5.405262f - 1f), 0.5300159f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(519.3281f, -2158.998f, 5.798779f - 1f), 165.3243f, false, false);

                                    Props.RemoveProps();
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(1605769687), new Vector3(528.4858f, -2129.881f, 4.985551f), new Vector3(0f, 0f, -5.563702f), false, true, true, true, true);
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(1899123601), new Vector3(526.1542f, -2162.881f, 4.987242f), new Vector3(0f, 0f, -96.20181f), false, true, true, true, true);
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(1899123601), new Vector3(526.0091f, -2164.718f, 4.987241f), new Vector3(0f, 0f, -98.30081f), false, true, true, true, true);
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(1861370687), new Vector3(524.797f, -2171.741f, 4.992433f), new Vector3(0f, 0f, 173.5149f), false, true, true, true, true);
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(1861370687), new Vector3(521.5316f, -2171.564f, 4.992433f), new Vector3(5.088887E-14f, -1.036612E-06f, -167.3935f), false, true, true, true, true);
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(1861370687), new Vector3(524.3996f, -2177.626f, 4.992434f), new Vector3(0f, 0f, 173.207f), false, true, true, true, true);
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(1605769687), new Vector3(509.1411f, -2185.949f, 4.958764f), new Vector3(2.544444E-14f, 2.315841E-07f, 153.4559f), false, true, true, true, true);
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(1861370687), new Vector3(508.4465f, -2167.23f, 4.960785f), new Vector3(0f, 0f, -172.4128f), false, true, true, true, true);
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(1861370687), new Vector3(508.0675f, -2171.868f, 4.964783f), new Vector3(0f, 0f, 163.6343f), false, true, true, true, true);
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(-1098506160), new Vector3(502.6846f, -2174.059f, 4.922034f), new Vector3(0f, 0f, 156.9856f), false, true, true, true, true);

                                    Groups.RemoveEnemyPeds();
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(516.9571f, -2158.91f, 6.000735f - 1f), -179.5563f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(521.3223f, -2160.216f, 5.970813f - 1f), 165.0892f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(517.0082f, -2168.643f, 6.000487f - 1f), 170.0543f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(518.8048f, -2172.802f, 5.999237f - 1f), 173.4829f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x247502A9, new Vector3(514.4052f, -2179.862f, 5.970374f - 1f), -42.33844f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x247502A9, new Vector3(517.2551f, -2186.875f, 5.971714f - 1f), -8.354351f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x247502A9, new Vector3(521.8108f, -2183.081f, 6.001932f - 1f), 4.338525f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.BlipUpEnemyPeds();

                                    if (CarryPed != null)
                                    {
                                        CarryPed.Delete();
                                        CarryPed = null;
                                    }
                                    while (CarryPed == null)
                                    {
                                        CarryPed = World.CreatePed((PedHash)0x247502A9, new Vector3(517.9591f, -2182.219f, 5.98707f - 1f), -5.436745f);
                                        Wait(0);
                                    }
                                    CarryPed.RelationshipGroup = Groups.AiTeam;
                                    CarryPed.Weapons.Give(WeaponHash.Pistol, 10000, true, true);
                                    while (CarryPed.AttachedBlip == null)
                                    {
                                        CarryPed.AddBlip();
                                        Wait(0);
                                    }
                                    CarryPed.AttachedBlip.Sprite = (BlipSprite)1;
                                    CarryPed.AttachedBlip.Color = BlipColor.Green;
                                    CarryPed.AttachedBlip.Name = "Coke";

                                    PickupSteal.RemovePickups();

                                    MissionSwitch = 2;
                                }
                                break;
                            case 2://steal the Coke
                                {
                                    if (Game.Player.Character.IsInCombat || CarryPed != null && CarryPed.IsInCombatAgainst(Game.Player.Character))
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_ACTION_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                        }
                                    }
                                    if (CarryPed != null)
                                    {
                                        if (CarryPed.IsDead)
                                        {
                                            PickupSteal.RemovePickups();
                                            PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(CarryPed.Position.X, CarryPed.Position.Y, World.GetGroundHeight(CarryPed.Position)), new Vector3(0f, 0f, CarryPed.Heading), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Coke", false, 1f);

                                            Notification.Show("The coke has been dropped.");

                                            if (CarryPed.AttachedBlip != null)
                                            {
                                                CarryPed.AttachedBlip.Delete();
                                            }
                                            CarryPed.MarkAsNoLongerNeeded();
                                            CarryPed = null;
                                        }
                                    }
                                    else
                                    {
                                        if (PickupSteal.PickupSpawn.Count == 0)
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                                            Notification.Show("~b~" + Main.Player_Name + "~w~ collected the coke.");
                                            MissionSwitch = 3;
                                        }
                                    }
                                    Screen.ShowSubtitle("Steal the ~g~coke.~w~");
                                }
                                break;
                            case 3://deliver the coke to gerald
                                {
                                    if (Game.Player.Character.IsInCombat || CarryPed != null && CarryPed.IsInCombatAgainst(Game.Player.Character))
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_ACTION_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                        }
                                    }
                                    else
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_AIRBORNE_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                                        }
                                    }
                                    Screen.ShowSubtitle("Deliver the ~g~coke~w~ to ~y~Gerald's apartment.~w~");

                                    if (Main.missionBlip == null)
                                    {
                                        if (Main.missionBlip != null)
                                        {
                                            Main.missionBlip.Delete();
                                            Main.missionBlip = null;
                                        }
                                        while (Main.missionBlip == null)
                                        {
                                            Main.missionBlip = World.CreateBlip(new Vector3(-61.89631f, -1514.137f, 33.43623f));
                                            Wait(0);
                                        }
                                        HudHandler.SET_GPS(Main.missionBlip, 156, false, true);
                                    }
                                    else
                                    {
                                        if (Game.Player.Character.CurrentVehicle == null && Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 4)
                                        {
                                            Groups.RemoveEnemyPeds();
                                            Vehicles.RemoveVehicles();
                                            PickupSteal.RemovePickups();

                                            if (Main.missionBlip != null)
                                            {
                                                Main.missionBlip.Delete();
                                                Main.missionBlip = null;
                                                HudHandler.CLEAR_GPS_ROUTE();
                                            }
                                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "FocusIn", "HintCamSounds", true);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);
                                            HudHandler.HudandRadar(false, false);
                                            Audios.Stop_Music_Event();
                                            MissionSwitch = 4;
                                        }
                                    }
                                }
                                break;
                            case 4://delviered coke to gerald
                                {
                                    int randcutscene = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 2, 6);
                                    int cutscenetime = 20000;
                                    switch (randcutscene)
                                    {
                                        case 2:
                                            cutscenetime = 20000;
                                            break;
                                        case 3:
                                            cutscenetime = 16000;
                                            break;
                                        case 4:
                                            cutscenetime = 15000;
                                            break;
                                        case 5:
                                            cutscenetime = 15000;
                                            break;
                                    }
                                    while (Main.CutsceneExtra1 == null)
                                    {
                                        Main.CutsceneExtra1 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra1.IsVisible = false;
                                    while (Main.CutsceneExtra2 == null)
                                    {
                                        Main.CutsceneExtra2 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra2.IsVisible = false;
                                    while (Main.CutsceneExtra3 == null)
                                    {
                                        Main.CutsceneExtra3 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra3.IsVisible = false;

                                    int player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                    Ped ped2;
                                    ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                    Ped ped3;
                                    ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                    Ped ped4;
                                    ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);
                                    Main.PlayerModelSet(Game.Player.Character);
                                    LoadingPrompt.Show("Starting Cutscene", LoadingSpinnerType.RegularClockwise);
                                    //GameplayCamera.RelativeHeading = 161.3774f - Game.Player.Character.Heading;
                                    Main.LoadCutscene($"mp_intro_mcs_10_a{randcutscene}");
                                    while (!Function.Call<bool>(Hash.HAS_CUTSCENE_LOADED))
                                    {
                                        Main.LoadCutscene($"mp_intro_mcs_10_a{randcutscene}");
                                        Script.Yield();
                                    }
                                    player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                    ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                    ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                    ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);

                                    Main.SetPedOutfitCutscene("MP_1", Game.Player.Character);
                                    Main.SetPedOutfitCutscene_MP2("MP_2", ped2);
                                    Main.SetPedOutfitCutscene_MP3("MP_3", ped3);
                                    Main.SetPedOutfitCutscene_MP4("MP_4", ped4);// patch this shit its incorrect here

                                    Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Game.Player.Character, "MP_1", 0, 0, 64);
                                    if (ped2.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped2, "MP_2", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra1, "MP_2", 0, 0, 64);
                                    }
                                    if (ped3.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped3, "MP_3", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra2, "MP_3", 0, 0, 64);
                                    }
                                    if (ped4.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped4, "MP_4", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra3, "MP_4", 0, 0, 64);
                                    }

                                    //Function.Call(Hash.SET_CUTSCENE_ORIGIN, 1568.77f, 3217.713f, 40.41154f, 106.3544f, 0);
                                    Function.Call(Hash.START_CUTSCENE, 0);
                                    Wait(50);
                                    Main.PlayerModelSetBack(Game.Player.Character);
                                    Main.GetPedOutfitCutscene("MP_1", Game.Player.Character);
                                    Main.GetPedOutfitCutscene_MP2("MP_2", ped2);
                                    Main.GetPedOutfitCutscene_MP3("MP_3", ped3);
                                    Main.GetPedOutfitCutscene_MP4("MP_4", ped4);
                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();
                                    LoadingPrompt.Hide();

                                    while (Cutscenes.GET_CUTSCENE_TIME() < cutscenetime)
                                    {
                                        Wait(0);
                                    }

                                    Groups.RemoveEnemyPeds();
                                    Groups.ClearEnemyPedsList2();
                                    Vehicles.RemoveVehicles();
                                    Props.RemoveProps();
                                    Screen_Effects.CLEAR_ALL_HELP_MESSAGES();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebEnd", 0, true);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Wait(1000);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebPass", 0, true);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_MISSION");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomCashValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 2000, 10001);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomRPValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 400, 1311);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_MISSION");

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
                                    int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

                                    int getcurrentduration = 0;
                                    while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    getcurrentduration = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
                                    if (Main.DEBUG) Notification.Show($"{getcurrentduration}");

                                    int i = Game.GameTime + getcurrentduration;
                                    while (Game.GameTime < i)
                                    {
                                        HudHandler.HudandRadar(false, false);
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Game.Player.CanControlCharacter = true;

                                    int Timer = Game.GameTime + 4000;
                                    Game.Player.CanControlCharacter = false;
                                    PlayerSwitch._SWITCH_OUT_PLAYER(Game.Player.Character, 3, 1);
                                    while (Game.GameTime < Timer)
                                    {
                                        Wait(0);
                                    }

                                    Function.Call(Hash.SET_ENTITY_COORDS, Game.Player.Character, -91.57023f, -1523.439f, 33.58508f, true, false, false, true);
                                    Function.Call(Hash.SET_ENTITY_HEADING, Game.Player.Character, 170.8833f);
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    Game.Player.CanControlCharacter = true;

                                    Function.Call((Hash)0xAD5FDF34B81BFE79);
                                    Function.Call((Hash)0x43D1680C6D19A8E9);
                                    PlayerSwitch.SWITCH_IN_PLAYER(Game.Player.Character);
                                    while (PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                                    {
                                        Wait(0);
                                    }
                                    HudHandler.HudandRadar(true, true);
                                    MPCash.ADD_CASH(RandomCashValue);
                                    MPRank.ADD_RP(RandomRPValue);

                                    Main.RadioAllowed = true;
                                    Main.NoCopsOnMission = false;
                                    Main.FuckOffCivilians = false;
                                    Main.OnMission = false;
                                    Main.checkpoint = 0;
                                    MissionsSwitch = -1;
                                    MissionSwitch = 0;
                                }
                                break;
                        }
                    }
                    break;
                case 6://Violent Duct
                    {
                        if (Main.checkpoint == 1 || Main.DEBUG)
                        {
                            if (TeamLives > 0)
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_black_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }
                            else
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_red_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 0, 0, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }

                            if (Game.Player.Character.IsDead)
                            {
                                TeamLives -= 1;

                                if (MissionSwitch == 4)
                                {
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    PickupSteal.RemovePickups();
                                    PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(Game.Player.Character.Position.X, Game.Player.Character.Position.Y, World.GetGroundHeight(Game.Player.Character.Position)), new Vector3(0f, 0f, Game.Player.Character.Heading), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Coke", false, 1f);

                                    Notification.Show("The coke has been dropped.");

                                    MissionSwitch = 3;
                                }

                                while (Game.Player.Character.IsDead)
                                {
                                    Wait(0);
                                }

                                if (TeamLives < 0)
                                {
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    while (Wall_Creator.FailCam == null)
                                    {
                                        Wall_Creator.FailCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", 0);
                                        Wait(0);
                                    }
                                    Random rand = new Random();
                                    int index = rand.Next(1, 3);
                                    if (index == 1)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 2.0f, 3.0f, 0.6f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    if (index == 2)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 1.0f, 3.0f, 0.5f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    World.RenderingCamera = Wall_Creator.FailCam;
                                    HudHandler.HudandRadar(false, false);
                                    Wait(1500);
                                    Screen.FadeIn(500);
                                    while (!Screen.IsFadedIn)
                                    {
                                        Wait(0);
                                    }
                                    Weapons.Anim_Weapon_Off();
                                    Audios.Stop_Music_Event();
                                    Game.Player.IsInvincible = true;
                                    Function.Call(Hash.SET_SEETHROUGH, false);
                                    Function.Call(Hash.SET_NIGHTVISION, false);
                                    Function.Call(Hash.SET_ARTIFICIAL_LIGHTS_STATE, false);
                                    Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
                                    Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFail", 0, false);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FAILED_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestHeist2PassScaleform();
                                    Wait(500);
                                    //Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_CELEB_SCREEN_SCENE");
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_FAILED");

                                    int i = Game.GameTime + 6000;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Screen.FadeOut(1000);
                                    Wait(1000);
                                    if (Wall_Creator.FailCam != null)
                                    {
                                        Wall_Creator.FailCam.Delete();
                                        Wall_Creator.FailCam = null;
                                    }
                                    World.RenderingCamera = null;
                                    Groups.RemoveEnemyPeds();
                                    Vehicles.RemoveVehicles();
                                    PickupSteal.RemovePickups();
                                    Props.RemoveProps();
                                    Game.Player.IsInvincible = false;
                                    MissionSwitch = 0;
                                    break;
                                }
                            }
                        }
                        switch (MissionSwitch)
                        {
                            case 0://contact mission start
                                {
                                    if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_START(42.83355f, -1098.774f, 29.23912f, 0.0f, 0.0f, 0.0f, 500f, 0);
                                    }
                                    string[] musicevents = {
                        "MP_MC_CMH_IAA_PREP_START",
                        "MP_MC_CMH_IAA_FINALE_START",
                        "MP_MC_CMH_SUB_PREP_START",
                        "MP_MC_CMH_SUB_FINALE_START",
                        "MP_MC_CMH_SILO_PREP_START",
                        "MP_MC_CMH_SILO_FINALE_START",
                        "MP_MC_CM22_START_TRACK_11",
                        "MP_MC_TUNER_START_MUSIC",
                        "MP_MC_GR_START",
                        "LOWRIDER_START_MUSIC",
                        "LOWRIDER_FINALE_START_MUSIC",
                        "MP_MC_START",
                        };
                                    Audios.TRIGGER_MUSIC_EVENT(musicevents[Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, musicevents.Length)]);
                                    Audios.TRIGGER_MUSIC_EVENT("MP_MC_SUSPENSE_HFIN");
                                    Audios.TRIGGER_MUSIC_EVENT("FH2B_EXPLODE");

                                    MPLoadout.GET_CURRENT_LOADOUT();
                                    MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(43.64405f, -1107.885f, 29.11077f - 1f), 144.0446f);

                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();

                                    Game.Player.Character.Task.ClearAll();
                                    Game.Player.CanControlCharacter = true;

                                    Game.Player.Character.Position = new Vector3(42.83355f, -1098.774f, 29.23912f - 1f);
                                    Game.Player.Character.Heading = 156.5809f;
                                    Game.Player.Character.IsPositionFrozen = true;
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    HudHandler.HudandRadar(false, false);

                                    Wait(1000);
                                    LoadingPrompt.Hide();
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Function.Call((Hash)0xEFACC8AEF94430D5, 1f);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    PlayerSwitch.STOP_PLAYER_SWITCH();
                                    if (LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                    }
                                    Game.Player.Character.IsPositionFrozen = false;

                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true); //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "PUSH", "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS", true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_INTRO_TO_WALL", "intro", "Mission", "Violent Duct", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_INTRO_TO_WALL", "intro", "Mission", "Violent Duct", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_INTRO_TO_WALL", "intro", "Mission", "Violent Duct", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "intro");
                                    Screen.FadeIn(1000);

                                    int getdur = Wall_Creator.GET_TOTAL_WALL_DURATION();
                                    int i = Game.GameTime + getdur;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Mobile_Phone.CAN_OPEN_PHONE = true;
                                    //Function.Call(Hash.PREPARE_MUSIC_EVENT, "FH2B_EXPLODE");
                                    //Audios.TRIGGER_MUSIC_EVENT("MP_CHF_ACTION");
                                    HudHandler.HudandRadar(true, true);
                                    Main.checkpoint = 1;
                                    TeamLives = 1;
                                    MissionSwitch = 1;
                                }
                                break;
                            case 1://go to deal
                                {
                                    Vector3[] randomspawn = { new Vector3(84.94057f, -1174.458f, 29.28998f), new Vector3(79.84168f, -1242.725f, 29.27949f) };
                                    float[] randomspawnhead = { 121.9192f, 3.941375f };
                                    int rand = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, randomspawn.Length);
                                    RESPAWN.SET_MIS_STAT(randomspawn[rand], randomspawnhead[rand], 0, true);
                                    
                                    Screen.ShowSubtitle("Go to the ~y~deal.~w~");

                                    if (Main.missionBlip == null)
                                    {
                                        if (Main.missionBlip != null)
                                        {
                                            Main.missionBlip.Delete();
                                            Main.missionBlip = null;
                                        }
                                        while (Main.missionBlip == null)
                                        {
                                            Main.missionBlip = World.CreateBlip(new Vector3(108.3259f, -1208.055f, 29.29138f));
                                            Wait(0);
                                        }
                                        HudHandler.SET_GPS(Main.missionBlip, 156, false, true);
                                    }
                                    else
                                    {
                                        if (Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 50f)
                                        {
                                            if (Main.missionBlip != null)
                                            {
                                                Main.missionBlip.Delete();
                                                Main.missionBlip = null;
                                                HudHandler.CLEAR_GPS_ROUTE();
                                            }
                                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "FocusIn", "HintCamSounds", true);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);
                                            MissionSwitch = 2;
                                        }
                                    }
                                }
                                break;
                            case 2://spawn everything
                                {
                                    Vehicles.RemoveVehicles();
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x77934CEE, new Vector3(127.2162f, -1190.626f, 28.97667f - 1f), 106.2598f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x77934CEE, new Vector3(126.3809f, -1184.309f, 28.97239f - 1f), 120.4335f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x97FA4F36, new Vector3(134.4776f, -1186.409f, 29.31499f - 1f), 173.3183f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x77934CEE, new Vector3(136.1912f, -1194.498f, 28.96207f - 1f), 136.1476f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x77934CEE, new Vector3(137.1497f, -1199.903f, 28.89039f - 1f), 141.7249f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x77934CEE, new Vector3(124.7172f, -1201.281f, 28.90589f - 1f), 83.3196f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x77934CEE, new Vector3(124.2282f, -1197.982f, 28.92712f - 1f), 117.1666f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(133.9828f, -1208.248f, 29.15155f - 1f), -11.25093f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(138.3632f, -1212.549f, 29.11622f - 1f), -26.73621f, false, false);

                                    Groups.RemoveEnemyPeds();
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(133.8581f, -1213.379f, 29.47056f - 1f), -15.13479f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(138.3352f, -1217.098f, 29.34493f - 1f), 0.3730475f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(136.4134f, -1209.46f, 29.31018f - 1f), 6.310075f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x3D843282, new Vector3(123.688f, -1199.774f, 29.44854f - 1f), 101.396f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x3D843282, new Vector3(134.8404f, -1199.886f, 29.39174f - 1f), -176.713f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x3D843282, new Vector3(142.2649f, -1198.248f, 29.34926f - 1f), -93.85041f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(130.9656f, -1189.477f, 29.51794f - 1f), 93.11244f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.BlipUpEnemyPeds();

                                    if (CarryPed != null)
                                    {
                                        CarryPed.Delete();
                                        CarryPed = null;
                                    }
                                    while (CarryPed == null)
                                    {
                                        CarryPed = World.CreatePed((PedHash)0x3D843282, new Vector3(129.1935f, -1189.575f, 29.48564f - 1f), -82.43814f);
                                        Wait(0);
                                    }
                                    CarryPed.RelationshipGroup = Groups.AiTeam;
                                    CarryPed.Weapons.Give(WeaponHash.Pistol, 10000, true, true);
                                    while (CarryPed.AttachedBlip == null)
                                    {
                                        CarryPed.AddBlip();
                                        Wait(0);
                                    }
                                    CarryPed.AttachedBlip.Sprite = (BlipSprite)1;
                                    CarryPed.AttachedBlip.Color = BlipColor.Green;
                                    CarryPed.AttachedBlip.Name = "Coke";

                                    PickupSteal.RemovePickups();

                                    MissionSwitch = 3;
                                }
                                break;
                            case 3://steal the Coke
                                {
                                    if (Game.Player.Character.IsInCombat || CarryPed != null && CarryPed.IsInCombatAgainst(Game.Player.Character))
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_ACTION_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                        }
                                    }
                                    if (CarryPed != null)
                                    {
                                        if (CarryPed.IsDead)
                                        {
                                            PickupSteal.RemovePickups();
                                            PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(CarryPed.Position.X, CarryPed.Position.Y, World.GetGroundHeight(CarryPed.Position)), new Vector3(0f, 0f, CarryPed.Heading), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Coke", false, 1f);

                                            Notification.Show("The coke has been dropped.");

                                            if (CarryPed.AttachedBlip != null)
                                            {
                                                CarryPed.AttachedBlip.Delete();
                                            }
                                            CarryPed.MarkAsNoLongerNeeded();
                                            CarryPed = null;
                                        }
                                    }
                                    else
                                    {
                                        if (PickupSteal.PickupSpawn.Count == 0)
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                                            Notification.Show("~b~" + Main.Player_Name + "~w~ collected the coke.");
                                            MissionSwitch = 4;
                                        }
                                    }
                                    Screen.ShowSubtitle("Steal the ~g~coke.~w~");
                                }
                                break;
                            case 4://deliver the coke to gerald
                                {
                                    if (Game.Player.Character.IsInCombat || CarryPed != null && CarryPed.IsInCombatAgainst(Game.Player.Character))
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_ACTION_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                        }
                                    }
                                    else
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_AIRBORNE_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                                        }
                                    }
                                    Screen.ShowSubtitle("Deliver the ~g~coke~w~ to ~y~Gerald's apartment.~w~");

                                    if (Main.missionBlip == null)
                                    {
                                        if (Main.missionBlip != null)
                                        {
                                            Main.missionBlip.Delete();
                                            Main.missionBlip = null;
                                        }
                                        while (Main.missionBlip == null)
                                        {
                                            Main.missionBlip = World.CreateBlip(new Vector3(-61.89631f, -1514.137f, 33.43623f));
                                            Wait(0);
                                        }
                                        HudHandler.SET_GPS(Main.missionBlip, 156, false, true);
                                    }
                                    else
                                    {
                                        if (Game.Player.Character.CurrentVehicle == null && Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 4)
                                        {
                                            Groups.RemoveEnemyPeds();
                                            Vehicles.RemoveVehicles();
                                            PickupSteal.RemovePickups();

                                            if (Main.missionBlip != null)
                                            {
                                                Main.missionBlip.Delete();
                                                Main.missionBlip = null;
                                                HudHandler.CLEAR_GPS_ROUTE();
                                            }
                                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "FocusIn", "HintCamSounds", true);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);
                                            HudHandler.HudandRadar(false, false);
                                            Audios.Stop_Music_Event();
                                            MissionSwitch = 5;
                                        }
                                    }
                                }
                                break;
                            case 5://delviered coke to gerald
                                {
                                    int randcutscene = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 2, 6);
                                    int cutscenetime = 20000;
                                    switch (randcutscene)
                                    {
                                        case 2:
                                            cutscenetime = 20000;
                                            break;
                                        case 3:
                                            cutscenetime = 16000;
                                            break;
                                        case 4:
                                            cutscenetime = 15000;
                                            break;
                                        case 5:
                                            cutscenetime = 15000;
                                            break;
                                    }
                                    while (Main.CutsceneExtra1 == null)
                                    {
                                        Main.CutsceneExtra1 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra1.IsVisible = false;
                                    while (Main.CutsceneExtra2 == null)
                                    {
                                        Main.CutsceneExtra2 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra2.IsVisible = false;
                                    while (Main.CutsceneExtra3 == null)
                                    {
                                        Main.CutsceneExtra3 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra3.IsVisible = false;

                                    int player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                    Ped ped2;
                                    ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                    Ped ped3;
                                    ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                    Ped ped4;
                                    ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);
                                    Main.PlayerModelSet(Game.Player.Character);
                                    LoadingPrompt.Show("Starting Cutscene", LoadingSpinnerType.RegularClockwise);
                                    //GameplayCamera.RelativeHeading = 161.3774f - Game.Player.Character.Heading;
                                    Main.LoadCutscene($"mp_intro_mcs_10_a{randcutscene}");
                                    while (!Function.Call<bool>(Hash.HAS_CUTSCENE_LOADED))
                                    {
                                        Main.LoadCutscene($"mp_intro_mcs_10_a{randcutscene}");
                                        Script.Yield();
                                    }
                                    player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                    ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                    ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                    ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);

                                    Main.SetPedOutfitCutscene("MP_1", Game.Player.Character);
                                    Main.SetPedOutfitCutscene_MP2("MP_2", ped2);
                                    Main.SetPedOutfitCutscene_MP3("MP_3", ped3);
                                    Main.SetPedOutfitCutscene_MP4("MP_4", ped4);// patch this shit its incorrect here

                                    Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Game.Player.Character, "MP_1", 0, 0, 64);
                                    if (ped2.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped2, "MP_2", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra1, "MP_2", 0, 0, 64);
                                    }
                                    if (ped3.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped3, "MP_3", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra2, "MP_3", 0, 0, 64);
                                    }
                                    if (ped4.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped4, "MP_4", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra3, "MP_4", 0, 0, 64);
                                    }

                                    //Function.Call(Hash.SET_CUTSCENE_ORIGIN, 1568.77f, 3217.713f, 40.41154f, 106.3544f, 0);
                                    Function.Call(Hash.START_CUTSCENE, 0);
                                    Wait(50);
                                    Main.PlayerModelSetBack(Game.Player.Character);
                                    Main.GetPedOutfitCutscene("MP_1", Game.Player.Character);
                                    Main.GetPedOutfitCutscene_MP2("MP_2", ped2);
                                    Main.GetPedOutfitCutscene_MP3("MP_3", ped3);
                                    Main.GetPedOutfitCutscene_MP4("MP_4", ped4);
                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();
                                    LoadingPrompt.Hide();

                                    while (Cutscenes.GET_CUTSCENE_TIME() < cutscenetime)
                                    {
                                        Wait(0);
                                    }

                                    Groups.RemoveEnemyPeds();
                                    Groups.ClearEnemyPedsList2();
                                    Vehicles.RemoveVehicles();
                                    Props.RemoveProps();
                                    Screen_Effects.CLEAR_ALL_HELP_MESSAGES();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebEnd", 0, true);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Wait(1000);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebPass", 0, true);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_MISSION");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomCashValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 3000, 10001);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomRPValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 600, 1441);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_MISSION");

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
                                    int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

                                    int getcurrentduration = 0;
                                    while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    getcurrentduration = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
                                    if (Main.DEBUG) Notification.Show($"{getcurrentduration}");

                                    int i = Game.GameTime + getcurrentduration;
                                    while (Game.GameTime < i)
                                    {
                                        HudHandler.HudandRadar(false, false);
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Game.Player.CanControlCharacter = true;

                                    int Timer = Game.GameTime + 4000;
                                    Game.Player.CanControlCharacter = false;
                                    PlayerSwitch._SWITCH_OUT_PLAYER(Game.Player.Character, 3, 1);
                                    while (Game.GameTime < Timer)
                                    {
                                        Wait(0);
                                    }

                                    Function.Call(Hash.SET_ENTITY_COORDS, Game.Player.Character, -91.57023f, -1523.439f, 33.58508f, true, false, false, true);
                                    Function.Call(Hash.SET_ENTITY_HEADING, Game.Player.Character, 170.8833f);
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    Game.Player.CanControlCharacter = true;

                                    Function.Call((Hash)0xAD5FDF34B81BFE79);
                                    Function.Call((Hash)0x43D1680C6D19A8E9);
                                    PlayerSwitch.SWITCH_IN_PLAYER(Game.Player.Character);
                                    while (PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                                    {
                                        Wait(0);
                                    }
                                    HudHandler.HudandRadar(true, true);
                                    MPCash.ADD_CASH(RandomCashValue);
                                    MPRank.ADD_RP(RandomRPValue);

                                    Main.RadioAllowed = true;
                                    Main.NoCopsOnMission = false;
                                    Main.FuckOffCivilians = false;
                                    Main.OnMission = false;
                                    Main.checkpoint = 0;
                                    MissionsSwitch = -1;
                                    MissionSwitch = 0;
                                }
                                break;
                        }
                    }
                    break;
                case 7://War And Pieces
                    {
                        if (Main.checkpoint == 1 || Main.DEBUG)
                        {
                            if (TeamLives > 0)
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_black_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }
                            else
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_red_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 0, 0, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }

                            if (Game.Player.Character.IsDead)
                            {
                                TeamLives -= 1;

                                if (MissionSwitch == 3)
                                {
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    PickupSteal.RemovePickups();
                                    PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(Game.Player.Character.Position.X, Game.Player.Character.Position.Y, World.GetGroundHeight(Game.Player.Character.Position)), new Vector3(0f, 0f, Game.Player.Character.Heading), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Coke", false, 1f);

                                    Notification.Show("The coke has been dropped.");

                                    MissionSwitch = 2;
                                }

                                while (Game.Player.Character.IsDead)
                                {
                                    Wait(0);
                                }

                                if (TeamLives < 0)
                                {
                                    Chase.SET_CHASE_DEACTIVATE();
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    while (Wall_Creator.FailCam == null)
                                    {
                                        Wall_Creator.FailCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", 0);
                                        Wait(0);
                                    }
                                    Random rand = new Random();
                                    int index = rand.Next(1, 3);
                                    if (index == 1)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 2.0f, 3.0f, 0.6f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    if (index == 2)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 1.0f, 3.0f, 0.5f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    World.RenderingCamera = Wall_Creator.FailCam;
                                    HudHandler.HudandRadar(false, false);
                                    Wait(1500);
                                    Screen.FadeIn(500);
                                    while (!Screen.IsFadedIn)
                                    {
                                        Wait(0);
                                    }
                                    Weapons.Anim_Weapon_Off();
                                    Audios.Stop_Music_Event();
                                    Game.Player.IsInvincible = true;
                                    Function.Call(Hash.SET_SEETHROUGH, false);
                                    Function.Call(Hash.SET_NIGHTVISION, false);
                                    Function.Call(Hash.SET_ARTIFICIAL_LIGHTS_STATE, false);
                                    Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
                                    Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFail", 0, false);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FAILED_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestHeist2PassScaleform();
                                    Wait(500);
                                    //Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_CELEB_SCREEN_SCENE");
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_FAILED");

                                    int i = Game.GameTime + 6000;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Screen.FadeOut(1000);
                                    Wait(1000);
                                    if (Wall_Creator.FailCam != null)
                                    {
                                        Wall_Creator.FailCam.Delete();
                                        Wall_Creator.FailCam = null;
                                    }
                                    World.RenderingCamera = null;
                                    Groups.RemoveEnemyPeds();
                                    Vehicles.RemoveVehicles();
                                    PickupSteal.RemovePickups();
                                    Game.Player.IsInvincible = false;
                                    MissionSwitch = 0;
                                    break;
                                }
                            }
                        }
                        switch (MissionSwitch)
                        {
                            case 0://contact mission start
                                {
                                    if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_START(2545.217f, 2623.028f, 37.94484f, 0.0f, 0.0f, 0.0f, 500f, 0);
                                    }
                                    string[] musicevents = {
                        "MP_MC_CMH_IAA_PREP_START",
                        "MP_MC_CMH_IAA_FINALE_START",
                        "MP_MC_CMH_SUB_PREP_START",
                        "MP_MC_CMH_SUB_FINALE_START",
                        "MP_MC_CMH_SILO_PREP_START",
                        "MP_MC_CMH_SILO_FINALE_START",
                        "MP_MC_CM22_START_TRACK_11",
                        "MP_MC_TUNER_START_MUSIC",
                        "MP_MC_GR_START",
                        "LOWRIDER_START_MUSIC",
                        "LOWRIDER_FINALE_START_MUSIC",
                        "MP_MC_START",
                        };
                                    Audios.TRIGGER_MUSIC_EVENT(musicevents[Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, musicevents.Length)]);
                                    Audios.TRIGGER_MUSIC_EVENT("MP_MC_SUSPENSE_HFIN");
                                    Audios.TRIGGER_MUSIC_EVENT("FH2B_EXPLODE");

                                    MPLoadout.GET_CURRENT_LOADOUT();
                                    MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(2555.418f, 2638.189f, 38.10944f - 1f), 318.9092f);

                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();

                                    Game.Player.Character.Task.ClearAll();
                                    Game.Player.CanControlCharacter = true;

                                    Game.Player.Character.Position = new Vector3(2545.217f, 2623.028f, 37.94484f - 1f);
                                    Game.Player.Character.Heading = 103.0475f;
                                    Game.Player.Character.IsPositionFrozen = true;
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    HudHandler.HudandRadar(false, false);

                                    Wait(1000);
                                    LoadingPrompt.Hide();
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Function.Call((Hash)0xEFACC8AEF94430D5, 1f);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    PlayerSwitch.STOP_PLAYER_SWITCH();
                                    if (LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                    }
                                    Game.Player.Character.IsPositionFrozen = false;

                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true); //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "PUSH", "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS", true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_INTRO_TO_WALL", "intro", "Mission", "War And Pieces", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_INTRO_TO_WALL", "intro", "Mission", "War And Pieces", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_INTRO_TO_WALL", "intro", "Mission", "War And Pieces", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "intro");
                                    Screen.FadeIn(1000);

                                    int getdur = Wall_Creator.GET_TOTAL_WALL_DURATION();
                                    int i = Game.GameTime + getdur;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Mobile_Phone.CAN_OPEN_PHONE = true;
                                    //Function.Call(Hash.PREPARE_MUSIC_EVENT, "FH2B_EXPLODE");
                                    //Audios.TRIGGER_MUSIC_EVENT("MP_CHF_ACTION");
                                    HudHandler.HudandRadar(true, true);
                                    Main.checkpoint = 1;
                                    TeamLives = 1;
                                    MissionSwitch = 1;
                                }
                                break;
                            case 1://spawn everything
                                {
                                    Vector3[] randomspawn = { new Vector3(2368.358f, 2561.717f, 46.66693f), new Vector3(2328.396f, 2596.862f, 46.6293f) };
                                    float[] randomspawnhead = { 173.3366f, 137.6239f };
                                    int rand = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, randomspawn.Length);
                                    RESPAWN.SET_MIS_STAT(randomspawn[rand], randomspawnhead[rand], 0, true);

                                    Vehicles.RemoveVehicles();
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(2355.829f, 2532.587f, 46.39865f - 1f), 78.6141f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(2340.719f, 2528.603f, 46.4797f - 1f), 0.7163631f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x77934CEE, new Vector3(2334.917f, 2540.8f, 46.133f - 1f), -127.3503f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x77934CEE, new Vector3(2331.404f, 2542.444f, 46.02435f - 1f), -155.3032f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x77934CEE, new Vector3(2328.031f, 2539.525f, 46.03243f - 1f), -129.4237f, false, false);

                                    Groups.RemoveEnemyPeds();
                                    Groups.SPAWN_AI((PedHash)0x7D03E617, new Vector3(2344.273f, 2531.746f, 46.67206f - 1f), 25.03633f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x7D03E617, new Vector3(2340.405f, 2533.896f, 46.5218f - 1f), 20.63441f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x7D03E617, new Vector3(2337.879f, 2531.828f, 46.55964f - 1f), 30.35927f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x4F46D607, new Vector3(2330.434f, 2538.941f, 46.52204f - 1f), -113.8596f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x4F46D607, new Vector3(2333.165f, 2541.68f, 46.67164f - 1f), -149.4823f, WeaponHash.AssaultRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.BlipUpEnemyPeds();

                                    if (CarryPed != null)
                                    {
                                        CarryPed.Delete();
                                        CarryPed = null;
                                    }
                                    while (CarryPed == null)
                                    {
                                        CarryPed = World.CreatePed((PedHash)0x4F46D607, new Vector3(2336.475f, 2538.029f, 46.56088f - 1f), -132.0304f);
                                        Wait(0);
                                    }
                                    CarryPed.RelationshipGroup = Groups.AiTeam;
                                    CarryPed.Weapons.Give(WeaponHash.Pistol, 10000, true, true);
                                    while (CarryPed.AttachedBlip == null)
                                    {
                                        CarryPed.AddBlip();
                                        Wait(0);
                                    }
                                    CarryPed.AttachedBlip.Sprite = (BlipSprite)1;
                                    CarryPed.AttachedBlip.Color = BlipColor.Green;
                                    CarryPed.AttachedBlip.Name = "Coke";

                                    PickupSteal.RemovePickups();

                                    MissionSwitch = 2;
                                }
                                break;
                            case 2://steal the Coke
                                {
                                    if (Game.Player.Character.IsInCombat || CarryPed != null && CarryPed.IsInCombatAgainst(Game.Player.Character))
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_ACTION_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                        }
                                    }
                                    if (CarryPed != null)
                                    {
                                        if (CarryPed.IsDead)
                                        {
                                            WeaponHash[] pedweapons = { WeaponHash.AssaultRifle, WeaponHash.MachinePistol };
                                            Chase.SET_CHASE_ACTIVATE(VehicleHash.Daemon, PedHash.Lost01GMY, pedweapons);

                                            PickupSteal.RemovePickups();
                                            PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(CarryPed.Position.X, CarryPed.Position.Y, World.GetGroundHeight(CarryPed.Position)), new Vector3(0f, 0f, CarryPed.Heading), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Coke", false, 1f);

                                            Notification.Show("The coke has been dropped.");

                                            if (CarryPed.AttachedBlip != null)
                                            {
                                                CarryPed.AttachedBlip.Delete();
                                            }
                                            CarryPed.MarkAsNoLongerNeeded();
                                            CarryPed = null;
                                        }
                                    }
                                    else
                                    {
                                        if (PickupSteal.PickupSpawn.Count == 0)
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                                            Notification.Show("~b~" + Main.Player_Name + "~w~ collected the coke.");
                                            MissionSwitch = 3;
                                        }
                                    }
                                    Screen.ShowSubtitle("Steal the ~g~coke.~w~");
                                }
                                break;
                            case 3://deliver the coke to gerald
                                {
                                    if (Chase.ChaseActive)
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_VEHICLE_CHASE_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_VEHICLE_CHASE_HFIN");
                                        }
                                    }
                                    Screen.ShowSubtitle("Deliver the ~g~coke~w~ to ~y~Gerald's apartment.~w~");

                                    if (Main.missionBlip == null)
                                    {
                                        if (Main.missionBlip != null)
                                        {
                                            Main.missionBlip.Delete();
                                            Main.missionBlip = null;
                                        }
                                        while (Main.missionBlip == null)
                                        {
                                            Main.missionBlip = World.CreateBlip(new Vector3(-61.89631f, -1514.137f, 33.43623f));
                                            Wait(0);
                                        }
                                        HudHandler.SET_GPS(Main.missionBlip, 156, false, true);
                                    }
                                    else
                                    {
                                        if (Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 100f)
                                        {
                                            if (Chase.ChaseActive)
                                            {
                                                Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                                                Chase.SET_CHASE_DEACTIVATE();
                                            }
                                        }
                                        if (Game.Player.Character.CurrentVehicle == null && Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 4)
                                        {
                                            Groups.RemoveEnemyPeds();
                                            Vehicles.RemoveVehicles();
                                            PickupSteal.RemovePickups();

                                            if (Main.missionBlip != null)
                                            {
                                                Main.missionBlip.Delete();
                                                Main.missionBlip = null;
                                                HudHandler.CLEAR_GPS_ROUTE();
                                            }
                                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "FocusIn", "HintCamSounds", true);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);
                                            HudHandler.HudandRadar(false, false);
                                            Audios.Stop_Music_Event();
                                            MissionSwitch = 4;
                                        }
                                    }
                                }
                                break;
                            case 4://delviered coke to gerald
                                {
                                    int randcutscene = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 2, 6);
                                    int cutscenetime = 20000;
                                    switch (randcutscene)
                                    {
                                        case 2:
                                            cutscenetime = 20000;
                                            break;
                                        case 3:
                                            cutscenetime = 16000;
                                            break;
                                        case 4:
                                            cutscenetime = 15000;
                                            break;
                                        case 5:
                                            cutscenetime = 15000;
                                            break;
                                    }
                                    while (Main.CutsceneExtra1 == null)
                                    {
                                        Main.CutsceneExtra1 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra1.IsVisible = false;
                                    while (Main.CutsceneExtra2 == null)
                                    {
                                        Main.CutsceneExtra2 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra2.IsVisible = false;
                                    while (Main.CutsceneExtra3 == null)
                                    {
                                        Main.CutsceneExtra3 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra3.IsVisible = false;

                                    int player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                    Ped ped2;
                                    ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                    Ped ped3;
                                    ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                    Ped ped4;
                                    ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);
                                    Main.PlayerModelSet(Game.Player.Character);
                                    LoadingPrompt.Show("Starting Cutscene", LoadingSpinnerType.RegularClockwise);
                                    //GameplayCamera.RelativeHeading = 161.3774f - Game.Player.Character.Heading;
                                    Main.LoadCutscene($"mp_intro_mcs_10_a{randcutscene}");
                                    while (!Function.Call<bool>(Hash.HAS_CUTSCENE_LOADED))
                                    {
                                        Main.LoadCutscene($"mp_intro_mcs_10_a{randcutscene}");
                                        Script.Yield();
                                    }
                                    player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                    ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                    ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                    ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);

                                    Main.SetPedOutfitCutscene("MP_1", Game.Player.Character);
                                    Main.SetPedOutfitCutscene_MP2("MP_2", ped2);
                                    Main.SetPedOutfitCutscene_MP3("MP_3", ped3);
                                    Main.SetPedOutfitCutscene_MP4("MP_4", ped4);// patch this shit its incorrect here

                                    Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Game.Player.Character, "MP_1", 0, 0, 64);
                                    if (ped2.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped2, "MP_2", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra1, "MP_2", 0, 0, 64);
                                    }
                                    if (ped3.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped3, "MP_3", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra2, "MP_3", 0, 0, 64);
                                    }
                                    if (ped4.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped4, "MP_4", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra3, "MP_4", 0, 0, 64);
                                    }

                                    //Function.Call(Hash.SET_CUTSCENE_ORIGIN, 1568.77f, 3217.713f, 40.41154f, 106.3544f, 0);
                                    Function.Call(Hash.START_CUTSCENE, 0);
                                    Wait(50);
                                    Main.PlayerModelSetBack(Game.Player.Character);
                                    Main.GetPedOutfitCutscene("MP_1", Game.Player.Character);
                                    Main.GetPedOutfitCutscene_MP2("MP_2", ped2);
                                    Main.GetPedOutfitCutscene_MP3("MP_3", ped3);
                                    Main.GetPedOutfitCutscene_MP4("MP_4", ped4);
                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();
                                    LoadingPrompt.Hide();

                                    while (Cutscenes.GET_CUTSCENE_TIME() < cutscenetime)
                                    {
                                        Wait(0);
                                    }

                                    Groups.RemoveEnemyPeds();
                                    Groups.ClearEnemyPedsList2();
                                    Vehicles.RemoveVehicles();
                                    Props.RemoveProps();
                                    Screen_Effects.CLEAR_ALL_HELP_MESSAGES();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebEnd", 0, true);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Wait(1000);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebPass", 0, true);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_MISSION");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomCashValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 7000, 10001);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomRPValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 1000, 2471);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_MISSION");

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
                                    int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

                                    int getcurrentduration = 0;
                                    while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    getcurrentduration = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
                                    if (Main.DEBUG) Notification.Show($"{getcurrentduration}");

                                    int i = Game.GameTime + getcurrentduration;
                                    while (Game.GameTime < i)
                                    {
                                        HudHandler.HudandRadar(false, false);
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Game.Player.CanControlCharacter = true;

                                    int Timer = Game.GameTime + 4000;
                                    Game.Player.CanControlCharacter = false;
                                    PlayerSwitch._SWITCH_OUT_PLAYER(Game.Player.Character, 3, 1);
                                    while (Game.GameTime < Timer)
                                    {
                                        Wait(0);
                                    }

                                    Function.Call(Hash.SET_ENTITY_COORDS, Game.Player.Character, -91.57023f, -1523.439f, 33.58508f, true, false, false, true);
                                    Function.Call(Hash.SET_ENTITY_HEADING, Game.Player.Character, 170.8833f);
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    Game.Player.CanControlCharacter = true;

                                    Function.Call((Hash)0xAD5FDF34B81BFE79);
                                    Function.Call((Hash)0x43D1680C6D19A8E9);
                                    PlayerSwitch.SWITCH_IN_PLAYER(Game.Player.Character);
                                    while (PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                                    {
                                        Wait(0);
                                    }
                                    HudHandler.HudandRadar(true, true);
                                    MPCash.ADD_CASH(RandomCashValue);
                                    MPRank.ADD_RP(RandomRPValue);

                                    Main.RadioAllowed = true;
                                    Main.NoCopsOnMission = false;
                                    Main.FuckOffCivilians = false;
                                    Main.OnMission = false;
                                    Main.checkpoint = 0;
                                    MissionsSwitch = -1;
                                    MissionSwitch = 0;
                                }
                                break;
                        }
                    }
                    break;
                case 8://Dish the Dirt
                    {
                        if (Main.checkpoint == 1 || Main.DEBUG)
                        {
                            if (TeamLives > 0)
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_black_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }
                            else
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_red_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 0, 0, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }

                            if (Game.Player.Character.IsDead)
                            {
                                TeamLives -= 1;

                                if (MissionSwitch == 3)
                                {
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    PickupSteal.RemovePickups();
                                    PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(Game.Player.Character.Position.X, Game.Player.Character.Position.Y, World.GetGroundHeight(Game.Player.Character.Position)), new Vector3(0f, 0f, Game.Player.Character.Heading), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Coke", false, 1f);

                                    Notification.Show("The coke has been dropped.");

                                    MissionSwitch = 2;
                                }

                                while (Game.Player.Character.IsDead)
                                {
                                    Wait(0);
                                }

                                if (TeamLives < 0)
                                {
                                    Chase.SET_CHASE_DEACTIVATE();
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    while (Wall_Creator.FailCam == null)
                                    {
                                        Wall_Creator.FailCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", 0);
                                        Wait(0);
                                    }
                                    Random rand = new Random();
                                    int index = rand.Next(1, 3);
                                    if (index == 1)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 2.0f, 3.0f, 0.6f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    if (index == 2)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 1.0f, 3.0f, 0.5f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    World.RenderingCamera = Wall_Creator.FailCam;
                                    HudHandler.HudandRadar(false, false);
                                    Wait(1500);
                                    Screen.FadeIn(500);
                                    while (!Screen.IsFadedIn)
                                    {
                                        Wait(0);
                                    }
                                    Weapons.Anim_Weapon_Off();
                                    Audios.Stop_Music_Event();
                                    Game.Player.IsInvincible = true;
                                    Function.Call(Hash.SET_SEETHROUGH, false);
                                    Function.Call(Hash.SET_NIGHTVISION, false);
                                    Function.Call(Hash.SET_ARTIFICIAL_LIGHTS_STATE, false);
                                    Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
                                    Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFail", 0, false);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FAILED_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestHeist2PassScaleform();
                                    Wait(500);
                                    //Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_CELEB_SCREEN_SCENE");
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_FAILED");

                                    int i = Game.GameTime + 6000;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Screen.FadeOut(1000);
                                    Wait(1000);
                                    if (Wall_Creator.FailCam != null)
                                    {
                                        Wall_Creator.FailCam.Delete();
                                        Wall_Creator.FailCam = null;
                                    }
                                    World.RenderingCamera = null;
                                    Groups.RemoveEnemyPeds();
                                    Vehicles.RemoveVehicles();
                                    PickupSteal.RemovePickups();
                                    Game.Player.IsInvincible = false;
                                    MissionSwitch = 0;
                                    break;
                                }
                            }
                        }
                        switch (MissionSwitch)
                        {
                            case 0://contact mission start
                                {
                                    if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_START(1995.569f, 3060.098f, 47.04906f, 0.0f, 0.0f, 0.0f, 500f, 0);
                                    }
                                    string[] musicevents = {
                        "MP_MC_CMH_IAA_PREP_START",
                        "MP_MC_CMH_IAA_FINALE_START",
                        "MP_MC_CMH_SUB_PREP_START",
                        "MP_MC_CMH_SUB_FINALE_START",
                        "MP_MC_CMH_SILO_PREP_START",
                        "MP_MC_CMH_SILO_FINALE_START",
                        "MP_MC_CM22_START_TRACK_11",
                        "MP_MC_TUNER_START_MUSIC",
                        "MP_MC_GR_START",
                        "LOWRIDER_START_MUSIC",
                        "LOWRIDER_FINALE_START_MUSIC",
                        "MP_MC_START",
                        };
                                    Audios.TRIGGER_MUSIC_EVENT(musicevents[Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, musicevents.Length)]);
                                    Audios.TRIGGER_MUSIC_EVENT("MP_MC_SUSPENSE_HFIN");
                                    Audios.TRIGGER_MUSIC_EVENT("FH2B_EXPLODE");

                                    MPLoadout.GET_CURRENT_LOADOUT();
                                    MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(2015.729f, 3063.406f, 46.80142f), 239.9245f);

                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();

                                    Game.Player.Character.Task.ClearAll();
                                    Game.Player.CanControlCharacter = true;

                                    Game.Player.Character.Position = new Vector3(1995.569f, 3060.098f, 47.04906f - 1f);
                                    Game.Player.Character.Heading = 194.3848f;
                                    Game.Player.Character.IsPositionFrozen = true;
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    HudHandler.HudandRadar(false, false);

                                    Wait(1000);
                                    LoadingPrompt.Hide();
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Function.Call((Hash)0xEFACC8AEF94430D5, 1f);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    PlayerSwitch.STOP_PLAYER_SWITCH();
                                    if (LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                    }
                                    Game.Player.Character.IsPositionFrozen = false;

                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true); //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "PUSH", "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS", true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_INTRO_TO_WALL", "intro", "Mission", "Dish the Dirt", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_INTRO_TO_WALL", "intro", "Mission", "Dish the Dirt", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_INTRO_TO_WALL", "intro", "Mission", "Dish the Dirt", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "intro");
                                    Screen.FadeIn(1000);

                                    int getdur = Wall_Creator.GET_TOTAL_WALL_DURATION();
                                    int i = Game.GameTime + getdur;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Mobile_Phone.CAN_OPEN_PHONE = true;
                                    //Function.Call(Hash.PREPARE_MUSIC_EVENT, "FH2B_EXPLODE");
                                    //Audios.TRIGGER_MUSIC_EVENT("MP_CHF_ACTION");
                                    HudHandler.HudandRadar(true, true);
                                    Main.checkpoint = 1;
                                    TeamLives = 1;
                                    MissionSwitch = 1;
                                }
                                break;
                            case 1://spawn everything
                                {
                                    Vector3[] randomspawn = { new Vector3(2011.401f, 3054.08f, 47.05499f), new Vector3(1994.319f, 3026.535f, 47.05806f) };
                                    float[] randomspawnhead = { 193.3876f, 189.9932f };
                                    int rand = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, randomspawn.Length);
                                    RESPAWN.SET_MIS_STAT(randomspawn[rand], randomspawnhead[rand], 0, true);

                                    Vehicles.RemoveVehicles();
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(2001.754f, 2862.272f, 50.01623f - 1f), -49.62551f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(1999.413f, 2868.689f, 50.01534f - 1f), -76.43791f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(1998.49f, 2876.412f, 49.74408f - 1f), -104.6931f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(2004.592f, 2879.783f, 50.1217f - 1f), -151.8129f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xD0EB2BE5, new Vector3(2013.038f, 2878.351f, 50.45564f - 1f), -124.4961f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x94204D89, new Vector3(2028.823f, 2883.11f, 50.45333f - 1f), 129.6374f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x94204D89, new Vector3(2028.916f, 2877.122f, 50.33687f - 1f), 134.1516f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x94204D89, new Vector3(2034.263f, 2874.423f, 50.00091f - 1f), 106.8996f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x94204D89, new Vector3(2036.823f, 2868.921f, 49.38929f - 1f), 87.28849f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0x94204D89, new Vector3(2029.758f, 2865.712f, 49.71775f - 1f), 86.73789f, false, false);

                                    Props.RemoveProps();
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(-1857328104), new Vector3(2020.292f, 2860.105f, 49.24135f), new Vector3(0f, 0f, 89.98677f), false, true, true, true, true);
                                    Props.SPAWN_PROP_NO_OFFSET(Main.RequestModel(-105334880), new Vector3(2035.476f, 2860.464f, 49.28082f), new Vector3(-1.831999E-12f, 9.280196E-07f, 114.4921f), false, true, true, true, true);

                                    Groups.RemoveEnemyPeds();
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(2010.539f, 2865.947f, 50.03612f - 1f), -82.86098f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(2003.958f, 2867.039f, 50.15916f - 1f), -101.3382f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(2008.249f, 2870.049f, 50.26085f - 1f), -101.0444f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(1998.93f, 2872.418f, 50.13899f - 1f), -100.4671f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(2003.711f, 2875.108f, 50.1017f - 1f), -107.0706f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0x31A3498E, new Vector3(2009.24f, 2875.092f, 50.19436f - 1f), -127.952f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);

                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(2024.974f, 2879.112f, 50.83109f - 1f), 120.0637f, WeaponHash.CarbineRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(2023.604f, 2875.62f, 50.94427f - 1f), 126.921f, WeaponHash.CarbineRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(2035.023f, 2871.56f, 49.92453f - 1f), 93.39882f, WeaponHash.CarbineRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(2030.285f, 2870.028f, 49.93827f - 1f), 112.1305f, WeaponHash.CarbineRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(2034.891f, 2864.782f, 50.06711f - 1f), 86.69397f, WeaponHash.CarbineRifle, 100, 25, false, 0, 1, Relationship.Hate, false, false);

                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(1972.455f, 2919.833f, 58.67825f - 1f), -130.2023f, WeaponHash.SniperRifle, 100, 15, false, 0, 0, Relationship.Hate, false, false);
                                    Function.Call(Hash.SET_PED_COMBAT_RANGE, Groups.pedList[11], 3);
                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(2003.017f, 2930.177f, 56.95424f - 1f), -130.0482f, WeaponHash.SniperRifle, 100, 15, false, 0, 0, Relationship.Hate, false, false);
                                    Function.Call(Hash.SET_PED_COMBAT_RANGE, Groups.pedList[12], 3);
                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(2044.323f, 2944.689f, 60.03905f - 1f), 113.4693f, WeaponHash.SniperRifle, 100, 15, false, 0, 0, Relationship.Hate, false, false);
                                    Function.Call(Hash.SET_PED_COMBAT_RANGE, Groups.pedList[13], 3);
                                    Groups.BlipUpEnemyPeds();

                                    if (CarryPed != null)
                                    {
                                        CarryPed.Delete();
                                        CarryPed = null;
                                    }
                                    while (CarryPed == null)
                                    {
                                        CarryPed = World.CreatePed((PedHash)0xFDA94268, new Vector3(2026.641f, 2868.913f, 50.03974f - 1f), 92.68253f);
                                        Wait(0);
                                    }
                                    CarryPed.RelationshipGroup = Groups.AiTeam;
                                    CarryPed.Weapons.Give(WeaponHash.Pistol, 10000, true, true);
                                    while (CarryPed.AttachedBlip == null)
                                    {
                                        CarryPed.AddBlip();
                                        Wait(0);
                                    }
                                    CarryPed.AttachedBlip.Sprite = (BlipSprite)1;
                                    CarryPed.AttachedBlip.Color = BlipColor.Green;
                                    CarryPed.AttachedBlip.Name = "Coke";

                                    PickupSteal.RemovePickups();

                                    MissionSwitch = 2;
                                }
                                break;
                            case 2://steal the Coke
                                {
                                    if (Game.Player.Character.IsInCombat || CarryPed != null && CarryPed.IsInCombatAgainst(Game.Player.Character))
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_ACTION_HFIN"))
                                        {
                                            Groups.pedList[11].Task.FightAgainst(Game.Player.Character);
                                            Groups.pedList[12].Task.FightAgainst(Game.Player.Character);
                                            Groups.pedList[13].Task.FightAgainst(Game.Player.Character);
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                        }
                                    }
                                    if (CarryPed != null)
                                    {
                                        if (CarryPed.IsDead)
                                        {
                                            WeaponHash[] pedweapons = { WeaponHash.CarbineRifle, WeaponHash.MachinePistol };
                                            Chase.SET_CHASE_ACTIVATE(VehicleHash.Asea, PedHash.ArmGoon01GMM, pedweapons);

                                            PickupSteal.RemovePickups();
                                            PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.CustomScript, new Vector3(CarryPed.Position.X, CarryPed.Position.Y, World.GetGroundHeight(CarryPed.Position)), new Vector3(0f, 0f, CarryPed.Heading), Main.RequestModel(-1964997422), 0, 1, BlipColor.Green, "Coke", false, 1f);

                                            Notification.Show("The coke has been dropped.");

                                            if (CarryPed.AttachedBlip != null)
                                            {
                                                CarryPed.AttachedBlip.Delete();
                                            }
                                            CarryPed.MarkAsNoLongerNeeded();
                                            CarryPed = null;
                                        }
                                    }
                                    else
                                    {
                                        if (PickupSteal.PickupSpawn.Count == 0)
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                                            Notification.Show("~b~" + Main.Player_Name + "~w~ collected the coke.");
                                            MissionSwitch = 3;
                                        }
                                    }
                                    Screen.ShowSubtitle("Steal the ~g~coke.~w~");
                                }
                                break;
                            case 3://deliver the coke to gerald
                                {
                                    if (Chase.ChaseActive)
                                    {
                                        if (!Audios.TRIGGER_MUSIC_EVENT_BOOL("MP_MC_VEHICLE_CHASE_HFIN"))
                                        {
                                            Audios.TRIGGER_MUSIC_EVENT("MP_MC_VEHICLE_CHASE_HFIN");
                                        }
                                    }
                                    Screen.ShowSubtitle("Deliver the ~g~coke~w~ to ~y~Gerald's apartment.~w~");

                                    if (Main.missionBlip == null)
                                    {
                                        if (Main.missionBlip != null)
                                        {
                                            Main.missionBlip.Delete();
                                            Main.missionBlip = null;
                                        }
                                        while (Main.missionBlip == null)
                                        {
                                            Main.missionBlip = World.CreateBlip(new Vector3(-61.89631f, -1514.137f, 33.43623f));
                                            Wait(0);
                                        }
                                        HudHandler.SET_GPS(Main.missionBlip, 156, false, true);
                                    }
                                    else
                                    {
                                        if (Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 100f)
                                        {
                                            if (Chase.ChaseActive)
                                            {
                                                Audios.TRIGGER_MUSIC_EVENT("MP_MC_AIRBORNE_HFIN");
                                                Chase.SET_CHASE_DEACTIVATE();
                                            }
                                        }
                                        if (Game.Player.Character.CurrentVehicle == null && Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 4)
                                        {
                                            Groups.RemoveEnemyPeds();
                                            Vehicles.RemoveVehicles();
                                            PickupSteal.RemovePickups();

                                            if (Main.missionBlip != null)
                                            {
                                                Main.missionBlip.Delete();
                                                Main.missionBlip = null;
                                                HudHandler.CLEAR_GPS_ROUTE();
                                            }
                                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "FocusIn", "HintCamSounds", true);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);
                                            HudHandler.HudandRadar(false, false);
                                            Audios.Stop_Music_Event();
                                            MissionSwitch = 4;
                                        }
                                    }
                                }
                                break;
                            case 4://delviered coke to gerald
                                {
                                    int randcutscene = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 2, 6);
                                    int cutscenetime = 20000;
                                    switch (randcutscene)
                                    {
                                        case 2:
                                            cutscenetime = 20000;
                                            break;
                                        case 3:
                                            cutscenetime = 16000;
                                            break;
                                        case 4:
                                            cutscenetime = 15000;
                                            break;
                                        case 5:
                                            cutscenetime = 15000;
                                            break;
                                    }
                                    while (Main.CutsceneExtra1 == null)
                                    {
                                        Main.CutsceneExtra1 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra1.IsVisible = false;
                                    while (Main.CutsceneExtra2 == null)
                                    {
                                        Main.CutsceneExtra2 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra2.IsVisible = false;
                                    while (Main.CutsceneExtra3 == null)
                                    {
                                        Main.CutsceneExtra3 = World.CreatePed(PedHash.FreemodeMale01, new Vector3(715.8922f, -981.1568f, 24.12039f), 0f);
                                        Wait(0);
                                    }
                                    Main.CutsceneExtra3.IsVisible = false;

                                    int player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                    Ped ped2;
                                    ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                    Ped ped3;
                                    ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                    Ped ped4;
                                    ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);
                                    Main.PlayerModelSet(Game.Player.Character);
                                    LoadingPrompt.Show("Starting Cutscene", LoadingSpinnerType.RegularClockwise);
                                    //GameplayCamera.RelativeHeading = 161.3774f - Game.Player.Character.Heading;
                                    Main.LoadCutscene($"mp_intro_mcs_10_a{randcutscene}");
                                    while (!Function.Call<bool>(Hash.HAS_CUTSCENE_LOADED))
                                    {
                                        Main.LoadCutscene($"mp_intro_mcs_10_a{randcutscene}");
                                        Script.Yield();
                                    }
                                    player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                    ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                    ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                    ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);

                                    Main.SetPedOutfitCutscene("MP_1", Game.Player.Character);
                                    Main.SetPedOutfitCutscene_MP2("MP_2", ped2);
                                    Main.SetPedOutfitCutscene_MP3("MP_3", ped3);
                                    Main.SetPedOutfitCutscene_MP4("MP_4", ped4);// patch this shit its incorrect here

                                    Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Game.Player.Character, "MP_1", 0, 0, 64);
                                    if (ped2.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped2, "MP_2", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra1, "MP_2", 0, 0, 64);
                                    }
                                    if (ped3.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped3, "MP_3", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra2, "MP_3", 0, 0, 64);
                                    }
                                    if (ped4.Exists())
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, ped4, "MP_4", 0, 0, 64);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, Main.CutsceneExtra3, "MP_4", 0, 0, 64);
                                    }

                                    //Function.Call(Hash.SET_CUTSCENE_ORIGIN, 1568.77f, 3217.713f, 40.41154f, 106.3544f, 0);
                                    Function.Call(Hash.START_CUTSCENE, 0);
                                    Wait(50);
                                    Main.PlayerModelSetBack(Game.Player.Character);
                                    Main.GetPedOutfitCutscene("MP_1", Game.Player.Character);
                                    Main.GetPedOutfitCutscene_MP2("MP_2", ped2);
                                    Main.GetPedOutfitCutscene_MP3("MP_3", ped3);
                                    Main.GetPedOutfitCutscene_MP4("MP_4", ped4);
                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();
                                    LoadingPrompt.Hide();

                                    while (Cutscenes.GET_CUTSCENE_TIME() < cutscenetime)
                                    {
                                        Wait(0);
                                    }

                                    Groups.RemoveEnemyPeds();
                                    Groups.ClearEnemyPedsList2();
                                    Vehicles.RemoveVehicles();
                                    Props.RemoveProps();
                                    Screen_Effects.CLEAR_ALL_HELP_MESSAGES();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebEnd", 0, true);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Wait(1000);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebPass", 0, true);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_MISSION");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_MISSION", "HUD_COLOUR_BLACK");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_MISSION", "MISSION", "PASSED", "", true, true, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_JOB_POINTS_TO_WALL", "CELEB_MISSION", 15, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomCashValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 7000, 17001);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_CASH_TO_WALL", "CELEB_MISSION", RandomCashValue, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    int RandomRPValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 1000, 3001);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_MISSION", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_MISSION", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_MISSION", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_MISSION", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_MISSION");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_MISSION");

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
                                    int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

                                    int getcurrentduration = 0;
                                    while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    getcurrentduration = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
                                    if (Main.DEBUG) Notification.Show($"{getcurrentduration}");

                                    int i = Game.GameTime + getcurrentduration;
                                    while (Game.GameTime < i)
                                    {
                                        HudHandler.HudandRadar(false, false);
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Game.Player.CanControlCharacter = true;

                                    int Timer = Game.GameTime + 4000;
                                    Game.Player.CanControlCharacter = false;
                                    PlayerSwitch._SWITCH_OUT_PLAYER(Game.Player.Character, 3, 1);
                                    while (Game.GameTime < Timer)
                                    {
                                        Wait(0);
                                    }

                                    Function.Call(Hash.SET_ENTITY_COORDS, Game.Player.Character, -91.57023f, -1523.439f, 33.58508f, true, false, false, true);
                                    Function.Call(Hash.SET_ENTITY_HEADING, Game.Player.Character, 170.8833f);
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    Game.Player.CanControlCharacter = true;

                                    Function.Call((Hash)0xAD5FDF34B81BFE79);
                                    Function.Call((Hash)0x43D1680C6D19A8E9);
                                    PlayerSwitch.SWITCH_IN_PLAYER(Game.Player.Character);
                                    while (PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                                    {
                                        Wait(0);
                                    }
                                    HudHandler.HudandRadar(true, true);
                                    MPCash.ADD_CASH(RandomCashValue);
                                    MPRank.ADD_RP(RandomRPValue);

                                    Main.RadioAllowed = true;
                                    Main.NoCopsOnMission = false;
                                    Main.FuckOffCivilians = false;
                                    Main.OnMission = false;
                                    Main.checkpoint = 0;
                                    MissionsSwitch = -1;
                                    MissionSwitch = 0;
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        #endregion
    }
    internal class MPSimeonCMS : Script // Simeon Contact Missions
    {
        public static Blip SimeonBlip;

        public static int SimeonSwitch = 0;
        public static int PreviousSelection = 0;
        public MPSimeonCMS()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }

        public void onTick(object sender, EventArgs e)
        {
            if (Main.StorySwitch >= 2 || Main.DEBUG)
            {
                switch (SimeonSwitch)
                {
                    case 0://where the missions are stored
                        {
                            if (!Main.OnMission)
                            {
                                if (SimeonBlip == null)
                                {
                                    SimeonBlip = World.CreateBlip(new Vector3(-32.04094f, -1111.233f, 26.42236f));
                                }
                                else
                                {
                                    SimeonBlip.Sprite = BlipSprite.SimeonFamily;
                                    SimeonBlip.Color = BlipColor.Yellow;
                                    SimeonBlip.Name = "Simeon";
                                    SimeonBlip.Alpha = 255;
                                }
                                if (Game.Player.Character.Position.DistanceTo(new Vector3(-32.04094f, -1111.233f, 26.42236f)) < 10f)
                                {
                                    World.DrawMarker(MarkerType.VerticalCylinder, new Vector3(-32.04094f, -1111.233f, 26.42236f - 1.6f), Vector3.Zero, Vector3.Zero, new Vector3(1.5f, 1.5f, 1.5f), Color.Yellow);
                                }
                                if (Game.Player.Character.Position.DistanceTo(new Vector3(-32.04094f, -1111.233f, 26.42236f)) < 1.3f)
                                {
                                    Screen.ShowHelpTextThisFrame("Press ~INPUT_CONTEXT~ to enter.");
                                    if (Game.IsControlJustPressed(GTA.Control.Context))
                                    {
                                        int player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                        Ped ped2;
                                        ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                        Ped ped3;
                                        ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                        Ped ped4;
                                        ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);

                                        Mobile_Phone.CAN_OPEN_PHONE = false;
                                        int Timer = Game.GameTime + 4000;
                                        Main.OnMission = true;
                                        Game.Player.CanControlCharacter = false;
                                        PlayerSwitch._SWITCH_OUT_PLAYER(Game.Player.Character, 8, 1);
                                        while (Game.GameTime < Timer)
                                        {
                                            Wait(0);
                                        }

                                        while (Function.Call<Hash>(Hash.GET_CURRENT_FRONTEND_MENU_VERSION) != Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"))
                                        {
                                            Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                            Script.Wait(200);
                                        }

                                        if (!Main.IsFreemodeMale && !Main.IsFreemodeFemale)
                                        {
                                            Main.CallFunctionFrontendHeader("SET_CHAR_IMG", 0);
                                        }
                                        Main.CallFunctionFrontendHeader("SHIFT_CORONA_DESC", false, false);
                                        Main.CallFunctionFrontendHeader("SHIFT_CORONA_DESC", true, false);
                                        Main.CallFunctionFrontendHeader("SET_ALL_HIGHLIGHTS", 1, 25);//144,24 - Pink|105,26 - Blue|99 - Doomsday Color?|94,47,33,25,20 - Green|27,8 - Red|

                                        //Main.CallFunctionFrontend("SET_COLUMN_TITLE", 0, "SETTINGS", "", 0, 0, 0, "", "", "", 0, 0, 0, 0, 0, "", "");
                                        //CallFunctionFrontend("SET_COLUMN_TITLE", 2, "THE UNION DEPOSITORY HEIST", "", "", 0, 0, 0, 0, 0, "", "");

                                        Function.Call((Hash)0xB9449845F73F5E9C, "SET_HEADER_TITLE");
                                        Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "All in the Game");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $" (Simeon)");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                        Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                        Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                        Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "");
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                        Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                        Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                        Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                        Function.Call((Hash)0xc6796a8ffa375e53);


                                        Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 0);

                                        //Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 1, 0, 0, 0, 25, 1, "Weapon Loadout", "", 0, "Aggressive", 0, false);
                                        //Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 2, 0, 0, 0, 3, 1, "Ready to Play", false, "Bruh", 0, 0, 0, false, false, 0, false, 0, 0, -1082130432, 0, -1);
                                        //Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 2, 0, 0, 2, 3, 1, "Ready to Play", false, -1, 0, 25, true);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 0, 0, 0, 0, 0, 1, "All in the Game");

                                        Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 0);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 1);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 0, 0, 0, 0, 3, 0, "From", "Simeon", false, 0);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 1, 0, 0, 0, 3, 0, "Opens at Rank", "1", false, 0);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 2, 0, 0, 0, 3, 0, "Players", "1-4", false, 0);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 3, 5, 5, 2, 3, 0, "Type", "Mission", false, 12);

                                        Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 1);

                                        Main.CallFunctionFrontend("SET_COLUMN_TITLE", 1, "SIMEON - All in the Game", "Simeon - All in the Game", "", "pause_map", "pm_dlc_simeonrepo", "", "", 0, 0, 0, "", "", "", "", "");

                                        Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 3);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 0, 0, 0, 2, 100, true, Main.Player_Name, 18, false, 0, 1, 0, "", false, "HOST", 18);

                                        int groupcount = 1;
                                        if (ped2.Exists())
                                        {
                                            string groupmname = "Ai Friend 1";
                                            if (ped2.AttachedBlip != null)
                                            {
                                                groupmname = ped2.AttachedBlip.Name;
                                            }
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 1, 0, 0, 2, 100, true, groupmname, 18, false, 0, 1, 0, "", false, "JOINED", 18);
                                            groupcount += 1;
                                        }
                                        else
                                        {
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 1, 0, 0, 0, 100, true, "", 2, false, 0, 1, 0, "", false, "", 4);
                                        }

                                        if (ped3.Exists())
                                        {
                                            string groupmname = "Ai Friend 2";
                                            if (ped3.AttachedBlip != null)
                                            {
                                                groupmname = ped3.AttachedBlip.Name;
                                            }
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 2, 0, 0, 2, 100, true, groupmname, 18, false, 0, 1, 0, "", false, "JOINED", 18);
                                            groupcount += 1;
                                        }
                                        else
                                        {
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 2, 0, 0, 0, 100, true, "", 2, false, 0, 1, 0, "", false, "", 4);
                                        }

                                        if (ped4.Exists())
                                        {
                                            string groupmname = "Ai Friend 3";
                                            if (ped4.AttachedBlip != null)
                                            {
                                                groupmname = ped4.AttachedBlip.Name;
                                            }
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 3, 0, 0, 2, 100, true, groupmname, 18, false, 0, 1, 0, "", false, "JOINED", 18);
                                            groupcount += 1;
                                        }
                                        else
                                        {
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 3, 0, 0, 0, 100, true, "", 2, false, 0, 1, 0, "", false, "", 4);
                                        }

                                        Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 3);

                                        Main.CallFunctionFrontend("SET_DESCRIPTION", 0, "Select a Contact Mission.", true);

                                        Main.CallFunctionFrontendHeader("SET_HEADING_DETAILS", "", "", "", false);
                                        Main.CallFunctionFrontendHeader("SHOW_HEADING_DETAILS", false);
                                        Main.CallFunctionFrontend("SET_MENU_HEADER_TEXT_BY_INDEX", 0, "CONTACT MISSIONS", 1.0f, true);
                                        Main.CallFunctionFrontend("SET_MENU_HEADER_TEXT_BY_INDEX", 1, $"PLAYERS {groupcount} OF 1-4", 1.0f, true);
                                        Main.CallFunctionFrontend("SET_MENU_HEADER_TEXT_BY_INDEX", 2, "DETAILS", 1.0f, true);

                                        Main.CallFunctionFrontend("LOCK_MOUSE_SUPPORT", true, true);
                                        Main.CallFunctionFrontend("SET_COLUMN_FOCUS", 0, true, true, true);
                                        Main.CallFunctionFrontend("PAGE_FADE_IN");

                                        SimeonSwitch = 1;
                                    }
                                }
                            }
                            else
                            {
                                if (SimeonBlip != null)
                                {
                                    SimeonBlip.Alpha = 0;
                                }
                            }
                        }
                        break;
                    case 1://selection of the menu/mission
                        {
                            CHECK_MOUSE_INPUT();
                            if (Game.IsControlJustPressed(GTA.Control.PhoneCancel))
                            {
                                Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                Mobile_Phone.CAN_OPEN_PHONE = true;
                                Game.Player.CanControlCharacter = true;
                                Main.OnMission = false;
                                PlayerSwitch.STOP_PLAYER_SWITCH();
                                SimeonSwitch = 0;
                            }
                            switch (getcurrentselection)
                            {
                                case 0://All in the Game
                                    {
                                        if (PreviousSelection != getcurrentselection)
                                        {
                                            PreviousSelection = getcurrentselection;
                                            Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 1);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 0, 0, 0, 0, 3, 0, "From", "Simeon", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 1, 0, 0, 0, 3, 0, "Opens at Rank", "1", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 2, 0, 0, 0, 3, 0, "Players", "1-4", false, 0);

                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 3, 5, 5, 2, 3, 0, "Type", "Mission", false, 12);

                                            Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 1);

                                            Main.CallFunctionFrontend("SET_COLUMN_TITLE", 1, "SIMEON - All in the Game", "Simeon - All in the Game", "", "pause_map", "pm_dlc_simeonrepo", "", "", 0, 0, 0, "", "", "", "", "");
                                            
                                            Function.Call((Hash)0xB9449845F73F5E9C, "SET_HEADER_TITLE");
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "All in the Game");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $" (Simeon)");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call((Hash)0xc6796a8ffa375e53);
                                        }
                                        if (Game.IsControlJustPressed(GTA.Control.FrontendAccept))
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SELECT" /* GXT: Filter List */, "HUD_FREEMODE_SOUNDSET", true);
                                            Wait(500);
                                            Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                            HudHandler.HudandRadar(false, false);
                                            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                            Function.Call((Hash)0xA328A24AAA6B7FDC, 1f);
                                            Function.Call(Hash.ANIMPOSTFX_PLAY, "MP_job_load", 0, false);
                                            Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SCREEN_FLASH", "CELEBRATION_SOUNDSET", true);
                                            LoadingPrompt.Show("Loading Contact Mission", LoadingSpinnerType.RegularClockwise);
                                            Wait(5000);

                                            Main.RadioAllowed = false;
                                            Main.NoCopsOnMission = true;
                                            Main.FuckOffCivilians = false;
                                            MissionsSwitch = 0;
                                            SimeonSwitch = 0;
                                        }
                                    }
                                    break;
                            }
                        }
                        break;
                }

                SIMEON_MISSION_CONTROLLER();
            }

        }

        public void onShutdown(object sender, EventArgs e)
        {
            if (SimeonBlip != null)
            {
                SimeonBlip.Delete();
            }
        }

        public static int currentselection;
        public static int getcurrentselection;
        public static int MouseCheck;
        public static int GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(int currentselection)
        {
            return Function.Call<int>(Hash.GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT, currentselection);
        }
        public static void CHECK_MOUSE_INPUT()
        {
            if (Game.GameTime > MouseCheck)
            {
                if (Function.Call<bool>(Hash.BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND, "GET_COLUMN_SELECTION"))
                {
                    Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT, 0);
                    currentselection = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);
                    MouseCheck = Game.GameTime + 100;
                }
            }
            if (Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentselection))
            {
                getcurrentselection = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentselection);
            }
        }

        #region Main Mission Controls
        public static int MissionsSwitch = -1;
        public static int MissionSwitch = 0;
        public static int TeamLives = 1;
        public static float HardModeMultiplier = 1.5f;
        public static bool HardMode = false;

        public static Ped CarryPed;
        public static void SIMEON_MISSION_CONTROLLER()
        {
            switch (MissionsSwitch)
            {
                case 0://All in the Game
                    {
                        if (Main.checkpoint == 1 || Main.DEBUG)
                        {
                            if (TeamLives > 0)
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_black_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }
                            else
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_red_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 0, 0, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            }

                            if (Game.Player.Character.IsDead)
                            {
                                TeamLives -= 1;

                                while (Game.Player.Character.IsDead)
                                {
                                    Wait(0);
                                }

                                if (TeamLives < 0)
                                {
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    while (Wall_Creator.FailCam == null)
                                    {
                                        Wall_Creator.FailCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", 0);
                                        Wait(0);
                                    }
                                    Random rand = new Random();
                                    int index = rand.Next(1, 3);
                                    if (index == 1)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 2.0f, 3.0f, 0.6f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    if (index == 2)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 1.0f, 3.0f, 0.5f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    World.RenderingCamera = Wall_Creator.FailCam;
                                    HudHandler.HudandRadar(false, false);
                                    Wait(1500);
                                    Screen.FadeIn(500);
                                    while (!Screen.IsFadedIn)
                                    {
                                        Wait(0);
                                    }
                                    Weapons.Anim_Weapon_Off();
                                    Audios.Stop_Music_Event();
                                    Game.Player.IsInvincible = true;
                                    Function.Call(Hash.SET_SEETHROUGH, false);
                                    Function.Call(Hash.SET_NIGHTVISION, false);
                                    Function.Call(Hash.SET_ARTIFICIAL_LIGHTS_STATE, false);
                                    Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
                                    Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFail", 0, false);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FAILED_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestHeist2PassScaleform();
                                    Wait(500);
                                    //Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_CELEB_SCREEN_SCENE");
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_FAILED");

                                    int i = Game.GameTime + 6000;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Screen.FadeOut(1000);
                                    Wait(1000);
                                    if (Wall_Creator.FailCam != null)
                                    {
                                        Wall_Creator.FailCam.Delete();
                                        Wall_Creator.FailCam = null;
                                    }
                                    World.RenderingCamera = null;
                                    Groups.RemoveEnemyPeds();
                                    Vehicles.RemoveVehicles();
                                    PickupSteal.RemovePickups();
                                    Game.Player.IsInvincible = false;
                                    MissionSwitch = 0;
                                    break;
                                }
                            }
                        }
                        switch (MissionSwitch)
                        {
                            case 0://contact mission start
                                {
                                    if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_START(-1213.771f, -131.8127f, 41.2216f, 0.0f, 0.0f, 0.0f, 500f, 0);
                                    }
                                    string[] musicevents = {
                        "MP_MC_CMH_IAA_PREP_START",
                        "MP_MC_CMH_IAA_FINALE_START",
                        "MP_MC_CMH_SUB_PREP_START",
                        "MP_MC_CMH_SUB_FINALE_START",
                        "MP_MC_CMH_SILO_PREP_START",
                        "MP_MC_CMH_SILO_FINALE_START",
                        "MP_MC_CM22_START_TRACK_11",
                        "MP_MC_TUNER_START_MUSIC",
                        "MP_MC_GR_START",
                        "LOWRIDER_START_MUSIC",
                        "LOWRIDER_FINALE_START_MUSIC",
                        "MP_MC_START",
                        };
                                    Audios.TRIGGER_MUSIC_EVENT(musicevents[Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, musicevents.Length)]);
                                    Audios.TRIGGER_MUSIC_EVENT("MP_MC_SUSPENSE_HFIN");
                                    Audios.TRIGGER_MUSIC_EVENT("FH2B_EXPLODE");

                                    MPLoadout.GET_CURRENT_LOADOUT();
                                    MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(-1178.875f, -135.8624f, 39.66801f), 241.2049f);

                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();

                                    Game.Player.Character.Task.ClearAll();
                                    Game.Player.CanControlCharacter = true;

                                    Game.Player.Character.Position = new Vector3(-1213.771f, -131.8127f, 41.2216f - 1f);
                                    Game.Player.Character.Heading = 200.3156f;
                                    Game.Player.Character.IsPositionFrozen = true;
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    HudHandler.HudandRadar(false, false);

                                    Wait(1000);
                                    LoadingPrompt.Hide();
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Function.Call((Hash)0xEFACC8AEF94430D5, 1f);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    PlayerSwitch.STOP_PLAYER_SWITCH();
                                    if (LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                    }
                                    Game.Player.Character.IsPositionFrozen = false;

                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true); //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "PUSH", "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS", true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_INTRO_TO_WALL", "intro", "Mission", "All in the Game", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_INTRO_TO_WALL", "intro", "Mission", "All in the Game", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_INTRO_TO_WALL", "intro", "Mission", "All in the Game", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "intro");
                                    Screen.FadeIn(1000);

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
                                    int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

                                    int getcurrentduration = 0;
                                    while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    getcurrentduration = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
                                    if (Main.DEBUG) Notification.Show($"{getcurrentduration}");

                                    int i = Game.GameTime + getcurrentduration;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Mobile_Phone.CAN_OPEN_PHONE = true;
                                    //Function.Call(Hash.PREPARE_MUSIC_EVENT, "FH2B_EXPLODE");
                                    //Audios.TRIGGER_MUSIC_EVENT("MP_CHF_ACTION");
                                    HudHandler.HudandRadar(true, true);
                                    Main.checkpoint = 1;
                                    TeamLives = 1;
                                    MissionSwitch = 1;
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        #endregion
    }
    
    internal class MPCustomHeistCMS : Script // Custom Heist Contact Missions
    {
        public static Blip CustomHeistBlip;

        public static int CustomHeistSwitch = 0;
        public static int PreviousSelection = 0;
        public MPCustomHeistCMS()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }

        public void onTick(object sender, EventArgs e)
        {
            if (Main.StorySwitch >= 2 || Main.DEBUG)
            {
                switch (CustomHeistSwitch)
                {
                    case 0://where the missions are stored
                        {
                            if (!Main.OnMission)
                            {
                                if (CustomHeistBlip == null)
                                {
                                    CustomHeistBlip = World.CreateBlip(new Vector3(-1037.005f, -2748.748f, 21.3594f));
                                }
                                else
                                {
                                    CustomHeistBlip.Sprite = BlipSprite.Chinese;
                                    CustomHeistBlip.Color = BlipColor.White;
                                    CustomHeistBlip.Name = "Custom Heists (CruelMaster MC)";
                                    CustomHeistBlip.Alpha = 255;
                                }
                                if (Game.Player.Character.Position.DistanceTo(new Vector3(-1037.005f, -2748.748f, 21.3594f)) < 10f)
                                {
                                    World.DrawMarker(MarkerType.VerticalCylinder, new Vector3(-1037.005f, -2748.748f, 21.3594f - 1.6f), Vector3.Zero, Vector3.Zero, new Vector3(1.5f, 1.5f, 1.5f), Color.White);
                                }
                                if (Game.Player.Character.Position.DistanceTo(new Vector3(-1037.005f, -2748.748f, 21.3594f)) < 1.3f)
                                {
                                    Screen.ShowHelpTextThisFrame("Press ~INPUT_CONTEXT~ to enter.");
                                    if (Game.IsControlJustPressed(GTA.Control.Context))
                                    {
                                        int player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                        Ped ped2;
                                        ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                        Ped ped3;
                                        ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                        Ped ped4;
                                        ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);

                                        Mobile_Phone.CAN_OPEN_PHONE = false;
                                        int Timer = Game.GameTime + 4000;
                                        Main.OnMission = true;
                                        Game.Player.CanControlCharacter = false;
                                        PlayerSwitch._SWITCH_OUT_PLAYER(Game.Player.Character, 8, 1);
                                        while (Game.GameTime < Timer)
                                        {
                                            Wait(0);
                                        }

                                        while (Function.Call<Hash>(Hash.GET_CURRENT_FRONTEND_MENU_VERSION) != Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"))
                                        {
                                            Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                            Script.Wait(200);
                                        }

                                        if (!Main.IsFreemodeMale && !Main.IsFreemodeFemale)
                                        {
                                            Main.CallFunctionFrontendHeader("SET_CHAR_IMG", 0);
                                        }
                                        Main.CallFunctionFrontendHeader("SHIFT_CORONA_DESC", false, false);
                                        Main.CallFunctionFrontendHeader("SHIFT_CORONA_DESC", true, false);
                                        Main.CallFunctionFrontendHeader("SET_ALL_HIGHLIGHTS", 1, 25);//144,24 - Pink|105,26 - Blue|99 - Doomsday Color?|94,47,33,25,20 - Green|27,8 - Red|

                                        //Main.CallFunctionFrontend("SET_COLUMN_TITLE", 0, "SETTINGS", "", 0, 0, 0, "", "", "", 0, 0, 0, 0, 0, "", "");
                                        //CallFunctionFrontend("SET_COLUMN_TITLE", 2, "THE UNION DEPOSITORY HEIST", "", "", 0, 0, 0, 0, 0, "", "");

                                        if (MPRank.PlayerLevel >= 5)
                                        {
                                            Function.Call((Hash)0xB9449845F73F5E9C, "SET_HEADER_TITLE");
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Darnell Bros Score");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $" (CruelMaster MC)");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Break into the Darnell Bros Factory to procure a trolley full of cash.");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "  Think you got what it takes?");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call((Hash)0xc6796a8ffa375e53);
                                        }
                                        else
                                        {
                                            Function.Call((Hash)0xB9449845F73F5E9C, "SET_HEADER_TITLE");
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Darnell Bros Score");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $" (CruelMaster MC)");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "");
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                            Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                            Function.Call((Hash)0xc6796a8ffa375e53);
                                        }


                                        Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 0);

                                        //Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 1, 0, 0, 0, 25, 1, "Weapon Loadout", "", 0, "Aggressive", 0, false);
                                        //Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 2, 0, 0, 0, 3, 1, "Ready to Play", false, "Bruh", 0, 0, 0, false, false, 0, false, 0, 0, -1082130432, 0, -1);
                                        //Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 2, 0, 0, 2, 3, 1, "Ready to Play", false, -1, 0, 25, true);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 0, 0, 0, 0, 0, 0, 1, "Darnell Bros Score");

                                        Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 0);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 1);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 0, 0, 0, 0, 3, 0, "From", "CruelMaster MC", false, 0);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 1, 0, 0, 0, 3, 0, "Opens at Rank", "5", false, 0);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 2, 0, 0, 0, 3, 0, "Players", "1-4", false, 0);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 3, 5, 5, 2, 3, 0, "Type", "Mission", false, 12);
                                        
                                        Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 1);

                                        Main.CallFunctionFrontend("SET_COLUMN_TITLE", 1, "CruelMaster MC - Darnell Bros Score", "CruelMaster MC - Darnell Bros Score", "", "pause_map", "pm_series_featured", "", "", 0, 0, 0, "", "", "", "", "");

                                        Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 3);

                                        Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 0, 0, 0, 2, 100, true, Main.Player_Name, 18, false, 0, 1, 0, "", false, "HOST", 18);

                                        int groupcount = 1;
                                        if (ped2.Exists())
                                        {
                                            string groupmname = "Ai Friend 1";
                                            if (ped2.AttachedBlip != null)
                                            {
                                                groupmname = ped2.AttachedBlip.Name;
                                            }
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 1, 0, 0, 2, 100, true, groupmname, 18, false, 0, 1, 0, "", false, "JOINED", 18);
                                            groupcount += 1;
                                        }
                                        else
                                        {
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 1, 0, 0, 0, 100, true, "", 2, false, 0, 1, 0, "", false, "", 4);
                                        }

                                        if (ped3.Exists())
                                        {
                                            string groupmname = "Ai Friend 2";
                                            if (ped3.AttachedBlip != null)
                                            {
                                                groupmname = ped3.AttachedBlip.Name;
                                            }
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 2, 0, 0, 2, 100, true, groupmname, 18, false, 0, 1, 0, "", false, "JOINED", 18);
                                            groupcount += 1;
                                        }
                                        else
                                        {
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 2, 0, 0, 0, 100, true, "", 2, false, 0, 1, 0, "", false, "", 4);
                                        }

                                        if (ped4.Exists())
                                        {
                                            string groupmname = "Ai Friend 3";
                                            if (ped4.AttachedBlip != null)
                                            {
                                                groupmname = ped4.AttachedBlip.Name;
                                            }
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 3, 0, 0, 2, 100, true, groupmname, 18, false, 0, 1, 0, "", false, "JOINED", 18);
                                            groupcount += 1;
                                        }
                                        else
                                        {
                                            Main.CallFunctionFrontend("SET_DATA_SLOT", 3, 3, 0, 0, 0, 100, true, "", 2, false, 0, 1, 0, "", false, "", 4);
                                        }

                                        Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 3);

                                        Main.CallFunctionFrontend("SET_DESCRIPTION", 0, "Select a Contact Mission.", true);

                                        Main.CallFunctionFrontendHeader("SET_HEADING_DETAILS", "", "", "", false);
                                        Main.CallFunctionFrontendHeader("SHOW_HEADING_DETAILS", false);
                                        Main.CallFunctionFrontend("SET_MENU_HEADER_TEXT_BY_INDEX", 0, "CUSTOM HEIST MISSIONS", 1.0f, true);
                                        Main.CallFunctionFrontend("SET_MENU_HEADER_TEXT_BY_INDEX", 1, $"PLAYERS {groupcount} OF 1-4", 1.0f, true);
                                        Main.CallFunctionFrontend("SET_MENU_HEADER_TEXT_BY_INDEX", 2, "DETAILS", 1.0f, true);

                                        Main.CallFunctionFrontend("LOCK_MOUSE_SUPPORT", true, true);
                                        Main.CallFunctionFrontend("SET_COLUMN_FOCUS", 0, true, true, true);
                                        Main.CallFunctionFrontend("PAGE_FADE_IN");

                                        CustomHeistSwitch = 1;
                                    }
                                }
                            }
                            else
                            {
                                if (CustomHeistBlip != null)
                                {
                                    CustomHeistBlip.Alpha = 0;
                                }
                            }
                        }
                        break;
                    case 1://selection of the menu/mission
                        {
                            CHECK_MOUSE_INPUT();
                            if (Game.IsControlJustPressed(GTA.Control.PhoneCancel))
                            {
                                Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                Mobile_Phone.CAN_OPEN_PHONE = true;
                                Game.Player.CanControlCharacter = true;
                                Main.OnMission = false;
                                PlayerSwitch.STOP_PLAYER_SWITCH();
                                CustomHeistSwitch = 0;
                            }
                            switch (getcurrentselection)
                            {
                                case 0://Darnell Bros Score
                                    {
                                        if (MPRank.PlayerLevel >= 5)
                                        {
                                            if (PreviousSelection != getcurrentselection)
                                            {
                                                PreviousSelection = getcurrentselection;
                                                Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 1);

                                                Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 0, 0, 0, 0, 3, 0, "From", "CruelMaster MC", false, 0);

                                                Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 1, 0, 0, 0, 3, 0, "Opens at Rank", "5", false, 0);

                                                Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 2, 0, 0, 0, 3, 0, "Players", "1-4", false, 0);

                                                Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 3, 5, 5, 2, 3, 0, "Type", "Mission", false, 12);

                                                Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 1);

                                                Main.CallFunctionFrontend("SET_COLUMN_TITLE", 1, "CruelMaster MC - Darnell Bros Score", "CruelMaster MC - Darnell Bros Score", "", "pause_map", "pm_dlc_geraldslast", "", "", 0, 0, 0, "", "", "", "", "");
                                                
                                                Function.Call((Hash)0xB9449845F73F5E9C, "SET_HEADER_TITLE");
                                                Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Darnell Bros Score");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $" (CruelMaster MC)");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                                Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                                Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                                Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Break into the Darnell Bros Factory to procure a trolley full of cash.");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "  Think you got what it takes?");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                                Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                                Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                                Function.Call((Hash)0xc6796a8ffa375e53);
                                            }
                                            if (Game.IsControlJustPressed(GTA.Control.FrontendAccept))
                                            {
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SELECT" /* GXT: Filter List */, "HUD_FREEMODE_SOUNDSET", true);
                                                Wait(500);
                                                Function.Call(Hash.ACTIVATE_FRONTEND_MENU, Function.Call<Hash>(Hash.GET_HASH_KEY, "FE_MENU_VERSION_CORONA"), 0, -1);
                                                HudHandler.HudandRadar(false, false);
                                                Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                                Function.Call((Hash)0xA328A24AAA6B7FDC, 1f);
                                                Function.Call(Hash.ANIMPOSTFX_PLAY, "MP_job_load", 0, false);
                                                Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "SCREEN_FLASH", "CELEBRATION_SOUNDSET", true);
                                                LoadingPrompt.Show("Loading Custom Heist", LoadingSpinnerType.RegularClockwise);
                                                Wait(2000);

                                                Main.RadioAllowed = false;
                                                Main.NoCopsOnMission = true;
                                                Main.FuckOffCivilians = false;
                                                MissionsSwitch = 0;
                                                CustomHeistSwitch = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (PreviousSelection != getcurrentselection)
                                            {
                                                PreviousSelection = getcurrentselection;
                                                Main.CallFunctionFrontend("SET_DATA_SLOT_EMPTY", 1);

                                                Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 0, 0, 0, 0, 3, 0, "From", "CruelMaster MC", false, 0);

                                                Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 1, 0, 0, 0, 3, 0, "Opens at Rank", "5", false, 0);

                                                Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 2, 0, 0, 0, 3, 0, "Players", "1-4", false, 0);

                                                Main.CallFunctionFrontend("SET_DATA_SLOT", 1, 3, 5, 5, 2, 3, 0, "Type", "Mission", false, 12);

                                                Main.CallFunctionFrontend("DISPLAY_DATA_SLOT", 1);

                                                Main.CallFunctionFrontend("SET_COLUMN_TITLE", 1, "CruelMaster MC - Darnell Bros Score", "CruelMaster MC - Darnell Bros Score", "", "pause_map", "pm_dlc_geraldslast", "", "", 0, 0, 0, "", "", "", "", "");

                                                Function.Call((Hash)0xB9449845F73F5E9C, "SET_HEADER_TITLE");
                                                Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Darnell Bros Score");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $" (CruelMaster MC)");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                                Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                                Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                                Function.Call(Hash.BEGIN_TEXT_COMMAND_SCALEFORM_STRING, "FMMC_OFFLN_HD");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL, "");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "");
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                                Function.Call(Hash.ADD_TEXT_COMPONENT_INTEGER, 0);
                                                Function.Call(Hash.END_TEXT_COMMAND_SCALEFORM_STRING);
                                                Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, false);
                                                Function.Call((Hash)0xc6796a8ffa375e53);
                                            }
                                            if (Game.IsControlJustPressed(GTA.Control.FrontendAccept))
                                            {
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ERROR" /* GXT: Filter List */, "HUD_FRONTEND_DEFAULT_SOUNDSET", true);
                                            }
                                        }
                                    }
                                    break;
                            }
                        }
                        break;
                }
            }

            MISSION_CONTROLLER();
        }

        public void onShutdown(object sender, EventArgs e)
        {
            if (CustomHeistBlip != null)
            {
                CustomHeistBlip.Delete();
            }
        }

        public static int currentselection;
        public static int getcurrentselection;
        public static int MouseCheck;
        public static int GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(int currentselection)
        {
            return Function.Call<int>(Hash.GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT, currentselection);
        }
        public static void CHECK_MOUSE_INPUT()
        {
            if (Game.GameTime > MouseCheck)
            {
                if (Function.Call<bool>(Hash.BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND, "GET_COLUMN_SELECTION"))
                {
                    Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT, 0);
                    currentselection = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);
                    MouseCheck = Game.GameTime + 100;
                }
            }
            if (Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentselection))
            {
                getcurrentselection = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentselection);
            }
        }
        
        #region Main Mission Controls
        public static int MissionsSwitch = -1;
        public static int MissionSwitch = 0;
        public static int TeamLives = 1;
        public static float HardModeMultiplier = 1.5f;
        public static bool HardMode = false;
        
        public static void MISSION_CONTROLLER()
        {
            switch (MissionsSwitch)
            {
                case 0://Darnell Bros Score
                    {
                        if (Main.checkpoint == 1 || Main.DEBUG)
                        {
                            if (TeamLives > 0)
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_black_bg", 0.88f, 0.860f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.845f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.840f, 0.1f);
                            }
                            else
                            {
                                Heist_Hud.drawSprite2("timerbars", "all_red_bg", 0.88f, 0.860f, 0.200f, 0.04f, 255, 255, 255, 130);
                                Heist_Hud.drawText("TEAM LIVES", 0.780f, 0.845f, 0.40f, 255, 255, 255);
                                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"{TeamLives}");
                                Function.Call(Hash.SET_TEXT_COLOUR, 255, 0, 0, 255);
                                Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                                Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                                Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.840f, 0.1f);
                            }
                            
                            Heist_Hud.drawSprite2("timerbars", "all_black_bg", 0.88f, 0.906f, 0.200f, 0.04f, 255, 255, 255, 130);
                            Heist_Hud.drawText("TAKE", 0.780f, 0.890f, 0.40f, 255, 255, 255);
                            Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
                            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, $"${Heist_Hud.Actual_Take.ToString("N0")}");
                            Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, 255);
                            Function.Call(Hash.SET_TEXT_SCALE, 0f, 0.56f);
                            Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, true);
                            Function.Call(Hash.SET_TEXT_WRAP, 0.880f, 0.975f);
                            Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.870f, 0.885f, 0.1f);
                            
                            if (Game.Player.Character.IsDead)
                            {
                                TeamLives -= 1;

                                while (Game.Player.Character.IsDead)
                                {
                                    Wait(0);
                                }

                                if (TeamLives < 0)
                                {
                                    if (Main.missionBlip != null)
                                    {
                                        Main.missionBlip.Delete();
                                        Main.missionBlip = null;
                                        HudHandler.CLEAR_GPS_ROUTE();
                                    }

                                    Trollys.RemoveTrollys();
                                    Trollys.TrollyAmount = 0;
                                    Trollys.TotalAmount = 0;
                                    Trollys.AllowTrollyGrab = false;
                                    Chase.SET_CHASE_DEACTIVATE();
                                    while (Wall_Creator.FailCam == null)
                                    {
                                        Wall_Creator.FailCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", 0);
                                        Wait(0);
                                    }
                                    Random rand = new Random();
                                    int index = rand.Next(1, 3);
                                    if (index == 1)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 2.0f, 3.0f, 0.6f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    if (index == 2)
                                    {
                                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Wall_Creator.FailCam, Game.Player.Character, 1.0f, 3.0f, 0.5f, true);
                                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Wall_Creator.FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                                        Function.Call(Hash.SET_CAM_FOV, Wall_Creator.FailCam, 10f);
                                    }
                                    World.RenderingCamera = Wall_Creator.FailCam;
                                    HudHandler.HudandRadar(false, false);
                                    Wait(1500);
                                    Screen.FadeIn(500);
                                    while (!Screen.IsFadedIn)
                                    {
                                        Wait(0);
                                    }
                                    Weapons.Anim_Weapon_Off();
                                    Audios.Stop_Music_Event();
                                    Game.Player.IsInvincible = true;
                                    Function.Call(Hash.SET_SEETHROUGH, false);
                                    Function.Call(Hash.SET_NIGHTVISION, false);
                                    Function.Call(Hash.SET_ARTIFICIAL_LIGHTS_STATE, false);
                                    Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
                                    Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFail", 0, false);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FAILED_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestHeist2PassScaleform();
                                    Wait(500);
                                    //Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_CELEB_SCREEN_SCENE");
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_FAILED", "HUD_COLOUR_TECH_RED", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", "MISSION", "FAILED", "Out of Lives", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_FAILED", 0, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_FAILED", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_FAILED");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_FAILED");

                                    int i = Game.GameTime + 6000;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Screen.FadeOut(1000);
                                    Wait(1000);
                                    if (Wall_Creator.FailCam != null)
                                    {
                                        Wall_Creator.FailCam.Delete();
                                        Wall_Creator.FailCam = null;
                                    }
                                    World.RenderingCamera = null;
                                    Groups.RemoveEnemyPeds();
                                    Vehicles.RemoveVehicles();
                                    PickupSteal.RemovePickups();
                                    Game.Player.IsInvincible = false;
                                    MissionSwitch = 0;
                                    break;
                                }
                            }
                        }
                        switch (MissionSwitch)
                        {
                            case 0://contact mission start
                                {
                                    if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_START(831.4296f, -1012.343f, 26.74637f, 0.0f, 0.0f, 0.0f, 500f, 0);
                                    }
                                    string[] musicevents = {
                        "MP_CHF_START",
                        "MP_MC_START_HEIST_PREP_NEW",
                        "MP_MC_START_HEIST_FIN_NEW",
                        "MP_MC_CMH_IAA_PREP_START",
                        "MP_MC_CMH_IAA_FINALE_START",
                        "MP_MC_CMH_SUB_PREP_START",
                        "MP_MC_CMH_SUB_FINALE_START",
                        "MP_MC_CMH_SILO_PREP_START",
                        "MP_MC_CMH_SILO_FINALE_START",
                        "MP_MC_CM22_START_TRACK_11",
                        "MP_MC_TUNER_START_MUSIC",
                        "MP_MC_GR_START",
                        "LOWRIDER_START_MUSIC",
                        "LOWRIDER_FINALE_START_MUSIC",
                        "MP_MC_START",
                        };
                                    Audios.TRIGGER_MUSIC_EVENT(musicevents[Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, musicevents.Length)]);
                                    Audios.TRIGGER_MUSIC_EVENT("MP_MC_SUSPENSE_HFIN");
                                    Audios.TRIGGER_MUSIC_EVENT("FH2B_EXPLODE");

                                    MPLoadout.GET_CURRENT_LOADOUT();
                                    MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(831.3835f, -999.0405f, 26.22587f), 94.5778f);

                                    Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();

                                    Game.Player.Character.Task.ClearAll();
                                    Game.Player.CanControlCharacter = true;

                                    Game.Player.Character.Position = new Vector3(831.4296f, -1012.343f, 26.74637f - 1f);
                                    Game.Player.Character.Heading = 52.88664f;
                                    Game.Player.Character.IsPositionFrozen = true;
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    HudHandler.HudandRadar(false, false);

                                    Wait(1000);
                                    LoadingPrompt.Hide();
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Function.Call((Hash)0xEFACC8AEF94430D5, 1f);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    PlayerSwitch.STOP_PLAYER_SWITCH();
                                    if (LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                                    {
                                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                                    }
                                    Game.Player.Character.IsPositionFrozen = false;

                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestMissionPassScaleform();
                                    Wait(500);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true); //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "PUSH", "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS", true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_BLACK");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_INTRO_TO_WALL", "intro", "Mission", "Darnell Bros Score", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_INTRO_TO_WALL", "intro", "Mission", "Darnell Bros Score", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_INTRO_TO_WALL", "intro", "Mission", "Darnell Bros Score", "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "intro", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "intro");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "intro");
                                    Screen.FadeIn(1000);

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
                                    int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

                                    int getcurrentduration = 0;
                                    while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }
                                    getcurrentduration = GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
                                    if (Main.DEBUG) Notification.Show($"{getcurrentduration}");

                                    int i = Game.GameTime + getcurrentduration;
                                    while (Game.GameTime < i)
                                    {
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Mobile_Phone.CAN_OPEN_PHONE = true;
                                    //Function.Call(Hash.PREPARE_MUSIC_EVENT, "FH2B_EXPLODE");
                                    //Audios.TRIGGER_MUSIC_EVENT("MP_CHF_ACTION");
                                    HudHandler.HudandRadar(true, true);
                                    Main.checkpoint = 1;
                                    Heist_Hud.Actual_Take = 0;
                                    TeamLives = 1;
                                    MissionSwitch = 1;
                                }
                                break;
                            case 1://go to the garment factory
                                {
                                    Vector3[] randomspawn = { new Vector3(709.7264f, -979.1343f, 24.06498f), new Vector3(731.9211f, -979.6242f, 24.25032f) };
                                    float[] randomspawnhead = { 274.2116f, 91.10085f };
                                    int rand = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, randomspawn.Length);
                                    RESPAWN.SET_MIS_STAT(randomspawn[rand], randomspawnhead[rand], 0, true);

                                    Screen.ShowSubtitle("Go to the ~y~Darnell Bros Factory.~w~");

                                    if (Main.missionBlip == null)
                                    {
                                        if (Main.missionBlip != null)
                                        {
                                            Main.missionBlip.Delete();
                                            Main.missionBlip = null;
                                        }
                                        while (Main.missionBlip == null)
                                        {
                                            Main.missionBlip = World.CreateBlip(new Vector3(718.228f, -978.915f, 24.11674f));
                                            Wait(0);
                                        }
                                        HudHandler.SET_GPS(Main.missionBlip, 156, false, true);
                                    }
                                    else
                                    {
                                        if (Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 30f)
                                        {
                                            if (Main.missionBlip != null)
                                            {
                                                Main.missionBlip.Delete();
                                                Main.missionBlip = null;
                                                HudHandler.CLEAR_GPS_ROUTE();
                                            }
                                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "FocusIn", "HintCamSounds", true);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);
                                            MissionSwitch = 2;
                                        }
                                    }
                                }
                                break;
                            case 2://spawn everything
                                {
                                    Groups.RemoveEnemyPeds();
                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(717.6945f, -965.621f, 30.40879f - 1f), 178.6609f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(714.5129f, -964.5287f, 30.40869f - 1f), -135.1738f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(711.3912f, -961.2954f, 30.40859f - 1f), -147.2004f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(707.9368f, -965.5706f, 30.4088f - 1f), -69.86568f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.BlipUpEnemyPeds();

                                    PickupSteal.RemovePickups();
                                    PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.Armour, new Vector3(719.4617f, -963.2683f, 30.45383f), new Vector3(-89.00083f, -3.05935E-06f, -42.65356f), Main.RequestModel(701173564), 200, 175, BlipColor.Blue, "Armour", true, 0.7f);
                                    PickupSteal.SPAWN_PICKUP_WITH_BLIP(PickupType.Health, new Vector3(719.6255f, -963.6557f, 30.49379f), new Vector3(0f, 0f, -7.237727f), Main.RequestModel(678958360), 200, 153, BlipColor.Green, "Health", true, 0.7f);

                                    Trollys.RemoveTrollys();
                                    Trollys.SPAWN_Trolly(new Vector3(706.3926f, -964.0923f, 30.40825f - 0.5f), 238.4378f, "Cash");
                                    Trollys.TotalAmount = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 15000, 25001);
                                    Trollys.TrollyAmount = 1;
                                    Trollys.AllowTrollyGrab = true;
                                    while (Trollys.TrollySpawn[0].AttachedBlip == null)
                                    {
                                        Trollys.TrollySpawn[0].AddBlip();
                                        Wait(0);
                                    }
                                    Trollys.TrollySpawn[0].AttachedBlip.Sprite = (BlipSprite)1;
                                    Trollys.TrollySpawn[0].AttachedBlip.Color = BlipColor.Green;
                                    Trollys.TrollySpawn[0].AttachedBlip.Name = "Cash Trolly";

                                    Audios.TRIGGER_MUSIC_EVENT("MP_CHF_ACTION");
                                    MissionSwitch = 3;
                                }
                                break;
                            case 3://steal the cash
                                {
                                    Screen.ShowSubtitle("Steal the ~g~cash.~w~");

                                    if (Trollys.TrollySpawn.Count == 0)
                                    {
                                        Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);

                                        WeaponHash[] pedweapons = { WeaponHash.Pistol, WeaponHash.MicroSMG };
                                        Chase.SET_CHASE_ACTIVATE(VehicleHash.Cinquemila, PedHash.ArmGoon01GMM, pedweapons);

                                        Notification.Show("~b~" + Main.Player_Name + "~w~ grabbed the cash.");
                                        MissionSwitch = 4;
                                    }
                                }
                                break;
                            case 4://spawn everything
                                {
                                    Vector3[] randomspawn = { new Vector3(707.7828f, -965.3373f, 30.41283f), new Vector3(719.7528f, -964.9153f, 30.39534f) };
                                    float[] randomspawnhead = { 283.6858f, 114.5485f };
                                    int rand = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, randomspawn.Length);
                                    RESPAWN.SET_MIS_STAT(randomspawn[rand], randomspawnhead[rand], 0, true);

                                    Vehicles.RemoveVehicles();
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xA4F52C13, new Vector3(733.6369f, -981.9631f, 23.78998f - 1f), 54.91279f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xA4F52C13, new Vector3(731.4392f, -987.4202f, 23.63474f - 1f), 52.15868f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xA4F52C13, new Vector3(706.5524f, -981.8581f, 23.53673f - 1f), -101.7774f, false, false);
                                    Vehicles.SPAWN_VEHICLE((VehicleHash)0xA4F52C13, new Vector3(702.5166f, -990.5064f, 23.44759f - 1f), -64.89253f, false, false);
                                    
                                    Groups.RemoveEnemyPeds();
                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(735.1954f, -979.9547f, 24.48477f - 1f), 78.12508f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(732.436f, -984.6622f, 24.30906f - 1f), 55.24744f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(728.7743f, -988.5727f, 24.1532f - 1f), 50.28299f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(710.1155f, -979.9114f, 24.12275f - 1f), -89.69753f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(706.6533f, -984.3474f, 24.12157f - 1f), -90.4138f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(704.4872f, -986.709f, 24.10032f - 1f), -80.89481f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.SPAWN_AI((PedHash)0xFDA94268, new Vector3(705.225f, -991.6381f, 23.98169f - 1f), -60.8832f, WeaponHash.Pistol, 100, 25, false, 0, 1, Relationship.Hate, false, false);
                                    Groups.BlipUpEnemyPeds();
                                    
                                    Audios.TRIGGER_MUSIC_EVENT("MP_MC_ACTION_HFIN");
                                    MissionSwitch = 5;
                                }
                                break;
                            case 5://deliver the cash to the buyer
                                {
                                    Screen.ShowSubtitle("Deliver the ~g~cash~w~ to the ~y~Buyer.~w~");

                                    if (Main.missionBlip == null)
                                    {
                                        if (Main.missionBlip != null)
                                        {
                                            Main.missionBlip.Delete();
                                            Main.missionBlip = null;
                                        }
                                        while (Main.missionBlip == null)
                                        {
                                            Main.missionBlip = World.CreateBlip(new Vector3(-2827.343f, -44.17366f, 3.100057f));
                                            Wait(0);
                                        }
                                        HudHandler.SET_GPS(Main.missionBlip, 156, false, true);
                                    }
                                    else
                                    {
                                        if (Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 200f)
                                        {
                                            if (Chase.ChaseActive)
                                            {
                                                Chase.SET_CHASE_DEACTIVATE();
                                            }
                                        }
                                        if (Game.Player.Character.Position.DistanceTo(Main.missionBlip.Position) < 30f)
                                        {
                                            if (Main.missionBlip != null)
                                            {
                                                Main.missionBlip.Delete();
                                                Main.missionBlip = null;
                                                HudHandler.CLEAR_GPS_ROUTE();
                                            }
                                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "FocusIn", "HintCamSounds", true);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "CHECKPOINT_PERFECT", "HUD_MINI_GAME_SOUNDSET", 1);

                                            Notification.Show("~b~" + Main.Player_Name + "~w~ delivered the cash to the buyer.");
                                            MissionSwitch = 6;
                                        }
                                    }
                                }
                                break;
                            case 6://END MISSION
                                {
                                    int CashValue = Heist_Hud.Actual_Take;
                                    int YourTake = Heist_Hud.Actual_Take;
                                    int PercentValue = 100;
                                    int player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
                                    Ped ped2;
                                    ped2 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 0);
                                    Ped ped3;
                                    ped3 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 1);
                                    Ped ped4;
                                    ped4 = Function.Call<Ped>(Hash.GET_PED_AS_GROUP_MEMBER, player_group, 2);

                                    Audios.Stop_Music_Event();
                                    Screen_Effects.CLEAR_ALL_HELP_MESSAGES();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebEnd", 0, true);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true);
                                    Wait(2000);

                                    HudHandler.HudandRadar(false, false);
                                    Screen_Effects.CLEAR_ALL_HELP_MESSAGES();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebEnd", 0, true);
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
                                    Game.Player.CanControlCharacter = false;
                                    Wait(1000);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wait(500);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Wall_Creator.RequestHeistPassScaleform();
                                    Wait(500);
                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.PlayAnimPostFX("HeistCelebPass", 0, true);
                                    Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                                    Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                                    HudHandler.HudandRadar(false, false);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CLEANUP", "CELEB_HEIST");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CLEANUP", "CELEB_HEIST");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CLEANUP", "CELEB_HEIST");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_HEIST", "HUD_COLOUR_BLACK", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_HEIST", "HUD_COLOUR_BLACK", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_HEIST", "HUD_COLOUR_BLACK", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_HEIST", "HEIST", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_HEIST", "HEIST", "PASSED", "", true, true, true);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_HEIST", "HEIST", "PASSED", "", true, true, true);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_HEIST", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_HEIST", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_HEIST", 2);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_STAT_TABLE", "CELEB_HEIST", "CELEB_PSCORE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_STAT_TABLE", "CELEB_HEIST", "CELEB_PSCORE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_STAT_TABLE", "CELEB_HEIST", "CELEB_PSCORE");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", Main.Player_Name, "PLATINUM", Main.Player_Name, true, true, false, "HUD_COLOUR_PLATINUM");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", Main.Player_Name, "PLATINUM", Main.Player_Name, true, true, false, "HUD_COLOUR_PLATINUM");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", Main.Player_Name, "PLATINUM", Main.Player_Name, true, true, false, "HUD_COLOUR_PLATINUM");

                                    if (ped2.Exists())
                                    {
                                        PercentValue -= 25;
                                        YourTake = YourTake / 2;
                                        string groupmname = "Ai Friend 1";
                                        if (ped2.AttachedBlip != null)
                                        {
                                            groupmname = ped2.AttachedBlip.Name;
                                        }
                                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", groupmname, "GOLD", groupmname, true, true, false, "HUD_COLOUR_GOLD");
                                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", groupmname, "GOLD", groupmname, true, true, false, "HUD_COLOUR_GOLD");
                                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", groupmname, "GOLD", groupmname, true, true, false, "HUD_COLOUR_GOLD");
                                    }

                                    if (ped3.Exists())
                                    {
                                        PercentValue -= 25;
                                        YourTake = YourTake / 2;
                                        string groupmname = "Ai Friend 2";
                                        if (ped3.AttachedBlip != null)
                                        {
                                            groupmname = ped3.AttachedBlip.Name;
                                        }
                                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", groupmname, "SILVER", groupmname, true, true, false, "HUD_COLOUR_SILVER");
                                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", groupmname, "SILVER", groupmname, true, true, false, "HUD_COLOUR_SILVER");
                                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", groupmname, "SILVER", groupmname, true, true, false, "HUD_COLOUR_SILVER");
                                    }

                                    if (ped4.Exists())
                                    {
                                        PercentValue -= 25;
                                        YourTake = YourTake / 2;
                                        string groupmname = "Ai Friend 3";
                                        if (ped4.AttachedBlip != null)
                                        {
                                            groupmname = ped4.AttachedBlip.Name;
                                        }
                                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", groupmname, "BRONZE", groupmname, true, true, false, "HUD_COLOUR_BRONZE");
                                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", groupmname, "BRONZE", groupmname, true, true, false, "HUD_COLOUR_BRONZE");
                                        Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", groupmname, "BRONZE", groupmname, true, true, false, "HUD_COLOUR_BRONZE");
                                    }

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_STAT_TABLE_TO_WALL", "CELEB_HEIST", "CELEB_PSCORE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_STAT_TABLE_TO_WALL", "CELEB_HEIST", "CELEB_PSCORE");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_STAT_TABLE_TO_WALL", "CELEB_HEIST", "CELEB_PSCORE");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_HEIST", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_HEIST", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_HEIST", 2);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "CREATE_INCREMENTAL_CASH_ANIMATION", "CELEB_HEIST", "SUMMARY");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "CREATE_INCREMENTAL_CASH_ANIMATION", "CELEB_HEIST", "SUMMARY");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "CREATE_INCREMENTAL_CASH_ANIMATION", "CELEB_HEIST", "SUMMARY");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", 0, 25000, "POTENTIAL TAKE", "", "", 3, 3);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", 0, 25000, "POTENTIAL TAKE", "", "", 3, 3);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", 0, 25000, "POTENTIAL TAKE", "", "", 3, 3);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", 25000, Heist_Hud.Actual_Take, "ACTUAL TAKE", "", "", 3, 3);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", 25000, Heist_Hud.Actual_Take, "ACTUAL TAKE", "", "", 3, 3);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", 25000, Heist_Hud.Actual_Take, "ACTUAL TAKE", "", "", 3, 3);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", Heist_Hud.Actual_Take, YourTake, $"{PercentValue}% CUT OF TAKE", "", "", 3, 3);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", Heist_Hud.Actual_Take, YourTake, $"{PercentValue}% CUT OF TAKE", "", "", 3, 3);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", Heist_Hud.Actual_Take, YourTake, $"{PercentValue}% CUT OF TAKE", "", "", 3, 3);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", YourTake, YourTake, "TOTAL CASH EARNED", "", "", 3, 3);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", YourTake, YourTake, "TOTAL CASH EARNED", "", "", 3, 3);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", YourTake, YourTake, "TOTAL CASH EARNED", "", "", 3, 3);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_INCREMENTAL_CASH_ANIMATION_TO_WALL", "CELEB_HEIST", "SUMMARY");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_INCREMENTAL_CASH_ANIMATION_TO_WALL", "CELEB_HEIST", "SUMMARY");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_INCREMENTAL_CASH_ANIMATION_TO_WALL", "CELEB_HEIST", "SUMMARY");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_HEIST", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_HEIST", 2);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_HEIST", 2);

                                    int RandomRPValue = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 700, 1500);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_HEIST", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_HEIST", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_REP_POINTS_AND_RANK_BAR_TO_WALL", "CELEB_HEIST", RandomRPValue, MPRank.CurrentXP, MPRank.XPStartLimit, MPRank.XPEndLimit, MPRank.PlayerLevel, MPRank.PlayerLevel + 1, "Rank", "UP");

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "PAUSE", "CELEB_HEIST", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "PAUSE", "CELEB_HEIST", 1);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "PAUSE", "CELEB_HEIST", 1);

                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_HEIST", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_HEIST", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_HEIST", 75, 0);
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_HEIST");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_HEIST");
                                    Wall_Creator.CallFunction(Wall_Creator.MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_HEIST");

                                    int i = Game.GameTime + 27000;
                                    while (Game.GameTime < i)
                                    {
                                        HudHandler.HudandRadar(false, false);
                                        Wall_Creator.MissionCelebrate(Wall_Creator.MISSIONPASSED, Wall_Creator.MISSIONPASSED2, Wall_Creator.MISSIONPASSED3);
                                        Wait(0);
                                    }

                                    Groups.RemoveEnemyPeds();
                                    Groups.ClearEnemyPedsList2();
                                    Vehicles.RemoveVehicles();
                                    Props.RemoveProps();
                                    PickupSteal.RemovePickups();
                                    Trollys.RemoveTrollys();
                                    Trollys.TrollyAmount = 0;
                                    Trollys.TotalAmount = 0;
                                    Trollys.AllowTrollyGrab = false;
                                    Heist_Hud.Actual_Take = 0;

                                    Screen_Effects.StopAllAnimPostFX();
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
                                    Wall_Creator.DeleteMissionPassScaleform();
                                    Game.Player.CanControlCharacter = true;
                                    MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(-1034.103f, -2730.103f, 20.07145f), 239.1848f);

                                    int Timer = Game.GameTime + 4000;
                                    Game.Player.CanControlCharacter = false;
                                    PlayerSwitch._SWITCH_OUT_PLAYER(Game.Player.Character, 3, 1);
                                    while (Game.GameTime < Timer)
                                    {
                                        Wait(0);
                                    }

                                    Function.Call(Hash.SET_ENTITY_COORDS, Game.Player.Character, -1037.913f, -2738.268f, 20.16934f, true, false, false, true);
                                    Function.Call(Hash.SET_ENTITY_HEADING, Game.Player.Character, 337.2306f);
                                    Cameras.RESET_GAMEPLAY_CAM();
                                    Game.Player.CanControlCharacter = true;

                                    Function.Call((Hash)0xAD5FDF34B81BFE79);
                                    Function.Call((Hash)0x43D1680C6D19A8E9);
                                    PlayerSwitch.SWITCH_IN_PLAYER(Game.Player.Character);
                                    while (PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                                    {
                                        Wait(0);
                                    }
                                    HudHandler.HudandRadar(true, true);
                                    MPCash.ADD_CASH(CashValue);
                                    MPRank.ADD_RP(RandomRPValue);

                                    Main.RadioAllowed = true;
                                    Main.NoCopsOnMission = false;
                                    Main.FuckOffCivilians = false;
                                    Main.OnMission = false;
                                    Main.checkpoint = 0;
                                    MissionsSwitch = -1;
                                    MissionSwitch = 0;
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        #endregion
    }
    #endregion
    
    #region MPHud
    internal class MPRank : Script
    {
        public static int BarID = 0;
        public static int BarTimer = 0;
        public static int BarSwitch = -1;
        public MPRank()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }

        public void onTick(object sender, EventArgs e)
        {
            if (Main.StorySwitch >= 2 || Main.DEBUG)
            {
                while (!Function.Call<bool>(Hash.HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED, 19))
                {
                    Function.Call(Hash.REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE, 19);
                    Wait(0);
                }
                if (Function.Call<bool>(Hash.HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED, 19))
                {
                    //Function.Call(Hash.SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME, 19);

                    if (Function.Call<bool>(Hash.IS_SCRIPTED_HUD_COMPONENT_ACTIVE, 19))
                    {
                        XPStartLimit = CalculateXP(PlayerLevel - 1);
                        XPEndLimit = CalculateXP(PlayerLevel); // (1000 + (rank - 1 )* 125) * rank - Vincent
                        if (Game.IsControlJustPressed(GTA.Control.MultiplayerInfo) || PreviousXP != CurrentXP && Cutscenes.HAS_CUTSCENE_FINISHED() && Hud.IsRadarVisible && Hud.IsVisible && !Game.Player.Character.IsDead && !PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                        {
                            SetColor(116, 123);
                            CallHudFunction("OVERRIDE_ANIMATION_SPEED", 2000);
                            CallHudFunction("OVERRIDE_ONSCREEN_DURATION", 6000);
                            BeforeDraw();

                            PreviousXP = CurrentXP;
                            Main.SET_INI_VALUE_INT(Main.Config, "Rank", "Player Previous RP", PreviousXP);
                        }
                        if (CurrentXP >= XPEndLimit && Cutscenes.HAS_CUTSCENE_FINISHED() && Hud.IsRadarVisible && Hud.IsVisible && !Game.Player.Character.IsDead && !PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                        {

                            XPStartLimit = CalculateXP(PlayerLevel - 1);
                            XPEndLimit = CalculateXP(PlayerLevel);

                            SetColor(116, 123);
                            CallHudFunction("OVERRIDE_ANIMATION_SPEED", 2000);
                            CallHudFunction("OVERRIDE_ONSCREEN_DURATION", 6000);
                            BeforeDraw();

                            PreviousXP = CurrentXP;
                            Main.SET_INI_VALUE_INT(Main.Config, "Rank", "Player Previous RP", PreviousXP);
                            PlayerLevel += 1;
                            Main.SET_INI_VALUE_INT(Main.Config, "Rank", "Player Level", PlayerLevel); //(int)((float)(1.0f / 250) * (-875 + (float)Math.Sqrt(765625 + 500 * CurrentXP)));

                            CallHudFunction("OVERRIDE_ANIMATION_SPEED", 2000);
                            CallHudFunction("OVERRIDE_ONSCREEN_DURATION", 6000);
                            SetColor(116, 123);
                            CallHudFunction("SET_RANK_SCORES", XPStartLimit, XPEndLimit, PreviousXP, CurrentXP, PlayerLevel, 100);


                            CallHudFunction("RESET_MOVIE");
                            XPStartLimit = CalculateXP(PlayerLevel - 1);
                            XPEndLimit = CalculateXP(PlayerLevel);
                            CallHudFunction("OVERRIDE_ANIMATION_SPEED", 2000);
                            CallHudFunction("OVERRIDE_ONSCREEN_DURATION", 6000);
                            SetColor(116, 123);
                            CallHudFunction("SET_RANK_SCORES", XPStartLimit, XPEndLimit, PreviousXP, CurrentXP, PlayerLevel, 100);

                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "RANK_UP", "HUD_AWARDS", true);
                        }
                    }
                }
            }
        }

        public void onShutdown(object sender, EventArgs e)
        {
            var A_0 = true;
            if (A_0)
            {
                if (BarID != 0)
                {
                    unsafe
                    {
                        int handle = BarID;
                        Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                        BarID = 0;
                    }
                }
                if (Function.Call<bool>(Hash.HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED, 19))
                {
                    Function.Call(Hash.REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE, 19);
                }
            }
        }

        public static int CalculateXP(int rank)
        {
            return (1000 + (rank - 1) * 125) * rank;
        }
        public static float CurrentExpLvl(float exp)
        {
            float mod = 0.04f; // Changing this number will result in a higher or lower scale.
            float level = (float)(mod * Math.Sqrt(exp));
            return level;
        }

        public static void SET_RANK(int rank)
        {
            PlayerLevel = rank;
            Main.SET_INI_VALUE_INT(Main.Config, "Rank", "Player Level", PlayerLevel); //(int)((float)(1.0f / 250) * (-875 + (float)Math.Sqrt(765625 + 500 * CurrentXP)));
        }
        public static void SET_RP(int rp)
        {
            PreviousXP = rp;
            Main.SET_INI_VALUE_INT(Main.Config, "Rank", "Player Previous RP", PreviousXP);
            CurrentXP = rp;
            Main.SET_INI_VALUE_INT(Main.Config, "Rank", "Player RP", CurrentXP); //(int)((float)(1.0f / 250) * (-875 + (float)Math.Sqrt(765625 + 500 * CurrentXP)));
        }
        public static void ADD_RP(int rp)
        {
            PreviousXP += rp;
            Main.SET_INI_VALUE_INT(Main.Config, "Rank", "Player Previous RP", PreviousXP);
            CurrentXP += rp;
            Main.SET_INI_VALUE_INT(Main.Config, "Rank", "Player RP", CurrentXP); //(int)((float)(1.0f / 250) * (-875 + (float)Math.Sqrt(765625 + 500 * CurrentXP)));
        }
        public static void REMOVE_RP(int rp)
        {
            PreviousXP -= rp;
            Main.SET_INI_VALUE_INT(Main.Config, "Rank", "Player Previous RP", PreviousXP);
            CurrentXP -= rp;
            Main.SET_INI_VALUE_INT(Main.Config, "Rank", "Player RP", CurrentXP); //(int)((float)(1.0f / 250) * (-875 + (float)Math.Sqrt(765625 + 500 * CurrentXP)));
        }

        public static string MovieName => "MP_RANK_BAR";

        public static int HudComponent => 19;

        public static int XPStartLimit { get; set; } = 0;

        public static int XPEndLimit { get; set; } = 1000;

        public static int PreviousXP { get; set; } = 0;

        public static int CurrentXP { get; set; } = 0;

        public static int PlayerLevel { get; set; } = 1;
        
        public static void SetColor(int color1, int color2) => CallHudFunction("SET_COLOUR", color1, color2);

        public static void StayOnScreen() => CallHudFunction("STAY_ON_SCREEN");
        
        public static void Reset() => CallHudFunction("RESET_MOVIE");

        public static void BeforeDraw()
        {
            SetRankScores(XPStartLimit, XPEndLimit, PreviousXP, CurrentXP, PlayerLevel, PlayerLevel + 1);
        }

        public static void SetRankScores(int xpStartLimit, int xpEndLimit, int previousXP, int currentXP, int playerLevel, int rankNext)
        {
            CallHudFunction("SET_RANK_SCORES", xpStartLimit, xpEndLimit, previousXP, currentXP, playerLevel, 100, rankNext);
        }
        
        public static void CallHudFunction(string name, params object[] args)
        {
            while (!Function.Call<bool>(Hash.BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD, 19, name))
            {
                Wait(0);
            }
            pushArgs(args);
            Function.Call(Hash.END_SCALEFORM_MOVIE_METHOD);
        }
        protected static void pushArgs(object[] args)
        {
            foreach (object x in args)
            {
                if (x.GetType() == typeof(int)) Function.Call<int>((Hash)0xc3d0841a0cc546a6, (int)x);
                else if (x.GetType() == typeof(float)) Function.Call((Hash)0xd69736aae04db51a, (float)x);
                else if (x.GetType() == typeof(double)) Function.Call((Hash)0xd69736aae04db51a, (float)(double)x);
                else if (x.GetType() == typeof(bool)) Function.Call((Hash)0xc58424ba936eb458, (bool)x);
                else if (x.GetType() == typeof(string))
                {
                    Function.Call((Hash)0x80338406f3475e55, "STRING");
                    Function.Call((Hash)0x6c188be134e074aa, (string)x);
                    Function.Call((Hash)0x362e2d3fe93a9959);
                }
                else if (x.GetType() == typeof(char))
                {
                    Function.Call((Hash)0x80338406f3475e55, "STRING");
                    Function.Call((Hash)0x6c188be134e074aa, ((char)x).ToString());
                    Function.Call((Hash)0x362e2d3fe93a9959);
                }
            }
        }
    }
    internal class MPCash : Script
    {
        enum SCRIPT_HUD_COMPONENTS
        {
            HUD_UNK_0 = 0,
            HUD_UNK_1 = 1,
            HUD_UNK_2 = 2,
            HUD_DRUG_PARCEL = 3,
            HUD_CASH_PARCEL = 4,
            HUD_UNK_5 = 5,
            HUD_UNK_6 = 6,
            HUD_UNK_7 = 7,
            HUD_UNK_8 = 8,
            HUD_UNK_9 = 9,
            HUD_UNK_10 = 10,
            HUD_UNK_11 = 11,
            HUD_UNK_12 = 12,
            HUD_CASH_PARCEL_2 = 13,
            HUD_CASH_PARCEL_3 = 14,
            HUD_CASH_PARCEL_4 = 15,
            HUD_CASH_PARCEL_5 = 16,
            HUD_CASH_PARCEL_6 = 17,
            HUD_RADAR_RIGHT_ICON = 18,
            HUD_RANK_BAR = 19,
            HUD_DIRECTOR_MODE = 20,
            HUD_CASH = 21,
            HUD_CHIPS = 22,
        };
        public MPCash()
        {
            Tick += onTick;
            Aborted += onShutdown;
            KeyDown += onKeyDown;
        }

        public void onTick(object sender, EventArgs e)
        {
            if (Main.StorySwitch >= 2 || Main.DEBUG)
            {
                if (Main.DEBUG)
                {
                    if (Game.IsControlJustPressed(GTA.Control.Context))
                    {
                        //MPCash.ADD_CASH(1525);
                    }
                    if (Game.IsControlJustPressed(GTA.Control.VehicleDuck))
                    {
                        //MPCash.ADD_BANK(1525);
                    }
                }
                if (Game.IsControlJustPressed(GTA.Control.MultiplayerInfo) && Cutscenes.HAS_CUTSCENE_FINISHED() && Hud.IsRadarVisible && Hud.IsVisible && !Game.Player.Character.IsDead && !PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                {
                    Function.Call(Hash.REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE, 21);
                    Function.Call(Hash.REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE, 21);
                    Wait(0);
                    //CallHudFunction(21, "SET_MP_MESSAGE", $"~g~${Cash}~w~ \n ~HC_GREENLIGHT~${Bank}~HUD_COLOUR_WHITE~");
                    CallHudFunction(21, "SET_PLAYER_MP_CASH_WITH_STRING", $"~g~${Cash}~w~ \n ~HC_GREENLIGHT~${Bank}~HUD_COLOUR_WHITE~");
                    CallHudFunction(21, "SHOW", false);

                    int Timer = Game.GameTime + 5000;
                    while (Game.GameTime < Timer)
                    {
                        Function.Call(Hash.SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME, 21);
                        Wait(0);
                    }

                    CallHudFunction(21, "HIDE");

                    Timer = Game.GameTime + 500;
                    while (Game.GameTime < Timer)
                    {
                        Function.Call(Hash.SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME, 21);
                        Wait(0);
                    }

                    Function.Call(Hash.REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE, 21);
                }
                else if (PreviousCash != Cash || PreviousBank != Bank && Cutscenes.HAS_CUTSCENE_FINISHED() && Hud.IsRadarVisible && Hud.IsVisible && !Game.Player.Character.IsDead && !PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                {
                    Function.Call(Hash.REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE, 21);
                    Function.Call(Hash.REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE, 21);
                    Wait(0);

                    if (PreviousCash > Cash)
                    {
                        CallHudFunction(21, "SET_PLAYER_CASH_CHANGE", AddedCash, false);//false - remove // true - add
                        PreviousCash = Cash;
                        Main.SET_INI_VALUE_INT(Main.Config, "Cash", "Player Previous Cash", PreviousCash);
                        AddedCash = 0;
                    }
                    else if (PreviousCash < Cash)
                    {
                        CallHudFunction(21, "SET_PLAYER_CASH_CHANGE", AddedCash, true);//false - remove // true - add
                        PreviousCash = Cash;
                        Main.SET_INI_VALUE_INT(Main.Config, "Cash", "Player Previous Cash", PreviousCash);
                        AddedCash = 0;
                    }
                    if (PreviousBank > Bank)
                    {
                        CallHudFunction(21, "SET_PLAYER_CASH_CHANGE", AddedBank, false);
                        PreviousBank = Bank;
                        Main.SET_INI_VALUE_INT(Main.Config, "Cash", "Player Previous Bank", PreviousBank);
                        AddedBank = 0;
                    }
                    else if (PreviousBank < Bank)
                    {
                        CallHudFunction(21, "SET_PLAYER_CASH_CHANGE", AddedBank, true);
                        PreviousBank = Bank;
                        Main.SET_INI_VALUE_INT(Main.Config, "Cash", "Player Previous Bank", PreviousBank);
                        AddedBank = 0;
                    }

                    CallHudFunction(21, "SHOW", false);

                    int Timer = Game.GameTime + 1000;
                    while (Game.GameTime < Timer)
                    {
                        Function.Call(Hash.SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME, 21);
                        Wait(0);
                    }

                    CallHudFunction(21, "HIDE");

                    Timer = Game.GameTime + 500;
                    while (Game.GameTime < Timer)
                    {
                        Function.Call(Hash.SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME, 21);
                        Wait(0);
                    }

                    Function.Call(Hash.REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE, 21);
                }
                
                if (Cash <= 0)
                {
                    SET_CASH(0);
                }
                if (Bank <= 0)
                {
                    SET_BANK(0);
                }
            }
        }

        public void onShutdown(object sender, EventArgs e)
        {
            var A_0 = true;
            if (A_0)
            {
                if (Function.Call<bool>(Hash.HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED, 21))
                {
                    Function.Call(Hash.REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE, 21);
                }
                if (Function.Call<bool>(Hash.HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED, 22))
                {
                    Function.Call(Hash.REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE, 22);
                }
            }
        }
        public void onKeyDown(object sender, KeyEventArgs e)
        {

        }

        public static bool PROCESS_TRANSACTION(int cash)
        {
            if (MPCash.Bank >= cash)
            {
                MPCash.REMOVE_BANK(cash);
                return true;
            }
            else
            {
                if (MPCash.Cash >= cash)
                {
                    MPCash.REMOVE_CASH(cash);
                    return true;
                }
                if (MPCash.Bank + MPCash.Cash >= cash)
                {
                    MPCash.REMOVE_CASH(cash);
                    MPCash.REMOVE_BANK(cash);
                    return true;
                }

                return false;
            }
        }
        public static void SET_CASH(int cash)
        {
            Cash = cash;
            AddedCash = cash;
            Main.SET_INI_VALUE_INT(Main.Config, "Cash", "Player Cash", Cash);
        }
        public static void ADD_CASH(int cash)
        {
            Cash += cash;
            AddedCash = cash;
            Main.SET_INI_VALUE_INT(Main.Config, "Cash", "Player Cash", Cash);
        }
        public static void REMOVE_CASH(int cash)
        {
            Cash -= cash;
            AddedCash = cash;
            Main.SET_INI_VALUE_INT(Main.Config, "Cash", "Player Cash", Cash);
        }
        public static void SET_BANK(int cash)
        {
            Bank = cash;
            AddedBank = cash;
            Main.SET_INI_VALUE_INT(Main.Config, "Cash", "Player Bank", Bank);
        }
        public static void ADD_BANK(int cash)
        {
            Bank += cash;
            AddedBank = cash;
            Main.SET_INI_VALUE_INT(Main.Config, "Cash", "Player Bank", Bank);
        }
        public static void REMOVE_BANK(int cash)
        {
            Bank -= cash;
            AddedBank = cash;
            Main.SET_INI_VALUE_INT(Main.Config, "Cash", "Player Bank", Bank);
        }

        public static string MovieName => "HUD_CASH";
        public static int AddedCash { get; set; } = 0;
        public static int PreviousCash { get; set; } = 5000;
        public static int Cash { get; set; } = 5000;
        public static int AddedBank { get; set; } = 0;
        public static int PreviousBank { get; set; } = 20000;
        public static int Bank { get; set; } = 20000;
        public static int HudComponent { get; set; } = 21;
        
        public static void CallHudFunction(int component, string name, params object[] args)
        {
            while (!Function.Call<bool>(Hash.BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD, component, name))
            {
                Wait(0);
            }
            pushArgs(args);
            Function.Call(Hash.END_SCALEFORM_MOVIE_METHOD);
        }
        protected static void pushArgs(object[] args)
        {
            foreach (object x in args)
            {
                if (x.GetType() == typeof(int)) Function.Call<int>((Hash)0xc3d0841a0cc546a6, (int)x);
                else if (x.GetType() == typeof(float)) Function.Call((Hash)0xd69736aae04db51a, (float)x);
                else if (x.GetType() == typeof(double)) Function.Call((Hash)0xd69736aae04db51a, (float)(double)x);
                else if (x.GetType() == typeof(bool)) Function.Call((Hash)0xc58424ba936eb458, (bool)x);
                else if (x.GetType() == typeof(string))
                {
                    Function.Call((Hash)0x80338406f3475e55, "STRING");
                    Function.Call((Hash)0x6c188be134e074aa, (string)x);
                    Function.Call((Hash)0x362e2d3fe93a9959);
                }
                else if (x.GetType() == typeof(char))
                {
                    Function.Call((Hash)0x80338406f3475e55, "STRING");
                    Function.Call((Hash)0x6c188be134e074aa, ((char)x).ToString());
                    Function.Call((Hash)0x362e2d3fe93a9959);
                }
            }
        }
    }
    internal class MPInteractionMenu : Script
    {
        public static ObjectPool MenuPool = new ObjectPool();
        public static NativeMenu InteractionMenu;

        public static int ScaleID;
        public MPInteractionMenu()
        {
            Tick += onTick;
            Aborted += onShutdown;

            InteractionMenu = new NativeMenu(Main.Player_Name, "INTERACTION MENU");
            InteractionMenu.Title.Outline = true;
            InteractionMenu.Title.Shadow = true;
            InteractionMenu.TitleFont = GTA.UI.Font.ChaletComprimeCologne;
            InteractionMenu.UseMouse = false;
            //InteractionMenu.HeldTime = 100;
            InteractionMenu.CloseOnInvalidClick = false;
            MenuPool.Add(InteractionMenu);
        }

        public static void SETUP_INTERACTION_MENU()
        {
            InteractionMenu.Clear();

            NativeMenu StyleMenu = new NativeMenu("", "Style", "");
            MenuPool.Add(StyleMenu);
            StyleMenu.UseMouse = false;
            StyleMenu.CloseOnInvalidClick = false;
            NativeSubmenuItem StyleSubbutton = new NativeSubmenuItem(StyleMenu, InteractionMenu);
            StyleSubbutton.AltTitle = "";
            InteractionMenu.Add(0, StyleSubbutton);
            unsafe
            {
                NativeListItem<int> CustomOutfitsItem = new NativeListItem<int>("Outfits", "Select a Custom Outfit.");
                CustomOutfitsItem.Clear();
                for (int i = 1; i < 21; i++)
                {
                    if (File.Exists($"scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit{i}.xml"))
                    {
                        CustomOutfitsItem.Add(i);
                    }
                }

                CustomOutfitsItem.Activated += (sender, e) =>
                {
                    if (File.Exists($"scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit{CustomOutfitsItem.SelectedItem}.xml"))
                    {
                        MPCustomOutfits customoutfit = XMLSerializer.DeserializeXML<MPCustomOutfits>($"scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit{CustomOutfitsItem.SelectedItem}.xml");

                        Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 3, customoutfit.CustomOutfits[0].BodyType, customoutfit.CustomOutfits[0].BodyTypeVar, 2);
                        Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 4, customoutfit.CustomOutfits[0].Pants, customoutfit.CustomOutfits[0].PantsVar, 2);
                        Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 5, customoutfit.CustomOutfits[0].BAP, customoutfit.CustomOutfits[0].BAPVar, 2);
                        Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 6, customoutfit.CustomOutfits[0].Shoes, customoutfit.CustomOutfits[0].ShoesVar, 2);
                        Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 7, customoutfit.CustomOutfits[0].Accs, customoutfit.CustomOutfits[0].AccsVar, 2);
                        Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 8, customoutfit.CustomOutfits[0].US, customoutfit.CustomOutfits[0].USVar, 2);
                        Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 9, customoutfit.CustomOutfits[0].BA, customoutfit.CustomOutfits[0].BAVar, 2);
                        Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 10, customoutfit.CustomOutfits[0].Decals, customoutfit.CustomOutfits[0].DecalsVar, 2);
                        Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 11, customoutfit.CustomOutfits[0].Tops, customoutfit.CustomOutfits[0].TopsVar, 2);

                        if (customoutfit.CustomOutfits[0].Hats != -1)
                        {
                            Function.Call(Hash.SET_PED_PROP_INDEX, Game.Player.Character, 0, customoutfit.CustomOutfits[0].Hats, customoutfit.CustomOutfits[0].HatsVar, true);
                        }
                        if (customoutfit.CustomOutfits[0].Glasses != -1)
                        {
                            Function.Call(Hash.SET_PED_PROP_INDEX, Game.Player.Character, 1, customoutfit.CustomOutfits[0].Glasses, customoutfit.CustomOutfits[0].GlassesVar, true);
                        }
                        if (customoutfit.CustomOutfits[0].EarAccs != -1)
                        {
                            Function.Call(Hash.SET_PED_PROP_INDEX, Game.Player.Character, 2, customoutfit.CustomOutfits[0].EarAccs, customoutfit.CustomOutfits[0].EarAccsVar, true);
                        }
                        if (customoutfit.CustomOutfits[0].Watches != -1)
                        {
                            Function.Call(Hash.SET_PED_PROP_INDEX, Game.Player.Character, 6, customoutfit.CustomOutfits[0].Watches, customoutfit.CustomOutfits[0].WatchesVar, true);
                        }
                        if (customoutfit.CustomOutfits[0].Bracelets != -1)
                        {
                            Function.Call(Hash.SET_PED_PROP_INDEX, Game.Player.Character, 7, customoutfit.CustomOutfits[0].Bracelets, customoutfit.CustomOutfits[0].BraceletsVar, true);
                        }

                        PedOutfit.GET_OUTFIT(Game.Player.Character);

                        int iVar0 = 0;
                        while (iVar0 < PedOutfit.OutfitPart.Length)
                        {
                            Main.Config.SetValue<int>("Character", $"Outfit {iVar0}", PedOutfit.OutfitPart[iVar0]);
                            Main.Config.Save();
                            Main.Config.SetValue<int>("Character", $"Outfit Variation {iVar0}", PedOutfit.OutfitPart2[iVar0]);
                            Main.Config.Save();
                            iVar0++;
                        }

                        iVar0 = 0;
                        while (iVar0 < PedOutfit.OutfitPart3.Length)
                        {
                            Main.Config.SetValue<int>("Character", $"Accessory {iVar0}", PedOutfit.OutfitPart3[iVar0]);
                            Main.Config.Save();
                            Main.Config.SetValue<int>("Character", $"Accessory Variation {iVar0}", PedOutfit.OutfitPart4[iVar0]);
                            Main.Config.Save();
                            iVar0++;
                        }
                    }
                };

                StyleMenu.Add(CustomOutfitsItem);

                NativeListItem<string> CustomMoodItem = new NativeListItem<string>("Player Mood", "Select a Mood for your player.", "Normal", "Aiming", "Angry", "Happy", "Injured", "Stressed", "Smug", "Sulking");
                CustomMoodItem.Activated += (sender, e) =>
                {
                    if (Game.Player.Character.Gender == Gender.Male)
                    {
                        switch (CustomMoodItem.SelectedItem)
                        {
                            case "Normal":
                                Main.LoadDict("facials@gen_male@base");
                                Function.Call(Hash.SET_FACIAL_CLIPSET, Game.Player.Character, "facials@gen_male@base");
                                Function.Call(Hash.SET_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character, $"mood_normal_1");
                                break;
                            case "Aiming":
                                Main.LoadDict("facials@gen_male@base");
                                Function.Call(Hash.SET_FACIAL_CLIPSET, Game.Player.Character, "facials@gen_male@base");
                                Function.Call(Hash.SET_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character, $"mood_aiming_1");
                                break;
                            case "Angry":
                                Main.LoadDict("facials@gen_male@base");
                                Function.Call(Hash.SET_FACIAL_CLIPSET, Game.Player.Character, "facials@gen_male@base");
                                Function.Call(Hash.SET_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character, $"mood_angry_1");
                                break;
                            case "Happy":
                                Main.LoadDict("facials@gen_male@base");
                                Function.Call(Hash.SET_FACIAL_CLIPSET, Game.Player.Character, "facials@gen_male@base");
                                Function.Call(Hash.SET_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character, $"mood_happy_1");
                                break;
                            case "Injured":
                                Main.LoadDict("facials@gen_male@base");
                                Function.Call(Hash.SET_FACIAL_CLIPSET, Game.Player.Character, "facials@gen_male@base");
                                Function.Call(Hash.SET_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character, $"mood_injured_1");
                                break;
                            case "Stressed":
                                Main.LoadDict("facials@gen_male@base");
                                Function.Call(Hash.SET_FACIAL_CLIPSET, Game.Player.Character, "facials@gen_male@base");
                                Function.Call(Hash.SET_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character, $"mood_stressed_1");
                                break;
                            case "Smug":
                                Main.LoadDict("facials@gen_male@base");
                                Function.Call(Hash.SET_FACIAL_CLIPSET, Game.Player.Character, "facials@gen_male@base");
                                Function.Call(Hash.SET_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character, $"mood_smug_1");
                                break;
                            case "Sulking":
                                Main.LoadDict("facials@gen_male@base");
                                Function.Call(Hash.SET_FACIAL_CLIPSET, Game.Player.Character, "facials@gen_male@base");
                                Function.Call(Hash.SET_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character, $"mood_sulk_1");
                                break;
                        }
                    }
                    else
                    {
                        switch (CustomMoodItem.SelectedItem)
                        {
                            case "Normal":
                                Main.LoadDict("facials@gen_female@base");
                                Function.Call(Hash.SET_FACIAL_CLIPSET, Game.Player.Character, "facials@gen_female@base");
                                Function.Call(Hash.SET_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character, $"mood_normal_1");
                                break;
                            case "Aiming":
                                Main.LoadDict("facials@gen_female@base");
                                Function.Call(Hash.SET_FACIAL_CLIPSET, Game.Player.Character, "facials@gen_female@base");
                                Function.Call(Hash.SET_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character, $"mood_aiming_1");
                                break;
                            case "Angry":
                                Main.LoadDict("facials@gen_female@base");
                                Function.Call(Hash.SET_FACIAL_CLIPSET, Game.Player.Character, "facials@gen_female@base");
                                Function.Call(Hash.SET_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character, $"mood_angry_1");
                                break;
                            case "Happy":
                                Main.LoadDict("facials@gen_female@base");
                                Function.Call(Hash.SET_FACIAL_CLIPSET, Game.Player.Character, "facials@gen_female@base");
                                Function.Call(Hash.SET_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character, $"mood_happy_1");
                                break;
                            case "Injured":
                                Main.LoadDict("facials@gen_female@base");
                                Function.Call(Hash.SET_FACIAL_CLIPSET, Game.Player.Character, "facials@gen_female@base");
                                Function.Call(Hash.SET_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character, $"mood_injured_1");
                                break;
                            case "Stressed":
                                Main.LoadDict("facials@gen_female@base");
                                Function.Call(Hash.SET_FACIAL_CLIPSET, Game.Player.Character, "facials@gen_female@base");
                                Function.Call(Hash.SET_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character, $"mood_stressed_1");
                                break;
                            case "Smug":
                                Main.LoadDict("facials@gen_female@base");
                                Function.Call(Hash.SET_FACIAL_CLIPSET, Game.Player.Character, "facials@gen_female@base");
                                Function.Call(Hash.SET_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character, $"mood_smug_1");
                                break;
                            case "Sulking":
                                Main.LoadDict("facials@gen_female@base");
                                Function.Call(Hash.SET_FACIAL_CLIPSET, Game.Player.Character, "facials@gen_female@base");
                                Function.Call(Hash.SET_FACIAL_IDLE_ANIM_OVERRIDE, Game.Player.Character, $"mood_sulk_1");
                                break;
                        }
                    }
                };

                StyleMenu.Add(CustomMoodItem);

                NativeListItem<string> CustomWalkStyleItem = new NativeListItem<string>("Walk Style", "Select a Walk Style for your player.", "Normal", "Femme", "Gangster", "Posh", "Tough Guy", "Grooving");
                CustomWalkStyleItem.Activated += (sender, e) =>
                {
                    string genderletter = "M";
                    if (Game.Player.Character.Gender == Gender.Female)
                    {
                        genderletter = "F";
                    }

                    switch (CustomWalkStyleItem.SelectedItem)
                    {
                        case "Normal":
                            Function.Call(Hash.RESET_PED_MOVEMENT_CLIPSET, Game.Player.Character, 0.25f);
                            break;
                        case "Femme":
                            while (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "MOVE_" + genderletter + "@FEMME@"))
                            {
                                Function.Call(Hash.REQUEST_ANIM_SET, "MOVE_" + genderletter + "@FEMME@");
                                Wait(0);
                            }
                            Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Game.Player.Character, "MOVE_" + genderletter + "@FEMME@", 0.25f);
                            Function.Call(Hash.REMOVE_ANIM_SET, "MOVE_" + genderletter + "@FEMME@");
                            break;
                        case "Gangster":
                            while (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "MOVE_" + genderletter + "@GANGSTER@NG"))
                            {
                                Function.Call(Hash.REQUEST_ANIM_SET, "MOVE_" + genderletter + "@GANGSTER@NG");
                                Wait(0);
                            }
                            Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Game.Player.Character, "MOVE_" + genderletter + "@GANGSTER@NG", 1.0f);
                            Function.Call(Hash.REMOVE_ANIM_SET, "MOVE_" + genderletter + "@GANGSTER@NG");
                            break;
                        case "Posh":
                            while (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "MOVE_" + genderletter + "@POSH@"))
                            {
                                Function.Call(Hash.REQUEST_ANIM_SET, "MOVE_" + genderletter + "@POSH@");
                                Wait(0);
                            }
                            Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Game.Player.Character, "MOVE_" + genderletter + "@POSH@", 1.0f);
                            Function.Call(Hash.REMOVE_ANIM_SET, "MOVE_" + genderletter + "@POSH@");
                            break;
                        case "Tough Guy":
                            while (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "MOVE_" + genderletter + "@TOUGH_GUY@"))
                            {
                                Function.Call(Hash.REQUEST_ANIM_SET, "MOVE_" + genderletter + "@TOUGH_GUY@");
                                Wait(0);
                            }
                            Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Game.Player.Character, "MOVE_" + genderletter + "@TOUGH_GUY@", 1.0f);
                            Function.Call(Hash.REMOVE_ANIM_SET, "MOVE_" + genderletter + "@TOUGH_GUY@");
                            break;
                        case "Grooving":
                            while (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "ANIM@MOVE_" + genderletter + "@GROOVING@"))
                            {
                                Function.Call(Hash.REQUEST_ANIM_SET, "ANIM@MOVE_" + genderletter + "@GROOVING@");
                                Wait(0);
                            }
                            Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Game.Player.Character, "ANIM@MOVE_" + genderletter + "@GROOVING@", 1.0f);
                            Function.Call(Hash.REMOVE_ANIM_SET, "ANIM@MOVE_" + genderletter + "@GROOVING@");
                            break;
                    }
                };

                StyleMenu.Add(CustomWalkStyleItem);
            }

            NativeMenu VehiclesMenu = new NativeMenu("", "Vehicles", "");
            MenuPool.Add(VehiclesMenu);
            VehiclesMenu.UseMouse = false;
            VehiclesMenu.CloseOnInvalidClick = false;
            NativeSubmenuItem VehiclesSubbutton = new NativeSubmenuItem(VehiclesMenu, InteractionMenu);
            VehiclesSubbutton.AltTitle = "";
            InteractionMenu.Add(1, VehiclesSubbutton);
            unsafe
            {
                NativeItem RequestPVItem = new NativeItem("Request Personal Vehicle", "Get the mechanic to deliver your currently active Personal Vehicle.");
                
                RequestPVItem.Activated += (sender, e) =>
                {
                    if (Main.PlayerVehicle == null)
                    {
                        Vector3 playerpos = Game.Player.Character.Position.Around(60);
                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();

                        if (!LOAD_SCENES.IS_NEW_LOAD_SCENE_ACTIVE())
                        {
                            LOAD_SCENES.NEW_LOAD_SCENE_START(playerpos.X, playerpos.Y, playerpos.Z, 0.0f, 0.0f, 0.0f, 500f, 0);
                            Wait(50);
                        }
                        if (func_213(playerpos) == 1)
                        {
                            while (Main.PlayerVehicle == null)
                            {
                                if (File.Exists("scripts\\CruelMastersOnlineOfflineAssets\\Vehicles\\CurrentVehicle.xml"))
                                {
                                    Main.PlayerVehicle = MPVehicleLoadout.GET_VEHICLE_LOADOUT("scripts\\CruelMastersOnlineOfflineAssets\\Vehicles\\CurrentVehicle.xml", playerpos, Game.Player.Character.Heading);
                                }
                                else
                                {
                                    Notification.Show("You dont own a personal vehicle.");
                                    break;
                                }
                                Wait(0);
                            }
                        }
                        else
                        {
                            Notification.Show("Personal Vehicle Couldn't Spawn.");
                        }
                        //Function.Call(Hash.SET_VEHICLE_ON_GROUND_PROPERLY, Main.PlayerVehicle, 0.0f);
                        if (Main.PlayerVehicle != null)
                        {
                            while (Main.PlayerVehicle.AttachedBlip == null)
                            {
                                Main.PlayerVehicle.AddBlip();
                                Wait(0);
                            }
                            Main.PlayerVehicle.AttachedBlip.Sprite = BlipSprite.PersonalVehicleCar;
                            if (Main.PlayerVehicle.Model.IsBike || Main.PlayerVehicle.Model.IsAmphibiousQuadBike || Main.PlayerVehicle.Model.IsQuadBike)
                            {
                                Main.PlayerVehicle.AttachedBlip.Sprite = BlipSprite.PersonalVehicleBike;
                            }
                            Main.PlayerVehicle.AttachedBlip.Color = BlipColor.White;
                            Main.PlayerVehicle.AttachedBlip.Name = "Personal Vehicle";
                        }
                        LOAD_SCENES.NEW_LOAD_SCENE_STOP();
                    }
                    else
                    {
                        Notification.Show("You already have your current vehicle active.");
                    }
                };

                VehiclesMenu.Add(RequestPVItem);

                NativeItem ReturnPVItem = new NativeItem("Return Personal Vehicle to Storage", "Return your Personal Vehicle to storage.");

                ReturnPVItem.Activated += (sender, e) =>
                {
                    if (Main.PlayerVehicle != null)
                    {
                        if (Game.Player.Character.CurrentVehicle == Main.PlayerVehicle)
                        {
                            Game.Player.Character.Task.LeaveVehicle(LeaveVehicleFlags.LeaveDoorOpen);
                            while (Game.Player.Character.CurrentVehicle == Main.PlayerVehicle)
                            {
                                Wait(0);
                            }
                        }
                        int alpha = 255;
                        while (alpha > 0)
                        {
                            Function.Call(Hash.SET_ENTITY_ALPHA, Main.PlayerVehicle, alpha, true);
                            alpha -= 15;
                            Wait(0);
                        }
                        Main.PlayerVehicle.Delete();
                        Main.PlayerVehicle = null;
                    }
                    else
                    {
                        Notification.Show("You have no vehicle currently active.");
                    }
                };

                VehiclesMenu.Add(ReturnPVItem);
            }

            NativeMenu ExtraSettingsMenu = new NativeMenu("", "Extra Settings", "");
            MenuPool.Add(ExtraSettingsMenu);
            ExtraSettingsMenu.UseMouse = false;
            ExtraSettingsMenu.CloseOnInvalidClick = false;
            NativeSubmenuItem ExtraSettingsSubbutton = new NativeSubmenuItem(ExtraSettingsMenu, InteractionMenu);
            ExtraSettingsSubbutton.AltTitle = "";
            InteractionMenu.Add(2, ExtraSettingsSubbutton);
            unsafe
            {
                NativeCheckboxItem WindscreenItem = new NativeCheckboxItem("Can Fly Through Windshield", "If you want to have your ped fly through their windshield if they hit another vehicle very Fast & Hard.", Game.Player.Character.CanFlyThroughWindscreen);

                WindscreenItem.CheckboxChanged += (sender, e) =>
                {
                    Game.Player.Character.CanFlyThroughWindscreen = WindscreenItem.Checked;
                };

                ExtraSettingsMenu.Add(WindscreenItem);
            }

            NativeItem KYSItem = new NativeItem("Kill Yourself", "Commit suicide if you want to get out of a situation.", "$500");
            
            KYSItem.Activated += (sender, e) =>
            {
                if (MPCash.PROCESS_TRANSACTION(500))
                {
                    Main.LoadDict("mp_suicide");
                    int randanim = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, 2);
                    switch (randanim)
                    {
                        case 0://pill
                            {
                                Mobile_Phone.CAN_OPEN_PHONE = false;
                                Weapons.Anim_Weapon_Off();
                                int iTimer = Game.GameTime + 3500;
                                InteractionMenu.Visible = !InteractionMenu.Visible;
                                Game.Player.Character.Task.PlayAnimation("mp_suicide", "pill", 8.0f, 8.0f, -1, AnimationFlags.None, -1000.0f);
                                while (Game.GameTime < iTimer)
                                {
                                    Wait(0);
                                }
                                Game.Player.Character.HealthFloat = 0f;
                                Mobile_Phone.CAN_OPEN_PHONE = true;
                            }
                            break;
                        case 1://pistol
                            {
                                Mobile_Phone.CAN_OPEN_PHONE = false;
                                int iTimer = Game.GameTime + 800;
                                InteractionMenu.Visible = !InteractionMenu.Visible;
                                Game.Player.Character.Weapons.Give(WeaponHash.Pistol, 10000, true, true);
                                Game.Player.Character.Weapons.Select(WeaponHash.Pistol);
                                Game.Player.Character.Task.PlayAnimation("mp_suicide", "pistol", 8.0f, 8.0f, -1, AnimationFlags.None, -1000.0f);
                                while (Game.GameTime < iTimer)
                                {
                                    Wait(0);
                                }
                                Function.Call(Hash.SET_PED_SHOOTS_AT_COORD, Game.Player.Character, 0f, 0f, 0f, true);
                                Game.Player.Character.HealthFloat = 0f;
                                Function.Call(Hash.SET_PED_SHOOTS_AT_COORD, Game.Player.Character, 0f, 0f, 0f, false);
                                Mobile_Phone.CAN_OPEN_PHONE = true;
                            }
                            break;
                    }
                }
                else
                {
                    Notification.Show("Transaction Failed: Not Enoguh Money.");
                }
            };

            InteractionMenu.Add(3, KYSItem);
        }

        public void onTick(object sender, EventArgs e)
        {
            if (Main.StorySwitch >= 2)
            {
                if (MenuPool != null && MenuPool.AreAnyVisible)
                {
                    MenuPool.Process();
                }

                Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 244, 1);

                if (!MenuPool.AreAnyVisible)
                {
                    if (ScaleID != 0)
                    {
                        unsafe
                        {
                            int handle = ScaleID;
                            Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                            ScaleID = 0;
                        }
                        Mobile_Phone.CAN_OPEN_PHONE = true;
                    }
                    if (Function.Call<bool>(Hash.IS_DISABLED_CONTROL_JUST_PRESSED, 0, 244) && Cutscenes.HAS_CUTSCENE_FINISHED() && Hud.IsRadarVisible && Hud.IsVisible && !Game.Player.Character.IsDead && !PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
                    {
                        Mobile_Phone.CAN_OPEN_PHONE = false;
                        unsafe
                        {
                            int handle = ScaleID;
                            Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                            ScaleID = 0;
                        }
                        Script.Yield();
                        int Timer = Game.GameTime + 50;
                        while (Game.GameTime < Timer)
                        {
                            Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 244, 1);
                            Wait(0);
                        }
                        ScaleID = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "MP_MENU_GLARE");
                        Timer = Game.GameTime + 50;
                        while (Game.GameTime < Timer)
                        {
                            Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 244, 1);
                            Wait(0);
                        }

                        Wall_Creator.CallFunction(ScaleID, "SET_DATA_SLOT", 0.0f);

                        SETUP_INTERACTION_MENU();
                        InteractionMenu.Visible = !InteractionMenu.Visible;
                    }
                }
                else
                {
                    if (ScaleID != 0)
                    {
                        Function.Call(Hash.DRAW_SCALEFORM_MOVIE, ScaleID, 0.4650f + InteractionMenu.Offset.X, 0.5090f + InteractionMenu.Offset.Y, 1f, 1.1f, 255, 255, 255, 255, 0);

                    }
                }
            }
        }
        
        public void onShutdown(object sender, EventArgs e)
        {
            if (ScaleID != 0)
            {
                unsafe
                {
                    int handle = ScaleID;
                    Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                    ScaleID = 0;
                }
            }
        }

        public static int func_201(Vector3 Param0)//Position - 0xA8A5
        {
            string sVar0;
            
            sVar0 = Function.Call<string>(Hash.GET_NAME_OF_ZONE, Param0.X, Param0.Y, Param0.Z);
            if (((((((((((((((((((((((((((((((((((((((((((((Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "SanAnd" /* GXT: San Andreas */, sVar0) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "Alamo" /* GXT: Alamo Sea */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "ArmyB" /* GXT: Fort Zancudo */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "BhamCa" /* GXT: Banham Canyon */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "Baytre" /* GXT: Baytree Canyon */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "BradT" /* GXT: Braddock Tunnel */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "BradP" /* GXT: Braddock Pass */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "CANNY" /* GXT: Raton Canyon */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "CCreak" /* GXT: Cassidy Creek */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "ChamH" /* GXT: Chamberlain Hills */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "CHU" /* GXT: Chumash */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "COSI" /* GXT: Countryside */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "CMSW" /* GXT: Chiliad Mountain State Wilderness */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "Cypre" /* GXT: Cypress Flats */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "Desrt" /* GXT: Grand Senora Desert */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "ELGorl" /* GXT: El Gordo Lighthouse */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "Galli" /* GXT: Galileo Park */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "Galfish" /* GXT: Galilee */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "Harmo" /* GXT: Harmony */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "HumLab" /* GXT: Humane Labs and Research */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "Jail" /* GXT: Bolingbroke Penitentiary */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "LAct" /* GXT: Land Act Reservoir */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "LDam" /* GXT: Land Act Dam */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "Lago" /* GXT: Lago Zancudo */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "MTChil" /* GXT: Mount Chiliad */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "MTJose" /* GXT: Mount Josiah */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "MTGordo" /* GXT: Mount Gordo */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "NCHU" /* GXT: North Chumash */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "Oceana" /* GXT: Pacific Ocean */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "Palmpow" /* GXT: Palmer-Taylor Power Station */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "PBluff" /* GXT: Pacific Bluffs */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "Paleto" /* GXT: Paleto Bay */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "PalCov" /* GXT: Paleto Cove */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "PalFor" /* GXT: Paleto Forest */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "PalHigh" /* GXT: Palomino Highlands */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "RTRAK" /* GXT: Redwood Lights Track */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "Rancho" /* GXT: Rancho */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "SANDY" /* GXT: Sandy Shores */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "TongvaH" /* GXT: Tongva Hills */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "TongvaV" /* GXT: Tongva Valley */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "Zenora" /* GXT: Senora Freeway */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "Slab" /* GXT: Stab City */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "WindF" /* GXT: Ron Alternates Wind Farm */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "Zancudo" /* GXT: Zancudo River */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "SanChia" /* GXT: San Chianski Mountain Range */, sVar0)) || Function.Call<bool>(Hash.ARE_STRINGS_EQUAL, "zQ_UAR" /* GXT: Davis Quartz */, sVar0))
            {
                return 1;
            }
            return 0;
        }
        public static int func_213(Vector3 mainpos)
        {
            OutputArgument Var0 = new();
            OutputArgument Var1 = new();
            
            int iVar4 = 1;
            if (func_201(mainpos) == 1)
            {
                iVar4 = 9;
            }
            int iVar3 = Function.Call<int>(Hash.GET_NTH_CLOSEST_VEHICLE_NODE_ID, mainpos.X, mainpos.Y, mainpos.Z, 1, iVar4, 3f, 0f);
            if (Function.Call<bool>(Hash.IS_VEHICLE_NODE_ID_VALID, iVar3))
            {
                Function.Call(Hash.GET_VEHICLE_NODE_POSITION, iVar3, Var0);
                if (Function.Call<bool>(Hash.GET_POSITION_BY_SIDE_OF_ROAD, Var0.GetResult<Vector3>().X, Var0.GetResult<Vector3>().Y, Var0.GetResult<Vector3>().Z, 0, Var1))
                {
                    return 1;
                }
            }

            return 0;
        }
    }
    #endregion
    #region MPClothes

    public class MPCustomOutfits
    {
        public List<OutfitInfo> CustomOutfits = new();
    }

    public class OutfitInfo
    {
        public int BodyType;
        public int BodyTypeVar;

        public int Pants;
        public int PantsVar;

        public int BAP;
        public int BAPVar;

        public int Shoes;
        public int ShoesVar;

        public int Accs;
        public int AccsVar;

        public int US;
        public int USVar;

        public int BA;
        public int BAVar;

        public int Decals;
        public int DecalsVar;

        public int Tops;
        public int TopsVar;

        public int Hats;
        public int HatsVar;

        public int Glasses;
        public int GlassesVar;

        public int EarAccs;
        public int EarAccsVar;

        public int Watches;
        public int WatchesVar;

        public int Bracelets;
        public int BraceletsVar;
        public OutfitInfo()
        {
        }
    }
    
    internal class MPClothesShop : Script
    {
        public static ObjectPool MenuPool = new ObjectPool();
        public static NativeMenu ClothesStore;
        public static NativeMenu OutfitSlotMenu;

        Prop[] clothesdoors;

        Vector3[] WardrobeLoc =
        {
                new Vector3(429.819f, -811.5965f, 29.49115f),//binco 1
                new Vector3(-819.7283f, -1067.114f, 11.32811f),//binco 2
                new Vector3(71.22221f, -1387.537f, 29.37612f),//Discount 1
                new Vector3(1698.792f, 4817.916f, 42.06308f),//Discount 2
                new Vector3(-1100.211f, 2717.28f, 19.10786f),//Discount 3
                new Vector3(1202.092f, 2714.439f, 38.2226f),//Discount 4
                new Vector3(3.696442f, 6505.664f, 31.87785f),//Discount 5
                new Vector3(-703.5948f, -151.1863f, 37.41514f),//Pny 1
                new Vector3(-168.8468f, -299.4049f, 39.73328f),//Pny 2
                new Vector3(-1446.721f, -242.8166f, 49.82283f),//Pny 3
                new Vector3(-1180.754f, -764.0011f, 17.32656f),//Sub 1
                new Vector3(617.3639f, 2775.424f, 42.08814f),//Sub 2
                new Vector3(117.8534f, -233.8787f, 54.55787f),//Sub 3
                new Vector3(-3179.253f, 1034.151f, 20.86321f),//Sub 4
        };
        
        float[] WardrobeHed =
        {
                359.434f,//binco 1
                124.8824f,//binco 2
                179.664f,//Discount 1
                7.316666f,//Discount 2
                132.0794f,//Discount 3
                90.4635f,//Discount 4
                311.7396f,//Discount 5
                165.6825f,//Pny 1
                298.7864f,//Pny 2
                93.27608f,//Pny 3
                123.2028f,//Sub 1
                184.7107f,//Sub 2
                339.4309f,//Sub 3
                336.246f,//Sub 4
        };
        
        public MPClothesShop()
        {
            Tick += onTick;
            Aborted += onShutdown;

            ClothesStore = new NativeMenu("", "SELECT AN OPTION");
            LemonUI.Elements.ScaledTexture backround2 = new LemonUI.Elements.ScaledTexture(ClothesStore.Banner.Position, new SizeF(ClothesStore.Banner.Size.Width, ClothesStore.Banner.Size.Height), "shopui_title_lowendfashion", "shopui_title_lowendfashion");
            ClothesStore.Banner = backround2;
            ClothesStore.UseMouse = false;
            ClothesStore.HeldTime = 100;
            ClothesStore.CloseOnInvalidClick = false;
            MenuPool.Add(ClothesStore);

            OutfitSlotMenu = new NativeMenu("", "Puchase Custom Outfit", "");
            OutfitSlotMenu.Banner = backround2;
            OutfitSlotMenu.UseMouse = false;
            OutfitSlotMenu.HeldTime = 100;
            OutfitSlotMenu.CloseOnInvalidClick = false;
            MenuPool.Add(OutfitSlotMenu);
        }

        public static void SETUP_WARDROBE_MENU()
        {
            OutfitInfo[] outfitinfo =
            {
                //XMLSerializer.DeserializeXML<OutfitInfo>("scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit1.xml"),
                //XMLSerializer.DeserializeXML<OutfitInfo>("scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit2.xml"),
                //XMLSerializer.DeserializeXML<OutfitInfo>("scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit3.xml"),
                //XMLSerializer.DeserializeXML<OutfitInfo>("scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit4.xml"),
                //XMLSerializer.DeserializeXML<OutfitInfo>("scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit5.xml"),
                //XMLSerializer.DeserializeXML<OutfitInfo>("scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit6.xml"),
                //XMLSerializer.DeserializeXML<OutfitInfo>("scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit7.xml"),
                //XMLSerializer.DeserializeXML<OutfitInfo>("scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit8.xml"),
                //XMLSerializer.DeserializeXML<OutfitInfo>("scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit9.xml"),
                //XMLSerializer.DeserializeXML<OutfitInfo>("scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit10.xml"),
            };
            
            
            ClothesStore.Clear();

            LemonUI.Elements.ScaledTexture backround = new LemonUI.Elements.ScaledTexture(ClothesStore.Banner.Position, new SizeF(ClothesStore.Banner.Size.Width, ClothesStore.Banner.Size.Height), "shopui_title_lowendfashion", "shopui_title_lowendfashion");

            //------------------------------------------------ Torso -------------------------------------------------------

            #region Torso
            NativeMenu TorsoMenu = new NativeMenu("", "Body Type", "Browse for a Body Type.");
            MenuPool.Add(TorsoMenu);
            TorsoMenu.UseMouse = false;
            TorsoMenu.CloseOnInvalidClick = false;
            TorsoMenu.Banner = backround;
            NativeSubmenuItem TorsoSubbutton = new NativeSubmenuItem(TorsoMenu, ClothesStore);
            TorsoSubbutton.AltTitle = "";
            ClothesStore.Add(0, TorsoSubbutton);

            TorsoMenu.Opening += (sender, e) =>
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 1.5f, 0.3f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 0f, 0.1f, true);
                Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 35f);
            };

            TorsoMenu.Closing += (sender, e) =>
            {
                SET_CAM_NORMAL();
            };

            NativeListItem<int> TorsoCompItem = new NativeListItem<int>("Component", "Select a Component.");
            TorsoCompItem.Clear();
            int iVar0 = -1;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS, Game.Player.Character, 3))
            {
                TorsoCompItem.Add(iVar0 + 1, iVar0);
                iVar0++;
            }
            TorsoCompItem.GoRight();
            TorsoCompItem.GoLeft();
            TorsoCompItem.Enabled = true;
            TorsoMenu.Add(TorsoCompItem);

            NativeListItem<int> TorsoCompVarItem = new NativeListItem<int>("Variation", "Select a Variation for your current Component.");
            TorsoCompVarItem.Clear();
            iVar0 = 0;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 3, 0))
            {
                TorsoCompVarItem.Add(iVar0, iVar0);
                iVar0++;
            }
            TorsoCompVarItem.GoRight();
            TorsoCompVarItem.GoLeft();
            TorsoCompVarItem.Enabled = true;
            TorsoMenu.Add(TorsoCompVarItem);

            TorsoCompItem.ItemChanged += (sender, e) =>
            {
                TorsoCompVarItem.Clear();
                iVar0 = 0;
                while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 3, TorsoCompItem.SelectedItem))
                {
                    TorsoCompVarItem.Add(iVar0, iVar0);
                    iVar0++;
                }
                TorsoCompVarItem.GoRight();
                TorsoCompVarItem.GoLeft();
                TorsoCompVarItem.Enabled = true;

                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 3, TorsoCompItem.SelectedItem, 0, 2);
            };

            TorsoCompVarItem.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 3, TorsoCompItem.SelectedItem, TorsoCompVarItem.SelectedItem, 2);
            };
            #endregion

            //------------------------------------------------ Legs -------------------------------------------------------

            #region Pants
            NativeMenu PantsMenu = new NativeMenu("", "Pants", "Browse for some Pants.");
            MenuPool.Add(PantsMenu);
            PantsMenu.UseMouse = false;
            PantsMenu.CloseOnInvalidClick = false;
            PantsMenu.Banner = backround;
            NativeSubmenuItem PantsSubbutton = new NativeSubmenuItem(PantsMenu, ClothesStore);
            PantsSubbutton.AltTitle = "";
            ClothesStore.Add(1, PantsSubbutton);

            PantsMenu.Opening += (sender, e) =>
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 1.5f, -0.2f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 0f, -0.4f, true);
                Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 40f);
            };

            PantsMenu.Closing += (sender, e) =>
            {
                SET_CAM_NORMAL();
            };

            NativeListItem<int> PantsCompItem = new NativeListItem<int>("Component", "Select a Component.");
            PantsCompItem.Clear();
            iVar0 = -1;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS, Game.Player.Character, 4))
            {
                PantsCompItem.Add(iVar0 + 1, iVar0);
                iVar0++;
            }
            PantsCompItem.GoRight();
            PantsCompItem.GoLeft();
            PantsCompItem.Enabled = true;
            PantsMenu.Add(PantsCompItem);

            NativeListItem<int> PantsCompVarItem = new NativeListItem<int>("Variation", "Select a Variation for your current Component.");
            PantsCompVarItem.Clear();
            iVar0 = 0;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 4, 0))
            {
                PantsCompVarItem.Add(iVar0, iVar0);
                iVar0++;
            }
            PantsCompVarItem.GoRight();
            PantsCompVarItem.GoLeft();
            PantsCompVarItem.Enabled = true;
            PantsMenu.Add(PantsCompVarItem);

            PantsCompItem.ItemChanged += (sender, e) =>
            {
                PantsCompVarItem.Clear();
                iVar0 = 0;
                while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 4, PantsCompItem.SelectedItem))
                {
                    PantsCompVarItem.Add(iVar0, iVar0);
                    iVar0++;
                }
                PantsCompVarItem.GoRight();
                PantsCompVarItem.GoLeft();
                PantsCompVarItem.Enabled = true;

                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 4, PantsCompItem.SelectedItem, 0, 2);
            };

            PantsCompVarItem.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 4, PantsCompItem.SelectedItem, PantsCompVarItem.SelectedItem, 2);
            };

            #endregion

            //------------------------------------------------ Bags and Parachutes -------------------------------------------------------

            #region BAP
            NativeMenu BAPMenu = new NativeMenu("", "Bags and Parachutes", "Browse for some Bags and Parachutes.");
            MenuPool.Add(BAPMenu);
            BAPMenu.UseMouse = false;
            BAPMenu.CloseOnInvalidClick = false;
            BAPMenu.Banner = backround;
            NativeSubmenuItem BAPSubbutton = new NativeSubmenuItem(BAPMenu, ClothesStore);
            BAPSubbutton.AltTitle = "";
            ClothesStore.Add(2, BAPSubbutton);

            BAPMenu.Opening += (sender, e) =>
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, -0.5f, -0.6f, 0.3f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 0f, 0.3f, true);
                Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 50f);
            };

            BAPMenu.Closing += (sender, e) =>
            {
                SET_CAM_NORMAL();
            };

            NativeListItem<int> BAPCompItem = new NativeListItem<int>("Component", "Select a Component.");
            BAPCompItem.Clear();
            iVar0 = -1;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS, Game.Player.Character, 5))
            {
                BAPCompItem.Add(iVar0 + 1, iVar0);
                iVar0++;
            }
            BAPCompItem.GoRight();
            BAPCompItem.GoLeft();
            BAPCompItem.Enabled = true;
            BAPMenu.Add(BAPCompItem);

            NativeListItem<int> BAPCompVarItem = new NativeListItem<int>("Variation", "Select a Variation for your current Component.");
            BAPCompVarItem.Clear();
            iVar0 = 0;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 5, 0))
            {
                BAPCompVarItem.Add(iVar0, iVar0);
                iVar0++;
            }
            BAPCompVarItem.GoRight();
            BAPCompVarItem.GoLeft();
            BAPCompVarItem.Enabled = true;
            BAPMenu.Add(BAPCompVarItem);

            BAPCompItem.ItemChanged += (sender, e) =>
            {
                BAPCompVarItem.Clear();
                iVar0 = 0;
                while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 5, BAPCompItem.SelectedItem))
                {
                    BAPCompVarItem.Add(iVar0, iVar0);
                    iVar0++;
                }
                BAPCompVarItem.GoRight();
                BAPCompVarItem.GoLeft();
                BAPCompVarItem.Enabled = true;

                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 5, BAPCompItem.SelectedItem, 0, 2);
            };

            BAPCompVarItem.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 5, BAPCompItem.SelectedItem, BAPCompVarItem.SelectedItem, 2);
            };
            #endregion

            //------------------------------------------------ Shoes -------------------------------------------------------

            #region Shoes
            NativeMenu ShoeMenu = new NativeMenu("", "Shoes", "Browse for some Shoes.");
            MenuPool.Add(ShoeMenu);
            ShoeMenu.UseMouse = false;
            ShoeMenu.CloseOnInvalidClick = false;
            ShoeMenu.Banner = backround;
            NativeSubmenuItem ShoeSubbutton = new NativeSubmenuItem(ShoeMenu, ClothesStore);
            ShoeSubbutton.AltTitle = "";
            ClothesStore.Add(3, ShoeSubbutton);

            ShoeMenu.Opening += (sender, e) =>
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 0.2f, 0.9f, -0.8f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 0f, -1.0f, true);
                Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 40f);
            };

            ShoeMenu.Closing += (sender, e) =>
            {
                SET_CAM_NORMAL();
            };

            NativeListItem<int> ShoeCompItem = new NativeListItem<int>("Component", "Select a Component.");
            ShoeCompItem.Clear();
            iVar0 = -1;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS, Game.Player.Character, 6))
            {
                ShoeCompItem.Add(iVar0 + 1, iVar0);
                iVar0++;
            }
            ShoeCompItem.GoRight();
            ShoeCompItem.GoLeft();
            ShoeCompItem.Enabled = true;
            ShoeMenu.Add(ShoeCompItem);

            NativeListItem<int> ShoeCompVarItem = new NativeListItem<int>("Variation", "Select a Variation for your current Component.");
            ShoeCompVarItem.Clear();
            iVar0 = 0;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 6, 0))
            {
                ShoeCompVarItem.Add(iVar0, iVar0);
                iVar0++;
            }
            ShoeCompVarItem.GoRight();
            ShoeCompVarItem.GoLeft();
            ShoeCompVarItem.Enabled = true;
            ShoeMenu.Add(ShoeCompVarItem);

            ShoeCompItem.ItemChanged += (sender, e) =>
            {
                ShoeCompVarItem.Clear();
                iVar0 = 0;
                while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 6, ShoeCompItem.SelectedItem))
                {
                    ShoeCompVarItem.Add(iVar0, iVar0);
                    iVar0++;
                }
                ShoeCompVarItem.GoRight();
                ShoeCompVarItem.GoLeft();
                ShoeCompVarItem.Enabled = true;

                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 6, ShoeCompItem.SelectedItem, 0, 2);
            };

            ShoeCompVarItem.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 6, ShoeCompItem.SelectedItem, ShoeCompVarItem.SelectedItem, 2);
            };
            #endregion

            //------------------------------------------------ Accessories -------------------------------------------------------

            #region Accs
            NativeMenu AccsMenu = new NativeMenu("", "Accessories", "Browse for some Accessories.");
            MenuPool.Add(AccsMenu);
            AccsMenu.UseMouse = false;
            AccsMenu.CloseOnInvalidClick = false;
            AccsMenu.Banner = backround;
            NativeSubmenuItem AccsSubbutton = new NativeSubmenuItem(AccsMenu, ClothesStore);
            AccsSubbutton.AltTitle = "";
            ClothesStore.Add(4, AccsSubbutton);

            AccsMenu.Opening += (sender, e) =>
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 0.0f, 2f, 0.3f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 0f, 0.3f, true);
                Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 35f);
            };

            AccsMenu.Closing += (sender, e) =>
            {
                SET_CAM_NORMAL();
            };

            NativeListItem<int> AccsCompItem = new NativeListItem<int>("Component", "Select a Component.");
            AccsCompItem.Clear();
            iVar0 = -1;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS, Game.Player.Character, 7))
            {
                AccsCompItem.Add(iVar0 + 1, iVar0);
                iVar0++;
            }
            AccsCompItem.GoRight();
            AccsCompItem.GoLeft();
            AccsCompItem.Enabled = true;
            AccsMenu.Add(AccsCompItem);

            NativeListItem<int> AccsCompVarItem = new NativeListItem<int>("Variation", "Select a Variation for your current Component.");
            AccsCompVarItem.Clear();
            iVar0 = 0;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 7, 0))
            {
                AccsCompVarItem.Add(iVar0, iVar0);
                iVar0++;
            }
            AccsCompVarItem.GoRight();
            AccsCompVarItem.GoLeft();
            AccsCompVarItem.Enabled = true;
            AccsMenu.Add(AccsCompVarItem);

            AccsCompItem.ItemChanged += (sender, e) =>
            {
                AccsCompVarItem.Clear();
                iVar0 = 0;
                while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 7, AccsCompItem.SelectedItem))
                {
                    AccsCompVarItem.Add(iVar0, iVar0);
                    iVar0++;
                }
                AccsCompVarItem.GoRight();
                AccsCompVarItem.GoLeft();
                AccsCompVarItem.Enabled = true;

                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 7, AccsCompItem.SelectedItem, 0, 2);
            };

            AccsCompVarItem.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 7, AccsCompItem.SelectedItem, AccsCompVarItem.SelectedItem, 2);
            };
            #endregion

            //------------------------------------------------ Undershirts -------------------------------------------------------

            #region Undershirts
            NativeMenu USMenu = new NativeMenu("", "Undershirts", "Browse for some Undershirts.");
            MenuPool.Add(USMenu);
            USMenu.UseMouse = false;
            USMenu.CloseOnInvalidClick = false;
            USMenu.Banner = backround;
            NativeSubmenuItem USSubbutton = new NativeSubmenuItem(USMenu, ClothesStore);
            USSubbutton.AltTitle = "";
            ClothesStore.Add(5, USSubbutton);

            USMenu.Opening += (sender, e) =>
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 0.0f, 1.5f, 0.3f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 0f, 0.3f, true);
                Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 35f);
            };

            USMenu.Closing += (sender, e) =>
            {
                SET_CAM_NORMAL();
            };

            NativeListItem<int> USCompItem = new NativeListItem<int>("Component", "Select a Component.");
            USCompItem.Clear();
            iVar0 = -1;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS, Game.Player.Character, 8))
            {
                USCompItem.Add(iVar0 + 1, iVar0);
                iVar0++;
            }
            USCompItem.GoRight();
            USCompItem.GoLeft();
            USCompItem.Enabled = true;
            USMenu.Add(USCompItem);

            NativeListItem<int> USCompVarItem = new NativeListItem<int>("Variation", "Select a Variation for your current Component.");
            USCompVarItem.Clear();
            iVar0 = 0;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 8, 0))
            {
                USCompVarItem.Add(iVar0, iVar0);
                iVar0++;
            }
            USCompVarItem.GoRight();
            USCompVarItem.GoLeft();
            USCompVarItem.Enabled = true;
            USMenu.Add(USCompVarItem);

            USCompItem.ItemChanged += (sender, e) =>
            {
                USCompVarItem.Clear();
                iVar0 = 0;
                while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 8, USCompItem.SelectedItem))
                {
                    USCompVarItem.Add(iVar0, iVar0);
                    iVar0++;
                }
                USCompVarItem.GoRight();
                USCompVarItem.GoLeft();
                USCompVarItem.Enabled = true;

                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 8, USCompItem.SelectedItem, 0, 2);
            };

            USCompVarItem.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 8, USCompItem.SelectedItem, USCompVarItem.SelectedItem, 2);
            };
            #endregion

            //------------------------------------------------ Body Armors -------------------------------------------------------

            #region Body Armors
            NativeMenu BAMenu = new NativeMenu("", "Body Armors", "Browse for some Body Armors.");
            MenuPool.Add(BAMenu);
            BAMenu.UseMouse = false;
            BAMenu.CloseOnInvalidClick = false;
            BAMenu.Banner = backround;
            NativeSubmenuItem BASubbutton = new NativeSubmenuItem(BAMenu, ClothesStore);
            BASubbutton.AltTitle = "";
            ClothesStore.Add(6, BASubbutton);

            BAMenu.Opening += (sender, e) =>
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 0.0f, 1.5f, 0.3f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 0f, 0.3f, true);
                Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 35f);
            };

            BAMenu.Closing += (sender, e) =>
            {
                SET_CAM_NORMAL();
            };

            NativeListItem<int> BACompItem = new NativeListItem<int>("Component", "Select a Component.");
            BACompItem.Clear();
            iVar0 = -1;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS, Game.Player.Character, 9))
            {
                BACompItem.Add(iVar0 + 1, iVar0);
                iVar0++;
            }
            BACompItem.GoRight();
            BACompItem.GoLeft();
            BACompItem.Enabled = true;
            BAMenu.Add(BACompItem);

            NativeListItem<int> BACompVarItem = new NativeListItem<int>("Variation", "Select a Variation for your current Component.");
            BACompVarItem.Clear();
            iVar0 = 0;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 9, 0))
            {
                BACompVarItem.Add(iVar0, iVar0);
                iVar0++;
            }
            BACompVarItem.GoRight();
            BACompVarItem.GoLeft();
            BACompVarItem.Enabled = true;
            BAMenu.Add(BACompVarItem);
            
            BACompItem.ItemChanged += (sender, e) =>
            {
                BACompVarItem.Clear();
                iVar0 = 0;
                while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 9, BACompItem.SelectedItem))
                {
                    BACompVarItem.Add(iVar0, iVar0);
                    iVar0++;
                }
                BACompVarItem.GoRight();
                BACompVarItem.GoLeft();
                BACompVarItem.Enabled = true;

                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 9, BACompItem.SelectedItem, 0, 2);
            };

            BACompVarItem.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 9, BACompItem.SelectedItem, BACompVarItem.SelectedItem, 2);
            };
            #endregion

            //------------------------------------------------ Decals -------------------------------------------------------

            #region Decal
            NativeMenu DecalMenu = new NativeMenu("", "Decals", "Browse for some Decals.");
            MenuPool.Add(DecalMenu);
            DecalMenu.UseMouse = false;
            DecalMenu.CloseOnInvalidClick = false;
            DecalMenu.Banner = backround;
            NativeSubmenuItem DecalSubbutton = new NativeSubmenuItem(DecalMenu, ClothesStore);
            DecalSubbutton.AltTitle = "";
            ClothesStore.Add(7, DecalSubbutton);

            NativeListItem<int> DecalCompItem = new NativeListItem<int>("Component", "Select a Component.");
            DecalCompItem.Clear();
            iVar0 = -1;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS, Game.Player.Character, 10))
            {
                DecalCompItem.Add(iVar0 + 1, iVar0);
                iVar0++;
            }
            DecalCompItem.GoRight();
            DecalCompItem.GoLeft();
            DecalCompItem.Enabled = true;
            DecalMenu.Add(DecalCompItem);

            NativeListItem<int> DecalCompVarItem = new NativeListItem<int>("Variation", "Select a Variation for your current Component.");
            DecalCompVarItem.Clear();
            iVar0 = 0;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 10, 0))
            {
                DecalCompVarItem.Add(iVar0, iVar0);
                iVar0++;
            }
            DecalCompVarItem.GoRight();
            DecalCompVarItem.GoLeft();
            DecalCompVarItem.Enabled = true;
            DecalMenu.Add(DecalCompVarItem);

            DecalCompItem.ItemChanged += (sender, e) =>
            {
                DecalCompVarItem.Clear();
                iVar0 = 0;
                while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 10, DecalCompItem.SelectedItem))
                {
                    DecalCompVarItem.Add(iVar0, iVar0);
                    iVar0++;
                }
                DecalCompVarItem.GoRight();
                DecalCompVarItem.GoLeft();
                DecalCompVarItem.Enabled = true;

                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 10, DecalCompItem.SelectedItem, 0, 2);
            };

            DecalCompVarItem.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 10, DecalCompItem.SelectedItem, DecalCompVarItem.SelectedItem, 2);
            };
            #endregion

            //------------------------------------------------ Tops -------------------------------------------------------
            
            #region Tops
            NativeMenu TopsMenu = new NativeMenu("", "Tops", "Browse for some Tops.");
            MenuPool.Add(TopsMenu);
            TopsMenu.UseMouse = false;
            TopsMenu.CloseOnInvalidClick = false;
            TopsMenu.Banner = backround;
            NativeSubmenuItem TopsSubbutton = new NativeSubmenuItem(TopsMenu, ClothesStore);
            TopsSubbutton.AltTitle = "";
            ClothesStore.Add(8, TopsSubbutton);

            TopsMenu.Opening += (sender, e) =>
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 0.0f, 1.5f, 0.3f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 0f, 0.3f, true);
                Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 35f);
            };

            TopsMenu.Closing += (sender, e) =>
            {
                SET_CAM_NORMAL();
            };

            NativeListItem<int> TopsCompItem = new NativeListItem<int>("Component", "Select a Component.");
            TopsCompItem.Clear();
            iVar0 = -1;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS, Game.Player.Character, 11))
            {
                TopsCompItem.Add(iVar0 + 1, iVar0);
                iVar0++;
            }
            TopsCompItem.GoRight();
            TopsCompItem.GoLeft();
            TopsCompItem.Enabled = true;
            TopsMenu.Add(TopsCompItem);

            NativeListItem<int> TopsCompVarItem = new NativeListItem<int>("Variation", "Select a Variation for your current Component.");
            TopsCompVarItem.Clear();
            iVar0 = 0;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 11, 0))
            {
                TopsCompVarItem.Add(iVar0, iVar0);
                iVar0++;
            }
            TopsCompVarItem.GoRight();
            TopsCompVarItem.GoLeft();
            TopsCompVarItem.Enabled = true;
            TopsMenu.Add(TopsCompVarItem);

            TopsCompItem.ItemChanged += (sender, e) =>
            {
                TopsCompVarItem.Clear();
                iVar0 = 0;
                while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, Game.Player.Character, 11, TopsCompItem.SelectedItem))
                {
                    TopsCompVarItem.Add(iVar0, iVar0);
                    iVar0++;
                }
                TopsCompVarItem.GoRight();
                TopsCompVarItem.GoLeft();
                TopsCompVarItem.Enabled = true;

                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 11, TopsCompItem.SelectedItem, 0, 2);
            };

            TopsCompVarItem.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, Game.Player.Character, 11, TopsCompItem.SelectedItem, TopsCompVarItem.SelectedItem, 2);
            };
            #endregion

            //------------------------------------------------ Hats -------------------------------------------------------

            #region Hats
            NativeMenu HatsMenu = new NativeMenu("", "Hats", "Browse for some Hats.");
            MenuPool.Add(HatsMenu);
            HatsMenu.UseMouse = false;
            HatsMenu.CloseOnInvalidClick = false;
            HatsMenu.Banner = backround;
            NativeSubmenuItem HatsSubbutton = new NativeSubmenuItem(HatsMenu, ClothesStore);
            HatsSubbutton.AltTitle = "";
            ClothesStore.Add(9, HatsSubbutton);

            HatsMenu.Opening += (sender, e) =>
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, -0.2f, 1f, 0.6f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 0f, 0.6f, true);
                Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 35f);
            };

            HatsMenu.Closing += (sender, e) =>
            {
                SET_CAM_NORMAL();
            };

            NativeListItem<int> HatsCompItem = new NativeListItem<int>("Component", "Select a Component.");
            HatsCompItem.Clear();
            iVar0 = -1;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS, Game.Player.Character, 0))
            {
                HatsCompItem.Add(iVar0 + 1, iVar0);
                iVar0++;
            }
            HatsCompItem.GoRight();
            HatsCompItem.GoLeft();
            HatsCompItem.Enabled = true;
            HatsMenu.Add(HatsCompItem);

            NativeListItem<int> HatsCompVarItem = new NativeListItem<int>("Variation", "Select a Variation for your current Component.");
            HatsCompVarItem.Clear();
            iVar0 = 0;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS, Game.Player.Character, 0, 0))
            {
                HatsCompVarItem.Add(iVar0, iVar0);
                iVar0++;
            }
            HatsCompVarItem.GoRight();
            HatsCompVarItem.GoLeft();
            HatsCompVarItem.Enabled = true;
            HatsMenu.Add(HatsCompVarItem);

            HatsCompItem.ItemChanged += (sender, e) =>
            {
                HatsCompVarItem.Clear();
                iVar0 = 0;
                while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS, Game.Player.Character, 0, HatsCompItem.SelectedItem))
                {
                    HatsCompVarItem.Add(iVar0, iVar0);
                    iVar0++;
                }
                HatsCompVarItem.GoRight();
                HatsCompVarItem.GoLeft();
                HatsCompVarItem.Enabled = true;

                Function.Call(Hash.SET_PED_PROP_INDEX, Game.Player.Character, 0, HatsCompItem.SelectedItem, 0, true);

                if (HatsCompItem.SelectedItem == -1)
                {
                    Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 0, 0);
                }
            };

            HatsCompVarItem.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_PROP_INDEX, Game.Player.Character, 0, HatsCompItem.SelectedItem, HatsCompVarItem.SelectedItem, true);
            };
            #endregion

            //------------------------------------------------ Glasses -------------------------------------------------------

            #region Glasses
            NativeMenu GlassesMenu = new NativeMenu("", "Glasses", "Browse for some Glasses.");
            MenuPool.Add(GlassesMenu);
            GlassesMenu.UseMouse = false;
            GlassesMenu.CloseOnInvalidClick = false;
            GlassesMenu.Banner = backround;
            NativeSubmenuItem GlassesSubbutton = new NativeSubmenuItem(GlassesMenu, ClothesStore);
            GlassesSubbutton.AltTitle = "";
            ClothesStore.Add(10, GlassesSubbutton);

            GlassesMenu.Opening += (sender, e) =>
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 0.2f, 1f, 0.6f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 0f, 0.6f, true);
                Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 35f);
            };

            GlassesMenu.Closing += (sender, e) =>
            {
                SET_CAM_NORMAL();
            };

            NativeListItem<int> GlassesCompItem = new NativeListItem<int>("Component", "Select a Component.");
            GlassesCompItem.Clear();
            iVar0 = -1;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS, Game.Player.Character, 1))
            {
                GlassesCompItem.Add(iVar0 + 1, iVar0);
                iVar0++;
            }
            GlassesCompItem.GoRight();
            GlassesCompItem.GoLeft();
            GlassesCompItem.Enabled = true;
            GlassesMenu.Add(GlassesCompItem);

            NativeListItem<int> GlassesCompVarItem = new NativeListItem<int>("Variation", "Select a Variation for your current Component.");
            GlassesCompVarItem.Clear();
            iVar0 = 0;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS, Game.Player.Character, 1, 0))
            {
                GlassesCompVarItem.Add(iVar0, iVar0);
                iVar0++;
            }
            GlassesCompVarItem.GoRight();
            GlassesCompVarItem.GoLeft();
            GlassesCompVarItem.Enabled = true;
            GlassesMenu.Add(GlassesCompVarItem);

            GlassesCompItem.ItemChanged += (sender, e) =>
            {
                GlassesCompVarItem.Clear();
                iVar0 = 0;
                while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS, Game.Player.Character, 1, GlassesCompItem.SelectedItem))
                {
                    GlassesCompVarItem.Add(iVar0, iVar0);
                    iVar0++;
                }
                GlassesCompVarItem.GoRight();
                GlassesCompVarItem.GoLeft();
                GlassesCompVarItem.Enabled = true;

                Function.Call(Hash.SET_PED_PROP_INDEX, Game.Player.Character, 1, GlassesCompItem.SelectedItem, 1, true);

                if (GlassesCompItem.SelectedItem == -1)
                {
                    Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 1, 0);
                }
            };

            GlassesCompVarItem.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_PROP_INDEX, Game.Player.Character, 1, GlassesCompItem.SelectedItem, GlassesCompVarItem.SelectedItem, true);
            };
            #endregion

            //------------------------------------------------ Ears -------------------------------------------------------

            #region Ear Accs
            NativeMenu EarAccsMenu = new NativeMenu("", "Ear Accessories", "Browse for some Ear Accessories.");
            MenuPool.Add(EarAccsMenu);
            EarAccsMenu.UseMouse = false;
            EarAccsMenu.CloseOnInvalidClick = false;
            EarAccsMenu.Banner = backround;
            NativeSubmenuItem EarAccsSubbutton = new NativeSubmenuItem(EarAccsMenu, ClothesStore);
            EarAccsSubbutton.AltTitle = "";
            ClothesStore.Add(11, EarAccsSubbutton);
            
            EarAccsMenu.Opening += (sender, e) =>
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 0.5f, 0.3f, 0.6f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 0f, 0.6f, true);
                Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 35f);
            };

            EarAccsMenu.Closing += (sender, e) =>
            {
                SET_CAM_NORMAL();
            };

            NativeItem ViewLeftSideItem = new NativeItem("View Left Side", "Switch View of Camera to see a different Point of View.");
            ViewLeftSideItem.Activated += (sender, e) =>
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, -0.5f, 0.3f, 0.6f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 0f, 0.6f, true);
                Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 35f);
            };
            EarAccsMenu.Add(ViewLeftSideItem);
            NativeItem ViewRightSideItem = new NativeItem("View Right Side", "Switch View of Camera to see a different Point of View.");
            ViewRightSideItem.Activated += (sender, e) =>
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 0.5f, 0.3f, 0.6f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 0f, 0.6f, true);
                Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 35f);
            };
            EarAccsMenu.Add(ViewRightSideItem);

            NativeListItem<int> EarAccsCompItem = new NativeListItem<int>("Component", "Select a Component.");
            EarAccsCompItem.Clear();
            iVar0 = -1;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS, Game.Player.Character, 2))
            {
                EarAccsCompItem.Add(iVar0 + 1, iVar0);
                iVar0++;
            }
            EarAccsCompItem.GoRight();
            EarAccsCompItem.GoLeft();
            EarAccsCompItem.Enabled = true;
            EarAccsMenu.Add(EarAccsCompItem);

            NativeListItem<int> EarAccsCompVarItem = new NativeListItem<int>("Variation", "Select a Variation for your current Component.");
            EarAccsCompVarItem.Clear();
            iVar0 = 0;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS, Game.Player.Character, 2, 0))
            {
                EarAccsCompVarItem.Add(iVar0, iVar0);
                iVar0++;
            }
            EarAccsCompVarItem.GoRight();
            EarAccsCompVarItem.GoLeft();
            EarAccsCompVarItem.Enabled = true;
            EarAccsMenu.Add(EarAccsCompVarItem);

            EarAccsCompItem.ItemChanged += (sender, e) =>
            {
                EarAccsCompVarItem.Clear();
                iVar0 = 0;
                while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS, Game.Player.Character, 2, EarAccsCompItem.SelectedItem))
                {
                    EarAccsCompVarItem.Add(iVar0, iVar0);
                    iVar0++;
                }
                EarAccsCompVarItem.GoRight();
                EarAccsCompVarItem.GoLeft();
                EarAccsCompVarItem.Enabled = true;

                Function.Call(Hash.SET_PED_PROP_INDEX, Game.Player.Character, 2, EarAccsCompItem.SelectedItem, 1, true);

                if (EarAccsCompItem.SelectedItem == -1)
                {
                    Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 2, 0);
                }
            };

            EarAccsCompVarItem.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_PROP_INDEX, Game.Player.Character, 2, EarAccsCompItem.SelectedItem, EarAccsCompVarItem.SelectedItem, true);
            };
            #endregion

            //------------------------------------------------ Watches -------------------------------------------------------

            #region Watches
            NativeMenu WatchesMenu = new NativeMenu("", "Watches", "Browse for some Watches.");
            MenuPool.Add(WatchesMenu);
            WatchesMenu.UseMouse = false;
            WatchesMenu.CloseOnInvalidClick = false;
            WatchesMenu.Banner = backround;
            NativeSubmenuItem WatchesSubbutton = new NativeSubmenuItem(WatchesMenu, ClothesStore);
            WatchesSubbutton.AltTitle = "";
            ClothesStore.Add(12, WatchesSubbutton);

            WatchesMenu.Opening += (sender, e) =>
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, -0.7f, 0.2f, -0.0500f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 0f, -0.0500f, true);
                Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 45f);
            };

            WatchesMenu.Closing += (sender, e) =>
            {
                SET_CAM_NORMAL();
            };

            NativeListItem<int> WatchesCompItem = new NativeListItem<int>("Component", "Select a Component.");
            WatchesCompItem.Clear();
            iVar0 = -1;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS, Game.Player.Character, 6))
            {
                WatchesCompItem.Add(iVar0 + 1, iVar0);
                iVar0++;
            }
            WatchesCompItem.GoRight();
            WatchesCompItem.GoLeft();
            WatchesCompItem.Enabled = true;
            WatchesMenu.Add(WatchesCompItem);

            NativeListItem<int> WatchesCompVarItem = new NativeListItem<int>("Variation", "Select a Variation for your current Component.");
            WatchesCompVarItem.Clear();
            iVar0 = 0;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS, Game.Player.Character, 6, 0))
            {
                WatchesCompVarItem.Add(iVar0, iVar0);
                iVar0++;
            }
            WatchesCompVarItem.GoRight();
            WatchesCompVarItem.GoLeft();
            WatchesCompVarItem.Enabled = true;
            WatchesMenu.Add(WatchesCompVarItem);

            WatchesCompItem.ItemChanged += (sender, e) =>
            {
                WatchesCompVarItem.Clear();
                iVar0 = 0;
                while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS, Game.Player.Character, 6, WatchesCompItem.SelectedItem))
                {
                    WatchesCompVarItem.Add(iVar0, iVar0);
                    iVar0++;
                }
                WatchesCompVarItem.GoRight();
                WatchesCompVarItem.GoLeft();
                WatchesCompVarItem.Enabled = true;

                Function.Call(Hash.SET_PED_PROP_INDEX, Game.Player.Character, 6, WatchesCompItem.SelectedItem, 1, true);

                if (WatchesCompItem.SelectedItem == -1)
                {
                    Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 6, 0);
                }
            };

            WatchesCompVarItem.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_PROP_INDEX, Game.Player.Character, 6, WatchesCompItem.SelectedItem, WatchesCompVarItem.SelectedItem, true);
            };
            #endregion

            //------------------------------------------------ Bracelets -------------------------------------------------------
            
            #region Bracelets
            NativeMenu BraceletssMenu = new NativeMenu("", "Bracelets", "Browse for some Bracelets.");
            MenuPool.Add(BraceletssMenu);
            BraceletssMenu.UseMouse = false;
            BraceletssMenu.CloseOnInvalidClick = false;
            BraceletssMenu.Banner = backround;
            NativeSubmenuItem BraceletsSubbutton = new NativeSubmenuItem(BraceletssMenu, ClothesStore);
            BraceletsSubbutton.AltTitle = "";
            ClothesStore.Add(13, BraceletsSubbutton);

            BraceletssMenu.Opening += (sender, e) =>
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 0.7f, 0.2f, -0.0500f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 0f, -0.0500f, true);
                Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 45f);
            };

            BraceletssMenu.Closing += (sender, e) =>
            {
                SET_CAM_NORMAL();
            };

            NativeListItem<int> BraceletsCompItem = new NativeListItem<int>("Component", "Select a Component.");
            BraceletsCompItem.Clear();
            iVar0 = -1;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS, Game.Player.Character, 7))
            {
                BraceletsCompItem.Add(iVar0 + 1, iVar0);
                iVar0++;
            }
            BraceletsCompItem.GoRight();
            BraceletsCompItem.GoLeft();
            BraceletsCompItem.Enabled = true;
            BraceletssMenu.Add(BraceletsCompItem);

            NativeListItem<int> BraceletsCompVarItem = new NativeListItem<int>("Variation", "Select a Variation for your current Component.");
            BraceletsCompVarItem.Clear();
            iVar0 = 0;
            while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS, Game.Player.Character, 7, 0))
            {
                BraceletsCompVarItem.Add(iVar0, iVar0);
                iVar0++;
            }
            BraceletsCompVarItem.GoRight();
            BraceletsCompVarItem.GoLeft();
            BraceletsCompVarItem.Enabled = true;
            BraceletssMenu.Add(BraceletsCompVarItem);

            BraceletsCompItem.ItemChanged += (sender, e) =>
            {
                BraceletsCompVarItem.Clear();
                iVar0 = 0;
                while (iVar0 < Function.Call<int>(Hash.GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS, Game.Player.Character, 7, BraceletsCompItem.SelectedItem))
                {
                    BraceletsCompVarItem.Add(iVar0, iVar0);
                    iVar0++;
                }
                BraceletsCompVarItem.GoRight();
                BraceletsCompVarItem.GoLeft();
                BraceletsCompVarItem.Enabled = true;

                Function.Call(Hash.SET_PED_PROP_INDEX, Game.Player.Character, 7, BraceletsCompItem.SelectedItem, 1, true);

                if (BraceletsCompItem.SelectedItem == -1)
                {
                    Function.Call(Hash.CLEAR_PED_PROP, Game.Player.Character, 7, 0);
                }
            };

            BraceletsCompVarItem.ItemChanged += (sender, e) =>
            {
                Function.Call(Hash.SET_PED_PROP_INDEX, Game.Player.Character, 7, BraceletsCompItem.SelectedItem, BraceletsCompVarItem.SelectedItem, true);
            };
            #endregion

            //------------------------------------------------ Pay For & Save Outfit -------------------------------------------------------

            NativeSubmenuItem PASSubbutton = new NativeSubmenuItem(OutfitSlotMenu, ClothesStore);
            PASSubbutton.AltTitle = "$20000";
            ClothesStore.Add(14, PASSubbutton);

            OutfitSlotMenu.ItemCount = CountVisibility.Always;
            OutfitSlotMenu.Clear();

            for (int i = 1; i < 21; i++)
            {
                SETUP_OUTFIT_SLOT(i);
            }
        }
        
        public static void SETUP_OUTFIT_SLOT(int i)
        {
            NativeItem CustomOutfitSlot1 = new NativeItem("Empty Slot", "Select a Slot.", "");
            if (File.Exists($"scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit{i}.xml"))
            {
                CustomOutfitSlot1.Title = "Overwrite Slot";
            }
            else
            {
                CustomOutfitSlot1.Title = "Empty Slot";
            }
            CustomOutfitSlot1.Activated += (sender, e) =>
            {
                if (MPCash.PROCESS_TRANSACTION(20000))
                {
                    if (File.Exists($"scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit{i}.xml"))
                    {
                        XMLSerializer.DeserializeXML<MPCustomOutfits>($"scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit{i}.xml").CustomOutfits.Clear();

                        MPCustomOutfits newcustomOutfit = new();
                        //BodyType, BodyTypeVar, Pants, PantsVar, BA, BAPVar, Shoes, ShoesVar, Accs, AccsVar, US, USVar, BA, BAVar, Decals, DecalsVar, Tops, TopsVar, Hats, HatsVar, Glasses, GlassesVar, EarAccs, EarAccsVar, Watches, WatchesVar, Bracelets, BraceletsVar
                        OutfitInfo customoutfit = new();
                        customoutfit.BodyType = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 3);
                        customoutfit.BodyTypeVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 3);

                        customoutfit.Pants = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 4);
                        customoutfit.PantsVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 4);

                        customoutfit.BAP = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 5);
                        customoutfit.BAPVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 5);

                        customoutfit.Shoes = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 6);
                        customoutfit.ShoesVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 6);

                        customoutfit.Accs = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 7);
                        customoutfit.AccsVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 7);

                        customoutfit.US = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 8);
                        customoutfit.USVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 8);

                        customoutfit.BA = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 9);
                        customoutfit.BAVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 9);

                        customoutfit.Decals = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 10);
                        customoutfit.DecalsVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 10);

                        customoutfit.Tops = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 11);
                        customoutfit.TopsVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 11);

                        customoutfit.Hats = Function.Call<int>(Hash.GET_PED_PROP_INDEX, Game.Player.Character, 0);
                        customoutfit.HatsVar = Function.Call<int>(Hash.GET_PED_PROP_TEXTURE_INDEX, Game.Player.Character, 0);

                        customoutfit.Glasses = Function.Call<int>(Hash.GET_PED_PROP_INDEX, Game.Player.Character, 1);
                        customoutfit.GlassesVar = Function.Call<int>(Hash.GET_PED_PROP_TEXTURE_INDEX, Game.Player.Character, 1);

                        customoutfit.EarAccs = Function.Call<int>(Hash.GET_PED_PROP_INDEX, Game.Player.Character, 2);
                        customoutfit.EarAccsVar = Function.Call<int>(Hash.GET_PED_PROP_TEXTURE_INDEX, Game.Player.Character, 2);

                        customoutfit.Watches = Function.Call<int>(Hash.GET_PED_PROP_INDEX, Game.Player.Character, 6);
                        customoutfit.WatchesVar = Function.Call<int>(Hash.GET_PED_PROP_TEXTURE_INDEX, Game.Player.Character, 6);

                        customoutfit.Bracelets = Function.Call<int>(Hash.GET_PED_PROP_INDEX, Game.Player.Character, 7);
                        customoutfit.BraceletsVar = Function.Call<int>(Hash.GET_PED_PROP_TEXTURE_INDEX, Game.Player.Character, 7);

                        newcustomOutfit.CustomOutfits.Add(customoutfit);

                        XMLSerializer.SaveToXML<MPCustomOutfits>(newcustomOutfit, $"scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit{i}.xml");

                        PedOutfit.GET_OUTFIT(Game.Player.Character);

                        int iVar0 = 0;
                        while (iVar0 < PedOutfit.OutfitPart.Length)
                        {
                            Main.Config.SetValue<int>("Character", $"Outfit {iVar0}", PedOutfit.OutfitPart[iVar0]);
                            Main.Config.Save();
                            Main.Config.SetValue<int>("Character", $"Outfit Variation {iVar0}", PedOutfit.OutfitPart2[iVar0]);
                            Main.Config.Save();
                            iVar0++;
                        }

                        iVar0 = 0;
                        while (iVar0 < PedOutfit.OutfitPart3.Length)
                        {
                            Main.Config.SetValue<int>("Character", $"Accessory {iVar0}", PedOutfit.OutfitPart3[iVar0]);
                            Main.Config.Save();
                            Main.Config.SetValue<int>("Character", $"Accessory Variation {iVar0}", PedOutfit.OutfitPart4[iVar0]);
                            Main.Config.Save();
                            iVar0++;
                        }
                    }
                    else
                    {
                        MPCustomOutfits newcustomOutfit = new();
                        //BodyType, BodyTypeVar, Pants, PantsVar, BA, BAPVar, Shoes, ShoesVar, Accs, AccsVar, US, USVar, BA, BAVar, Decals, DecalsVar, Tops, TopsVar, Hats, HatsVar, Glasses, GlassesVar, EarAccs, EarAccsVar, Watches, WatchesVar, Bracelets, BraceletsVar
                        OutfitInfo customoutfit = new();
                        customoutfit.BodyType = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 3);
                        customoutfit.BodyTypeVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 3);

                        customoutfit.Pants = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 4);
                        customoutfit.PantsVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 4);

                        customoutfit.BAP = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 5);
                        customoutfit.BAPVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 5);

                        customoutfit.Shoes = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 6);
                        customoutfit.ShoesVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 6);

                        customoutfit.Accs = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 7);
                        customoutfit.AccsVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 7);

                        customoutfit.US = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 8);
                        customoutfit.USVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 8);

                        customoutfit.BA = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 9);
                        customoutfit.BAVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 9);

                        customoutfit.Decals = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 10);
                        customoutfit.DecalsVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 10);

                        customoutfit.Tops = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, Game.Player.Character, 11);
                        customoutfit.TopsVar = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, Game.Player.Character, 11);

                        customoutfit.Hats = Function.Call<int>(Hash.GET_PED_PROP_INDEX, Game.Player.Character, 0);
                        customoutfit.HatsVar = Function.Call<int>(Hash.GET_PED_PROP_TEXTURE_INDEX, Game.Player.Character, 0);

                        customoutfit.Glasses = Function.Call<int>(Hash.GET_PED_PROP_INDEX, Game.Player.Character, 1);
                        customoutfit.GlassesVar = Function.Call<int>(Hash.GET_PED_PROP_TEXTURE_INDEX, Game.Player.Character, 1);

                        customoutfit.EarAccs = Function.Call<int>(Hash.GET_PED_PROP_INDEX, Game.Player.Character, 2);
                        customoutfit.EarAccsVar = Function.Call<int>(Hash.GET_PED_PROP_TEXTURE_INDEX, Game.Player.Character, 2);

                        customoutfit.Watches = Function.Call<int>(Hash.GET_PED_PROP_INDEX, Game.Player.Character, 6);
                        customoutfit.WatchesVar = Function.Call<int>(Hash.GET_PED_PROP_TEXTURE_INDEX, Game.Player.Character, 6);

                        customoutfit.Bracelets = Function.Call<int>(Hash.GET_PED_PROP_INDEX, Game.Player.Character, 7);
                        customoutfit.BraceletsVar = Function.Call<int>(Hash.GET_PED_PROP_TEXTURE_INDEX, Game.Player.Character, 7);

                        newcustomOutfit.CustomOutfits.Add(customoutfit);

                        XMLSerializer.SaveToXML<MPCustomOutfits>(newcustomOutfit, $"scripts\\CruelMastersOnlineOfflineAssets\\Outfits\\CustomOutfit{i}.xml");

                        PedOutfit.GET_OUTFIT(Game.Player.Character);

                        int iVar0 = 0;
                        while (iVar0 < PedOutfit.OutfitPart.Length)
                        {
                            Main.Config.SetValue<int>("Character", $"Outfit {iVar0}", PedOutfit.OutfitPart[iVar0]);
                            Main.Config.Save();
                            Main.Config.SetValue<int>("Character", $"Outfit Variation {iVar0}", PedOutfit.OutfitPart2[iVar0]);
                            Main.Config.Save();
                            iVar0++;
                        }
                        
                        iVar0 = 0;
                        while (iVar0 < PedOutfit.OutfitPart3.Length)
                        {
                            Main.Config.SetValue<int>("Character", $"Accessory {iVar0}", PedOutfit.OutfitPart3[iVar0]);
                            Main.Config.Save();
                            Main.Config.SetValue<int>("Character", $"Accessory Variation {iVar0}", PedOutfit.OutfitPart4[iVar0]);
                            Main.Config.Save();
                            iVar0++;
                        }

                        CustomOutfitSlot1.Title = "Overwrite Slot";
                    }
                }
                else
                {
                    Notification.Show("Transaction Failed: Not Enough Money", true);
                }
            };
            OutfitSlotMenu.Add(i - 1, CustomOutfitSlot1);
        }

        public static void SETUP_OUTFIT_STORE_MENU()
        {
            ClothesStore.Clear();

            
        }
        
        public void onTick(object sender, EventArgs e)
        {
            //Main.FindObjectModel(1f);

            if (MenuPool != null && MenuPool.AreAnyVisible)
            {
                MenuPool.Process();
            }
            
            for (int i = 0; i < WardrobeLoc.Length; i++)
            {
                if (Game.Player.Character.Position.DistanceTo(WardrobeLoc[i]) < 30 && !Main.OnMission)
                {
                    clothesdoors = World.GetAllProps(-1922281023, 1780022985, 868499217, -1148826190);
                    foreach (Prop cdoor in clothesdoors)
                    {
                        if (cdoor != null)
                        {
                            while (cdoor.IsPositionFrozen)
                            {
                                cdoor.IsPositionFrozen = false;
                                Wait(0);
                            }
                        }
                    }
                }
                if (Game.Player.Character.Position.DistanceTo(WardrobeLoc[i]) < 2 && !Main.OnMission)
                {
                    Screen.ShowHelpTextThisFrame("Press ~INPUT_CONTEXT~ to browse outfits.");
                    if (Game.IsControlJustPressed(GTA.Control.Context))
                    {
                        Mobile_Phone.CAN_OPEN_PHONE = false;
                        SETUP_WARDROBE_MENU();

                        Game.Player.Character.Position = new Vector3(WardrobeLoc[i].X, WardrobeLoc[i].Y, WardrobeLoc[i].Z - 1f);
                        Game.Player.Character.Heading = WardrobeHed[i];
                        Cameras.RESET_GAMEPLAY_CAM();
                        
                        Game.Player.CanControlCharacter = false;
                        while (Main.CutsceneCam == null)
                        {
                            Main.CutsceneCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", false);
                            Wait(0);
                        }
                        Main.CutsceneCam.MotionBlurStrength = 1f;

                        Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 4f, 0.3f, true);
                        Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 0f, 0.0f, true);
                        Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 35f);
                        World.RenderingCamera = Main.CutsceneCam;

                        Main.LoadDict("clothingtie");
                        Game.Player.Character.Task.PlayAnimation(Main.LoadDict("clothingtie"), "try_tie_base", 1000.0f, -8.0f, -1, AnimationFlags.Loop, 0.1f);
                        ClothesStore.Visible = !ClothesStore.Visible;
                    }
                    if (!MenuPool.AreAnyVisible)
                    {
                        if (Main.CutsceneCam != null)
                        {
                            Main.GET_MAIN_CHARACTER_WITHOUT_MODEL();
                            Game.Player.CanControlCharacter = true;
                            Main.CutsceneCam.Delete();
                            Main.CutsceneCam = null;
                            World.RenderingCamera = null;
                            Game.Player.Character.Task.PlayAnimation(Main.LoadDict("clothingtie"), "outro", 1000.0f, -8.0f, -1, AnimationFlags.CancelableWithMovement, 0.1f);
                            Mobile_Phone.CAN_OPEN_PHONE = true;
                            MenuPool.HideAll();
                        }
                    }
                }
            }
        }

        public void onShutdown(object sender, EventArgs e)
        {

        }

        public static void SET_CAM_NORMAL()
        {
            Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 4f, 0.3f, true);
            Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, 0f, 0.0f, true);
            Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 35f);
        }
    }

    #endregion
    #region MPWeapons
    public class MPLoadout
    {
        public List<WeaponWithComponents> CurrentLoadout = new();
        
        public static void SAVE_CURRENT_LOADOUT()
        {
            MPLoadout CurrentLoadout = new();
            foreach (WeaponHash weapon in (typeof(WeaponHash)).GetEnumValues())
            {
                if (Game.Player.Character.Weapons.HasWeapon(weapon))
                {
                    WeaponWithComponents CurrentWeapon = new WeaponWithComponents()
                    {
                        Weapon = new(),
                        Components = new(),
                    };

                    
                    CurrentWeapon.Weapon = weapon;
                    foreach (WeaponComponentHash weaponcomp in (typeof(WeaponComponentHash)).GetEnumValues())
                    {
                        if (Game.Player.Character.Weapons[weapon].Components[weaponcomp].Active)
                        {
                            CurrentWeapon.Components.Add(weaponcomp);
                            if (weaponcomp.ToString().Contains("Camo"))
                            {
                                CurrentWeapon.CompTint = Function.Call<int>(Hash.GET_PED_WEAPON_COMPONENT_TINT_INDEX, Game.Player.Character, weapon, weaponcomp);
                            }
                        }
                    }
                    CurrentWeapon.Tint = Function.Call<int>(Hash.GET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weapon);
                    CurrentWeapon.Ammo = Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weapon);

                    CurrentLoadout.CurrentLoadout.Add(CurrentWeapon);
                }
            }
            XMLSerializer.SaveToXML<MPLoadout>(CurrentLoadout, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\CurrentLoadout.xml");
        }

        public static void GET_CURRENT_LOADOUT()
        {
            if (File.Exists("scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\CurrentLoadout.xml"))
            {
                Game.Player.Character.Weapons.RemoveAll();

                MPLoadout playerloadout = XMLSerializer.DeserializeXML<MPLoadout>("scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\CurrentLoadout.xml");

                for (int i = 0; i < playerloadout.CurrentLoadout.Count; i++)
                {
                    Game.Player.Character.Weapons.Give(playerloadout.CurrentLoadout[i].Weapon, playerloadout.CurrentLoadout[i].Ammo, true, true);
                    foreach (WeaponComponentHash weaponcomp in (typeof(WeaponComponentHash)).GetEnumValues())
                    {
                        if (playerloadout.CurrentLoadout[i].Components.Contains(weaponcomp))
                        {
                            for (int ic = 0; ic < playerloadout.CurrentLoadout[i].Components.Count; ic++)
                            {
                                Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, playerloadout.CurrentLoadout[i].Weapon, playerloadout.CurrentLoadout[i].Components[ic]);
                                Function.Call(Hash.SET_PED_WEAPON_COMPONENT_TINT_INDEX, Game.Player.Character, playerloadout.CurrentLoadout[i].Weapon, playerloadout.CurrentLoadout[i].Components[ic], playerloadout.CurrentLoadout[i].CompTint);
                            }
                        }
                    }
                    Function.Call(Hash.SET_PED_WEAPON_TINT_INDEX, Game.Player.Character, playerloadout.CurrentLoadout[i].Weapon, playerloadout.CurrentLoadout[i].Tint);
                }

                Game.Player.Character.Weapons.Select(WeaponHash.Unarmed);
            }
        }
    }
    public class WeaponWithComponents
    {
        public WeaponHash Weapon;
        public List<WeaponComponentHash> Components;
        public int Tint;
        public int CompTint;
        public int Ammo;

        public WeaponWithComponents()
        {
        }
    }

    public class OwnedWeapons
    {
        public static List<WeaponHash> ownedWeapons = new();
        public static List<WeaponComponentHash> ownedWeaponComps = new();
        public static List<int> ownedWeaponTints = new();
        public static List<int> ownedWeaponCompTints = new();

        public static List<OwnedWeapons> OwnedWeapon = new();

        public List<WeaponHash> Weapon;
        public List<WeaponComponentHash> Components;
        public List<int> Tint;
        public List<int> CompTint;
        
        public OwnedWeapons()
        {
        }
    }
    
    public class WeaponInfo
    {
        public WeaponHash weaponHash;
        public int weaponCost;
        public int rankNeeded;
        public List<string> compHashName;
        public List<int> compCost;
        public List<int> compRank;
        public List<string> compLabel;
        public List<string> compDesc;
        public int AmmoPer;
        public int AmmoCost;
        public WeaponInfo(WeaponHash weaponhash, int weaponcost, int rankreq, List<string> comphashname, List<int> compcost, List<int> comprank, List<string> complabel, List<string> compdesc, int ammoPer, int ammoCost)
        {
            weaponHash = weaponhash;
            weaponCost = weaponcost;
            rankNeeded = rankreq;
            compHashName = comphashname;
            compCost = compcost;
            compRank = comprank;
            compLabel = complabel;
            compDesc = compdesc;
            AmmoPer = ammoPer;
            AmmoCost = ammoCost;
        }
    }
    internal class MPWeaponShop : Script
    {
        public static List<Ped> shopowners = new();

        public static ObjectPool MenuPool = new ObjectPool();
        public static NativeMenu GunStore;
        
        Prop[] gundoors = World.GetAllProps(97297972, -8873588);
        public MPWeaponShop()
        {
            Tick += onTick;
            Aborted += onShutdown;

            GunStore = new NativeMenu("", "SELECT AN OPTION");
            LemonUI.Elements.ScaledTexture backround2 = new LemonUI.Elements.ScaledTexture(GunStore.Banner.Position, new SizeF(GunStore.Banner.Size.Width, GunStore.Banner.Size.Height), "shopui_title_gunclub", "shopui_title_gunclub");
            GunStore.Banner = backround2;
            GunStore.UseMouse = false;
            GunStore.CloseOnInvalidClick = false;
            MenuPool.Add(GunStore);
        }
        
        public static void SETUP_GUN_STORE_MENU()
        {
            OwnedWeapons weaponownership = XMLSerializer.DeserializeXML<OwnedWeapons>("scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");
            MPLoadout weaponLoadout = XMLSerializer.DeserializeXML<MPLoadout>("scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\CurrentLoadout.xml");
            
            GunStore.Clear();
            
            LemonUI.Elements.ScaledTexture backround = new LemonUI.Elements.ScaledTexture(GunStore.Banner.Position, new SizeF(GunStore.Banner.Size.Width, GunStore.Banner.Size.Height), "shopui_title_gunclub", "shopui_title_gunclub");

            //------------------------------------------------ Melee -------------------------------------------------------

            NativeMenu MeleeMenu = new NativeMenu("", "Melee Weapons", "Browse for a Melee Weapon.");
            MenuPool.Add(MeleeMenu);
            MeleeMenu.UseMouse = false;
            MeleeMenu.CloseOnInvalidClick = false;
            MeleeMenu.Banner = backround;
            NativeSubmenuItem MeleeSubbutton = new NativeSubmenuItem(MeleeMenu, GunStore);
            MeleeSubbutton.AltTitle = "";
            GunStore.Add(0, MeleeSubbutton);

            //------------------------------------------------ Handguns -------------------------------------------------------

            NativeMenu HandgunMenu = new NativeMenu("", "Handguns", "Browse for a Handgun.");
            MenuPool.Add(HandgunMenu);
            HandgunMenu.UseMouse = false;
            HandgunMenu.CloseOnInvalidClick = false;
            HandgunMenu.Banner = backround;
            NativeSubmenuItem HandgunSubbutton = new NativeSubmenuItem(HandgunMenu, GunStore);
            HandgunSubbutton.AltTitle = "";
            GunStore.Add(1, HandgunSubbutton);

            //------------------------------------------------ Submachine Guns -------------------------------------------------------

            NativeMenu SubMMenu = new NativeMenu("", "Submachine Guns", "Browse for a Submachine Gun.");
            MenuPool.Add(SubMMenu);
            SubMMenu.UseMouse = false;
            SubMMenu.CloseOnInvalidClick = false;
            SubMMenu.Banner = backround;
            NativeSubmenuItem SubMSubbutton = new NativeSubmenuItem(SubMMenu, GunStore);
            SubMSubbutton.AltTitle = "";
            GunStore.Add(2, SubMSubbutton);

            //------------------------------------------------ Shotguns -------------------------------------------------------

            NativeMenu ShotgunMenu = new NativeMenu("", "Shotguns", "Browse for a Shotgun.");
            MenuPool.Add(ShotgunMenu);
            ShotgunMenu.UseMouse = false;
            ShotgunMenu.CloseOnInvalidClick = false;
            ShotgunMenu.Banner = backround;
            NativeSubmenuItem ShotgunSubbutton = new NativeSubmenuItem(ShotgunMenu, GunStore);
            ShotgunSubbutton.AltTitle = "";
            GunStore.Add(3, ShotgunSubbutton);
            
            //------------------------------------------------ Assault Rifles -------------------------------------------------------

            NativeMenu ARMenu = new NativeMenu("", "Assault Rifles", "Browse for a Assault Rifle.");
            MenuPool.Add(ARMenu);
            ARMenu.UseMouse = false;
            ARMenu.CloseOnInvalidClick = false;
            ARMenu.Banner = backround;
            NativeSubmenuItem ARSubbutton = new NativeSubmenuItem(ARMenu, GunStore);
            ARSubbutton.AltTitle = "";
            GunStore.Add(4, ARSubbutton);

            //------------------------------------------------ Light Machine Guns -------------------------------------------------------

            NativeMenu LMGMenu = new NativeMenu("", "Light Machine Guns", "Browse for a Light Machine Gun.");
            MenuPool.Add(LMGMenu);
            LMGMenu.UseMouse = false;
            LMGMenu.CloseOnInvalidClick = false;
            LMGMenu.Banner = backround;
            NativeSubmenuItem LMGSubbutton = new NativeSubmenuItem(LMGMenu, GunStore);
            LMGSubbutton.AltTitle = "";
            GunStore.Add(5, LMGSubbutton);

            //------------------------------------------------ Sniper Rifles -------------------------------------------------------

            NativeMenu SniperMenu = new NativeMenu("", "Sniper Rifles", "Browse for a Sniper Rifle.");
            MenuPool.Add(SniperMenu);
            SniperMenu.UseMouse = false;
            SniperMenu.CloseOnInvalidClick = false;
            SniperMenu.Banner = backround;
            NativeSubmenuItem SniperSubbutton = new NativeSubmenuItem(SniperMenu, GunStore);
            SniperSubbutton.AltTitle = "";
            GunStore.Add(6, SniperSubbutton);

            //------------------------------------------------ Heavy Weapons -------------------------------------------------------

            NativeMenu HeavyMenu = new NativeMenu("", "Heavy Weapons", "Browse for a Heavy Weapon.");
            MenuPool.Add(HeavyMenu);
            HeavyMenu.UseMouse = false;
            HeavyMenu.CloseOnInvalidClick = false;
            HeavyMenu.Banner = backround;
            NativeSubmenuItem HeavySubbutton = new NativeSubmenuItem(HeavyMenu, GunStore);
            HeavySubbutton.AltTitle = "";
            GunStore.Add(7, HeavySubbutton);

            //------------------------------------------------ Throwables -------------------------------------------------------

            NativeMenu ThrowableMenu = new NativeMenu("", "Throwables", "Browse for a Throwable.");
            MenuPool.Add(ThrowableMenu);
            ThrowableMenu.UseMouse = false;
            ThrowableMenu.CloseOnInvalidClick = false;
            ThrowableMenu.Banner = backround;
            NativeSubmenuItem ThrowableSubbutton = new NativeSubmenuItem(ThrowableMenu, GunStore);
            ThrowableSubbutton.AltTitle = "";
            GunStore.Add(8, ThrowableSubbutton);

            //------------------------------------------------ Miscellaneous -------------------------------------------------------

            NativeMenu MisMenu = new NativeMenu("", "Miscellaneous", "Browse for a Miscellaneous Item.");
            MenuPool.Add(MisMenu);
            MisMenu.UseMouse = false;
            MisMenu.CloseOnInvalidClick = false;
            MisMenu.Banner = backround;
            NativeSubmenuItem MisSubbutton = new NativeSubmenuItem(MisMenu, GunStore);
            MisSubbutton.AltTitle = "";
            GunStore.Add(9, MisSubbutton);

            Dictionary<WeaponGroup, List<WeaponInfo>> WeaponInformation = new()//info can be found in script gunclub_shop.c under char* func_189
            {
                [WeaponGroup.Melee] = new()
                {
                    new(WeaponHash.Knife, 400, 1, null, null, null, null, null, 0, 0),
                    new(WeaponHash.Hammer, 500, 1, null, null, null, null, null, 0, 0),
                    //new(WeaponHash.Bottle, 300, 1, null, null, null, null, null, 0, 0),//beach bum update
                    //new(WeaponHash.Dagger, 2000, 1, null, null, null, null, null, 0, 0),
                    new(WeaponHash.Hatchet, 750, 1, null, null, null, null, null, 0, 0),
                    //new(WeaponHash.KnuckleDuster, 7500, 1, new() { "COMPONENT_KNUCKLE_VARMOD_BASE", "COMPONENT_KNUCKLE_VARMOD_PIMP", "COMPONENT_KNUCKLE_VARMOD_BALLAS", "COMPONENT_KNUCKLE_VARMOD_DOLLAR", "COMPONENT_KNUCKLE_VARMOD_DIAMOND", "COMPONENT_KNUCKLE_VARMOD_HATE", "COMPONENT_KNUCKLE_VARMOD_LOVE", "COMPONENT_KNUCKLE_VARMOD_PLAYER", "COMPONENT_KNUCKLE_VARMOD_KING", "COMPONENT_KNUCKLE_VARMOD_VAGOS" }, new() { 0, 12250, 14000, 13750, 13000, 11500, 11750, 12000, 10750, 10000 }, new() { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, new() { "WCT_KNUCK_01", "WCT_KNUCK_02", "WCT_KNUCK_BG", "WCT_KNUCK_DLR", "WCT_KNUCK_DMD", "WCT_KNUCK_HT", "WCT_KNUCK_LV", "WCT_KNUCK_PC", "WCT_KNUCK_SLG", "WCT_KNUCK_VG" }, new() { "WCT_KNUCK_01", "WCT_KNUCK_02", "WCT_KNUCK_BG", "WCT_KNUCK_DLR", "WCT_KNUCK_DMD", "WCT_KNUCK_HT", "WCT_KNUCK_LV", "WCT_KNUCK_PC", "WCT_KNUCK_SLG", "WCT_KNUCK_VG" }, 0, 0),
                    //new(WeaponHash.Machete, 8900, 1, null, null, null, null, null, 0, 0),
                    //new(WeaponHash.Flashlight, 5750, 1, null, null, null, null, null, 0, 0),
                    //new(WeaponHash.SwitchBlade, 1950, 1, new() { "COMPONENT_SWITCHBLADE_VARMOD_BASE", "COMPONENT_SWITCHBLADE_VARMOD_VAR1", "COMPONENT_SWITCHBLADE_VARMOD_VAR2" }, new() { 0, 12000, 8500 }, new() { 1, 1, 1 }, new() { "WCT_SB_BASE", "WCT_SB_VAR1", "WCT_SB_VAR2" }, new() { "WCT_SB_BASE", "WCT_SB_VAR1", "WCT_SB_VAR2" }, 0, 0),
                    //new(WeaponHash.PoolCue, 6250, 1, null, null, null, null, null, 0, 0),
                    //new(WeaponHash.Wrench, 7150, 1, null, null, null, null, null, 0, 0),
                    //new(WeaponHash.BattleAxe, 9500, 1, null, null, null, null, null, 0, 0),
                    new(WeaponHash.Nightstick, 400, 3, null, null, null, null, null, 0, 0),
                },
                [WeaponGroup.Pistol] = new()
                {
                    new(WeaponHash.Pistol, 2500, 1, new() { "COMPONENT_PISTOL_CLIP_01", "COMPONENT_PISTOL_CLIP_02", "COMPONENT_AT_PI_FLSH", "COMPONENT_AT_PI_SUPP_02", "COMPONENT_PISTOL_VARMOD_LUXE" }, new() { 0, 9175, 1675, 12050, 46500 }, new() { 1, 3, 4, 5, 1 }, new() { "WCT_CLIP1", "WCT_CLIP2", "WCT_FLASH", "WCT_SUPP", "WCT_VAR_GOLD" }, new() { "WCD_CLIP1", "WCD_CLIP2", "WCD_FLASH", "WCD_PI_SUPP", "WCD_VAR_P" }, 24, 57),
                    new(WeaponHash.Pistol50, 2500, 1, new() { "COMPONENT_PISTOL50_CLIP_01", "COMPONENT_PISTOL50_CLIP_02", "COMPONENT_AT_PI_FLSH", "COMPONENT_AT_AR_SUPP_02", "COMPONENT_PISTOL50_VARMOD_LUXE" }, new() { 0, 9500, 2000, 12250, 50000 }, new() { 1, 1, 1, 1, 1 }, new() { "WCT_CLIP1", "WCT_CLIP2", "WCT_FLASH", "WCT_SUPP", "WCT_VAR_SIL" }, new() { "WCD_P50_CLIP1", "WCD_P50_CLIP2", "WCD_FLASH", "WCD_PI_SUPP", "WCD_VAR_P50" }, 24, 57),
                    new(WeaponHash.CombatPistol, 3200, 9, new() { "COMPONENT_COMBATPISTOL_CLIP_01", "COMPONENT_COMBATPISTOL_CLIP_02", "COMPONENT_AT_PI_FLSH", "COMPONENT_AT_PI_SUPP", "COMPONENT_COMBATPISTOL_VARMOD_LOWRIDER" }, new() { 0, 9200, 1825, 12100, 36250 }, new() { 1, 10, 11, 12, 1 }, new() { "WCT_CLIP1", "WCT_CLIP2", "WCT_FLASH", "WCT_SUPP", "WCT_VAR_GOLD" }, new() { "WCD_CP_CLIP1", "WCD_CP_CLIP2", "WCD_FLASH", "WCD_PI_SUPP", "WCD_VAR_CBP" }, 24, 57),
                    new(WeaponHash.APPistol, 5000, 33, new() { "COMPONENT_APPISTOL_CLIP_01", "COMPONENT_APPISTOL_CLIP_02", "COMPONENT_AT_PI_FLSH", "COMPONENT_AT_PI_SUPP", "COMPONENT_APPISTOL_VARMOD_LUXE" }, new() { 0, 9400, 1975, 12200, 39500 }, new() { 1, 34, 35, 36, 1 }, new() { "WCT_CLIP1", "WCT_CLIP2", "WCT_FLASH", "WCT_SUPP", "WCT_VAR_METAL" }, new() { "WCD_AP_CLIP1", "WCD_AP_CLIP2", "WCD_FLASH", "WCD_PI_SUPP", "WCD_VAR_AP" }, 16, 85),
                },
                [WeaponGroup.SMG] = new()
                {
                    new(WeaponHash.MicroSMG, 3750, 5, new() { "COMPONENT_MICROSMG_CLIP_01", "COMPONENT_MICROSMG_CLIP_02", "COMPONENT_AT_PI_FLSH", "COMPONENT_AT_SCOPE_MACRO", "COMPONENT_AT_AR_SUPP_02", "COMPONENT_MICROSMG_VARMOD_LUXE" }, new() { 0, 9325, 1900, 10800, 12150, 37750 }, new() { 5, 6, 7, 8, 9, 5 }, new() { "WCT_CLIP1", "WCT_CLIP2", "WCT_FLASH", "WCT_SCOPE_MAC", "WCT_SUPP", "WCT_VAR_GOLD" }, new() { "WCD_CLIP1", "WCD_CLIP2", "WCD_FLASH", "WCD_SCOPE_MAC", "WCD_PI_SUPP", "WCD_VAR_P" }, 32, 60),
                    new(WeaponHash.SMG, 7500, 11, new() { "COMPONENT_SMG_CLIP_01", "COMPONENT_SMG_CLIP_02", "COMPONENT_SMG_CLIP_03", "COMPONENT_AT_AR_FLSH", "COMPONENT_AT_SCOPE_MACRO_02", "COMPONENT_AT_PI_SUPP", "COMPONENT_SMG_VARMOD_LUXE" }, new() { 0, 9475, 23600, 2050, 10825, 12250, 48250 }, new() { 11, 12, 13, 13, 14, 15, 11 }, new() { "WCT_CLIP1", "WCT_CLIP2", "WCT_CLIP_DRM", "WCT_FLASH", "WCT_SCOPE_MAC", "WCT_SUPP", "WCT_VAR_GOLD" }, new() { "WCD_CLIP1", "WCD_CLIP2", "WCD_CLIP3", "WCD_FLASH", "WCD_SCOPE_MAC", "WCD_PI_SUPP", "WCD_VAR_P" }, 60, 113),
                    new(WeaponHash.AssaultSMG, 12550, 29, new() { "COMPONENT_ASSAULTSMG_CLIP_01", "COMPONENT_ASSAULTSMG_CLIP_02", "COMPONENT_AT_AR_FLSH", "COMPONENT_AT_AR_SUPP_02", "COMPONENT_AT_SCOPE_MACRO", "COMPONENT_ASSAULTSMG_VARMOD_LOWRIDER" }, new() { 0, 9700, 2275, 12400, 10875, 44000 }, new() { 29, 30, 31, 32, 33, 29 }, new() { "WCT_CLIP1", "WCT_CLIP2", "WCT_FLASH", "WCT_SUPP", "WCT_SCOPE_MAC", "WCT_VAR_GOLD" }, new() { "WCD_CLIP1", "WCD_CLIP2", "WCD_FLASH", "WCD_PI_SUPP", "WCD_SCOPE_MAC", "WCD_VAR_P" }, 60, 113),
                },
                [WeaponGroup.Shotgun] = new()
                {
                    new(WeaponHash.SawnOffShotgun, 2500, 1, new() { "COMPONENT_SAWNOFFSHOTGUN_VARMOD_LUXE" }, new() { 34250 }, new() { 1 }, new() { "WCT_VAR_METAL" }, new() { "WCD_VAR_P" }, 16, 24),
                    new(WeaponHash.PumpShotgun, 3500, 17, new() { "COMPONENT_AT_AR_FLSH", "COMPONENT_AT_SR_SUPP", "COMPONENT_PUMPSHOTGUN_VARMOD_LOWRIDER" }, new() { 1750, 12350, 42250 }, new() { 18, 19, 11 }, new() { "WCT_FLASH", "WCT_SUPP", "WCT_VAR_GOLD" }, new() { "WCD_FLASH", "WCD_AR_SUPP", "WCD_VAR_P" }, 16, 24),
                    new(WeaponHash.AssaultShotgun, 10000, 37, new() { "COMPONENT_ASSAULTSHOTGUN_CLIP_01", "COMPONENT_ASSAULTSHOTGUN_CLIP_02", "COMPONENT_AT_AR_AFGRIP", "COMPONENT_AT_AR_FLSH", "COMPONENT_AT_AR_SUPP" }, new() { 0, 9625, 4275, 2200, 12350 }, new() { 37, 38, 39, 40, 41 }, new() { "WCT_CLIP1", "WCT_CLIP2", "WCT_GRIP", "WCT_FLASH", "WCT_SUPP" }, new() { "WCD_CLIP1", "WCD_CLIP2", "WCD_GRIP", "WCD_FLASH", "WCD_AR_SUPP" }, 16, 24),
                    new(WeaponHash.BullpupShotgun, 8000, 1, new() { "COMPONENT_AT_AR_AFGRIP", "COMPONENT_AT_AR_FLSH", "COMPONENT_AT_AR_SUPP_02" }, new() { 4100, 2300, 12450 }, new() { 2, 3, 4 }, new() { "WCT_GRIP", "WCT_FLASH", "WCT_SUPP" }, new() { "WCD_GRIP", "WCD_FLASH", "WCD_AR_SUPP" }, 16, 24),
                },
                [WeaponGroup.AssaultRifle] = new()
                {
                    new(WeaponHash.AssaultRifle, 8550, 24, new() { "COMPONENT_ASSAULTRIFLE_CLIP_01", "COMPONENT_ASSAULTRIFLE_CLIP_02", "COMPONENT_ASSAULTRIFLE_CLIP_03", "COMPONENT_AT_AR_AFGRIP", "COMPONENT_AT_AR_FLSH", "COMPONENT_AT_SCOPE_MACRO", "COMPONENT_AT_AR_SUPP_02", "COMPONENT_ASSAULTRIFLE_VARMOD_LUXE" }, new() { 0, 9550, 24250, 4200, 2125, 10850, 12300, 36000 }, new() { 24, 25, 26, 26, 27, 28, 29, 24 }, new() { "WCT_CLIP1", "WCT_CLIP2", "WCT_CLIP_DRM", "WCT_GRIP", "WCT_FLASH", "WCT_SCOPE_MAC", "WCT_SUPP", "WCT_VAR_GOLD" }, new() { "WCD_CLIP1", "WCD_CLIP2", "WCD_CLIP3", "WCD_GRIP", "WCD_FLASH", "WCD_SCOPE_MAC", "WCD_AR_SUPP", "WCD_VAR_P" }, 60, 108),
                    new(WeaponHash.CarbineRifle, 13000, 42, new() { "COMPONENT_CARBINERIFLE_CLIP_01", "COMPONENT_CARBINERIFLE_CLIP_02", "COMPONENT_CARBINERIFLE_CLIP_03", "COMPONENT_AT_AR_AFGRIP", "COMPONENT_AT_AR_FLSH", "COMPONENT_AT_SCOPE_MEDIUM", "COMPONENT_AT_AR_SUPP", "COMPONENT_CARBINERIFLE_VARMOD_LUXE" }, new() { 0, 9775, 25550, 4350, 2350, 10900, 12450, 44750 }, new() { 42, 43, 44, 44, 45, 46, 47, 42 }, new() { "WCT_CLIP1", "WCT_CLIP2", "WCT_CLIP_BOX", "WCT_GRIP", "WCT_FLASH", "WCT_SCOPE_MED", "WCT_SUPP", "WCT_VAR_GOLD" }, new() { "WCD_CLIP1", "WCD_CLIP2", "WCD_CLIP3", "WCD_GRIP", "WCD_FLASH", "WCD_SCOPE_MED", "WCD_AR_SUPP", "WCD_VAR_P" }, 60, 108),
                    new(WeaponHash.AdvancedRifle, 14250, 70, new() { "COMPONENT_ADVANCEDRIFLE_CLIP_01", "COMPONENT_ADVANCEDRIFLE_CLIP_02", "COMPONENT_AT_AR_FLSH", "COMPONENT_AT_SCOPE_SMALL", "COMPONENT_AT_AR_SUPP", "COMPONENT_ADVANCEDRIFLE_VARMOD_LUXE" }, new() { 0, 9925, 2425, 10950, 12500, 41250 }, new() { 70, 71, 72, 73, 74, 70 }, new() { "WCT_CLIP1", "WCT_CLIP2", "WCT_FLASH", "WCT_SCOPE_SML", "WCT_SUPP", "WCT_VAR_METAL" }, new() { "WCD_CLIP1", "WCD_CLIP2", "WCD_FLASH", "WCD_SCOPE_SML", "WCD_AR_SUPP", "WCD_VAR_P" }, 60, 108),
                },
                [WeaponGroup.MG] = new()
                {
                    new(WeaponHash.MG, 13500, 50, new() { "COMPONENT_MG_CLIP_01", "COMPONENT_MG_CLIP_02", "COMPONENT_AT_SCOPE_SMALL_02", "COMPONENT_MG_VARMOD_LOWRIDER" }, new() { 0, 9850, 10925, 39000 }, new() { 50, 51, 52, 50 }, new() { "WCT_CLIP1", "WCT_CLIP2", "WCT_SCOPE_SML", "WCT_VAR_GOLD" }, new() { "WCD_CLIP1", "WCD_CLIP2", "WCD_SCOPE_SML", "WCD_VAR_P" }, 108, 150),
                    new(WeaponHash.CombatMG, 14800, 80, new() { "COMPONENT_COMBATMG_CLIP_01", "COMPONENT_COMBATMG_CLIP_02", "COMPONENT_AT_AR_AFGRIP", "COMPONENT_AT_SCOPE_MEDIUM", "COMPONENT_COMBATMG_VARMOD_LOWRIDER" }, new() { 0, 10000, 4425, 10975, 35000 }, new() { 80, 81, 82, 83, 80 }, new() { "WCT_CLIP1", "WCT_CLIP2", "WCT_GRIP", "WCT_SCOPE_SML", "WCT_VAR_ETCHM" }, new() { "WCD_CLIP1", "WCD_CLIP2", "WCD_GRIP", "WCD_SCOPE_SML", "WCD_VAR_P" }, 200, 277),
                },
                [WeaponGroup.Sniper] = new()
                {
                    new(WeaponHash.SniperRifle, 20000, 21, new() { "COMPONENT_AT_AR_SUPP_02", "COMPONENT_AT_SCOPE_MAX", "COMPONENT_SNIPERRIFLE_VARMOD_LUXE" }, new() { 0, 12050, 12500, 32500 }, new() { 21, 22, 23, 21 }, new() { "WCT_SUPP", "WCT_SCOPE_MAX", "WCT_VAR_WOOD" }, new() { "WCD_SR_SUPP", "WCD_SCOPE_MAX", "WCD_VAR_P" }, 20, 145),
                    new(WeaponHash.HeavySniper, 38150, 90, new() { "COMPONENT_AT_SCOPE_LARGE", "COMPONENT_AT_SCOPE_MAX" }, new() { 0, 12500 }, new() { 90, 91 }, new() { "WCT_SCOPE_LRG", "WCT_SCOPE_MAX" }, new() { "WCD_SCOPE_LRG", "WCD_SCOPE_MAX" }, 12, 87),
                },
                [WeaponGroup.Heavy] = new()
                {
                    new(WeaponHash.GrenadeLauncher, 32400, 60, new() { "COMPONENT_AT_AR_AFGRIP", "COMPONENT_AT_AR_FLSH", "COMPONENT_AT_SCOPE_SMALL" }, new() { 4500, 2500, 11000 }, new() { 61, 62, 63 }, new() { "WCT_GRIP", "WCT_FLASH", "WCT_SCOPE_MAC" }, new() { "WCD_GRIP", "WCD_FLASH", "WCD_SCOPE_SML" }, 1, 250),
                    new(WeaponHash.RPG, 26250, 100, null, null, null, null, null, 2, 1000),
                    new(WeaponHash.Minigun, 47000, 120, null, null, null, null, null, 100, 150),
                },
                [WeaponGroup.Thrown] = new()
                {
                    new(WeaponHash.Grenade, 250, 15, null, null, null, null, null, 1, 250),
                    new(WeaponHash.StickyBomb, 600, 19, null, null, null, null, null, 1, 600),
                    new(WeaponHash.BZGas, 150, 13, null, null, null, null, null, 1, 150),
                    new(WeaponHash.Molotov, 200, 31, null, null, null, null, null, 1, 200),
                    new(WeaponHash.Flare, 8000, 50, null, null, null, null, null, 1, 8000),
                    new(WeaponHash.PetrolCan, 100, 21, null, null, null, null, null, 1000, 100),
                },
                [WeaponGroup.Parachute] = new()
                {
                    new(WeaponHash.Parachute, 0, 1, null, null, null, null, null, 1, 0),
                },
            };

            for (int i = 0; i < WeaponInformation[WeaponGroup.Melee].Count; i++)
            {
                //DlcWeaponData weaponData = RETURN_WEAPON_DATA_MP(weapon);
                //if (Main.DEBUG) Notification.Show("DLC Weapon Info Obtained");
                string modShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayNameFromHash(WeaponInformation[WeaponGroup.Melee][i].weaponHash));
                string modShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayDescriptionFromHash(WeaponInformation[WeaponGroup.Melee][i].weaponHash));
                int weaponcost = WeaponInformation[WeaponGroup.Melee][i].weaponCost;
                int weaponrank = WeaponInformation[WeaponGroup.Melee][i].rankNeeded;
                WeaponHash weaponHash = WeaponInformation[WeaponGroup.Melee][i].weaponHash;
                List<string> compHashName = WeaponInformation[WeaponGroup.Melee][i].compHashName;
                List<string> compLabel = WeaponInformation[WeaponGroup.Melee][i].compLabel;
                List<string> compDesc = WeaponInformation[WeaponGroup.Melee][i].compDesc;
                List<int> compCost = WeaponInformation[WeaponGroup.Melee][i].compCost;
                List<int> compRank = WeaponInformation[WeaponGroup.Melee][i].compRank;


                NativeMenu WeaponsMenu = new NativeMenu("", modShopLabel, "");
                MenuPool.Add(WeaponsMenu);
                WeaponsMenu.UseMouse = false;
                WeaponsMenu.CloseOnInvalidClick = false;
                WeaponsMenu.Banner = backround;
                NativeSubmenuItem WeaponsSubbutton = new NativeSubmenuItem(WeaponsMenu, MeleeMenu);
                WeaponsSubbutton.AltTitle = "";
                WeaponsSubbutton.Title = modShopLabel;
                MeleeMenu.Add(WeaponsSubbutton);
                
                NativeItem WeaponsItem = new NativeItem(modShopLabel, modShopDesc, "");
                if (!weaponownership.Weapon.Contains(weaponHash))
                {
                    if (MPRank.PlayerLevel >= weaponrank)
                    {
                        WeaponsItem.AltTitle = $"${weaponcost}";

                        WeaponsItem.Activated += (sender, e) =>
                        {
                            if (MPCash.PROCESS_TRANSACTION(weaponcost))
                            {
                                if (!weaponownership.Weapon.Contains(weaponHash))
                                {
                                    weaponownership.Weapon.Add(weaponHash);
                                }
                                Game.Player.Character.Weapons.Give(weaponHash, 1, false, true);
                                MPLoadout.SAVE_CURRENT_LOADOUT();
                                XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");

                                WeaponsItem.AltTitle = "";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                WeaponsItem.RightBadgeSet = rbadgeset;
                            }
                            else
                            {
                                Notification.Show("Transaction Failed: Not Enough Money", true);
                            }
                        };
                    }
                    else
                    {
                        WeaponsItem.Description = $"This item unlocks at Rank {weaponrank}.";
                        BadgeSet rbadgeset = new BadgeSet();
                        rbadgeset.NormalDictionary = "commonmenu";
                        rbadgeset.NormalTexture = "shop_lock";
                        rbadgeset.HoveredDictionary = "commonmenu";
                        rbadgeset.HoveredTexture = "shop_lock";
                        WeaponsItem.RightBadgeSet = rbadgeset;
                    }
                }
                else
                {
                    BadgeSet rbadgeset = new BadgeSet();
                    rbadgeset.NormalDictionary = "commonmenu";
                    rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                    rbadgeset.HoveredDictionary = "commonmenu";
                    rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                    WeaponsItem.RightBadgeSet = rbadgeset;
                }
                WeaponsMenu.Add(WeaponsItem);

                if (compHashName != null)
                {
                    for (int i2 = 0; i2 < compHashName.Count; i2++)
                    {
                        WeaponComponentHash compShopName = (WeaponComponentHash)Main.joaat(compHashName[i2]);
                        string compShopLabel = "";
                        string compShopDesc = "";
                        int compShopCost = 0;
                        int compShopRank = 0;

                        compShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, compLabel[i2]);
                        compShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, compDesc[i2]);
                        compShopCost = compCost[i2];
                        compShopRank = compRank[i2];

                        NativeItem WeaponsCompItem = new NativeItem(compShopLabel, compShopDesc, $"${compShopCost}");
                        WeaponsCompItem.AltTitle = "";
                        if (!weaponownership.Components.Contains(compShopName))
                        {
                            if (MPRank.PlayerLevel >= compShopRank)
                            {
                                WeaponsCompItem.AltTitle = $"${compShopCost}";

                                WeaponsCompItem.Activated += (sender, e) =>
                                {
                                    if (weaponownership.Weapon.Contains(weaponHash))
                                    {
                                        if (MPCash.PROCESS_TRANSACTION(compShopCost))
                                        {
                                            if (!weaponownership.Components.Contains(compShopName))
                                            {
                                                weaponownership.Components.Add(compShopName);
                                            }
                                            Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, weaponHash, compShopName);
                                            MPLoadout.SAVE_CURRENT_LOADOUT();
                                            XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");
                                            
                                            WeaponsCompItem.AltTitle = "";
                                            BadgeSet rbadgeset = new BadgeSet();
                                            rbadgeset.NormalDictionary = "commonmenu";
                                            rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                            rbadgeset.HoveredDictionary = "commonmenu";
                                            rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                            WeaponsCompItem.RightBadgeSet = rbadgeset;
                                        }
                                        else
                                        {
                                            Notification.Show("Transaction Failed: Not Enough Money", true);
                                        }
                                    }
                                    else
                                    {
                                        Notification.Show("Transaction Failed: Weapon Not Owned", true);
                                    }
                                };
                            }
                            else
                            {
                                WeaponsCompItem.Description = $"This item unlocks at Rank {compShopRank}.";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_lock";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_lock";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;
                            }
                        }
                        else
                        {
                            WeaponsCompItem.AltTitle = "";
                            BadgeSet rbadgeset = new BadgeSet();
                            rbadgeset.NormalDictionary = "commonmenu";
                            rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                            rbadgeset.HoveredDictionary = "commonmenu";
                            rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                            WeaponsCompItem.RightBadgeSet = rbadgeset;
                            
                            WeaponsCompItem.Activated += (sender, e) =>
                            {
                                Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, weaponHash, compShopName);
                                MPLoadout.SAVE_CURRENT_LOADOUT();

                                Notification.Show("Component Equipped", true);
                            };
                        }
                        WeaponsMenu.Add(WeaponsCompItem);
                    }
                }
            }
            
            for (int i = 0; i < WeaponInformation[WeaponGroup.Pistol].Count; i++)
            {
                //DlcWeaponData weaponData = RETURN_WEAPON_DATA_MP(weapon);
                //if (Main.DEBUG) Notification.Show("DLC Weapon Info Obtained");
                string modShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayNameFromHash(WeaponInformation[WeaponGroup.Pistol][i].weaponHash));
                string modShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayDescriptionFromHash(WeaponInformation[WeaponGroup.Pistol][i].weaponHash));
                if (WeaponInformation[WeaponGroup.Pistol][i].weaponHash == WeaponHash.Pistol)
                {
                    modShopDesc = "Standard Pistol.";
                }
                int weaponcost = WeaponInformation[WeaponGroup.Pistol][i].weaponCost;
                int weaponrank = WeaponInformation[WeaponGroup.Pistol][i].rankNeeded;
                WeaponHash weaponHash = WeaponInformation[WeaponGroup.Pistol][i].weaponHash;
                List<string> compHashName = WeaponInformation[WeaponGroup.Pistol][i].compHashName;
                List<string> compLabel = WeaponInformation[WeaponGroup.Pistol][i].compLabel;
                List<string> compDesc = WeaponInformation[WeaponGroup.Pistol][i].compDesc;
                List<int> compCost = WeaponInformation[WeaponGroup.Pistol][i].compCost;
                List<int> compRank = WeaponInformation[WeaponGroup.Pistol][i].compRank;
                int ammoPer = WeaponInformation[WeaponGroup.Pistol][i].AmmoPer;
                int ammoCost = WeaponInformation[WeaponGroup.Pistol][i].AmmoCost;

                
                NativeMenu WeaponsMenu = new NativeMenu("", modShopLabel, "");
                MenuPool.Add(WeaponsMenu);
                WeaponsMenu.UseMouse = false;
                WeaponsMenu.CloseOnInvalidClick = false;
                WeaponsMenu.Banner = backround;
                NativeSubmenuItem WeaponsSubbutton = new NativeSubmenuItem(WeaponsMenu, HandgunMenu);
                WeaponsSubbutton.AltTitle = "";
                WeaponsSubbutton.Title = modShopLabel;
                HandgunMenu.Add(WeaponsSubbutton);
                
                NativeItem WeaponsItem = new NativeItem(modShopLabel, modShopDesc, "");
                if (!weaponownership.Weapon.Contains(weaponHash))
                {
                    if (MPRank.PlayerLevel >= weaponrank)
                    {
                        WeaponsItem.AltTitle = $"${weaponcost}";

                        WeaponsItem.Activated += (sender, e) =>
                        {
                            if (MPCash.PROCESS_TRANSACTION(weaponcost))
                            {
                                if (!weaponownership.Weapon.Contains(weaponHash))
                                {
                                    weaponownership.Weapon.Add(weaponHash);
                                }
                                Game.Player.Character.Weapons.Give(weaponHash, 1, false, true);
                                XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");

                                MPLoadout.SAVE_CURRENT_LOADOUT();

                                WeaponsItem.AltTitle = "";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                WeaponsItem.RightBadgeSet = rbadgeset;
                            }
                            else
                            {
                                Notification.Show("Transaction Failed: Not Enough Money", true);
                            }
                        };
                    }
                    else
                    {
                        WeaponsItem.Description = $"This item unlocks at Rank {weaponrank}.";
                        BadgeSet rbadgeset = new BadgeSet();
                        rbadgeset.NormalDictionary = "commonmenu";
                        rbadgeset.NormalTexture = "shop_lock";
                        rbadgeset.HoveredDictionary = "commonmenu";
                        rbadgeset.HoveredTexture = "shop_lock";
                        WeaponsItem.RightBadgeSet = rbadgeset;
                    }
                }
                else
                {
                    BadgeSet rbadgeset = new BadgeSet();
                    rbadgeset.NormalDictionary = "commonmenu";
                    rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                    rbadgeset.HoveredDictionary = "commonmenu";
                    rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                    WeaponsItem.RightBadgeSet = rbadgeset;
                }
                WeaponsMenu.Add(WeaponsItem);

                if (compHashName != null)
                {
                    for (int i2 = 0; i2 < compHashName.Count; i2++)
                    {
                        WeaponComponentHash compShopName = (WeaponComponentHash)Main.joaat(compHashName[i2]);
                        string compShopLabel = "";
                        string compShopDesc = "";
                        int compShopCost = 0;
                        int compShopRank = 0;

                        compShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, compLabel[i2]);
                        compShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, compDesc[i2]);
                        compShopCost = compCost[i2];
                        compShopRank = compRank[i2];

                        NativeItem WeaponsCompItem = new NativeItem(compShopLabel, compShopDesc, $"${compShopCost}");
                        WeaponsCompItem.AltTitle = "";
                        if (!weaponownership.Components.Contains(compShopName))
                        {
                            if (MPRank.PlayerLevel >= compShopRank)
                            {
                                WeaponsCompItem.AltTitle = $"${compShopCost}";
                            }
                            else
                            {
                                WeaponsCompItem.Description = $"This item unlocks at Rank {compShopRank}.";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_lock";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_lock";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;
                            }
                        }
                        else
                        {
                            WeaponsCompItem.AltTitle = "";
                            BadgeSet rbadgeset = new BadgeSet();

                            if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, weaponHash, compShopName))
                            {
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_tick_icon";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_tick_icon";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                            }
                            else
                            {
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;
                            }
                        }
                        WeaponsCompItem.Activated += (sender, e) =>
                        {
                            if (!weaponownership.Components.Contains(compShopName) && !weaponLoadout.CurrentLoadout[0].Components.Contains(compShopName))
                            {
                                if (MPRank.PlayerLevel >= compShopRank)
                                {
                                    WeaponsCompItem.AltTitle = $"${compShopCost}";

                                    if (weaponownership.Weapon.Contains(weaponHash))
                                    {
                                        if (MPCash.PROCESS_TRANSACTION(compShopCost))
                                        {
                                            if (!weaponownership.Components.Contains(compShopName))
                                            {
                                                weaponownership.Components.Add(compShopName);
                                            }

                                            Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, weaponHash, compShopName);
                                            MPLoadout.SAVE_CURRENT_LOADOUT();
                                            
                                            XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");
                                            
                                            WeaponsCompItem.AltTitle = "";
                                            BadgeSet rbadgeset = new BadgeSet();
                                            rbadgeset.NormalDictionary = "commonmenu";
                                            rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                            rbadgeset.HoveredDictionary = "commonmenu";
                                            rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                            WeaponsCompItem.RightBadgeSet = rbadgeset;
                                        }
                                        else
                                        {
                                            Notification.Show("Transaction Failed: Not Enough Money", true);
                                        }
                                    }
                                    else
                                    {
                                        Notification.Show("Transaction Failed: Weapon Not Owned", true);
                                    }
                                }
                                else
                                {
                                    WeaponsCompItem.Description = $"This item unlocks at Rank {compShopRank}.";
                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_lock";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_lock";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;
                                }
                            }
                            else
                            {
                                if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, weaponHash, compShopName))
                                {
                                    Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, weaponHash, compShopName);
                                    MPLoadout.SAVE_CURRENT_LOADOUT();

                                    Notification.Show("Component Equipped", true);

                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                                }
                                else
                                {
                                    Function.Call(Hash.REMOVE_WEAPON_COMPONENT_FROM_PED, Game.Player.Character, weaponHash, compShopName);
                                    MPLoadout.SAVE_CURRENT_LOADOUT();

                                    Notification.Show("Component Unequipped", true);

                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_tick_icon";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_tick_icon";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                                }
                            }
                        };
                        WeaponsMenu.Add(WeaponsCompItem);
                    }
                }
                
                NativeListItem<int> WeaponsTintItem = new NativeListItem<int>("Tint", "0 - Normal~n~1 - Green~n~2 - Gold~n~3 - Pink~n~4 - Army~n~5 - LSPD~n~6 - Orange~n~7 - Platinum", 0, 1, 2, 3, 4, 5, 6, 7);
                if (Function.Call<int>(Hash.GET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash) >= 0)
                {
                    WeaponsTintItem.SelectedIndex = Function.Call<int>(Hash.GET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash);
                }
                WeaponsTintItem.ItemChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash, WeaponsTintItem.SelectedItem);
                    MPLoadout.SAVE_CURRENT_LOADOUT();
                    
                    Notification.Show("Tint Changed", true);
                };

                if (WeaponsTintItem.Items.Count > 0)
                {
                    WeaponsMenu.Add(WeaponsTintItem);
                }

                NativeItem WeaponsAmmoItem = new NativeItem($"Rounds x {ammoPer}", "", $"${ammoCost}");
                
                unsafe
                {
                    int maxAmmo = 0;
                    if (Function.Call<bool>(Hash.GET_MAX_AMMO, Game.Player.Character, weaponHash, &maxAmmo))
                    {
                        if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < maxAmmo)
                        {
                            WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                            WeaponsAmmoItem.Enabled = true;
                        }
                        else
                        {
                            WeaponsAmmoItem.AltTitle = "FULL";
                            WeaponsAmmoItem.Enabled = false;
                        }
                    }
                }//gets whether the ammo is full or not for alt title.
                
                WeaponsAmmoItem.Activated += (sender, e) =>
                {
                    unsafe
                    {
                        int maxAmmo = 0;
                        if (Function.Call<bool>(Hash.GET_MAX_AMMO, Game.Player.Character, weaponHash, &maxAmmo))
                        {
                            if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < maxAmmo)
                            {
                                WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                                WeaponsAmmoItem.Enabled = true;
                                if (weaponownership.Weapon.Contains(weaponHash))
                                {
                                    if (MPCash.PROCESS_TRANSACTION(ammoCost))
                                    {
                                        Function.Call(Hash.ADD_AMMO_TO_PED, Game.Player.Character, weaponHash, ammoPer);
                                        MPLoadout.SAVE_CURRENT_LOADOUT();
                                    }
                                    else
                                    {
                                        Notification.Show("Transaction Failed: Not Enough Money", true);
                                    }
                                }
                                else
                                {
                                    Notification.Show("Transaction Failed: Weapon Not Owned", true);
                                }
                            }
                            else
                            {
                                WeaponsAmmoItem.AltTitle = "FULL";
                                WeaponsAmmoItem.Enabled = false;
                                Notification.Show("Transaction Failed: Max Ammo", true);
                            }
                        }
                    }
                };
                
                WeaponsMenu.Add(WeaponsAmmoItem);
            }

            for (int i = 0; i < WeaponInformation[WeaponGroup.SMG].Count; i++)
            {
                //DlcWeaponData weaponData = RETURN_WEAPON_DATA_MP(weapon);
                //if (Main.DEBUG) Notification.Show("DLC Weapon Info Obtained");
                string modShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayNameFromHash(WeaponInformation[WeaponGroup.SMG][i].weaponHash));
                string modShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayDescriptionFromHash(WeaponInformation[WeaponGroup.SMG][i].weaponHash));
                int weaponcost = WeaponInformation[WeaponGroup.SMG][i].weaponCost;
                int weaponrank = WeaponInformation[WeaponGroup.SMG][i].rankNeeded;
                WeaponHash weaponHash = WeaponInformation[WeaponGroup.SMG][i].weaponHash;
                List<string> compHashName = WeaponInformation[WeaponGroup.SMG][i].compHashName;
                List<string> compLabel = WeaponInformation[WeaponGroup.SMG][i].compLabel;
                List<string> compDesc = WeaponInformation[WeaponGroup.SMG][i].compDesc;
                List<int> compCost = WeaponInformation[WeaponGroup.SMG][i].compCost;
                List<int> compRank = WeaponInformation[WeaponGroup.SMG][i].compRank;
                int ammoPer = WeaponInformation[WeaponGroup.SMG][i].AmmoPer;
                int ammoCost = WeaponInformation[WeaponGroup.SMG][i].AmmoCost;


                NativeMenu WeaponsMenu = new NativeMenu("", modShopLabel, "");
                MenuPool.Add(WeaponsMenu);
                WeaponsMenu.UseMouse = false;
                WeaponsMenu.CloseOnInvalidClick = false;
                WeaponsMenu.Banner = backround;
                NativeSubmenuItem WeaponsSubbutton = new NativeSubmenuItem(WeaponsMenu, SubMMenu);
                WeaponsSubbutton.AltTitle = "";
                WeaponsSubbutton.Title = modShopLabel;
                SubMMenu.Add(WeaponsSubbutton);

                NativeItem WeaponsItem = new NativeItem(modShopLabel, modShopDesc, "");
                if (!weaponownership.Weapon.Contains(weaponHash))
                {
                    if (MPRank.PlayerLevel >= weaponrank)
                    {
                        WeaponsItem.AltTitle = $"${weaponcost}";

                        WeaponsItem.Activated += (sender, e) =>
                        {
                            if (MPCash.PROCESS_TRANSACTION(weaponcost))
                            {
                                if (!weaponownership.Weapon.Contains(weaponHash))
                                {
                                    weaponownership.Weapon.Add(weaponHash);
                                }
                                Game.Player.Character.Weapons.Give(weaponHash, 1, false, true);
                                XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");

                                MPLoadout.SAVE_CURRENT_LOADOUT();

                                WeaponsItem.AltTitle = "";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                WeaponsItem.RightBadgeSet = rbadgeset;
                            }
                            else
                            {
                                Notification.Show("Transaction Failed: Not Enough Money", true);
                            }
                        };
                    }
                    else
                    {
                        WeaponsItem.Description = $"This item unlocks at Rank {weaponrank}.";
                        BadgeSet rbadgeset = new BadgeSet();
                        rbadgeset.NormalDictionary = "commonmenu";
                        rbadgeset.NormalTexture = "shop_lock";
                        rbadgeset.HoveredDictionary = "commonmenu";
                        rbadgeset.HoveredTexture = "shop_lock";
                        WeaponsItem.RightBadgeSet = rbadgeset;
                    }
                }
                else
                {
                    BadgeSet rbadgeset = new BadgeSet();
                    rbadgeset.NormalDictionary = "commonmenu";
                    rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                    rbadgeset.HoveredDictionary = "commonmenu";
                    rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                    WeaponsItem.RightBadgeSet = rbadgeset;
                }
                WeaponsMenu.Add(WeaponsItem);
                
                if (compHashName != null)
                {
                    for (int i2 = 0; i2 < compHashName.Count; i2++)
                    {
                        WeaponComponentHash compShopName = (WeaponComponentHash)Main.joaat(compHashName[i2]);
                        string compShopLabel = "";
                        string compShopDesc = "";
                        int compShopCost = 0;
                        int compShopRank = 0;

                        compShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, compLabel[i2]);
                        compShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, compDesc[i2]);
                        compShopCost = compCost[i2];
                        compShopRank = compRank[i2];

                        NativeItem WeaponsCompItem = new NativeItem(compShopLabel, compShopDesc, $"${compShopCost}");
                        WeaponsCompItem.AltTitle = "";
                        if (!weaponownership.Components.Contains(compShopName))
                        {
                            if (MPRank.PlayerLevel >= compShopRank)
                            {
                                WeaponsCompItem.AltTitle = $"${compShopCost}";
                            }
                            else
                            {
                                WeaponsCompItem.Description = $"This item unlocks at Rank {compShopRank}.";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_lock";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_lock";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;
                            }
                        }
                        else
                        {
                            WeaponsCompItem.AltTitle = "";
                            BadgeSet rbadgeset = new BadgeSet();

                            if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, weaponHash, compShopName))
                            {
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_tick_icon";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_tick_icon";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                            }
                            else
                            {
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;
                            }
                        }
                        WeaponsCompItem.Activated += (sender, e) =>
                        {
                            if (!weaponownership.Components.Contains(compShopName) && !weaponLoadout.CurrentLoadout[0].Components.Contains(compShopName))
                            {
                                if (MPRank.PlayerLevel >= compShopRank)
                                {
                                    WeaponsCompItem.AltTitle = $"${compShopCost}";

                                    if (weaponownership.Weapon.Contains(weaponHash))
                                    {
                                        if (MPCash.PROCESS_TRANSACTION(compShopCost))
                                        {
                                            if (!weaponownership.Components.Contains(compShopName))
                                            {
                                                weaponownership.Components.Add(compShopName);
                                            }

                                            Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, weaponHash, compShopName);
                                            MPLoadout.SAVE_CURRENT_LOADOUT();

                                            XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");

                                            WeaponsCompItem.AltTitle = "";
                                            BadgeSet rbadgeset = new BadgeSet();
                                            rbadgeset.NormalDictionary = "commonmenu";
                                            rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                            rbadgeset.HoveredDictionary = "commonmenu";
                                            rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                            WeaponsCompItem.RightBadgeSet = rbadgeset;
                                        }
                                        else
                                        {
                                            Notification.Show("Transaction Failed: Not Enough Money", true);
                                        }
                                    }
                                    else
                                    {
                                        Notification.Show("Transaction Failed: Weapon Not Owned", true);
                                    }
                                }
                                else
                                {
                                    WeaponsCompItem.Description = $"This item unlocks at Rank {compShopRank}.";
                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_lock";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_lock";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;
                                }
                            }
                            else
                            {
                                if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, weaponHash, compShopName))
                                {
                                    Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, weaponHash, compShopName);
                                    MPLoadout.SAVE_CURRENT_LOADOUT();

                                    Notification.Show("Component Equipped", true);

                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                                }
                                else
                                {
                                    Function.Call(Hash.REMOVE_WEAPON_COMPONENT_FROM_PED, Game.Player.Character, weaponHash, compShopName);
                                    MPLoadout.SAVE_CURRENT_LOADOUT();

                                    Notification.Show("Component Unequipped", true);

                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_tick_icon";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_tick_icon";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                                }
                            }
                        };
                        WeaponsMenu.Add(WeaponsCompItem);
                    }
                }

                NativeListItem<int> WeaponsTintItem = new NativeListItem<int>("Tint", "0 - Normal~n~1 - Green~n~2 - Gold~n~3 - Pink~n~4 - Army~n~5 - LSPD~n~6 - Orange~n~7 - Platinum", 0, 1, 2, 3, 4, 5, 6, 7);
                if (Function.Call<int>(Hash.GET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash) >= 0)
                {
                    WeaponsTintItem.SelectedIndex = Function.Call<int>(Hash.GET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash);
                }
                WeaponsTintItem.ItemChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash, WeaponsTintItem.SelectedItem);
                    MPLoadout.SAVE_CURRENT_LOADOUT();

                    Notification.Show("Tint Changed", true);
                };

                if (WeaponsTintItem.Items.Count > 0)
                {
                    WeaponsMenu.Add(WeaponsTintItem);
                }

                NativeItem WeaponsAmmoItem = new NativeItem($"Rounds x {ammoPer}", "", $"${ammoCost}");

                unsafe
                {
                    int maxAmmo = 0;
                    if (Function.Call<bool>(Hash.GET_MAX_AMMO, Game.Player.Character, weaponHash, &maxAmmo))
                    {
                        if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < maxAmmo)
                        {
                            WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                            WeaponsAmmoItem.Enabled = true;
                        }
                        else
                        {
                            WeaponsAmmoItem.AltTitle = "FULL";
                            WeaponsAmmoItem.Enabled = false;
                        }
                    }
                }//gets whether the ammo is full or not for alt title.
                
                WeaponsAmmoItem.Activated += (sender, e) =>
                {
                    unsafe
                    {
                        int maxAmmo = 0;
                        if (Function.Call<bool>(Hash.GET_MAX_AMMO, Game.Player.Character, weaponHash, &maxAmmo))
                        {
                            if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < maxAmmo)
                            {
                                WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                                WeaponsAmmoItem.Enabled = true;
                                if (weaponownership.Weapon.Contains(weaponHash))
                                {
                                    if (MPCash.PROCESS_TRANSACTION(ammoCost))
                                    {
                                        Function.Call(Hash.ADD_AMMO_TO_PED, Game.Player.Character, weaponHash, ammoPer);
                                        MPLoadout.SAVE_CURRENT_LOADOUT();
                                    }
                                    else
                                    {
                                        Notification.Show("Transaction Failed: Not Enough Money", true);
                                    }
                                }
                                else
                                {
                                    Notification.Show("Transaction Failed: Weapon Not Owned", true);
                                }
                            }
                            else
                            {
                                WeaponsAmmoItem.AltTitle = "FULL";
                                WeaponsAmmoItem.Enabled = false;
                                Notification.Show("Transaction Failed: Max Ammo", true);
                            }
                        }
                    }
                };

                WeaponsMenu.Add(WeaponsAmmoItem);
            }

            for (int i = 0; i < WeaponInformation[WeaponGroup.Shotgun].Count; i++)
            {
                //DlcWeaponData weaponData = RETURN_WEAPON_DATA_MP(weapon);
                //if (Main.DEBUG) Notification.Show("DLC Weapon Info Obtained");
                string modShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayNameFromHash(WeaponInformation[WeaponGroup.Shotgun][i].weaponHash));
                string modShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayDescriptionFromHash(WeaponInformation[WeaponGroup.Shotgun][i].weaponHash));
                int weaponcost = WeaponInformation[WeaponGroup.Shotgun][i].weaponCost;
                int weaponrank = WeaponInformation[WeaponGroup.Shotgun][i].rankNeeded;
                WeaponHash weaponHash = WeaponInformation[WeaponGroup.Shotgun][i].weaponHash;
                List<string> compHashName = WeaponInformation[WeaponGroup.Shotgun][i].compHashName;
                List<string> compLabel = WeaponInformation[WeaponGroup.Shotgun][i].compLabel;
                List<string> compDesc = WeaponInformation[WeaponGroup.Shotgun][i].compDesc;
                List<int> compCost = WeaponInformation[WeaponGroup.Shotgun][i].compCost;
                List<int> compRank = WeaponInformation[WeaponGroup.Shotgun][i].compRank;
                int ammoPer = WeaponInformation[WeaponGroup.Shotgun][i].AmmoPer;
                int ammoCost = WeaponInformation[WeaponGroup.Shotgun][i].AmmoCost;


                NativeMenu WeaponsMenu = new NativeMenu("", modShopLabel, "");
                MenuPool.Add(WeaponsMenu);
                WeaponsMenu.UseMouse = false;
                WeaponsMenu.CloseOnInvalidClick = false;
                WeaponsMenu.Banner = backround;
                NativeSubmenuItem WeaponsSubbutton = new NativeSubmenuItem(WeaponsMenu, ShotgunMenu);
                WeaponsSubbutton.AltTitle = "";
                WeaponsSubbutton.Title = modShopLabel;
                ShotgunMenu.Add(WeaponsSubbutton);

                NativeItem WeaponsItem = new NativeItem(modShopLabel, modShopDesc, "");
                if (!weaponownership.Weapon.Contains(weaponHash))
                {
                    if (MPRank.PlayerLevel >= weaponrank)
                    {
                        WeaponsItem.AltTitle = $"${weaponcost}";

                        WeaponsItem.Activated += (sender, e) =>
                        {
                            if (MPCash.PROCESS_TRANSACTION(weaponcost))
                            {
                                if (!weaponownership.Weapon.Contains(weaponHash))
                                {
                                    weaponownership.Weapon.Add(weaponHash);
                                }
                                Game.Player.Character.Weapons.Give(weaponHash, 1, false, true);
                                XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");

                                MPLoadout.SAVE_CURRENT_LOADOUT();

                                WeaponsItem.AltTitle = "";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                WeaponsItem.RightBadgeSet = rbadgeset;
                            }
                            else
                            {
                                Notification.Show("Transaction Failed: Not Enough Money", true);
                            }
                        };
                    }
                    else
                    {
                        WeaponsItem.Description = $"This item unlocks at Rank {weaponrank}.";
                        BadgeSet rbadgeset = new BadgeSet();
                        rbadgeset.NormalDictionary = "commonmenu";
                        rbadgeset.NormalTexture = "shop_lock";
                        rbadgeset.HoveredDictionary = "commonmenu";
                        rbadgeset.HoveredTexture = "shop_lock";
                        WeaponsItem.RightBadgeSet = rbadgeset;
                    }
                }
                else
                {
                    BadgeSet rbadgeset = new BadgeSet();
                    rbadgeset.NormalDictionary = "commonmenu";
                    rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                    rbadgeset.HoveredDictionary = "commonmenu";
                    rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                    WeaponsItem.RightBadgeSet = rbadgeset;
                }
                WeaponsMenu.Add(WeaponsItem);

                if (compHashName != null)
                {
                    for (int i2 = 0; i2 < compHashName.Count; i2++)
                    {
                        WeaponComponentHash compShopName = (WeaponComponentHash)Main.joaat(compHashName[i2]);
                        string compShopLabel = "";
                        string compShopDesc = "";
                        int compShopCost = 0;
                        int compShopRank = 0;

                        compShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, compLabel[i2]);
                        compShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, compDesc[i2]);
                        compShopCost = compCost[i2];
                        compShopRank = compRank[i2];

                        NativeItem WeaponsCompItem = new NativeItem(compShopLabel, compShopDesc, $"${compShopCost}");
                        WeaponsCompItem.AltTitle = "";
                        if (!weaponownership.Components.Contains(compShopName))
                        {
                            if (MPRank.PlayerLevel >= compShopRank)
                            {
                                WeaponsCompItem.AltTitle = $"${compShopCost}";
                            }
                            else
                            {
                                WeaponsCompItem.Description = $"This item unlocks at Rank {compShopRank}.";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_lock";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_lock";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;
                            }
                        }
                        else
                        {
                            WeaponsCompItem.AltTitle = "";
                            BadgeSet rbadgeset = new BadgeSet();

                            if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, weaponHash, compShopName))
                            {
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_tick_icon";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_tick_icon";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                            }
                            else
                            {
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;
                            }
                        }
                        WeaponsCompItem.Activated += (sender, e) =>
                        {
                            if (!weaponownership.Components.Contains(compShopName) && !weaponLoadout.CurrentLoadout[0].Components.Contains(compShopName))
                            {
                                if (MPRank.PlayerLevel >= compShopRank)
                                {
                                    WeaponsCompItem.AltTitle = $"${compShopCost}";

                                    if (weaponownership.Weapon.Contains(weaponHash))
                                    {
                                        if (MPCash.PROCESS_TRANSACTION(compShopCost))
                                        {
                                            if (!weaponownership.Components.Contains(compShopName))
                                            {
                                                weaponownership.Components.Add(compShopName);
                                            }

                                            Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, weaponHash, compShopName);
                                            MPLoadout.SAVE_CURRENT_LOADOUT();

                                            XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");

                                            WeaponsCompItem.AltTitle = "";
                                            BadgeSet rbadgeset = new BadgeSet();
                                            rbadgeset.NormalDictionary = "commonmenu";
                                            rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                            rbadgeset.HoveredDictionary = "commonmenu";
                                            rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                            WeaponsCompItem.RightBadgeSet = rbadgeset;
                                        }
                                        else
                                        {
                                            Notification.Show("Transaction Failed: Not Enough Money", true);
                                        }
                                    }
                                    else
                                    {
                                        Notification.Show("Transaction Failed: Weapon Not Owned", true);
                                    }
                                }
                                else
                                {
                                    WeaponsCompItem.Description = $"This item unlocks at Rank {compShopRank}.";
                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_lock";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_lock";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;
                                }
                            }
                            else
                            {
                                if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, weaponHash, compShopName))
                                {
                                    Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, weaponHash, compShopName);
                                    MPLoadout.SAVE_CURRENT_LOADOUT();

                                    Notification.Show("Component Equipped", true);

                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                                }
                                else
                                {
                                    Function.Call(Hash.REMOVE_WEAPON_COMPONENT_FROM_PED, Game.Player.Character, weaponHash, compShopName);
                                    MPLoadout.SAVE_CURRENT_LOADOUT();

                                    Notification.Show("Component Unequipped", true);

                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_tick_icon";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_tick_icon";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                                }
                            }
                        };
                        WeaponsMenu.Add(WeaponsCompItem);
                    }
                }

                NativeListItem<int> WeaponsTintItem = new NativeListItem<int>("Tint", "0 - Normal~n~1 - Green~n~2 - Gold~n~3 - Pink~n~4 - Army~n~5 - LSPD~n~6 - Orange~n~7 - Platinum", 0, 1, 2, 3, 4, 5, 6, 7);
                if (Function.Call<int>(Hash.GET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash) >= 0)
                {
                    WeaponsTintItem.SelectedIndex = Function.Call<int>(Hash.GET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash);
                }
                WeaponsTintItem.ItemChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash, WeaponsTintItem.SelectedItem);
                    MPLoadout.SAVE_CURRENT_LOADOUT();

                    Notification.Show("Tint Changed", true);
                };

                if (WeaponsTintItem.Items.Count > 0)
                {
                    WeaponsMenu.Add(WeaponsTintItem);
                }

                NativeItem WeaponsAmmoItem = new NativeItem($"Rounds x {ammoPer}", "", $"${ammoCost}");

                unsafe
                {
                    int maxAmmo = 0;
                    if (Function.Call<bool>(Hash.GET_MAX_AMMO, Game.Player.Character, weaponHash, &maxAmmo))
                    {
                        if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < maxAmmo)
                        {
                            WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                            WeaponsAmmoItem.Enabled = true;
                        }
                        else
                        {
                            WeaponsAmmoItem.AltTitle = "FULL";
                            WeaponsAmmoItem.Enabled = false;
                        }
                    }
                }//gets whether the ammo is full or not for alt title.

                WeaponsAmmoItem.Activated += (sender, e) =>
                {
                    unsafe
                    {
                        int maxAmmo = 0;
                        if (Function.Call<bool>(Hash.GET_MAX_AMMO, Game.Player.Character, weaponHash, &maxAmmo))
                        {
                            if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < maxAmmo)
                            {
                                WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                                WeaponsAmmoItem.Enabled = true;
                                if (weaponownership.Weapon.Contains(weaponHash))
                                {
                                    if (MPCash.PROCESS_TRANSACTION(ammoCost))
                                    {
                                        Function.Call(Hash.ADD_AMMO_TO_PED, Game.Player.Character, weaponHash, ammoPer);
                                        MPLoadout.SAVE_CURRENT_LOADOUT();
                                    }
                                    else
                                    {
                                        Notification.Show("Transaction Failed: Not Enough Money", true);
                                    }
                                }
                                else
                                {
                                    Notification.Show("Transaction Failed: Weapon Not Owned", true);
                                }
                            }
                            else
                            {
                                WeaponsAmmoItem.AltTitle = "FULL";
                                WeaponsAmmoItem.Enabled = false;
                                Notification.Show("Transaction Failed: Max Ammo", true);
                            }
                        }
                    }
                };

                WeaponsMenu.Add(WeaponsAmmoItem);
            }

            for (int i = 0; i < WeaponInformation[WeaponGroup.AssaultRifle].Count; i++)
            {
                //DlcWeaponData weaponData = RETURN_WEAPON_DATA_MP(weapon);
                //if (Main.DEBUG) Notification.Show("DLC Weapon Info Obtained");
                string modShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayNameFromHash(WeaponInformation[WeaponGroup.AssaultRifle][i].weaponHash));
                string modShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayDescriptionFromHash(WeaponInformation[WeaponGroup.AssaultRifle][i].weaponHash));
                int weaponcost = WeaponInformation[WeaponGroup.AssaultRifle][i].weaponCost;
                int weaponrank = WeaponInformation[WeaponGroup.AssaultRifle][i].rankNeeded;
                WeaponHash weaponHash = WeaponInformation[WeaponGroup.AssaultRifle][i].weaponHash;
                List<string> compHashName = WeaponInformation[WeaponGroup.AssaultRifle][i].compHashName;
                List<string> compLabel = WeaponInformation[WeaponGroup.AssaultRifle][i].compLabel;
                List<string> compDesc = WeaponInformation[WeaponGroup.AssaultRifle][i].compDesc;
                List<int> compCost = WeaponInformation[WeaponGroup.AssaultRifle][i].compCost;
                List<int> compRank = WeaponInformation[WeaponGroup.AssaultRifle][i].compRank;
                int ammoPer = WeaponInformation[WeaponGroup.AssaultRifle][i].AmmoPer;
                int ammoCost = WeaponInformation[WeaponGroup.AssaultRifle][i].AmmoCost;


                NativeMenu WeaponsMenu = new NativeMenu("", modShopLabel, "");
                MenuPool.Add(WeaponsMenu);
                WeaponsMenu.UseMouse = false;
                WeaponsMenu.CloseOnInvalidClick = false;
                WeaponsMenu.Banner = backround;
                NativeSubmenuItem WeaponsSubbutton = new NativeSubmenuItem(WeaponsMenu, ARMenu);
                WeaponsSubbutton.AltTitle = "";
                WeaponsSubbutton.Title = modShopLabel;
                ARMenu.Add(WeaponsSubbutton);

                NativeItem WeaponsItem = new NativeItem(modShopLabel, modShopDesc, "");
                if (!weaponownership.Weapon.Contains(weaponHash))
                {
                    if (MPRank.PlayerLevel >= weaponrank)
                    {
                        WeaponsItem.AltTitle = $"${weaponcost}";

                        WeaponsItem.Activated += (sender, e) =>
                        {
                            if (MPCash.PROCESS_TRANSACTION(weaponcost))
                            {
                                if (!weaponownership.Weapon.Contains(weaponHash))
                                {
                                    weaponownership.Weapon.Add(weaponHash);
                                }
                                Game.Player.Character.Weapons.Give(weaponHash, 1, false, true);
                                XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");

                                MPLoadout.SAVE_CURRENT_LOADOUT();

                                WeaponsItem.AltTitle = "";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                WeaponsItem.RightBadgeSet = rbadgeset;
                            }
                            else
                            {
                                Notification.Show("Transaction Failed: Not Enough Money", true);
                            }
                        };
                    }
                    else
                    {
                        WeaponsItem.Description = $"This item unlocks at Rank {weaponrank}.";
                        BadgeSet rbadgeset = new BadgeSet();
                        rbadgeset.NormalDictionary = "commonmenu";
                        rbadgeset.NormalTexture = "shop_lock";
                        rbadgeset.HoveredDictionary = "commonmenu";
                        rbadgeset.HoveredTexture = "shop_lock";
                        WeaponsItem.RightBadgeSet = rbadgeset;
                    }
                }
                else
                {
                    BadgeSet rbadgeset = new BadgeSet();
                    rbadgeset.NormalDictionary = "commonmenu";
                    rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                    rbadgeset.HoveredDictionary = "commonmenu";
                    rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                    WeaponsItem.RightBadgeSet = rbadgeset;
                }
                WeaponsMenu.Add(WeaponsItem);

                if (compHashName != null)
                {
                    for (int i2 = 0; i2 < compHashName.Count; i2++)
                    {
                        WeaponComponentHash compShopName = (WeaponComponentHash)Main.joaat(compHashName[i2]);
                        string compShopLabel = "";
                        string compShopDesc = "";
                        int compShopCost = 0;
                        int compShopRank = 0;

                        compShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, compLabel[i2]);
                        compShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, compDesc[i2]);
                        compShopCost = compCost[i2];
                        compShopRank = compRank[i2];

                        NativeItem WeaponsCompItem = new NativeItem(compShopLabel, compShopDesc, $"${compShopCost}");
                        WeaponsCompItem.AltTitle = "";
                        if (!weaponownership.Components.Contains(compShopName))
                        {
                            if (MPRank.PlayerLevel >= compShopRank)
                            {
                                WeaponsCompItem.AltTitle = $"${compShopCost}";
                            }
                            else
                            {
                                WeaponsCompItem.Description = $"This item unlocks at Rank {compShopRank}.";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_lock";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_lock";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;
                            }
                        }
                        else
                        {
                            WeaponsCompItem.AltTitle = "";
                            BadgeSet rbadgeset = new BadgeSet();

                            if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, weaponHash, compShopName))
                            {
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_tick_icon";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_tick_icon";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                            }
                            else
                            {
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;
                            }
                        }
                        WeaponsCompItem.Activated += (sender, e) =>
                        {
                            if (!weaponownership.Components.Contains(compShopName) && !weaponLoadout.CurrentLoadout[0].Components.Contains(compShopName))
                            {
                                if (MPRank.PlayerLevel >= compShopRank)
                                {
                                    WeaponsCompItem.AltTitle = $"${compShopCost}";

                                    if (weaponownership.Weapon.Contains(weaponHash))
                                    {
                                        if (MPCash.PROCESS_TRANSACTION(compShopCost))
                                        {
                                            if (!weaponownership.Components.Contains(compShopName))
                                            {
                                                weaponownership.Components.Add(compShopName);
                                            }

                                            Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, weaponHash, compShopName);
                                            MPLoadout.SAVE_CURRENT_LOADOUT();

                                            XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");

                                            WeaponsCompItem.AltTitle = "";
                                            BadgeSet rbadgeset = new BadgeSet();
                                            rbadgeset.NormalDictionary = "commonmenu";
                                            rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                            rbadgeset.HoveredDictionary = "commonmenu";
                                            rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                            WeaponsCompItem.RightBadgeSet = rbadgeset;
                                        }
                                        else
                                        {
                                            Notification.Show("Transaction Failed: Not Enough Money", true);
                                        }
                                    }
                                    else
                                    {
                                        Notification.Show("Transaction Failed: Weapon Not Owned", true);
                                    }
                                }
                                else
                                {
                                    WeaponsCompItem.Description = $"This item unlocks at Rank {compShopRank}.";
                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_lock";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_lock";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;
                                }
                            }
                            else
                            {
                                if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, weaponHash, compShopName))
                                {
                                    Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, weaponHash, compShopName);
                                    MPLoadout.SAVE_CURRENT_LOADOUT();

                                    Notification.Show("Component Equipped", true);

                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                                }
                                else
                                {
                                    Function.Call(Hash.REMOVE_WEAPON_COMPONENT_FROM_PED, Game.Player.Character, weaponHash, compShopName);
                                    MPLoadout.SAVE_CURRENT_LOADOUT();

                                    Notification.Show("Component Unequipped", true);

                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_tick_icon";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_tick_icon";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                                }
                            }
                        };
                        WeaponsMenu.Add(WeaponsCompItem);
                    }
                }

                NativeListItem<int> WeaponsTintItem = new NativeListItem<int>("Tint", "0 - Normal~n~1 - Green~n~2 - Gold~n~3 - Pink~n~4 - Army~n~5 - LSPD~n~6 - Orange~n~7 - Platinum", 0, 1, 2, 3, 4, 5, 6, 7);
                if (Function.Call<int>(Hash.GET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash) >= 0)
                {
                    WeaponsTintItem.SelectedIndex = Function.Call<int>(Hash.GET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash);
                }
                WeaponsTintItem.ItemChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash, WeaponsTintItem.SelectedItem);
                    MPLoadout.SAVE_CURRENT_LOADOUT();

                    Notification.Show("Tint Changed", true);
                };

                if (WeaponsTintItem.Items.Count > 0)
                {
                    WeaponsMenu.Add(WeaponsTintItem);
                }

                NativeItem WeaponsAmmoItem = new NativeItem($"Rounds x {ammoPer}", "", $"${ammoCost}");

                unsafe
                {
                    int maxAmmo = 0;
                    if (Function.Call<bool>(Hash.GET_MAX_AMMO, Game.Player.Character, weaponHash, &maxAmmo))
                    {
                        if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < maxAmmo)
                        {
                            WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                            WeaponsAmmoItem.Enabled = true;
                        }
                        else
                        {
                            WeaponsAmmoItem.AltTitle = "FULL";
                            WeaponsAmmoItem.Enabled = false;
                        }
                    }
                }//gets whether the ammo is full or not for alt title.

                WeaponsAmmoItem.Activated += (sender, e) =>
                {
                    unsafe
                    {
                        int maxAmmo = 0;
                        if (Function.Call<bool>(Hash.GET_MAX_AMMO, Game.Player.Character, weaponHash, &maxAmmo))
                        {
                            if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < maxAmmo)
                            {
                                WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                                WeaponsAmmoItem.Enabled = true;
                                if (weaponownership.Weapon.Contains(weaponHash))
                                {
                                    if (MPCash.PROCESS_TRANSACTION(ammoCost))
                                    {
                                        Function.Call(Hash.ADD_AMMO_TO_PED, Game.Player.Character, weaponHash, ammoPer);
                                        MPLoadout.SAVE_CURRENT_LOADOUT();
                                    }
                                    else
                                    {
                                        Notification.Show("Transaction Failed: Not Enough Money", true);
                                    }
                                }
                                else
                                {
                                    Notification.Show("Transaction Failed: Weapon Not Owned", true);
                                }
                            }
                            else
                            {
                                WeaponsAmmoItem.AltTitle = "FULL";
                                WeaponsAmmoItem.Enabled = false;
                                Notification.Show("Transaction Failed: Max Ammo", true);
                            }
                        }
                    }
                };

                WeaponsMenu.Add(WeaponsAmmoItem);
            }

            for (int i = 0; i < WeaponInformation[WeaponGroup.MG].Count; i++)
            {
                //DlcWeaponData weaponData = RETURN_WEAPON_DATA_MP(weapon);
                //if (Main.DEBUG) Notification.Show("DLC Weapon Info Obtained");
                string modShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayNameFromHash(WeaponInformation[WeaponGroup.MG][i].weaponHash));
                string modShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayDescriptionFromHash(WeaponInformation[WeaponGroup.MG][i].weaponHash));
                int weaponcost = WeaponInformation[WeaponGroup.MG][i].weaponCost;
                int weaponrank = WeaponInformation[WeaponGroup.MG][i].rankNeeded;
                WeaponHash weaponHash = WeaponInformation[WeaponGroup.MG][i].weaponHash;
                List<string> compHashName = WeaponInformation[WeaponGroup.MG][i].compHashName;
                List<string> compLabel = WeaponInformation[WeaponGroup.MG][i].compLabel;
                List<string> compDesc = WeaponInformation[WeaponGroup.MG][i].compDesc;
                List<int> compCost = WeaponInformation[WeaponGroup.MG][i].compCost;
                List<int> compRank = WeaponInformation[WeaponGroup.MG][i].compRank;
                int ammoPer = WeaponInformation[WeaponGroup.MG][i].AmmoPer;
                int ammoCost = WeaponInformation[WeaponGroup.MG][i].AmmoCost;


                NativeMenu WeaponsMenu = new NativeMenu("", modShopLabel, "");
                MenuPool.Add(WeaponsMenu);
                WeaponsMenu.UseMouse = false;
                WeaponsMenu.CloseOnInvalidClick = false;
                WeaponsMenu.Banner = backround;
                NativeSubmenuItem WeaponsSubbutton = new NativeSubmenuItem(WeaponsMenu, LMGMenu);
                WeaponsSubbutton.AltTitle = "";
                WeaponsSubbutton.Title = modShopLabel;
                LMGMenu.Add(WeaponsSubbutton);

                NativeItem WeaponsItem = new NativeItem(modShopLabel, modShopDesc, "");
                if (!weaponownership.Weapon.Contains(weaponHash))
                {
                    if (MPRank.PlayerLevel >= weaponrank)
                    {
                        WeaponsItem.AltTitle = $"${weaponcost}";

                        WeaponsItem.Activated += (sender, e) =>
                        {
                            if (MPCash.PROCESS_TRANSACTION(weaponcost))
                            {
                                if (!weaponownership.Weapon.Contains(weaponHash))
                                {
                                    weaponownership.Weapon.Add(weaponHash);
                                }
                                Game.Player.Character.Weapons.Give(weaponHash, 1, false, true);
                                XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");

                                MPLoadout.SAVE_CURRENT_LOADOUT();

                                WeaponsItem.AltTitle = "";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                WeaponsItem.RightBadgeSet = rbadgeset;
                            }
                            else
                            {
                                Notification.Show("Transaction Failed: Not Enough Money", true);
                            }
                        };
                    }
                    else
                    {
                        WeaponsItem.Description = $"This item unlocks at Rank {weaponrank}.";
                        BadgeSet rbadgeset = new BadgeSet();
                        rbadgeset.NormalDictionary = "commonmenu";
                        rbadgeset.NormalTexture = "shop_lock";
                        rbadgeset.HoveredDictionary = "commonmenu";
                        rbadgeset.HoveredTexture = "shop_lock";
                        WeaponsItem.RightBadgeSet = rbadgeset;
                    }
                }
                else
                {
                    BadgeSet rbadgeset = new BadgeSet();
                    rbadgeset.NormalDictionary = "commonmenu";
                    rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                    rbadgeset.HoveredDictionary = "commonmenu";
                    rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                    WeaponsItem.RightBadgeSet = rbadgeset;
                }
                WeaponsMenu.Add(WeaponsItem);

                if (compHashName != null)
                {
                    for (int i2 = 0; i2 < compHashName.Count; i2++)
                    {
                        WeaponComponentHash compShopName = (WeaponComponentHash)Main.joaat(compHashName[i2]);
                        string compShopLabel = "";
                        string compShopDesc = "";
                        int compShopCost = 0;
                        int compShopRank = 0;

                        compShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, compLabel[i2]);
                        compShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, compDesc[i2]);
                        compShopCost = compCost[i2];
                        compShopRank = compRank[i2];

                        NativeItem WeaponsCompItem = new NativeItem(compShopLabel, compShopDesc, $"${compShopCost}");
                        WeaponsCompItem.AltTitle = "";
                        if (!weaponownership.Components.Contains(compShopName))
                        {
                            if (MPRank.PlayerLevel >= compShopRank)
                            {
                                WeaponsCompItem.AltTitle = $"${compShopCost}";
                            }
                            else
                            {
                                WeaponsCompItem.Description = $"This item unlocks at Rank {compShopRank}.";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_lock";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_lock";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;
                            }
                        }
                        else
                        {
                            WeaponsCompItem.AltTitle = "";
                            BadgeSet rbadgeset = new BadgeSet();

                            if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, weaponHash, compShopName))
                            {
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_tick_icon";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_tick_icon";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                            }
                            else
                            {
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;
                            }
                        }
                        WeaponsCompItem.Activated += (sender, e) =>
                        {
                            if (!weaponownership.Components.Contains(compShopName) && !weaponLoadout.CurrentLoadout[0].Components.Contains(compShopName))
                            {
                                if (MPRank.PlayerLevel >= compShopRank)
                                {
                                    WeaponsCompItem.AltTitle = $"${compShopCost}";

                                    if (weaponownership.Weapon.Contains(weaponHash))
                                    {
                                        if (MPCash.PROCESS_TRANSACTION(compShopCost))
                                        {
                                            if (!weaponownership.Components.Contains(compShopName))
                                            {
                                                weaponownership.Components.Add(compShopName);
                                            }

                                            Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, weaponHash, compShopName);
                                            MPLoadout.SAVE_CURRENT_LOADOUT();

                                            XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");

                                            WeaponsCompItem.AltTitle = "";
                                            BadgeSet rbadgeset = new BadgeSet();
                                            rbadgeset.NormalDictionary = "commonmenu";
                                            rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                            rbadgeset.HoveredDictionary = "commonmenu";
                                            rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                            WeaponsCompItem.RightBadgeSet = rbadgeset;
                                        }
                                        else
                                        {
                                            Notification.Show("Transaction Failed: Not Enough Money", true);
                                        }
                                    }
                                    else
                                    {
                                        Notification.Show("Transaction Failed: Weapon Not Owned", true);
                                    }
                                }
                                else
                                {
                                    WeaponsCompItem.Description = $"This item unlocks at Rank {compShopRank}.";
                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_lock";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_lock";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;
                                }
                            }
                            else
                            {
                                if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, weaponHash, compShopName))
                                {
                                    Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, weaponHash, compShopName);
                                    MPLoadout.SAVE_CURRENT_LOADOUT();

                                    Notification.Show("Component Equipped", true);

                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                                }
                                else
                                {
                                    Function.Call(Hash.REMOVE_WEAPON_COMPONENT_FROM_PED, Game.Player.Character, weaponHash, compShopName);
                                    MPLoadout.SAVE_CURRENT_LOADOUT();

                                    Notification.Show("Component Unequipped", true);

                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_tick_icon";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_tick_icon";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                                }
                            }
                        };
                        WeaponsMenu.Add(WeaponsCompItem);
                    }
                }
                
                NativeListItem<int> WeaponsTintItem = new NativeListItem<int>("Tint", "0 - Normal~n~1 - Green~n~2 - Gold~n~3 - Pink~n~4 - Army~n~5 - LSPD~n~6 - Orange~n~7 - Platinum", 0, 1, 2, 3, 4, 5, 6, 7);
                if (Function.Call<int>(Hash.GET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash) >= 0)
                {
                    WeaponsTintItem.SelectedIndex = Function.Call<int>(Hash.GET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash);
                }
                WeaponsTintItem.ItemChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash, WeaponsTintItem.SelectedItem);
                    MPLoadout.SAVE_CURRENT_LOADOUT();

                    Notification.Show("Tint Changed", true);
                };

                if (WeaponsTintItem.Items.Count > 0)
                {
                    WeaponsMenu.Add(WeaponsTintItem);
                }

                NativeItem WeaponsAmmoItem = new NativeItem($"Rounds x {ammoPer}", "", $"${ammoCost}");

                unsafe
                {
                    int maxAmmo = 0;
                    if (Function.Call<bool>(Hash.GET_MAX_AMMO, Game.Player.Character, weaponHash, &maxAmmo))
                    {
                        if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < maxAmmo)
                        {
                            WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                            WeaponsAmmoItem.Enabled = true;
                        }
                        else
                        {
                            WeaponsAmmoItem.AltTitle = "FULL";
                            WeaponsAmmoItem.Enabled = false;
                        }
                    }
                }//gets whether the ammo is full or not for alt title.

                WeaponsAmmoItem.Activated += (sender, e) =>
                {
                    unsafe
                    {
                        int maxAmmo = 0;
                        if (Function.Call<bool>(Hash.GET_MAX_AMMO, Game.Player.Character, weaponHash, &maxAmmo))
                        {
                            if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < maxAmmo)
                            {
                                WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                                WeaponsAmmoItem.Enabled = true;
                                if (weaponownership.Weapon.Contains(weaponHash))
                                {
                                    if (MPCash.PROCESS_TRANSACTION(ammoCost))
                                    {
                                        Function.Call(Hash.ADD_AMMO_TO_PED, Game.Player.Character, weaponHash, ammoPer);
                                        MPLoadout.SAVE_CURRENT_LOADOUT();
                                    }
                                    else
                                    {
                                        Notification.Show("Transaction Failed: Not Enough Money", true);
                                    }
                                }
                                else
                                {
                                    Notification.Show("Transaction Failed: Weapon Not Owned", true);
                                }
                            }
                            else
                            {
                                WeaponsAmmoItem.AltTitle = "FULL";
                                WeaponsAmmoItem.Enabled = false;
                                Notification.Show("Transaction Failed: Max Ammo", true);
                            }
                        }
                    }
                };

                WeaponsMenu.Add(WeaponsAmmoItem);
            }

            for (int i = 0; i < WeaponInformation[WeaponGroup.Sniper].Count; i++)
            {
                //DlcWeaponData weaponData = RETURN_WEAPON_DATA_MP(weapon);
                //if (Main.DEBUG) Notification.Show("DLC Weapon Info Obtained");
                string modShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayNameFromHash(WeaponInformation[WeaponGroup.Sniper][i].weaponHash));
                string modShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayDescriptionFromHash(WeaponInformation[WeaponGroup.Sniper][i].weaponHash));
                int weaponcost = WeaponInformation[WeaponGroup.Sniper][i].weaponCost;
                int weaponrank = WeaponInformation[WeaponGroup.Sniper][i].rankNeeded;
                WeaponHash weaponHash = WeaponInformation[WeaponGroup.Sniper][i].weaponHash;
                List<string> compHashName = WeaponInformation[WeaponGroup.Sniper][i].compHashName;
                List<string> compLabel = WeaponInformation[WeaponGroup.Sniper][i].compLabel;
                List<string> compDesc = WeaponInformation[WeaponGroup.Sniper][i].compDesc;
                List<int> compCost = WeaponInformation[WeaponGroup.Sniper][i].compCost;
                List<int> compRank = WeaponInformation[WeaponGroup.Sniper][i].compRank;
                int ammoPer = WeaponInformation[WeaponGroup.Sniper][i].AmmoPer;
                int ammoCost = WeaponInformation[WeaponGroup.Sniper][i].AmmoCost;


                NativeMenu WeaponsMenu = new NativeMenu("", modShopLabel, "");
                MenuPool.Add(WeaponsMenu);
                WeaponsMenu.UseMouse = false;
                WeaponsMenu.CloseOnInvalidClick = false;
                WeaponsMenu.Banner = backround;
                NativeSubmenuItem WeaponsSubbutton = new NativeSubmenuItem(WeaponsMenu, SniperMenu);
                WeaponsSubbutton.AltTitle = "";
                WeaponsSubbutton.Title = modShopLabel;
                SniperMenu.Add(WeaponsSubbutton);

                NativeItem WeaponsItem = new NativeItem(modShopLabel, modShopDesc, "");
                if (!weaponownership.Weapon.Contains(weaponHash))
                {
                    if (MPRank.PlayerLevel >= weaponrank)
                    {
                        WeaponsItem.AltTitle = $"${weaponcost}";

                        WeaponsItem.Activated += (sender, e) =>
                        {
                            if (MPCash.PROCESS_TRANSACTION(weaponcost))
                            {
                                if (!weaponownership.Weapon.Contains(weaponHash))
                                {
                                    weaponownership.Weapon.Add(weaponHash);
                                }
                                Game.Player.Character.Weapons.Give(weaponHash, 1, false, true);
                                XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");

                                MPLoadout.SAVE_CURRENT_LOADOUT();

                                WeaponsItem.AltTitle = "";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                WeaponsItem.RightBadgeSet = rbadgeset;
                            }
                            else
                            {
                                Notification.Show("Transaction Failed: Not Enough Money", true);
                            }
                        };
                    }
                    else
                    {
                        WeaponsItem.Description = $"This item unlocks at Rank {weaponrank}.";
                        BadgeSet rbadgeset = new BadgeSet();
                        rbadgeset.NormalDictionary = "commonmenu";
                        rbadgeset.NormalTexture = "shop_lock";
                        rbadgeset.HoveredDictionary = "commonmenu";
                        rbadgeset.HoveredTexture = "shop_lock";
                        WeaponsItem.RightBadgeSet = rbadgeset;
                    }
                }
                else
                {
                    BadgeSet rbadgeset = new BadgeSet();
                    rbadgeset.NormalDictionary = "commonmenu";
                    rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                    rbadgeset.HoveredDictionary = "commonmenu";
                    rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                    WeaponsItem.RightBadgeSet = rbadgeset;
                }
                WeaponsMenu.Add(WeaponsItem);

                if (compHashName != null)
                {
                    for (int i2 = 0; i2 < compHashName.Count; i2++)
                    {
                        WeaponComponentHash compShopName = (WeaponComponentHash)Main.joaat(compHashName[i2]);
                        string compShopLabel = "";
                        string compShopDesc = "";
                        int compShopCost = 0;
                        int compShopRank = 0;

                        compShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, compLabel[i2]);
                        compShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, compDesc[i2]);
                        compShopCost = compCost[i2];
                        compShopRank = compRank[i2];

                        NativeItem WeaponsCompItem = new NativeItem(compShopLabel, compShopDesc, $"${compShopCost}");
                        WeaponsCompItem.AltTitle = "";
                        if (!weaponownership.Components.Contains(compShopName))
                        {
                            if (MPRank.PlayerLevel >= compShopRank)
                            {
                                WeaponsCompItem.AltTitle = $"${compShopCost}";
                            }
                            else
                            {
                                WeaponsCompItem.Description = $"This item unlocks at Rank {compShopRank}.";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_lock";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_lock";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;
                            }
                        }
                        else
                        {
                            WeaponsCompItem.AltTitle = "";
                            BadgeSet rbadgeset = new BadgeSet();

                            if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, weaponHash, compShopName))
                            {
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_tick_icon";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_tick_icon";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                            }
                            else
                            {
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;
                            }
                        }
                        WeaponsCompItem.Activated += (sender, e) =>
                        {
                            if (!weaponownership.Components.Contains(compShopName) && !weaponLoadout.CurrentLoadout[0].Components.Contains(compShopName))
                            {
                                if (MPRank.PlayerLevel >= compShopRank)
                                {
                                    WeaponsCompItem.AltTitle = $"${compShopCost}";

                                    if (weaponownership.Weapon.Contains(weaponHash))
                                    {
                                        if (MPCash.PROCESS_TRANSACTION(compShopCost))
                                        {
                                            if (!weaponownership.Components.Contains(compShopName))
                                            {
                                                weaponownership.Components.Add(compShopName);
                                            }

                                            Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, weaponHash, compShopName);
                                            MPLoadout.SAVE_CURRENT_LOADOUT();

                                            XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");

                                            WeaponsCompItem.AltTitle = "";
                                            BadgeSet rbadgeset = new BadgeSet();
                                            rbadgeset.NormalDictionary = "commonmenu";
                                            rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                            rbadgeset.HoveredDictionary = "commonmenu";
                                            rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                            WeaponsCompItem.RightBadgeSet = rbadgeset;
                                        }
                                        else
                                        {
                                            Notification.Show("Transaction Failed: Not Enough Money", true);
                                        }
                                    }
                                    else
                                    {
                                        Notification.Show("Transaction Failed: Weapon Not Owned", true);
                                    }
                                }
                                else
                                {
                                    WeaponsCompItem.Description = $"This item unlocks at Rank {compShopRank}.";
                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_lock";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_lock";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;
                                }
                            }
                            else
                            {
                                if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, weaponHash, compShopName))
                                {
                                    Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, weaponHash, compShopName);
                                    MPLoadout.SAVE_CURRENT_LOADOUT();

                                    Notification.Show("Component Equipped", true);

                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                                }
                                else
                                {
                                    Function.Call(Hash.REMOVE_WEAPON_COMPONENT_FROM_PED, Game.Player.Character, weaponHash, compShopName);
                                    MPLoadout.SAVE_CURRENT_LOADOUT();

                                    Notification.Show("Component Unequipped", true);

                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_tick_icon";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_tick_icon";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                                }
                            }
                        };
                        WeaponsMenu.Add(WeaponsCompItem);
                    }
                }

                NativeListItem<int> WeaponsTintItem = new NativeListItem<int>("Tint", "0 - Normal~n~1 - Green~n~2 - Gold~n~3 - Pink~n~4 - Army~n~5 - LSPD~n~6 - Orange~n~7 - Platinum", 0, 1, 2, 3, 4, 5, 6, 7);
                if (Function.Call<int>(Hash.GET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash) >= 0)
                {
                    WeaponsTintItem.SelectedIndex = Function.Call<int>(Hash.GET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash);
                }
                WeaponsTintItem.ItemChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash, WeaponsTintItem.SelectedItem);
                    MPLoadout.SAVE_CURRENT_LOADOUT();

                    Notification.Show("Tint Changed", true);
                };

                if (WeaponsTintItem.Items.Count > 0)
                {
                    WeaponsMenu.Add(WeaponsTintItem);
                }

                NativeItem WeaponsAmmoItem = new NativeItem($"Rounds x {ammoPer}", "", $"${ammoCost}");

                unsafe
                {
                    int maxAmmo = 0;
                    if (Function.Call<bool>(Hash.GET_MAX_AMMO, Game.Player.Character, weaponHash, &maxAmmo))
                    {
                        if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < maxAmmo)
                        {
                            WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                            WeaponsAmmoItem.Enabled = true;
                        }
                        else
                        {
                            WeaponsAmmoItem.AltTitle = "FULL";
                            WeaponsAmmoItem.Enabled = false;
                        }
                    }
                }//gets whether the ammo is full or not for alt title.

                WeaponsAmmoItem.Activated += (sender, e) =>
                {
                    unsafe
                    {
                        int maxAmmo = 0;
                        if (Function.Call<bool>(Hash.GET_MAX_AMMO, Game.Player.Character, weaponHash, &maxAmmo))
                        {
                            if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < maxAmmo)
                            {
                                WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                                WeaponsAmmoItem.Enabled = true;
                                if (weaponownership.Weapon.Contains(weaponHash))
                                {
                                    if (MPCash.PROCESS_TRANSACTION(ammoCost))
                                    {
                                        Function.Call(Hash.ADD_AMMO_TO_PED, Game.Player.Character, weaponHash, ammoPer);
                                        MPLoadout.SAVE_CURRENT_LOADOUT();
                                    }
                                    else
                                    {
                                        Notification.Show("Transaction Failed: Not Enough Money", true);
                                    }
                                }
                                else
                                {
                                    Notification.Show("Transaction Failed: Weapon Not Owned", true);
                                }
                            }
                            else
                            {
                                WeaponsAmmoItem.AltTitle = "FULL";
                                WeaponsAmmoItem.Enabled = false;
                                Notification.Show("Transaction Failed: Max Ammo", true);
                            }
                        }
                    }
                };

                WeaponsMenu.Add(WeaponsAmmoItem);
            }
            
            for (int i = 0; i < WeaponInformation[WeaponGroup.Heavy].Count; i++)
            {
                //DlcWeaponData weaponData = RETURN_WEAPON_DATA_MP(weapon);
                //if (Main.DEBUG) Notification.Show("DLC Weapon Info Obtained");
                string modShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayNameFromHash(WeaponInformation[WeaponGroup.Heavy][i].weaponHash));
                string modShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayDescriptionFromHash(WeaponInformation[WeaponGroup.Heavy][i].weaponHash));
                int weaponcost = WeaponInformation[WeaponGroup.Heavy][i].weaponCost;
                int weaponrank = WeaponInformation[WeaponGroup.Heavy][i].rankNeeded;
                WeaponHash weaponHash = WeaponInformation[WeaponGroup.Heavy][i].weaponHash;
                List<string> compHashName = WeaponInformation[WeaponGroup.Heavy][i].compHashName;
                List<string> compLabel = WeaponInformation[WeaponGroup.Heavy][i].compLabel;
                List<string> compDesc = WeaponInformation[WeaponGroup.Heavy][i].compDesc;
                List<int> compCost = WeaponInformation[WeaponGroup.Heavy][i].compCost;
                List<int> compRank = WeaponInformation[WeaponGroup.Heavy][i].compRank;
                int ammoPer = WeaponInformation[WeaponGroup.Heavy][i].AmmoPer;
                int ammoCost = WeaponInformation[WeaponGroup.Heavy][i].AmmoCost;


                NativeMenu WeaponsMenu = new NativeMenu("", modShopLabel, "");
                MenuPool.Add(WeaponsMenu);
                WeaponsMenu.UseMouse = false;
                WeaponsMenu.CloseOnInvalidClick = false;
                WeaponsMenu.Banner = backround;
                NativeSubmenuItem WeaponsSubbutton = new NativeSubmenuItem(WeaponsMenu, HeavyMenu);
                WeaponsSubbutton.AltTitle = "";
                WeaponsSubbutton.Title = modShopLabel;
                HeavyMenu.Add(WeaponsSubbutton);

                NativeItem WeaponsItem = new NativeItem(modShopLabel, modShopDesc, "");
                if (!weaponownership.Weapon.Contains(weaponHash))
                {
                    if (MPRank.PlayerLevel >= weaponrank)
                    {
                        WeaponsItem.AltTitle = $"${weaponcost}";

                        WeaponsItem.Activated += (sender, e) =>
                        {
                            if (MPCash.PROCESS_TRANSACTION(weaponcost))
                            {
                                if (!weaponownership.Weapon.Contains(weaponHash))
                                {
                                    weaponownership.Weapon.Add(weaponHash);
                                }
                                Game.Player.Character.Weapons.Give(weaponHash, 1, false, true);
                                XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");

                                MPLoadout.SAVE_CURRENT_LOADOUT();

                                WeaponsItem.AltTitle = "";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                WeaponsItem.RightBadgeSet = rbadgeset;
                            }
                            else
                            {
                                Notification.Show("Transaction Failed: Not Enough Money", true);
                            }
                        };
                    }
                    else
                    {
                        WeaponsItem.Description = $"This item unlocks at Rank {weaponrank}.";
                        BadgeSet rbadgeset = new BadgeSet();
                        rbadgeset.NormalDictionary = "commonmenu";
                        rbadgeset.NormalTexture = "shop_lock";
                        rbadgeset.HoveredDictionary = "commonmenu";
                        rbadgeset.HoveredTexture = "shop_lock";
                        WeaponsItem.RightBadgeSet = rbadgeset;
                    }
                }
                else
                {
                    BadgeSet rbadgeset = new BadgeSet();
                    rbadgeset.NormalDictionary = "commonmenu";
                    rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                    rbadgeset.HoveredDictionary = "commonmenu";
                    rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                    WeaponsItem.RightBadgeSet = rbadgeset;
                }
                WeaponsMenu.Add(WeaponsItem);

                if (compHashName != null)
                {
                    for (int i2 = 0; i2 < compHashName.Count; i2++)
                    {
                        WeaponComponentHash compShopName = (WeaponComponentHash)Main.joaat(compHashName[i2]);
                        string compShopLabel = "";
                        string compShopDesc = "";
                        int compShopCost = 0;
                        int compShopRank = 0;

                        compShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, compLabel[i2]);
                        compShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, compDesc[i2]);
                        compShopCost = compCost[i2];
                        compShopRank = compRank[i2];

                        NativeItem WeaponsCompItem = new NativeItem(compShopLabel, compShopDesc, $"${compShopCost}");
                        WeaponsCompItem.AltTitle = "";
                        if (!weaponownership.Components.Contains(compShopName))
                        {
                            if (MPRank.PlayerLevel >= compShopRank)
                            {
                                WeaponsCompItem.AltTitle = $"${compShopCost}";
                            }
                            else
                            {
                                WeaponsCompItem.Description = $"This item unlocks at Rank {compShopRank}.";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_lock";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_lock";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;
                            }
                        }
                        else
                        {
                            WeaponsCompItem.AltTitle = "";
                            BadgeSet rbadgeset = new BadgeSet();

                            if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, weaponHash, compShopName))
                            {
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_tick_icon";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_tick_icon";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                            }
                            else
                            {
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                WeaponsCompItem.RightBadgeSet = rbadgeset;
                            }
                        }
                        WeaponsCompItem.Activated += (sender, e) =>
                        {
                            if (!weaponownership.Components.Contains(compShopName) && !weaponLoadout.CurrentLoadout[0].Components.Contains(compShopName))
                            {
                                if (MPRank.PlayerLevel >= compShopRank)
                                {
                                    WeaponsCompItem.AltTitle = $"${compShopCost}";

                                    if (weaponownership.Weapon.Contains(weaponHash))
                                    {
                                        if (MPCash.PROCESS_TRANSACTION(compShopCost))
                                        {
                                            if (!weaponownership.Components.Contains(compShopName))
                                            {
                                                weaponownership.Components.Add(compShopName);
                                            }

                                            Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, weaponHash, compShopName);
                                            MPLoadout.SAVE_CURRENT_LOADOUT();

                                            XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");

                                            WeaponsCompItem.AltTitle = "";
                                            BadgeSet rbadgeset = new BadgeSet();
                                            rbadgeset.NormalDictionary = "commonmenu";
                                            rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                            rbadgeset.HoveredDictionary = "commonmenu";
                                            rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                            WeaponsCompItem.RightBadgeSet = rbadgeset;
                                        }
                                        else
                                        {
                                            Notification.Show("Transaction Failed: Not Enough Money", true);
                                        }
                                    }
                                    else
                                    {
                                        Notification.Show("Transaction Failed: Weapon Not Owned", true);
                                    }
                                }
                                else
                                {
                                    WeaponsCompItem.Description = $"This item unlocks at Rank {compShopRank}.";
                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_lock";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_lock";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;
                                }
                            }
                            else
                            {
                                if (!Function.Call<bool>(Hash.HAS_PED_GOT_WEAPON_COMPONENT, Game.Player.Character, weaponHash, compShopName))
                                {
                                    Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, Game.Player.Character, weaponHash, compShopName);
                                    MPLoadout.SAVE_CURRENT_LOADOUT();

                                    Notification.Show("Component Equipped", true);

                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                                }
                                else
                                {
                                    Function.Call(Hash.REMOVE_WEAPON_COMPONENT_FROM_PED, Game.Player.Character, weaponHash, compShopName);
                                    MPLoadout.SAVE_CURRENT_LOADOUT();

                                    Notification.Show("Component Unequipped", true);

                                    BadgeSet rbadgeset = new BadgeSet();
                                    rbadgeset.NormalDictionary = "commonmenu";
                                    rbadgeset.NormalTexture = "shop_tick_icon";
                                    rbadgeset.HoveredDictionary = "commonmenu";
                                    rbadgeset.HoveredTexture = "shop_tick_icon";
                                    WeaponsCompItem.RightBadgeSet = rbadgeset;//shop_tick_icon
                                }
                            }
                        };
                        WeaponsMenu.Add(WeaponsCompItem);
                    }
                }

                NativeListItem<int> WeaponsTintItem = new NativeListItem<int>("Tint", "0 - Normal~n~1 - Green~n~2 - Gold~n~3 - Pink~n~4 - Army~n~5 - LSPD~n~6 - Orange~n~7 - Platinum", 0, 1, 2, 3, 4, 5, 6, 7);
                if (Function.Call<int>(Hash.GET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash) >= 0)
                {
                    WeaponsTintItem.SelectedIndex = Function.Call<int>(Hash.GET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash);
                }
                WeaponsTintItem.ItemChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_PED_WEAPON_TINT_INDEX, Game.Player.Character, weaponHash, WeaponsTintItem.SelectedItem);
                    MPLoadout.SAVE_CURRENT_LOADOUT();

                    Notification.Show("Tint Changed", true);
                };

                if (WeaponsTintItem.Items.Count > 0)
                {
                    WeaponsMenu.Add(WeaponsTintItem);
                }

                NativeItem WeaponsAmmoItem = new NativeItem($"Rounds x {ammoPer}", "", $"${ammoCost}");

                unsafe
                {
                    int maxAmmo = 0;
                    if (Function.Call<bool>(Hash.GET_MAX_AMMO, Game.Player.Character, weaponHash, &maxAmmo))
                    {
                        if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < maxAmmo)
                        {
                            WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                            WeaponsAmmoItem.Enabled = true;
                        }
                        else
                        {
                            WeaponsAmmoItem.AltTitle = "FULL";
                            WeaponsAmmoItem.Enabled = false;
                        }
                    }
                }//gets whether the ammo is full or not for alt title.

                WeaponsAmmoItem.Activated += (sender, e) =>
                {
                    unsafe
                    {
                        int maxAmmo = 0;
                        if (Function.Call<bool>(Hash.GET_MAX_AMMO, Game.Player.Character, weaponHash, &maxAmmo))
                        {
                            if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < maxAmmo)
                            {
                                WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                                WeaponsAmmoItem.Enabled = true;
                                if (weaponownership.Weapon.Contains(weaponHash))
                                {
                                    if (MPCash.PROCESS_TRANSACTION(ammoCost))
                                    {
                                        Function.Call(Hash.ADD_AMMO_TO_PED, Game.Player.Character, weaponHash, ammoPer);
                                        MPLoadout.SAVE_CURRENT_LOADOUT();
                                    }
                                    else
                                    {
                                        Notification.Show("Transaction Failed: Not Enough Money", true);
                                    }
                                }
                                else
                                {
                                    Notification.Show("Transaction Failed: Weapon Not Owned", true);
                                }
                            }
                            else
                            {
                                WeaponsAmmoItem.AltTitle = "FULL";
                                WeaponsAmmoItem.Enabled = false;
                                Notification.Show("Transaction Failed: Max Ammo", true);
                            }
                        }
                    }
                };

                WeaponsMenu.Add(WeaponsAmmoItem);
            }

            for (int i = 0; i < WeaponInformation[WeaponGroup.Thrown].Count; i++)
            {
                //DlcWeaponData weaponData = RETURN_WEAPON_DATA_MP(weapon);
                //if (Main.DEBUG) Notification.Show("DLC Weapon Info Obtained");
                string modShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayNameFromHash(WeaponInformation[WeaponGroup.Thrown][i].weaponHash));
                string modShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayDescriptionFromHash(WeaponInformation[WeaponGroup.Thrown][i].weaponHash));
                int weaponcost = WeaponInformation[WeaponGroup.Thrown][i].weaponCost;
                int weaponrank = WeaponInformation[WeaponGroup.Thrown][i].rankNeeded;
                WeaponHash weaponHash = WeaponInformation[WeaponGroup.Thrown][i].weaponHash;
                List<string> compHashName = WeaponInformation[WeaponGroup.Thrown][i].compHashName;
                List<string> compLabel = WeaponInformation[WeaponGroup.Thrown][i].compLabel;
                List<string> compDesc = WeaponInformation[WeaponGroup.Thrown][i].compDesc;
                List<int> compCost = WeaponInformation[WeaponGroup.Thrown][i].compCost;
                List<int> compRank = WeaponInformation[WeaponGroup.Thrown][i].compRank;
                int ammoPer = WeaponInformation[WeaponGroup.Thrown][i].AmmoPer;
                int ammoCost = WeaponInformation[WeaponGroup.Thrown][i].AmmoCost;
                
                if (modShopDesc == "NULL")
                {
                    modShopDesc = "Standard Throwable Weapon.";
                }

                NativeMenu WeaponsMenu = new NativeMenu("", modShopLabel, "");
                MenuPool.Add(WeaponsMenu);
                WeaponsMenu.UseMouse = false;
                WeaponsMenu.CloseOnInvalidClick = false;
                WeaponsMenu.Banner = backround;
                NativeSubmenuItem WeaponsSubbutton = new NativeSubmenuItem(WeaponsMenu, ThrowableMenu);
                WeaponsSubbutton.AltTitle = "";
                WeaponsSubbutton.Title = modShopLabel;
                ThrowableMenu.Add(WeaponsSubbutton);

                NativeItem WeaponsItem = new NativeItem(modShopLabel, modShopDesc, "");
                if (!weaponownership.Weapon.Contains(weaponHash))
                {
                    if (MPRank.PlayerLevel >= weaponrank)
                    {
                        WeaponsItem.AltTitle = $"${weaponcost}";

                        WeaponsItem.Activated += (sender, e) =>
                        {
                            if (MPCash.PROCESS_TRANSACTION(weaponcost))
                            {
                                if (!weaponownership.Weapon.Contains(weaponHash))
                                {
                                    weaponownership.Weapon.Add(weaponHash);
                                }
                                Game.Player.Character.Weapons.Give(weaponHash, 1, false, true);
                                XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");

                                MPLoadout.SAVE_CURRENT_LOADOUT();

                                WeaponsItem.AltTitle = "";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                WeaponsItem.RightBadgeSet = rbadgeset;
                            }
                            else
                            {
                                Notification.Show("Transaction Failed: Not Enough Money", true);
                            }
                        };
                    }
                    else
                    {
                        WeaponsItem.Description = $"This item unlocks at Rank {weaponrank}.";
                        BadgeSet rbadgeset = new BadgeSet();
                        rbadgeset.NormalDictionary = "commonmenu";
                        rbadgeset.NormalTexture = "shop_lock";
                        rbadgeset.HoveredDictionary = "commonmenu";
                        rbadgeset.HoveredTexture = "shop_lock";
                        WeaponsItem.RightBadgeSet = rbadgeset;
                    }
                }
                else
                {
                    BadgeSet rbadgeset = new BadgeSet();
                    rbadgeset.NormalDictionary = "commonmenu";
                    rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                    rbadgeset.HoveredDictionary = "commonmenu";
                    rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                    WeaponsItem.RightBadgeSet = rbadgeset;
                }
                WeaponsMenu.Add(WeaponsItem);

                NativeItem WeaponsAmmoItem = new NativeItem($"Rounds x {ammoPer}", "", $"${ammoCost}");
                
                unsafe
                {
                    int maxAmmo = 0;
                    if (Function.Call<bool>(Hash.GET_MAX_AMMO, Game.Player.Character, weaponHash, &maxAmmo))
                    {
                        if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < maxAmmo)
                        {
                            WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                            WeaponsAmmoItem.Enabled = true;
                        }
                        else
                        {
                            WeaponsAmmoItem.AltTitle = "FULL";
                            WeaponsAmmoItem.Enabled = false;
                        }
                    }
                }//gets whether the ammo is full or not for alt title.

                WeaponsAmmoItem.Activated += (sender, e) =>
                {
                    unsafe
                    {
                        int maxAmmo = 0;
                        if (Function.Call<bool>(Hash.GET_MAX_AMMO, Game.Player.Character, weaponHash, &maxAmmo))
                        {
                            if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < maxAmmo)
                            {
                                WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                                WeaponsAmmoItem.Enabled = true;
                                if (weaponownership.Weapon.Contains(weaponHash))
                                {
                                    if (MPCash.PROCESS_TRANSACTION(ammoCost))
                                    {
                                        if (weaponHash == WeaponHash.PetrolCan)
                                        {
                                            if (!Game.Player.Character.Weapons.HasWeapon(weaponHash))
                                            {
                                                Game.Player.Character.Weapons.Give(weaponHash, 100, false, true);
                                            }
                                        }
                                        Function.Call(Hash.ADD_AMMO_TO_PED, Game.Player.Character, weaponHash, ammoPer);
                                        MPLoadout.SAVE_CURRENT_LOADOUT();
                                    }
                                    else
                                    {
                                        Notification.Show("Transaction Failed: Not Enough Money", true);
                                    }
                                }
                                else
                                {
                                    Notification.Show("Transaction Failed: Weapon Not Owned", true);
                                }
                            }
                            else
                            {
                                WeaponsAmmoItem.AltTitle = "FULL";
                                WeaponsAmmoItem.Enabled = false;
                                Notification.Show("Transaction Failed: Max Ammo", true);
                            }
                        }
                    }
                };

                WeaponsMenu.Add(WeaponsAmmoItem);
            }
            
            for (int i = 0; i < WeaponInformation[WeaponGroup.Parachute].Count; i++)
            {
                //DlcWeaponData weaponData = RETURN_WEAPON_DATA_MP(weapon);
                //if (Main.DEBUG) Notification.Show("DLC Weapon Info Obtained");
                string modShopLabel = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayNameFromHash(WeaponInformation[WeaponGroup.Parachute][i].weaponHash));
                string modShopDesc = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, GetDisplayDescriptionFromHash(WeaponInformation[WeaponGroup.Parachute][i].weaponHash));
                int weaponcost = WeaponInformation[WeaponGroup.Parachute][i].weaponCost;
                int weaponrank = WeaponInformation[WeaponGroup.Parachute][i].rankNeeded;
                WeaponHash weaponHash = WeaponInformation[WeaponGroup.Parachute][i].weaponHash;
                List<string> compHashName = WeaponInformation[WeaponGroup.Parachute][i].compHashName;
                List<string> compLabel = WeaponInformation[WeaponGroup.Parachute][i].compLabel;
                List<string> compDesc = WeaponInformation[WeaponGroup.Parachute][i].compDesc;
                List<int> compCost = WeaponInformation[WeaponGroup.Parachute][i].compCost;
                List<int> compRank = WeaponInformation[WeaponGroup.Parachute][i].compRank;
                int ammoPer = WeaponInformation[WeaponGroup.Parachute][i].AmmoPer;
                int ammoCost = WeaponInformation[WeaponGroup.Parachute][i].AmmoCost;

                if (modShopLabel == "Invalid")
                {
                    modShopLabel = "Parachute";
                }
                if (modShopDesc == "NULL")
                {
                    modShopDesc = "Standard Parachute.";
                }

                NativeMenu WeaponsMenu = new NativeMenu("", modShopLabel, "");
                MenuPool.Add(WeaponsMenu);
                WeaponsMenu.UseMouse = false;
                WeaponsMenu.CloseOnInvalidClick = false;
                WeaponsMenu.Banner = backround;
                NativeSubmenuItem WeaponsSubbutton = new NativeSubmenuItem(WeaponsMenu, MisMenu);
                WeaponsSubbutton.AltTitle = "";
                WeaponsSubbutton.Title = modShopLabel;
                MisMenu.Add(WeaponsSubbutton);

                NativeItem WeaponsItem = new NativeItem(modShopLabel, modShopDesc, "");
                if (!weaponownership.Weapon.Contains(weaponHash))
                {
                    if (MPRank.PlayerLevel >= weaponrank)
                    {
                        WeaponsItem.AltTitle = $"${weaponcost}";

                        WeaponsItem.Activated += (sender, e) =>
                        {
                            if (MPCash.PROCESS_TRANSACTION(weaponcost))
                            {
                                if (!weaponownership.Weapon.Contains(weaponHash))
                                {
                                    weaponownership.Weapon.Add(weaponHash);
                                }
                                Game.Player.Character.Weapons.Give(weaponHash, 1, false, true);
                                XMLSerializer.SaveToXML<OwnedWeapons>(weaponownership, "scripts\\CruelMastersOnlineOfflineAssets\\Weapons\\OwnedWeaponary.xml");

                                MPLoadout.SAVE_CURRENT_LOADOUT();

                                WeaponsItem.AltTitle = "";
                                BadgeSet rbadgeset = new BadgeSet();
                                rbadgeset.NormalDictionary = "commonmenu";
                                rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                                rbadgeset.HoveredDictionary = "commonmenu";
                                rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                                WeaponsItem.RightBadgeSet = rbadgeset;
                            }
                            else
                            {
                                Notification.Show("Transaction Failed: Not Enough Money", true);
                            }
                        };
                    }
                    else
                    {
                        WeaponsItem.Description = $"This item unlocks at Rank {weaponrank}.";
                        BadgeSet rbadgeset = new BadgeSet();
                        rbadgeset.NormalDictionary = "commonmenu";
                        rbadgeset.NormalTexture = "shop_lock";
                        rbadgeset.HoveredDictionary = "commonmenu";
                        rbadgeset.HoveredTexture = "shop_lock";
                        WeaponsItem.RightBadgeSet = rbadgeset;
                    }
                }
                else
                {
                    BadgeSet rbadgeset = new BadgeSet();
                    rbadgeset.NormalDictionary = "commonmenu";
                    rbadgeset.NormalTexture = "shop_gunclub_icon_a";
                    rbadgeset.HoveredDictionary = "commonmenu";
                    rbadgeset.HoveredTexture = "shop_gunclub_icon_b";
                    WeaponsItem.RightBadgeSet = rbadgeset;
                }
                WeaponsMenu.Add(WeaponsItem);

                NativeItem WeaponsAmmoItem = new NativeItem($"Rounds x {ammoPer}", "", $"${ammoCost}");

                unsafe
                {
                    if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < 1)
                    {
                        WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                        WeaponsAmmoItem.Enabled = true;
                    }
                    else
                    {
                        WeaponsAmmoItem.AltTitle = "FULL";
                        WeaponsAmmoItem.Enabled = false;
                    }
                }//gets whether the ammo is full or not for alt title.

                WeaponsAmmoItem.Activated += (sender, e) =>
                {
                    unsafe
                    {
                        int maxAmmo = 0;
                        if (Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, Game.Player.Character, weaponHash) < 1)
                        {
                            WeaponsAmmoItem.AltTitle = $"${ammoCost}";
                            WeaponsAmmoItem.Enabled = true;
                            if (weaponownership.Weapon.Contains(weaponHash))
                            {
                                if (MPCash.PROCESS_TRANSACTION(ammoCost))
                                {
                                    if (weaponHash == WeaponHash.Parachute)
                                    {
                                        if (!Game.Player.Character.Weapons.HasWeapon(weaponHash))
                                        {
                                            Game.Player.Character.Weapons.Give(weaponHash, 1, false, true);
                                        }
                                    }
                                    Function.Call(Hash.ADD_AMMO_TO_PED, Game.Player.Character, weaponHash, ammoPer);
                                    MPLoadout.SAVE_CURRENT_LOADOUT();
                                }
                                else
                                {
                                    Notification.Show("Transaction Failed: Not Enough Money", true);
                                }
                            }
                            else
                            {
                                Notification.Show("Transaction Failed: Weapon Not Owned", true);
                            }
                        }
                        else
                        {
                            WeaponsAmmoItem.AltTitle = "FULL";
                            WeaponsAmmoItem.Enabled = false;
                            Notification.Show("Transaction Failed: Max Ammo", true);
                        }
                    }
                };

                WeaponsMenu.Add(WeaponsAmmoItem);
            }
            //weaponownership
        }
        
        public void onTick(object sender, EventArgs e)
        {
            if (MenuPool != null && MenuPool.AreAnyVisible)
            {
                MenuPool.Process();
            }
            
            if (shopowners.Count == 0)
            {

                Vector3[] shoppos =
                {
                    new Vector3(1691.958f, 3761.067f, 34.70532f),//sandy shores - 1
                    new Vector3(254.2388f, -50.63042f, 69.94106f),//hawick - 2
                    new Vector3(842.48f, -1035.667f, 28.19486f),//la mesa - 3
                    new Vector3(-331.9211f, 6085.159f, 31.45476f),//paleto gay - 4
                    new Vector3(-662.1957f, -933.3081f, 21.82924f),//little seoul - 5
                    new Vector3(-1303.764f, -394.7151f, 36.69576f),//morningwood - 6
                    new Vector3(-1119.132f, 2699.972f, 18.55415f),//route 68 - 7
                    new Vector3(-3173.759f, 1088.667f, 20.83875f),//chumash - 8
                    new Vector3(2567.888f, 292.1664f, 108.7349f),//tataviam - 9
                    new Vector3(23.01255f, -1105.32f, 29.79703f),//pillbox hill - 10
                    new Vector3(809.8918f, -2159.331f, 29.61902f),//cypress flats - 11
                };
                float[] shophead =
                {
                    231.4799f,//sandy shores - 1
                    68.35813f,//hawick - 2
                    358.0862f,//la mesa - 3
                    224.7119f,//paleto gay - 4
                    177.0904f,//little seoul - 5
                    75.50185f,//morningwood - 6
                    219.2255f,//route 68 - 7
                    246.7184f,//chumash - 8
                    357.877f,//tataviam - 9
                    159.212f,//pillbox hill - 10
                    357.4059f,//cypress flats - 11
                };

                int iVar0 = 0;
                while (iVar0 < shoppos.Length)
                {
                    if (Game.Player.Character.Position.DistanceTo(shoppos[iVar0]) < 20 && !Main.OnMission)
                    {
                        gundoors = World.GetAllProps(97297972, -8873588);
                        foreach (Prop gdoor in gundoors)
                        {
                            if (gdoor != null)
                            {
                                while (gdoor.IsPositionFrozen)
                                {
                                    gdoor.IsPositionFrozen = false;
                                    Wait(0);
                                }
                            }
                        }

                        Ped owner = World.CreatePed(PedHash.GunVanSeller, new Vector3(shoppos[iVar0].X, shoppos[iVar0].Y, shoppos[iVar0].Z - 1f), shophead[iVar0]);
                        owner.AlwaysKeepTask = true;
                        owner.BlockPermanentEvents = true;
                        owner.CanRagdoll = false;
                        owner.RelationshipGroup = Groups.playersTeam;
                        owner.IsInvincible = true;
                        owner.IsPositionFrozen = true;
                        Main.LoadDict("random@shop_gunstore");
                        Main.LoadDict("random@shop_gunstore");
                        owner.Task.PlayAnimation("random@shop_gunstore", "_idle", 8.0f, 8.0f, -1, AnimationFlags.Loop, -1000.0f);
                        
                        shopowners.Add(owner);
                        break;
                    }
                    iVar0++;
                }

            }
            else
            {
                int[] shopinteriors =
                {
                    200961,//sandy shores - 1
                    140289,//hawick - 2
                    153857,//la mesa - 3
                    180481,//paleto gay - 4
                    168193,//little seoul - 5
                    164609,//morningwood - 6
                    175617,//route 68 - 7
                    176385,//chumash - 8
                    178689,//tataviam - 9
                    137729,//pillbox hill - 10
                    248065,//cypress flats - 11
                };
                
                int iVar0 = 0;
                while (iVar0 < shopinteriors.Length)
                {
                    if (Interiors.GET_INTERIOR_FROM_ENTITY(Game.Player.Character) == shopinteriors[iVar0] && !Main.DEBUG)
                    {
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 21, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 22, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 24, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 25, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 140, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 141, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 142, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 44, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 44, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 37, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 12, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 13, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 14, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 15, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 16, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 17, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 17, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 261, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 262, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 157, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 158, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 159, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 160, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 161, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 162, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 163, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 164, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, 165, true);
                        if (Game.Player.Character.Weapons.Current != WeaponHash.Unarmed)
                        {
                            Game.Player.Character.Weapons.Select(WeaponHash.Unarmed, true);
                        }
                    }
                    iVar0++;
                }
                
                if (shopowners[0] != null && Game.Player.Character.Position.DistanceTo(shopowners[0].Position) > 30)
                {
                    foreach (Ped p in shopowners.ToList())
                    {
                        if (p != null)
                        {
                            p.Delete();
                            shopowners.Remove(p);
                        }
                    }
                }
                if (shopowners.Count > 0)
                {
                    if (shopowners[0] != null)
                    {
                        if (Game.Player.Character.Position.DistanceTo(shopowners[0].Position) < 2 && Function.Call<bool>(Hash.HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT, Game.Player.Character, shopowners[0]) && !Main.OnMission)
                        {
                            if (!MenuPool.AreAnyVisible)
                            {
                                Screen.ShowHelpTextThisFrame("Press ~INPUT_CONTEXT~ to browse weapons.");
                                if (Game.IsControlJustPressed(GTA.Control.Context))
                                {
                                    Mobile_Phone.CAN_OPEN_PHONE = false;
                                    SETUP_GUN_STORE_MENU();

                                    GunStore.Visible = !GunStore.Visible;
                                }
                            }
                        }
                        else
                        {
                            if (MenuPool.AreAnyVisible)
                            {
                                Mobile_Phone.CAN_OPEN_PHONE = true;
                                MenuPool.HideAll();
                            }
                        }
                    }
                }
            }
            
            if (Game.IsControlJustPressed(GTA.Control.Context))
            {
                
            }
            if (Game.IsControlJustPressed(GTA.Control.VehicleDuck))
            {

            }
        }
        public void onShutdown(object sender, EventArgs e)
        {
            #region Vehicles
            #endregion
            #region Peds
            if (shopowners.Count > 0)
            {
                foreach (Ped p in shopowners.ToList())
                {
                    if (p != null)
                    {
                        p.Delete();
                        shopowners.Remove(p);
                    }
                }
            }
            #endregion
            #region Props
            #endregion
            #region Blips
            #endregion
            #region Cameras
            #endregion
            #region Pickups
            #endregion
        }

        public static void SET_WEAPON_OWNERSHIP()
        {
            OwnedWeapons CurrentOwned = new OwnedWeapons()
            {
                Weapon = new(),
                Components = new(),
                CompTint = new(),
                Tint = new(),
            };

            foreach (WeaponHash weapon in (typeof(WeaponHash)).GetEnumValues())
            {
                if (Game.Player.Character.Weapons.HasWeapon(weapon))
                {
                    if (!CurrentOwned.Weapon.Contains(weapon))
                    {
                        CurrentOwned.Weapon.Add(weapon);
                    }
                    foreach (WeaponComponentHash weaponcomp in (typeof(WeaponComponentHash)).GetEnumValues())
                    {
                        if (Game.Player.Character.Weapons[weapon].Components[weaponcomp].Active)
                        {
                            if (!CurrentOwned.Components.Contains(weaponcomp))
                            {
                                CurrentOwned.Components.Add(weaponcomp);
                            }
                            if (weaponcomp.ToString().Contains("Camo"))
                            {
                                for (int i = 0; i < 32; i++)
                                {
                                    if (!CurrentOwned.CompTint.Contains(i))
                                    {
                                        CurrentOwned.CompTint.Add(i);
                                    }
                                }
                            }
                        }
                    }

                    for (int i = 0; i < Function.Call<int>(Hash.GET_WEAPON_TINT_COUNT, weapon); i++)
                    {
                        if (!CurrentOwned.Tint.Contains(i))
                        {
                            CurrentOwned.Tint.Add(i);
                        }
                    }
                    OwnedWeapons.OwnedWeapon.Add(CurrentOwned);
                }
            }
            XMLSerializer.SaveToXML<OwnedWeapons>(OwnedWeapons.OwnedWeapon[0], "scripts\\CruelMastersOnlineOfflineAssets\\OwnedWeaponary.xml");
        }

        [StructLayout(LayoutKind.Explicit, Size = 0x138)]
        public unsafe struct DlcWeaponData
        {
            [FieldOffset(0x00)] public int validCheck; //use DLC1::IS_CONTENT_ITEM_LOCKED on this
            [FieldOffset(0x08)] public int weaponHash;
            [FieldOffset(0x18)] public int weaponCost;
            [FieldOffset(0x20)] public int ammoCost;
            [FieldOffset(0x28)] public int ammoType;
            [FieldOffset(0x30)] public int defaultClipSize;
            [FieldOffset(0x38)] public fixed byte nameLabel[0x40];
            [FieldOffset(0x78)] public fixed byte descLabel[0x40];
            [FieldOffset(0xB8)] public fixed byte desc2Label[0x40]; // usually "the" + name
            [FieldOffset(0xF8)] public fixed byte upperCaseNameLabel[0x40];

            public bool IsValid => !Function.Call<bool>(GTA.Native.Hash.IS_CONTENT_ITEM_LOCKED, validCheck);

            public WeaponHash Hash => (WeaponHash)weaponHash;

            public string DisplayName
            {
                get
                {
                    fixed (byte* ptr = nameLabel)
                    {
                        return PtrToStringUTF8(new IntPtr(ptr));
                    }
                }
            }

            public string DescriptionLabel
            {
                get
                {
                    fixed (byte* ptr = descLabel)
                    {
                        return PtrToStringUTF8(new IntPtr(ptr));
                    }
                }
            }
        };
        
        public static DlcWeaponData RETURN_WEAPON_DATA_SP(WeaponHash wep)
        {
            int numDlcWeapons = Function.Call<int>(Hash.GET_NUM_DLC_WEAPONS_SP);
            int i = 0;
            DlcWeaponData weaponData = new();
            unsafe
            {
                while (i < numDlcWeapons)
                {
                    if (Function.Call<bool>(Hash.GET_DLC_WEAPON_DATA_SP, i, &weaponData))
                    {
                        if (weaponData.Hash == wep)
                        {
                            return weaponData;
                            break;
                        }
                    }
                    i++;
                }
            }

            return weaponData;
        }
        public static DlcWeaponData RETURN_WEAPON_DATA_MP(WeaponHash wep)
        {
            int numDlcWeapons = Function.Call<int>(Hash.GET_NUM_DLC_WEAPONS);
            int i = 0;
            DlcWeaponData weaponData = new();
            unsafe
            {
                while (i < numDlcWeapons)
                {
                    if (Function.Call<bool>(Hash.GET_DLC_WEAPON_DATA, i, &weaponData))
                    {
                        if (weaponData.Hash == wep)
                        {
                            return weaponData;
                            break;
                        }
                    }
                    i++;
                }
            }

            return weaponData;
        }
        
        [StructLayout(LayoutKind.Explicit, Size = 0x110)]
        internal unsafe struct DlcWeaponComponentData
        {
            [FieldOffset(0x00)] int attachBone; // The bone on the gun to attach the component to
            [FieldOffset(0x08)] int bActiveByDefault;
            [FieldOffset(0x18)] int componentHash;
            [FieldOffset(0x28)] int componentCost;
            [FieldOffset(0x30)] fixed byte name[0x40];
            [FieldOffset(0x70)] fixed byte desc[0x40];

            public WeaponComponentHash Hash => (WeaponComponentHash)componentHash;

            public WeaponAttachmentPoint AttachmentPoint => (WeaponAttachmentPoint)attachBone;

            public string DisplayName
            {
                get
                {
                    fixed (byte* ptr = name)
                    {
                        return PtrToStringUTF8(new IntPtr(ptr));
                    }
                }
            }

            public string DescriptionLabel
            {
                get
                {
                    fixed (byte* ptr = desc)
                    {
                        return PtrToStringUTF8(new IntPtr(ptr));
                    }
                }
            }
        }

        public static DlcWeaponComponentData RETURN_WEAPON_DATA_MP(WeaponHash wep, WeaponComponentHash wepcomp)
        {
            int numDlcWeapons = Function.Call<int>(Hash.GET_NUM_DLC_WEAPONS);
            int i = 0;
            DlcWeaponData weaponData = new();

            int numDlcComps = Function.Call<int>(Hash.GET_NUM_DLC_WEAPON_COMPONENTS);
            int i2 = 0;
            DlcWeaponComponentData compData = new();


            unsafe
            {
                while (i < numDlcWeapons)
                {
                    if (Function.Call<bool>(Hash.GET_DLC_WEAPON_DATA, i, &weaponData))
                    {
                        if (weaponData.Hash == wep)
                        {
                            break;
                        }
                    }
                    i++;
                }

                while (i2 < numDlcComps)
                {
                    if (Function.Call<bool>(Hash.GET_DLC_WEAPON_DATA, i, i2, &compData))
                    {
                        if (compData.Hash == wepcomp)
                        {
                            return compData;
                            break;
                        }
                    }
                    i2++;
                }
            }

            return compData;
        }

        public static string PtrToStringUTF8(IntPtr ptr)
        {
            unsafe
            {
                if (ptr == IntPtr.Zero)
                    return string.Empty;

                var data = (byte*)ptr.ToPointer();

                // Calculate length of null-terminated string
                int len = 0;
                while (data[len] != 0)
                    ++len;

                return PtrToStringUTF8(ptr, len);
            }
        }
        public static string PtrToStringUTF8(IntPtr ptr, int len)
        {
            unsafe
            {
                if (len < 0)
                    throw new ArgumentException(null, nameof(len));

                if (ptr == IntPtr.Zero)
                    return null;
                if (len == 0)
                    return string.Empty;

                return Encoding.UTF8.GetString((byte*)ptr.ToPointer(), len);
            }
        }
        
        public unsafe static string GetDisplayNameFromHash(WeaponHash hash)
        {
            switch (hash)
            {
                case WeaponHash.Unarmed:
                    return "WT_UNARMED";
                case WeaponHash.Knife:
                    return "WT_KNIFE";
                case WeaponHash.Nightstick:
                    return "WT_NGTSTK";
                case WeaponHash.Hammer:
                    return "WT_HAMMER";
                case WeaponHash.Bat:
                    return "WT_BAT";
                case WeaponHash.Crowbar:
                    return "WT_CROWBAR";
                case WeaponHash.GolfClub:
                    return "WT_GOLFCLUB";
                case WeaponHash.Pistol:
                    return "WT_PIST";
                case WeaponHash.CombatPistol:
                    return "WT_PIST_CBT";
                case WeaponHash.Pistol50:
                    return "WT_PIST_50";
                case WeaponHash.APPistol:
                    return "WT_PIST_AP";
                case WeaponHash.StunGun:
                    return "WT_STUN";
                case WeaponHash.MicroSMG:
                    return "WT_SMG_MCR";
                case WeaponHash.SMG:
                    return "WT_SMG";
                case WeaponHash.AssaultSMG:
                    return "WT_SMG_ASL";
                case WeaponHash.AssaultRifle:
                    return "WT_RIFLE_ASL";
                case WeaponHash.CarbineRifle:
                    return "WT_RIFLE_CBN";
                case WeaponHash.AdvancedRifle:
                    return "WT_RIFLE_ADV";
                case WeaponHash.MG:
                    return "WT_MG";
                case WeaponHash.CombatMG:
                    return "WT_MG_CBT";
                case WeaponHash.PumpShotgun:
                    return "WT_SG_PMP";
                case WeaponHash.SawnOffShotgun:
                    return "WT_SG_SOF";
                case WeaponHash.AssaultShotgun:
                    return "WT_SG_ASL";
                case WeaponHash.BullpupShotgun:
                    return "WT_SG_BLP";
                case WeaponHash.SniperRifle:
                    return "WT_SNIP_RIF";
                case WeaponHash.HeavySniper:
                    return "WT_SNIP_HVY";
                case WeaponHash.GrenadeLauncher:
                    return "WT_GL";
                case WeaponHash.RPG:
                    return "WT_RPG";
                case WeaponHash.Minigun:
                    return "WT_MINIGUN";
                case WeaponHash.Grenade:
                    return "WT_GNADE";
                case WeaponHash.StickyBomb:
                    return "WT_GNADE_STK";
                case WeaponHash.SmokeGrenade:
                    return "WT_GNADE_SMK";
                case WeaponHash.BZGas:
                    return "WT_BZGAS";
                case WeaponHash.Molotov:
                    return "WT_MOLOTOV";
                case WeaponHash.FireExtinguisher:
                    return "WT_FIRE";
                case WeaponHash.PetrolCan:
                    return "WT_PETROL";
                case WeaponHash.Ball:
                    return "WT_BALL";
                case WeaponHash.Flare:
                    return "WT_FLARE";
                case WeaponHash.Bottle:
                    return "WT_BOTTLE";
                case WeaponHash.Dagger:
                    return "WT_DAGGER";
                case WeaponHash.Hatchet:
                    return "WT_HATCHET";
                case WeaponHash.Machete:
                    return "WT_MACHETE";
                case WeaponHash.KnuckleDuster:
                    return "WT_KNUCKLE";
                case WeaponHash.SNSPistol:
                    return "WT_SNSPISTOL";
                case WeaponHash.VintagePistol:
                    return "WT_VPISTOL";
                case WeaponHash.HeavyPistol:
                    return "WT_HVYPISTOL";
                case WeaponHash.MarksmanPistol:
                    return "WT_MKPISTOL";
                case WeaponHash.Gusenberg:
                    return "WT_GUSENBERG";
                case WeaponHash.MachinePistol:
                    return "WT_MCHPIST";
                case WeaponHash.CombatPDW:
                    return "WT_COMBATPDW";
                case WeaponHash.SpecialCarbine:
                    return "WT_SPCARBINE";
                case WeaponHash.HeavyShotgun:
                    return "WT_HVYSHOT";
                case WeaponHash.Musket:
                    return "WT_MUSKET";
                case WeaponHash.MarksmanRifle:
                    return "WT_MKRIFLE";
                case WeaponHash.Firework:
                    return "WT_FWRKLNCHR";
                case WeaponHash.HomingLauncher:
                    return "WT_HOMLNCH";
                case WeaponHash.Railgun:
                    return "WT_RAILGUN";
                case WeaponHash.ProximityMine:
                    return "WT_PRXMINE";
                case WeaponHash.Snowball:
                    return "WT_SNWBALL";
                default:
                    {
                        int i = 0;
                        DlcWeaponData dlcWeaponData = default(DlcWeaponData);
                        for (int num = Function.Call<int>(GTA.Native.Hash.GET_NUM_DLC_WEAPONS); i < num; i++)
                        {
                            if (Function.Call<bool>(GTA.Native.Hash.GET_DLC_WEAPON_DATA, i, &dlcWeaponData) && dlcWeaponData.Hash == hash)
                            {
                                return dlcWeaponData.DisplayName;
                            }
                        }

                        return "WT_INVALID";
                    }
            }
        }
        public unsafe static string GetDisplayDescriptionFromHash(WeaponHash hash)
        {
            switch (hash)
            {
                case WeaponHash.Unarmed:
                    return "WTD_UNARMED";
                case WeaponHash.Knife:
                    return "WTD_KNIFE";
                case WeaponHash.Nightstick:
                    return "WTD_NGTSTK";
                case WeaponHash.Hammer:
                    return "WTD_HAMMER";
                case WeaponHash.Bat:
                    return "WTD_BAT";
                case WeaponHash.Crowbar:
                    return "WTD_CROWBAR";
                case WeaponHash.GolfClub:
                    return "WTD_GOLFCLUB";
                case WeaponHash.Pistol:
                    return "WTD_PIST";
                case WeaponHash.CombatPistol:
                    return "WTD_PIST_CBT";
                case WeaponHash.Pistol50:
                    return "WTD_PIST_50";
                case WeaponHash.APPistol:
                    return "WTD_PIST_AP";
                case WeaponHash.StunGun:
                    return "WTD_STUN";
                case WeaponHash.MicroSMG:
                    return "WTD_SMG_MCR";
                case WeaponHash.SMG:
                    return "WTD_SMG";
                case WeaponHash.AssaultSMG:
                    return "WTD_SMG_ASL";
                case WeaponHash.AssaultRifle:
                    return "WTD_RIFLE_ASL";
                case WeaponHash.CarbineRifle:
                    return "WTD_RIFLE_CBN";
                case WeaponHash.AdvancedRifle:
                    return "WTD_RIFLE_ADV";
                case WeaponHash.MG:
                    return "WTD_MG";
                case WeaponHash.CombatMG:
                    return "WTD_MG_CBT";
                case WeaponHash.PumpShotgun:
                    return "WTD_SG_PMP";
                case WeaponHash.SawnOffShotgun:
                    return "WTD_SG_SOF";
                case WeaponHash.AssaultShotgun:
                    return "WTD_SG_ASL";
                case WeaponHash.BullpupShotgun:
                    return "WTD_SG_BLP";
                case WeaponHash.SniperRifle:
                    return "WTD_SNIP_RIF";
                case WeaponHash.HeavySniper:
                    return "WTD_SNIP_HVY";
                case WeaponHash.GrenadeLauncher:
                    return "WTD_GL";
                case WeaponHash.RPG:
                    return "WTD_RPG";
                case WeaponHash.Minigun:
                    return "WTD_MINIGUN";
                case WeaponHash.Grenade:
                    return "WTD_GNADE";
                case WeaponHash.StickyBomb:
                    return "WTD_GNADE_STK";
                case WeaponHash.SmokeGrenade:
                    return "WTD_GNADE_SMK";
                case WeaponHash.BZGas:
                    return "WTD_BZGAS";
                case WeaponHash.Molotov:
                    return "WTD_MOLOTOV";
                case WeaponHash.FireExtinguisher:
                    return "WTD_FIRE";
                case WeaponHash.PetrolCan:
                    return "WTD_PETROL";
                case WeaponHash.Ball:
                    return "WTD_BALL";
                case WeaponHash.Flare:
                    return "WTD_FLARE";
                case WeaponHash.Bottle:
                    return "WTD_BOTTLE";
                case WeaponHash.Dagger:
                    return "WTD_DAGGER";
                case WeaponHash.Hatchet:
                    return "WTD_HATCHET";
                case WeaponHash.Machete:
                    return "WTD_MACHETE";
                case WeaponHash.KnuckleDuster:
                    return "WTD_KNUCKLE";
                case WeaponHash.SNSPistol:
                    return "WTD_SNSPISTOL";
                case WeaponHash.VintagePistol:
                    return "WTD_VPISTOL";
                case WeaponHash.HeavyPistol:
                    return "WTD_HVYPISTOL";
                case WeaponHash.MarksmanPistol:
                    return "WTD_MKPISTOL";
                case WeaponHash.Gusenberg:
                    return "WTD_GUSENBERG";
                case WeaponHash.MachinePistol:
                    return "WTD_MCHPIST";
                case WeaponHash.CombatPDW:
                    return "WTD_COMBATPDW";
                case WeaponHash.SpecialCarbine:
                    return "WTD_SPCARBINE";
                case WeaponHash.HeavyShotgun:
                    return "WTD_HVYSHOT";
                case WeaponHash.Musket:
                    return "WTD_MUSKET";
                case WeaponHash.MarksmanRifle:
                    return "WTD_MKRIFLE";
                case WeaponHash.Firework:
                    return "WTD_FWRKLNCHR";
                case WeaponHash.HomingLauncher:
                    return "WTD_HOMLNCH";
                case WeaponHash.Railgun:
                    return "WTD_RAILGUN";
                case WeaponHash.ProximityMine:
                    return "WTD_PRXMINE";
                case WeaponHash.Snowball:
                    return "WTD_SNWBALL";
                default:
                    {
                        int i = 0;
                        DlcWeaponData dlcWeaponData = default(DlcWeaponData);
                        for (int num = Function.Call<int>(GTA.Native.Hash.GET_NUM_DLC_WEAPONS); i < num; i++)
                        {
                            if (Function.Call<bool>(GTA.Native.Hash.GET_DLC_WEAPON_DATA, i, &dlcWeaponData) && dlcWeaponData.Hash == hash)
                            {
                                return dlcWeaponData.DescriptionLabel;
                            }
                        }

                        return "WTD_INVALID";
                    }
            }
        }
        
        public static unsafe int func_83(int iParam0, DlcWeaponData uParam1)//Position - 0xB4C0
        {
            int iVar0;
            int iVar1;

            iVar1 = Function.Call<int>(Hash.GET_NUM_DLC_WEAPONS);
            iVar0 = 0;
            while (iVar0 < iVar1)
            {
                if (Function.Call<bool>(Hash.GET_DLC_WEAPON_DATA, iVar0, &uParam1)) 
                {
                    if (uParam1.Hash == (WeaponHash)iParam0)
                    {
                        return iVar0;
                    }
                }
                iVar0++;
            }
            return -1;
        }
    }
    #endregion
    #region MPVehicles
    
    public class MPOwnedVehicles
    {
        public List<OwnedVehicle> ownedVehicles = new();
       
        public static void SET_CURRENT_VEHICLE(string name)
        {
            if (File.Exists($"scripts\\CruelMastersOnlineOfflineAssets\\Vehicles\\Owned Vehicles\\{name}.xml"))
            {
                if (File.Exists("scripts\\CruelMastersOnlineOfflineAssets\\Vehicles\\CurrentVehicle.xml"))
                {
                    MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(-44.79081f, -1082.522f, 26.68505f), 68.64507f);

                    
                }
                else
                {
                    Notification.Show("You don't have a personal vehicle.", true);
                }
            }
            else
            {
                Notification.Show("Couldn't find this owned vehicle.", true);
            }
        }

        public static void SAVE_PREVIOUS_OWNED_VEHICLE(string LoadoutFilename, string name)
        {
            MPVehicleLoadout file = XMLSerializer.DeserializeXML<MPVehicleLoadout>(LoadoutFilename);
            MPOwnedVehicles CurrentVehicle = new();
            OwnedVehicle CurrentOwnedVehicle = new();
            CurrentOwnedVehicle.VehicleName = name;
            CurrentOwnedVehicle.VehicleName = File.;
            CurrentOwnedVehicle.VehicleStats = file.CurrenVehicleLoadout[0];
            
            CurrentVehicle.ownedVehicles.Add(CurrentOwnedVehicle);
            XMLSerializer.SaveToXML<MPOwnedVehicles>(CurrentVehicle, $"scripts\\CruelMastersOnlineOfflineAssets\\Vehicles\\Owned Vehicles\\{CurrentVehicle.ownedVehicles[0].VehicleName}.xml");
        }
    }
    public class OwnedVehicle
    {
        public string VehicleName;
        public string VehicleID;
        public VehicleWithComponents VehicleStats;
        
        public OwnedVehicle()
        {

        }
    }
    public class MPVehicleLoadout
    {
        public List<VehicleWithComponents> CurrenVehicleLoadout = new();
        
        public static void SAVE_VEHICLE(Vehicle veh, string Filename)
        {
            if (veh != null)
            {
                //Function.Call(Hash.SET_VEHICLE_MOD_KIT, veh, 0);
            }
            MPVehicleLoadout CurrentVehicle = new();
            VehicleWithComponents Current = new();

            Current.VehicleHash = veh.Model.Hash;
            Current.VehicleHandle = veh.Handle;

            int[] ModPaint1array = { 0, 0, 0 };
            unsafe
            {
                int mod1a, mod1b, mod1c;
                Function.Call(Hash.GET_VEHICLE_MOD_COLOR_1, veh, &mod1a, &mod1b, &mod1c);

                ModPaint1array[0] = mod1a;
                ModPaint1array[1] = mod1b;
                ModPaint1array[2] = mod1c;
            }
            Current.ModPaint1 = ModPaint1array;

            int[] ModPaint2array = { 0, 0 };
            unsafe
            {
                OutputArgument outputarg = new();
                OutputArgument outputarg1 = new();
                Function.Call(Hash.GET_VEHICLE_MOD_COLOR_2, veh, outputarg, outputarg1);

                ModPaint2array[0] = outputarg.GetResult<int>();
                ModPaint2array[1] = outputarg1.GetResult<int>();
            }
            Current.ModPaint2 = ModPaint2array;

            bool[] ModPaintIsCustomarray = { false, false };
            ModPaintIsCustomarray[0] = Function.Call<bool>(Hash.GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM, veh);
            ModPaintIsCustomarray[1] = Function.Call<bool>(Hash.GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM, veh);
            Current.ModPaintIsCustom = ModPaintIsCustomarray;

            int[] Paintsarray = { 0, 0 };
            unsafe
            {
                OutputArgument outputarg = new();
                OutputArgument outputarg1 = new();
                Function.Call(Hash.GET_VEHICLE_COLOURS, veh, outputarg, outputarg1);

                Paintsarray[0] = outputarg.GetResult<int>();
                Paintsarray[1] = outputarg1.GetResult<int>();
            }
            Current.Paints = Paintsarray;

            int[] PrimaryPaintarray = { 0, 0, 0 };
            unsafe
            {
                OutputArgument outputarg = new();
                OutputArgument outputarg1 = new();
                OutputArgument outputarg2 = new();
                Function.Call(Hash.GET_VEHICLE_CUSTOM_PRIMARY_COLOUR, veh, outputarg, outputarg1, outputarg2);
                
                PrimaryPaintarray[0] = outputarg.GetResult<int>();
                PrimaryPaintarray[1] = outputarg1.GetResult<int>();
                PrimaryPaintarray[2] = outputarg2.GetResult<int>();
            }
            Current.PrimaryPaint = PrimaryPaintarray;

            int[] SecondaryPaintarray = { 0, 0, 0 };
            unsafe
            {
                OutputArgument outputarg = new();
                OutputArgument outputarg1 = new();
                OutputArgument outputarg2 = new();
                Function.Call(Hash.GET_VEHICLE_CUSTOM_SECONDARY_COLOUR, veh, outputarg, outputarg1, outputarg2);

                SecondaryPaintarray[0] = outputarg.GetResult<int>();
                SecondaryPaintarray[1] = outputarg1.GetResult<int>();
                SecondaryPaintarray[2] = outputarg2.GetResult<int>();
            }
            Current.SecondaryPaint = SecondaryPaintarray;

            int[] RimPaintarray = { 0, 0 };
            unsafe
            {
                OutputArgument[] outputarg = { new(), new() };
                Function.Call(Hash.GET_VEHICLE_EXTRA_COLOURS, veh, outputarg[0], outputarg[1]);
                
                RimPaintarray[0] = outputarg[0].GetResult<int>();
                RimPaintarray[1] = outputarg[1].GetResult<int>();
            }
            Current.RimPaint = RimPaintarray;

            int[] TyreSmokeRGBColorarray = { 0, 0, 0 };
            unsafe
            {
                OutputArgument[] outputarg = { new(), new(), new() };
                Function.Call(Hash.GET_VEHICLE_TYRE_SMOKE_COLOR, veh, outputarg[0], outputarg[1], outputarg[2]);

                TyreSmokeRGBColorarray[0] = outputarg[0].GetResult<int>();
                TyreSmokeRGBColorarray[1] = outputarg[1].GetResult<int>();
                TyreSmokeRGBColorarray[2] = outputarg[2].GetResult<int>();
            }
            Current.TyreSmokeRGBColor = TyreSmokeRGBColorarray;

            if (Function.Call<int>(Hash.GET_VEHICLE_MOD_VARIATION, veh, 23) == 1)
            {
                Current.WheelCustom = true;
            }
            else
            {
                Current.WheelCustom = false;
            }
            if (veh.Model.IsBike)
            {
                if (Function.Call<int>(Hash.GET_VEHICLE_MOD_VARIATION, veh, 24) == 1)
                {
                    Current.WheelCustom = true;
                }
                else
                {
                    Current.WheelCustom = false;
                }
            }
            
            int[] ExtraColorsarray = { 0, 0 };
            unsafe
            {
                OutputArgument[] outputarg = { new(), new() };
                Function.Call(Hash.GET_VEHICLE_EXTRA_COLOUR_5, veh, outputarg[0]);
                Function.Call(Hash.GET_VEHICLE_EXTRA_COLOUR_6, veh, outputarg[1]);

                ExtraColorsarray[0] = outputarg[0].GetResult<int>();
                ExtraColorsarray[1] = outputarg[1].GetResult<int>();
            }
            Current.ExtraColors = ExtraColorsarray;

            Current.XeonLightColor = Function.Call<int>(Hash.GET_VEHICLE_XENON_LIGHT_COLOR_INDEX, veh);

            int[] Liverysarray = { Function.Call<int>(Hash.GET_VEHICLE_LIVERY, veh), Function.Call<int>(Hash.GET_VEHICLE_LIVERY2, veh), -1 };
            Current.Liverys = Liverysarray;

            Current.PlateText = Function.Call<string>(Hash.GET_VEHICLE_NUMBER_PLATE_TEXT, veh);
            Current.PlateType = Function.Call<int>(Hash.GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX, veh);

            Current.WheelType = Function.Call<int>(Hash.GET_VEHICLE_WHEEL_TYPE, veh);
            Current.WheelCanBurst = Function.Call<bool>(Hash.GET_VEHICLE_TYRES_CAN_BURST, veh);

            Current.WindowTint = Function.Call<int>(Hash.GET_VEHICLE_WINDOW_TINT, veh);

            bool[] Neonsarray = { false, false, false, false };
            Neonsarray[0] = Function.Call<bool>(Hash.GET_VEHICLE_NEON_ENABLED, veh, 0);
            Neonsarray[1] = Function.Call<bool>(Hash.GET_VEHICLE_NEON_ENABLED, veh, 1);
            Neonsarray[2] = Function.Call<bool>(Hash.GET_VEHICLE_NEON_ENABLED, veh, 2);
            Neonsarray[3] = Function.Call<bool>(Hash.GET_VEHICLE_NEON_ENABLED, veh, 3);
            Current.NeonEnabled = Neonsarray;
            
            int[] NeonRGBarray = { 0, 0, 0, -1 };
            unsafe
            {
                OutputArgument[] outputarg = { new(), new(), new() };
                Function.Call(Hash.GET_VEHICLE_NEON_COLOUR, veh, outputarg[0], outputarg[1], outputarg[2]);

                NeonRGBarray[0] = outputarg[0].GetResult<int>();
                NeonRGBarray[1] = outputarg[1].GetResult<int>();
                NeonRGBarray[2] = outputarg[2].GetResult<int>();
            }
            Current.NeonRGB = NeonRGBarray;

            bool[] VehicleExtrasarray = { false, false, false, false, false, false, false, false, false, false, false, false, false, false };

            for (int i = 0; i < VehicleExtrasarray.Length; i++)
            {
                if (Function.Call<bool>(Hash.DOES_EXTRA_EXIST, veh, i))
                {
                    if (Function.Call<bool>(Hash.IS_VEHICLE_EXTRA_TURNED_ON, veh, i))
                    {
                        VehicleExtrasarray[i] = false;
                    }
                    else
                    {
                        VehicleExtrasarray[i] = true;
                    }
                }
            }
            Current.VehicleExtras = VehicleExtrasarray;

            int[] VehicleModsarray = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

            for (int i = 0; i < 49; i++)
            {
                VehicleModsarray[i] = Function.Call<int>(Hash.GET_VEHICLE_MOD, veh, i);
            }
            Current.VehicleMods = VehicleModsarray;

            bool[] ToggleModsarray = { false, false, false, false, false, false };

            ToggleModsarray[0] = Function.Call<bool>(Hash.IS_TOGGLE_MOD_ON, veh, 17);
            ToggleModsarray[1] = Function.Call<bool>(Hash.IS_TOGGLE_MOD_ON, veh, 18);
            ToggleModsarray[2] = Function.Call<bool>(Hash.IS_TOGGLE_MOD_ON, veh, 19);
            ToggleModsarray[3] = Function.Call<bool>(Hash.IS_TOGGLE_MOD_ON, veh, 20);
            ToggleModsarray[4] = Function.Call<bool>(Hash.IS_TOGGLE_MOD_ON, veh, 21);
            ToggleModsarray[5] = Function.Call<bool>(Hash.IS_TOGGLE_MOD_ON, veh, 22);
            
            Current.ToggleMods = ToggleModsarray;

            CurrentVehicle.CurrenVehicleLoadout.Add(Current);
            XMLSerializer.SaveToXML<MPVehicleLoadout>(CurrentVehicle, Filename);
        }
        
        public static Vehicle GET_VEHICLE_LOADOUT(string Filename, Vector3 SpawnLoc, float SpawnHeading)
        {
            MPVehicleLoadout file = XMLSerializer.DeserializeXML<MPVehicleLoadout>(Filename);

            Vehicle veh = World.CreateVehicle(file.CurrenVehicleLoadout[0].VehicleHash, SpawnLoc, SpawnHeading);
            Function.Call(Hash.SET_VEHICLE_MOD_KIT, veh, 0);

            Function.Call(Hash.SET_VEHICLE_MOD_COLOR_1, veh, file.CurrenVehicleLoadout[0].ModPaint1[0], file.CurrenVehicleLoadout[0].ModPaint1[1], file.CurrenVehicleLoadout[0].ModPaint1[2]);
            Function.Call(Hash.SET_VEHICLE_MOD_COLOR_2, veh, file.CurrenVehicleLoadout[0].ModPaint2[0], file.CurrenVehicleLoadout[0].ModPaint2[1]);
            
            Function.Call(Hash.SET_VEHICLE_COLOURS, veh, file.CurrenVehicleLoadout[0].Paints[0], file.CurrenVehicleLoadout[0].Paints[1]);
            
            
            if (file.CurrenVehicleLoadout[0].ModPaintIsCustom[0])
            {
                Function.Call(Hash.SET_VEHICLE_CUSTOM_PRIMARY_COLOUR, veh, file.CurrenVehicleLoadout[0].PrimaryPaint[0], file.CurrenVehicleLoadout[0].PrimaryPaint[1], file.CurrenVehicleLoadout[0].PrimaryPaint[2]);
            }
            if (file.CurrenVehicleLoadout[0].ModPaintIsCustom[1])
            {
                Function.Call(Hash.SET_VEHICLE_CUSTOM_SECONDARY_COLOUR, veh, file.CurrenVehicleLoadout[0].SecondaryPaint[0], file.CurrenVehicleLoadout[0].SecondaryPaint[1], file.CurrenVehicleLoadout[0].SecondaryPaint[2]);
            }
            Function.Call(Hash.SET_VEHICLE_EXTRA_COLOURS, veh, file.CurrenVehicleLoadout[0].RimPaint[0], file.CurrenVehicleLoadout[0].RimPaint[1]);
            Function.Call(Hash.SET_VEHICLE_TYRE_SMOKE_COLOR, veh, file.CurrenVehicleLoadout[0].TyreSmokeRGBColor[0], file.CurrenVehicleLoadout[0].TyreSmokeRGBColor[1], file.CurrenVehicleLoadout[0].TyreSmokeRGBColor[2]);
            Function.Call(Hash.SET_VEHICLE_EXTRA_COLOUR_5, veh, file.CurrenVehicleLoadout[0].ExtraColors[0]);
            Function.Call(Hash.SET_VEHICLE_EXTRA_COLOUR_6, veh, file.CurrenVehicleLoadout[0].ExtraColors[1]);
            Function.Call(Hash.SET_VEHICLE_XENON_LIGHT_COLOR_INDEX, veh, file.CurrenVehicleLoadout[0].XeonLightColor);
            Function.Call(Hash.SET_VEHICLE_LIVERY, veh, file.CurrenVehicleLoadout[0].Liverys[0]);
            Function.Call(Hash.SET_VEHICLE_LIVERY2, veh, file.CurrenVehicleLoadout[0].Liverys[1]);
            Function.Call(Hash.SET_VEHICLE_NUMBER_PLATE_TEXT, veh, file.CurrenVehicleLoadout[0].PlateText);
            Function.Call(Hash.SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX, veh, file.CurrenVehicleLoadout[0].PlateType);
            Function.Call(Hash.SET_VEHICLE_WHEEL_TYPE, veh, file.CurrenVehicleLoadout[0].WheelType);
            Function.Call(Hash.SET_VEHICLE_TYRES_CAN_BURST, veh, file.CurrenVehicleLoadout[0].WheelCanBurst);
            Function.Call(Hash.SET_VEHICLE_WINDOW_TINT, veh, file.CurrenVehicleLoadout[0].WindowTint);
            Function.Call(Hash.SET_VEHICLE_DIRT_LEVEL, veh, 0.0f);

            Function.Call(Hash.SET_VEHICLE_NEON_ENABLED, veh, 0, file.CurrenVehicleLoadout[0].NeonEnabled[0]);
            Function.Call(Hash.SET_VEHICLE_NEON_ENABLED, veh, 1, file.CurrenVehicleLoadout[0].NeonEnabled[1]);
            Function.Call(Hash.SET_VEHICLE_NEON_ENABLED, veh, 2, file.CurrenVehicleLoadout[0].NeonEnabled[2]);
            Function.Call(Hash.SET_VEHICLE_NEON_ENABLED, veh, 3, file.CurrenVehicleLoadout[0].NeonEnabled[3]);

            Function.Call(Hash.SET_VEHICLE_NEON_COLOUR, veh, file.CurrenVehicleLoadout[0].NeonRGB[0], file.CurrenVehicleLoadout[0].NeonRGB[1], file.CurrenVehicleLoadout[0].NeonRGB[2]);

            for (int i = 0; i < file.CurrenVehicleLoadout[0].VehicleExtras.Length; i++)
            {
                Function.Call(Hash.SET_VEHICLE_EXTRA, veh, i, file.CurrenVehicleLoadout[0].VehicleExtras[i]);
            }

            for (int i = 0; i < 49; i++)
            {
                Function.Call(Hash.SET_VEHICLE_MOD, veh, i, file.CurrenVehicleLoadout[0].VehicleMods[i], Function.Call<int>(Hash.GET_VEHICLE_MOD_VARIATION, veh, 24) == 1);
                if (file.CurrenVehicleLoadout[0].VehicleMods[i] == -1)
                {
                    Function.Call(Hash.REMOVE_VEHICLE_MOD, veh, i);
                }
            }
            
            Function.Call(Hash.SET_VEHICLE_MOD, veh, 23, 0, file.CurrenVehicleLoadout[0].WheelCustom);
            if (veh.Model.IsBike)
            {
                Function.Call(Hash.SET_VEHICLE_MOD, veh, 24, 0, file.CurrenVehicleLoadout[0].WheelCustom);
            }

            Function.Call(Hash.TOGGLE_VEHICLE_MOD, veh, 17, file.CurrenVehicleLoadout[0].ToggleMods[0]);
            Function.Call(Hash.TOGGLE_VEHICLE_MOD, veh, 18, file.CurrenVehicleLoadout[0].ToggleMods[1]);
            Function.Call(Hash.TOGGLE_VEHICLE_MOD, veh, 19, file.CurrenVehicleLoadout[0].ToggleMods[2]);
            Function.Call(Hash.TOGGLE_VEHICLE_MOD, veh, 20, file.CurrenVehicleLoadout[0].ToggleMods[3]);
            Function.Call(Hash.TOGGLE_VEHICLE_MOD, veh, 21, file.CurrenVehicleLoadout[0].ToggleMods[4]);
            Function.Call(Hash.TOGGLE_VEHICLE_MOD, veh, 22, file.CurrenVehicleLoadout[0].ToggleMods[5]);

            return veh;
        }

        public static void SPAWN_PERSONAL_VEHICLE(Vector3 SpawnLoc, float SpawnHeading)
        {
            Function.Call(Hash.CLEAR_AREA, SpawnLoc.X, SpawnLoc.Y, SpawnLoc.Z, 30f, 1, 0, 0, false);
            if (Main.PlayerVehicle != null)
            {
                Main.PlayerVehicle.Delete();
                Main.PlayerVehicle = null;
            }
            while (Main.PlayerVehicle == null)
            {
                if (File.Exists("scripts\\CruelMastersOnlineOfflineAssets\\Vehicles\\CurrentVehicle.xml"))
                {
                    Main.PlayerVehicle = MPVehicleLoadout.GET_VEHICLE_LOADOUT("scripts\\CruelMastersOnlineOfflineAssets\\Vehicles\\CurrentVehicle.xml", SpawnLoc, SpawnHeading);
                }
                else
                {
                    break;
                }
                Wait(0);
            }
            if (Main.PlayerVehicle != null)
            {
                Function.Call(Hash.SET_VEHICLE_ON_GROUND_PROPERLY, Main.PlayerVehicle, 1084227584);
                while (Main.PlayerVehicle.AttachedBlip == null)
                {
                    Main.PlayerVehicle.AddBlip();
                    Wait(0);
                }
                Main.PlayerVehicle.AttachedBlip.Sprite = BlipSprite.PersonalVehicleCar;
                if (Main.PlayerVehicle.Model.IsBike || Main.PlayerVehicle.Model.IsAmphibiousQuadBike || Main.PlayerVehicle.Model.IsQuadBike)
                {
                    Main.PlayerVehicle.AttachedBlip.Sprite = BlipSprite.PersonalVehicleBike;
                }
                Main.PlayerVehicle.AttachedBlip.Color = BlipColor.White;
                Main.PlayerVehicle.AttachedBlip.Name = "Personal Vehicle";
            }
        }
    }
    public class VehicleWithComponents
    {
        public int VehicleHash;
        public int VehicleHandle;
        public int[] ModPaint1;
        public int[] ModPaint2;
        public bool[] ModPaintIsCustom;
        public int[] Paints;
        public int[] PrimaryPaint; //R - G - B
        public int[] SecondaryPaint; //paint job type(0 - 6) - color.
        public int[] RimPaint; //pearl color - color.
        public int[] TyreSmokeRGBColor;
        public int[] ExtraColors; //interior color (5) - dashboard color (6).
        public int XeonLightColor; //Xeon Light Color (0 - 12).
        public int[] Liverys; //Livery 1 (normal Livery) - Livery 2 (roof stuff).
        public string PlateText; //text on number plate on vehicle.
        public int PlateType; //Type of number plate on vehicle.
        public int WheelType; //Type of wheel on vehicle.
        public bool WheelCustom;
        public bool WheelCanBurst; //Type of wheel on vehicle.
        public int WindowTint; //Tint of windows on vehicle.
        public bool[] NeonEnabled; //Left(0) - Right(1) - Front(2) - Back(3)
        public int[] NeonRGB; //R - G - B
        public bool[] VehicleExtras; //(1 - 14)
        public int[] VehicleMods; //(GET_NUM_VEHICLE_MODS(vehicle, modtype))
        public bool[] ToggleMods; //(TOGGLE_VEHICLE_MOD(vehicle, modtype))

        public VehicleWithComponents()
        {
        }
    }
    
    // Players Personal/Current Active Vehicle Controller
    internal class MPPVC : Script
    {

        public MPPVC()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }

        public void onTick(object sender, EventArgs e)
        {
            if (File.Exists("scripts\\CruelMastersOnlineOfflineAssets\\Vehicles\\CurrentVehicle.xml"))
            {
                if (Main.PlayerVehicle != null)
                {
                    if (Game.Player.Character.CurrentVehicle == Main.PlayerVehicle)
                    {
                        if (Main.PlayerVehicle.AttachedBlip != null)
                        {
                            Main.PlayerVehicle.AttachedBlip.Alpha = 0;
                        }
                    }
                    else
                    {
                        if (Main.PlayerVehicle.AttachedBlip != null)
                        {
                            Main.PlayerVehicle.AttachedBlip.Alpha = 255;
                        }
                    }
                    if (Main.PlayerVehicle.IsDead)
                    {
                        if (Main.PlayerVehicle.AttachedBlip != null)
                        {
                            Main.PlayerVehicle.AttachedBlip.Delete();
                        }
                        Main.PlayerVehicle.MarkAsNoLongerNeeded();
                        Main.PlayerVehicle = null;
                    }
                }
            }
        }

        public void onShutdown(object sender, EventArgs e)
        {

        }
    }
    //------------------------------------------
    
    internal class Lemonui_Plus : LemonUI.Menus.NativeItem
    {
        public int modIndex;

        public Lemonui_Plus(string title, string subtitle, int mod_Index) : base(title, subtitle)
        {
            modIndex = mod_Index;
        }

    }
    internal class MPModShop : Script
    {
        public static bool GarageTransactionSpent = false;
        public static int GarageSwitch = 0;
        public static int GarageControlSwitch = 0;
        public MPModShop()
        {
            Tick += onTick;
            Aborted += onShutdown;

            MDPool = new LemonUI.ObjectPool();
            MainMenu = new LemonUI.Menus.NativeMenu("", "CATAGORIES", "");
            LemonUI.Elements.ScaledTexture backround = new LemonUI.Elements.ScaledTexture(MainMenu.Banner.Position, new SizeF(MainMenu.Banner.Size.Width, MainMenu.Banner.Size.Height), "shopui_title_auto_shop", "shopui_title_auto_shop");
            MainMenu.Banner = backround;
            MainMenu.UseMouse = false;
            MainMenu.ItemCount = LemonUI.Menus.CountVisibility.Always;

            MDPool.Add(MainMenu);
        }

        public void onTick(object sender, EventArgs e)
        {
            if (Main.DEBUG)
            {
                if (Game.IsControlJustPressed(GTA.Control.Context))
                {
                    //MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(Game.Player.Character.Position, 0f);
                    //Game.Player.Character.SetIntoVehicle(Main.PlayerVehicle, VehicleSeat.Driver);
                    //Main.PlayerVehicle.RadioStation = RadioStation.RadioOff;
                    //MOD_SHOP_MENU(Main.PlayerVehicle);
                }
            }
            
            if (MDPool != null && MDPool.AreAnyVisible)
            {
                SHOW_RGB(Main.PlayerVehicle);
                MDPool.Process();
            }
            Blip[] lsblips = World.GetAllBlips(BlipSprite.LosSantosCustoms);
            foreach (Blip blip in lsblips)
            {
                Prop[] lsdoors = World.GetNearbyProps(blip.Position, 20f);
                foreach (Prop gdoor in lsdoors)
                {
                    if (gdoor != null)
                    {
                        if (gdoor.IsPositionFrozen)
                        {
                            gdoor.IsPositionFrozen = false;
                        }
                    }
                }
            }
            
            if (Game.Player.Character.Position.DistanceTo(new Vector3(-1144.699f, -1989.946f, 13.16199f)) < 100f)
            {
                GarageControlSwitch = 0;
            }
            if (Game.Player.Character.Position.DistanceTo(new Vector3(719.5757f, -1088.77f, 22.03f)) < 100f)
            {
                GarageControlSwitch = 1;
            }
            if (Game.Player.Character.Position.DistanceTo(new Vector3(-353.2156f, -135.7295f, 38.73895f)) < 100f)
            {
                GarageControlSwitch = 2;
            }
            if (Game.Player.Character.Position.DistanceTo(new Vector3(1174.841f, 2649.521f, 37.53205f)) < 100f)
            {
                GarageControlSwitch = 3;
            }
            if (Game.Player.Character.Position.DistanceTo(new Vector3(116.5889f, 6620.897f, 31.58369f)) < 100f)
            {
                GarageControlSwitch = 4;
            }
            switch (GarageControlSwitch)
            {
                case 0://1st garage near airport
                    {
                        switch (GarageSwitch)
                        {
                            case 0://enter customs
                                {
                                    if (Game.Player.Character.CurrentVehicle != null)
                                    {
                                        if (Game.Player.Character.Position.DistanceTo(new Vector3(-1144.699f, -1989.946f, 13.16199f)) < 6f)
                                        {
                                            if (Game.Player.Character.CurrentVehicle == Main.PlayerVehicle)
                                            {
                                                Mobile_Phone.CAN_OPEN_PHONE = false;
                                                Main.CutsceneCam = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 50.0f);
                                                Main.CutsceneCam.AttachTo(Main.PlayerVehicle, new Vector3(0f, 15f, 1f));
                                                Main.CutsceneCam.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));

                                                Main.CutsceneCam2 = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 55.0f);
                                                Main.CutsceneCam2.AttachTo(Main.PlayerVehicle, new Vector3(-3f, 4f, 1f));
                                                Main.CutsceneCam2.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));
                                                World.RenderingCamera = Main.CutsceneCam;
                                                Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 10000, 3, 1);

                                                Main.PlayerVehicle.Position = new Vector3(-1142.398f, -1987.646f, 13.16434f - 1f);
                                                Main.PlayerVehicle.Heading = 133.8112f;
                                                Game.Player.CanControlCharacter = false;
                                                TaskSequence task5 = new();
                                                task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(-1151.852f, -1997.39f, 13.18025f), 1f, 5f, DrivingStyle.Normal);
                                                task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(-1155.433f, -2004.5f, 13.18025f), 1f, 5f, DrivingStyle.Normal);
                                                task5.Close();
                                                Game.Player.Character.Task.PerformSequence(task5);
                                                task5.Dispose();

                                                while (Main.CutsceneCam2.IsInterpolating)
                                                {
                                                    Wait(0);
                                                }

                                                Main.CutsceneCam.Delete();
                                                Main.CutsceneCam = null;
                                                Main.CutsceneCam2.Delete();
                                                Main.CutsceneCam2 = null;
                                                World.RenderingCamera = null;
                                                Game.Player.CanControlCharacter = true;
                                                Main.PlayerVehicle.IsPositionFrozen = true;
                                                Main.PlayerVehicle.LockStatus = VehicleLockStatus.PlayerCannotLeaveCanBeBrokenIntoPersist;
                                                MOD_SHOP_MENU(Main.PlayerVehicle);
                                                GarageSwitch = 1;
                                            }
                                            else
                                            {
                                                Screen.ShowHelpTextThisFrame("This vehicle cannot enter Los Santos Customs.");
                                            }
                                        }
                                    }
                                }
                                break;
                            case 1://pay for car/cancel upgrade
                                {
                                    if (!MDPool.AreAnyVisible)
                                    {
                                        Main.CutsceneCam = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 50.0f);
                                        Main.CutsceneCam.AttachTo(Main.PlayerVehicle, new Vector3(0f, 15f, 1f));
                                        Main.CutsceneCam.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));

                                        Main.CutsceneCam2 = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 55.0f);
                                        Main.CutsceneCam2.AttachTo(Main.PlayerVehicle, new Vector3(-3f, 4f, 1f));
                                        Main.CutsceneCam2.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));
                                        World.RenderingCamera = Main.CutsceneCam;
                                        Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 10000, 3, 1);

                                        if (GarageTransactionSpent)
                                        {
                                            Main.PlayerVehicle.Position = new Vector3(-1150.175f, -1995.835f, 12.91347f);
                                            Main.PlayerVehicle.Heading = 316.657f;
                                            Main.PlayerVehicle.IsPositionFrozen = false;
                                            GarageTransactionSpent = false;
                                        }
                                        else
                                        {
                                            MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(-1150.175f, -1995.835f, 12.91347f), 316.657f);
                                            Game.Player.Character.SetIntoVehicle(Main.PlayerVehicle, VehicleSeat.Driver);
                                            Main.PlayerVehicle.RadioStation = RadioStation.RadioOff;

                                            Main.CutsceneCam.Delete();
                                            Main.CutsceneCam = null;
                                            Main.CutsceneCam2.Delete();
                                            Main.CutsceneCam2 = null;
                                            
                                            Main.CutsceneCam = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 50.0f);
                                            Main.CutsceneCam.AttachTo(Main.PlayerVehicle, new Vector3(0f, 15f, 1f));
                                            Main.CutsceneCam.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));

                                            Main.CutsceneCam2 = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 55.0f);
                                            Main.CutsceneCam2.AttachTo(Main.PlayerVehicle, new Vector3(-3f, 4f, 1f));
                                            Main.CutsceneCam2.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));
                                            World.RenderingCamera = Main.CutsceneCam;
                                            Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 10000, 3, 1);
                                        }
                                        Game.Player.CanControlCharacter = false;
                                        TaskSequence task5 = new();
                                        task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(-1140.353f, -1985.718f, 12.89486f), 1f, 5f, DrivingStyle.Normal);
                                        task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(-1136.159f, -1983.663f, 12.89474f), 1f, 5f, DrivingStyle.Normal);
                                        task5.Close();
                                        Game.Player.Character.Task.PerformSequence(task5);
                                        task5.Dispose();

                                        while (Main.CutsceneCam2.IsInterpolating)
                                        {
                                            Wait(0);
                                        }

                                        Mobile_Phone.CAN_OPEN_PHONE = true;
                                        Main.CutsceneCam.Delete();
                                        Main.CutsceneCam = null;
                                        Main.CutsceneCam2.Delete();
                                        Main.CutsceneCam2 = null;
                                        World.RenderingCamera = null;
                                        Game.Player.CanControlCharacter = true;
                                        Main.PlayerVehicle.IsPositionFrozen = false;
                                        Main.PlayerVehicle.LockStatus = VehicleLockStatus.None;
                                        GarageSwitch = 0;
                                    }
                                }
                                break;
                        }
                    }
                    break;
                case 1://2nd garage near lesters factory
                    {
                        switch (GarageSwitch)
                        {
                            case 0://enter customs
                                {
                                    if (Game.Player.Character.CurrentVehicle != null)
                                    {
                                        if (Game.Player.Character.Position.DistanceTo(new Vector3(719.5757f, -1088.77f, 22.03f)) < 6f)
                                        {
                                            if (Game.Player.Character.CurrentVehicle == Main.PlayerVehicle)
                                            {
                                                Mobile_Phone.CAN_OPEN_PHONE = false;
                                                Main.CutsceneCam = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 50.0f);
                                                Main.CutsceneCam.AttachTo(Main.PlayerVehicle, new Vector3(0f, 15f, 1f));
                                                Main.CutsceneCam.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));

                                                Main.CutsceneCam2 = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 55.0f);
                                                Main.CutsceneCam2.AttachTo(Main.PlayerVehicle, new Vector3(-3f, 4f, 1f));
                                                Main.CutsceneCam2.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));
                                                World.RenderingCamera = Main.CutsceneCam;
                                                Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 10000, 3, 1);

                                                Main.PlayerVehicle.Position = new Vector3(717.346f, -1088.722f, 22.07812f - 1f);
                                                Main.PlayerVehicle.Heading = 269.0187f;
                                                Game.Player.CanControlCharacter = false;
                                                TaskSequence task5 = new();
                                                task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(724.8883f, -1088.828f, 21.92594f), 1f, 5f, DrivingStyle.Normal);
                                                task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(731.6036f, -1087.519f, 21.89825f), 1f, 5f, DrivingStyle.Normal);
                                                task5.Close();
                                                Game.Player.Character.Task.PerformSequence(task5);
                                                task5.Dispose();

                                                while (Main.CutsceneCam2.IsInterpolating)
                                                {
                                                    Wait(0);
                                                }

                                                Main.CutsceneCam.Delete();
                                                Main.CutsceneCam = null;
                                                Main.CutsceneCam2.Delete();
                                                Main.CutsceneCam2 = null;
                                                World.RenderingCamera = null;
                                                Game.Player.CanControlCharacter = true;
                                                Main.PlayerVehicle.IsPositionFrozen = true;
                                                Main.PlayerVehicle.LockStatus = VehicleLockStatus.PlayerCannotLeaveCanBeBrokenIntoPersist;
                                                MOD_SHOP_MENU(Main.PlayerVehicle);
                                                GarageSwitch = 1;
                                            }
                                            else
                                            {
                                                Screen.ShowHelpTextThisFrame("This vehicle cannot enter Los Santos Customs.");
                                            }
                                        }
                                    }
                                }
                                break;
                            case 1://pay for car/cancel upgrade
                                {
                                    if (!MDPool.AreAnyVisible)
                                    {
                                        Main.CutsceneCam = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 50.0f);
                                        Main.CutsceneCam.AttachTo(Main.PlayerVehicle, new Vector3(0f, 15f, 1f));
                                        Main.CutsceneCam.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));

                                        Main.CutsceneCam2 = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 55.0f);
                                        Main.CutsceneCam2.AttachTo(Main.PlayerVehicle, new Vector3(-3f, 4f, 1f));
                                        Main.CutsceneCam2.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));
                                        World.RenderingCamera = Main.CutsceneCam;
                                        Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 10000, 3, 1);

                                        if (GarageTransactionSpent)
                                        {
                                            Main.PlayerVehicle.Position = new Vector3(731.7839f, -1088.625f, 21.89871f);
                                            Main.PlayerVehicle.Heading = 88.74612f;
                                            Main.PlayerVehicle.IsPositionFrozen = false;
                                            GarageTransactionSpent = false;
                                        }
                                        else
                                        {
                                            MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(731.7839f, -1088.625f, 21.89871f), 88.74612f);
                                            Game.Player.Character.SetIntoVehicle(Main.PlayerVehicle, VehicleSeat.Driver);
                                            Main.PlayerVehicle.RadioStation = RadioStation.RadioOff;

                                            Main.CutsceneCam.Delete();
                                            Main.CutsceneCam = null;
                                            Main.CutsceneCam2.Delete();
                                            Main.CutsceneCam2 = null;

                                            Main.CutsceneCam = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 50.0f);
                                            Main.CutsceneCam.AttachTo(Main.PlayerVehicle, new Vector3(0f, 15f, 1f));
                                            Main.CutsceneCam.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));

                                            Main.CutsceneCam2 = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 55.0f);
                                            Main.CutsceneCam2.AttachTo(Main.PlayerVehicle, new Vector3(-3f, 4f, 1f));
                                            Main.CutsceneCam2.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));
                                            World.RenderingCamera = Main.CutsceneCam;
                                            Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 10000, 3, 1);
                                        }
                                        Game.Player.CanControlCharacter = false;
                                        TaskSequence task5 = new();
                                        task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(718.3081f, -1088.118f, 22.05315f), 1f, 5f, DrivingStyle.Normal);
                                        task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(709.1119f, -1084.194f, 22.14146f), 1f, 5f, DrivingStyle.Normal);
                                        task5.Close();
                                        Game.Player.Character.Task.PerformSequence(task5);
                                        task5.Dispose();

                                        while (Main.CutsceneCam2.IsInterpolating)
                                        {
                                            Wait(0);
                                        }

                                        Mobile_Phone.CAN_OPEN_PHONE = true;
                                        Main.CutsceneCam.Delete();
                                        Main.CutsceneCam = null;
                                        Main.CutsceneCam2.Delete();
                                        Main.CutsceneCam2 = null;
                                        World.RenderingCamera = null;
                                        Game.Player.CanControlCharacter = true;
                                        Main.PlayerVehicle.IsPositionFrozen = false;
                                        Main.PlayerVehicle.LockStatus = VehicleLockStatus.None;
                                        GarageSwitch = 0;
                                    }
                                }
                                break;
                        }
                    }
                    break;
                case 2://3nd garage near left side of city
                    {
                        switch (GarageSwitch)
                        {
                            case 0://enter customs
                                {
                                    if (Game.Player.Character.CurrentVehicle != null)
                                    {
                                        if (Game.Player.Character.Position.DistanceTo(new Vector3(-353.2156f, -135.7295f, 38.73895f)) < 6f)
                                        {
                                            if (Game.Player.Character.CurrentVehicle == Main.PlayerVehicle)
                                            {
                                                Mobile_Phone.CAN_OPEN_PHONE = false;
                                                Main.CutsceneCam = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 50.0f);
                                                Main.CutsceneCam.AttachTo(Main.PlayerVehicle, new Vector3(0f, 15f, 1f));
                                                Main.CutsceneCam.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));

                                                Main.CutsceneCam2 = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 55.0f);
                                                Main.CutsceneCam2.AttachTo(Main.PlayerVehicle, new Vector3(-3f, 4f, 1f));
                                                Main.CutsceneCam2.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));
                                                World.RenderingCamera = Main.CutsceneCam;
                                                Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 10000, 3, 1);

                                                Main.PlayerVehicle.Position = new Vector3(-353.2156f, -135.7295f, 38.73895f - 1f);
                                                Main.PlayerVehicle.Heading = 249.8934f;
                                                Game.Player.CanControlCharacter = false;
                                                TaskSequence task5 = new();
                                                task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(-338.1583f, -137.8513f, 38.73921f), 1f, 5f, DrivingStyle.Normal);
                                                task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(-338.1583f, -137.8513f, 38.73921f), 1f, 5f, DrivingStyle.Normal);
                                                task5.Close();
                                                Game.Player.Character.Task.PerformSequence(task5);
                                                task5.Dispose();

                                                while (Main.CutsceneCam2.IsInterpolating)
                                                {
                                                    Wait(0);
                                                }

                                                Main.CutsceneCam.Delete();
                                                Main.CutsceneCam = null;
                                                Main.CutsceneCam2.Delete();
                                                Main.CutsceneCam2 = null;
                                                World.RenderingCamera = null;
                                                Game.Player.CanControlCharacter = true;
                                                Main.PlayerVehicle.IsPositionFrozen = true;
                                                Main.PlayerVehicle.LockStatus = VehicleLockStatus.PlayerCannotLeaveCanBeBrokenIntoPersist;
                                                MOD_SHOP_MENU(Main.PlayerVehicle);
                                                GarageSwitch = 1;
                                            }
                                            else
                                            {
                                                Screen.ShowHelpTextThisFrame("This vehicle cannot enter Los Santos Customs.");
                                            }
                                        }
                                    }
                                }
                                break;
                            case 1://pay for car/cancel upgrade
                                {
                                    if (!MDPool.AreAnyVisible)
                                    {
                                        Main.CutsceneCam = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 50.0f);
                                        Main.CutsceneCam.AttachTo(Main.PlayerVehicle, new Vector3(0f, 15f, 1f));
                                        Main.CutsceneCam.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));

                                        Main.CutsceneCam2 = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 55.0f);
                                        Main.CutsceneCam2.AttachTo(Main.PlayerVehicle, new Vector3(-3f, 4f, 1f));
                                        Main.CutsceneCam2.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));
                                        World.RenderingCamera = Main.CutsceneCam;
                                        Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 10000, 3, 1);

                                        if (GarageTransactionSpent)
                                        {
                                            Main.PlayerVehicle.Position = new Vector3(-350.903f, -136.6009f, 38.73914f);
                                            Main.PlayerVehicle.Heading = 68.32455f;
                                            Main.PlayerVehicle.IsPositionFrozen = false;
                                            GarageTransactionSpent = false;
                                        }
                                        else
                                        {
                                            MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(-350.903f, -136.6009f, 38.73914f), 68.32455f);
                                            Game.Player.Character.SetIntoVehicle(Main.PlayerVehicle, VehicleSeat.Driver);
                                            Main.PlayerVehicle.RadioStation = RadioStation.RadioOff;

                                            Main.CutsceneCam.Delete();
                                            Main.CutsceneCam = null;
                                            Main.CutsceneCam2.Delete();
                                            Main.CutsceneCam2 = null;

                                            Main.CutsceneCam = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 50.0f);
                                            Main.CutsceneCam.AttachTo(Main.PlayerVehicle, new Vector3(0f, 15f, 1f));
                                            Main.CutsceneCam.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));

                                            Main.CutsceneCam2 = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 55.0f);
                                            Main.CutsceneCam2.AttachTo(Main.PlayerVehicle, new Vector3(-3f, 4f, 1f));
                                            Main.CutsceneCam2.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));
                                            World.RenderingCamera = Main.CutsceneCam;
                                            Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 10000, 3, 1);
                                        }
                                        Game.Player.CanControlCharacter = false;
                                        TaskSequence task5 = new();
                                        task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(-373.0048f, -128.2457f, 38.41611f), 1f, 5f, DrivingStyle.Normal);
                                        task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(-373.0048f, -128.2457f, 38.41611f), 1f, 5f, DrivingStyle.Normal);
                                        task5.Close();
                                        Game.Player.Character.Task.PerformSequence(task5);
                                        task5.Dispose();

                                        while (Main.CutsceneCam2.IsInterpolating)
                                        {
                                            Wait(0);
                                        }

                                        Mobile_Phone.CAN_OPEN_PHONE = true;
                                        Main.CutsceneCam.Delete();
                                        Main.CutsceneCam = null;
                                        Main.CutsceneCam2.Delete();
                                        Main.CutsceneCam2 = null;
                                        World.RenderingCamera = null;
                                        Game.Player.CanControlCharacter = true;
                                        Main.PlayerVehicle.IsPositionFrozen = false;
                                        Main.PlayerVehicle.LockStatus = VehicleLockStatus.None;
                                        GarageSwitch = 0;
                                    }
                                }
                                break;
                        }
                    }
                    break;
                case 3://4nd garage near middle of map
                    {
                        switch (GarageSwitch)
                        {
                            case 0://enter customs
                                {
                                    if (Game.Player.Character.CurrentVehicle != null)
                                    {
                                        if (Game.Player.Character.Position.DistanceTo(new Vector3(1174.841f, 2649.521f, 37.53205f)) < 6f)
                                        {
                                            if (Game.Player.Character.CurrentVehicle == Main.PlayerVehicle)
                                            {
                                                Mobile_Phone.CAN_OPEN_PHONE = false;
                                                Main.CutsceneCam = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 50.0f);
                                                Main.CutsceneCam.AttachTo(Main.PlayerVehicle, new Vector3(0f, 5f, 1f));
                                                Main.CutsceneCam.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));

                                                Main.CutsceneCam2 = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 55.0f);
                                                Main.CutsceneCam2.AttachTo(Main.PlayerVehicle, new Vector3(-3f, 4f, 1f));
                                                Main.CutsceneCam2.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));
                                                World.RenderingCamera = Main.CutsceneCam;
                                                Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 10000, 3, 1);

                                                Main.PlayerVehicle.Position = new Vector3(1174.841f, 2649.521f, 37.53205f - 1f);
                                                Main.PlayerVehicle.Heading = 180.0506f;
                                                Game.Player.CanControlCharacter = false;
                                                TaskSequence task5 = new();
                                                task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(1175.139f, 2639.967f, 37.4862f), 0.1f, 2f, DrivingStyle.Normal);
                                                task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(1175.139f, 2639.967f, 37.4862f), 0.1f, 2f, DrivingStyle.Normal);
                                                task5.Close();
                                                Game.Player.Character.Task.PerformSequence(task5);
                                                task5.Dispose();

                                                while (Main.CutsceneCam2.IsInterpolating)
                                                {
                                                    Wait(0);
                                                }

                                                Main.CutsceneCam.Delete();
                                                Main.CutsceneCam = null;
                                                Main.CutsceneCam2.Delete();
                                                Main.CutsceneCam2 = null;
                                                World.RenderingCamera = null;
                                                Game.Player.CanControlCharacter = true;
                                                Main.PlayerVehicle.IsPositionFrozen = true;
                                                Main.PlayerVehicle.LockStatus = VehicleLockStatus.PlayerCannotLeaveCanBeBrokenIntoPersist;
                                                MOD_SHOP_MENU(Main.PlayerVehicle);
                                                GarageSwitch = 1;
                                            }
                                            else
                                            {
                                                Screen.ShowHelpTextThisFrame("This vehicle cannot enter Los Santos Customs.");
                                            }
                                        }
                                    }
                                }
                                break;
                            case 1://pay for car/cancel upgrade
                                {
                                    if (!MDPool.AreAnyVisible)
                                    {
                                        Main.CutsceneCam = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 50.0f);
                                        Main.CutsceneCam.AttachTo(Main.PlayerVehicle, new Vector3(0f, 15f, 1f));
                                        Main.CutsceneCam.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));

                                        Main.CutsceneCam2 = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 55.0f);
                                        Main.CutsceneCam2.AttachTo(Main.PlayerVehicle, new Vector3(-3f, 4f, 1f));
                                        Main.CutsceneCam2.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));
                                        World.RenderingCamera = Main.CutsceneCam;
                                        Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 10000, 3, 1);

                                        if (GarageTransactionSpent)
                                        {
                                            Main.PlayerVehicle.Position = new Vector3(1174.191f, 2641.028f, 37.49249f);
                                            Main.PlayerVehicle.Heading = 358.8279f;
                                            Main.PlayerVehicle.IsPositionFrozen = false;
                                            GarageTransactionSpent = false;
                                        }
                                        else
                                        {
                                            MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(1174.191f, 2641.028f, 37.49249f), 358.8279f);
                                            Game.Player.Character.SetIntoVehicle(Main.PlayerVehicle, VehicleSeat.Driver);
                                            Main.PlayerVehicle.RadioStation = RadioStation.RadioOff;

                                            Main.CutsceneCam.Delete();
                                            Main.CutsceneCam = null;
                                            Main.CutsceneCam2.Delete();
                                            Main.CutsceneCam2 = null;

                                            Main.CutsceneCam = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 50.0f);
                                            Main.CutsceneCam.AttachTo(Main.PlayerVehicle, new Vector3(0f, 15f, 1f));
                                            Main.CutsceneCam.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));

                                            Main.CutsceneCam2 = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 55.0f);
                                            Main.CutsceneCam2.AttachTo(Main.PlayerVehicle, new Vector3(-3f, 4f, 1f));
                                            Main.CutsceneCam2.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));
                                            World.RenderingCamera = Main.CutsceneCam;
                                            Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 10000, 3, 1);
                                        }
                                        Game.Player.CanControlCharacter = false;
                                        TaskSequence task5 = new();
                                        task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(1174.997f, 2646.997f, 37.50968f), 1f, 5f, DrivingStyle.Normal);
                                        task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(1182.806f, 2653.755f, 37.54143f), 1f, 5f, DrivingStyle.Normal);
                                        task5.Close();
                                        Game.Player.Character.Task.PerformSequence(task5);
                                        task5.Dispose();

                                        while (Main.CutsceneCam2.IsInterpolating)
                                        {
                                            Wait(0);
                                        }

                                        Mobile_Phone.CAN_OPEN_PHONE = true;
                                        Main.CutsceneCam.Delete();
                                        Main.CutsceneCam = null;
                                        Main.CutsceneCam2.Delete();
                                        Main.CutsceneCam2 = null;
                                        World.RenderingCamera = null;
                                        Game.Player.CanControlCharacter = true;
                                        Main.PlayerVehicle.IsPositionFrozen = false;
                                        Main.PlayerVehicle.LockStatus = VehicleLockStatus.None;
                                        GarageSwitch = 0;
                                    }
                                }
                                break;
                        }
                    }
                    break;
                case 4://5nd garage in paleto gay - beeker's garage
                    {
                        switch (GarageSwitch)
                        {
                            case 0://enter customs
                                {
                                    if (Game.Player.Character.CurrentVehicle != null)
                                    {
                                        if (Game.Player.Character.Position.DistanceTo(new Vector3(116.5889f, 6620.897f, 31.58369f)) < 6f)
                                        {
                                            if (Game.Player.Character.CurrentVehicle == Main.PlayerVehicle)
                                            {
                                                Mobile_Phone.CAN_OPEN_PHONE = false;
                                                Main.CutsceneCam = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 50.0f);
                                                Main.CutsceneCam.AttachTo(Main.PlayerVehicle, new Vector3(0f, 5f, 1f));
                                                Main.CutsceneCam.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));

                                                Main.CutsceneCam2 = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 55.0f);
                                                Main.CutsceneCam2.AttachTo(Main.PlayerVehicle, new Vector3(-3f, 4f, 1f));
                                                Main.CutsceneCam2.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));
                                                World.RenderingCamera = Main.CutsceneCam;
                                                Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 10000, 3, 1);

                                                Main.PlayerVehicle.Position = new Vector3(116.5889f, 6620.897f, 31.58369f - 1f);
                                                Main.PlayerVehicle.Heading = 43.21093f;
                                                Game.Player.CanControlCharacter = false;
                                                TaskSequence task5 = new();
                                                task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(110.4838f, 6626.656f, 31.51666f), 0.1f, 2f, DrivingStyle.Normal);
                                                task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(110.4838f, 6626.656f, 31.51666f), 0.1f, 2f, DrivingStyle.Normal);
                                                task5.Close();
                                                Game.Player.Character.Task.PerformSequence(task5);
                                                task5.Dispose();

                                                while (Main.CutsceneCam2.IsInterpolating)
                                                {
                                                    Wait(0);
                                                }

                                                Main.CutsceneCam.Delete();
                                                Main.CutsceneCam = null;
                                                Main.CutsceneCam2.Delete();
                                                Main.CutsceneCam2 = null;
                                                World.RenderingCamera = null;
                                                Game.Player.CanControlCharacter = true;
                                                Main.PlayerVehicle.IsPositionFrozen = true;
                                                Main.PlayerVehicle.LockStatus = VehicleLockStatus.PlayerCannotLeaveCanBeBrokenIntoPersist;
                                                MOD_SHOP_MENU(Main.PlayerVehicle);
                                                GarageSwitch = 1;
                                            }
                                            else
                                            {
                                                Screen.ShowHelpTextThisFrame("This vehicle cannot enter Los Santos Customs.");
                                            }
                                        }
                                    }
                                }
                                break;
                            case 1://pay for car/cancel upgrade
                                {
                                    if (!MDPool.AreAnyVisible)
                                    {
                                        Main.CutsceneCam = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 50.0f);
                                        Main.CutsceneCam.AttachTo(Main.PlayerVehicle, new Vector3(0f, 15f, 1f));
                                        Main.CutsceneCam.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));

                                        Main.CutsceneCam2 = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 55.0f);
                                        Main.CutsceneCam2.AttachTo(Main.PlayerVehicle, new Vector3(-3f, 4f, 1f));
                                        Main.CutsceneCam2.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));
                                        World.RenderingCamera = Main.CutsceneCam;
                                        Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 10000, 3, 1);

                                        if (GarageTransactionSpent)
                                        {
                                            Main.PlayerVehicle.Position = new Vector3(110.4842f, 6626.656f, 31.5165f);
                                            Main.PlayerVehicle.Heading = 227.1909f;
                                            Main.PlayerVehicle.IsPositionFrozen = false;
                                            GarageTransactionSpent = false;
                                        }
                                        else
                                        {
                                            MPVehicleLoadout.SPAWN_PERSONAL_VEHICLE(new Vector3(110.4842f, 6626.656f, 31.5165f), 227.1909f);
                                            Game.Player.Character.SetIntoVehicle(Main.PlayerVehicle, VehicleSeat.Driver);
                                            Main.PlayerVehicle.RadioStation = RadioStation.RadioOff;

                                            Main.CutsceneCam.Delete();
                                            Main.CutsceneCam = null;
                                            Main.CutsceneCam2.Delete();
                                            Main.CutsceneCam2 = null;

                                            Main.CutsceneCam = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 50.0f);
                                            Main.CutsceneCam.AttachTo(Main.PlayerVehicle, new Vector3(0f, 15f, 1f));
                                            Main.CutsceneCam.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));

                                            Main.CutsceneCam2 = World.CreateCamera(new Vector3(0f, 0f, 0f), new Vector3(0f, 0f, 0f), 55.0f);
                                            Main.CutsceneCam2.AttachTo(Main.PlayerVehicle, new Vector3(-3f, 4f, 1f));
                                            Main.CutsceneCam2.PointAt(Main.PlayerVehicle, new Vector3(0f, 0f, 0f));
                                            World.RenderingCamera = Main.CutsceneCam;
                                            Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 10000, 3, 1);
                                        }
                                        Game.Player.CanControlCharacter = false;
                                        TaskSequence task5 = new();
                                        task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(127.6607f, 6610.223f, 31.5779f), 1f, 5f, DrivingStyle.Normal);
                                        task5.AddTask.DriveTo(Main.PlayerVehicle, new Vector3(127.6607f, 6610.223f, 31.5779f), 1f, 5f, DrivingStyle.Normal);
                                        task5.Close();
                                        Game.Player.Character.Task.PerformSequence(task5);
                                        task5.Dispose();

                                        while (Main.CutsceneCam2.IsInterpolating)
                                        {
                                            Wait(0);
                                        }

                                        Mobile_Phone.CAN_OPEN_PHONE = true;
                                        Main.CutsceneCam.Delete();
                                        Main.CutsceneCam = null;
                                        Main.CutsceneCam2.Delete();
                                        Main.CutsceneCam2 = null;
                                        World.RenderingCamera = null;
                                        Game.Player.CanControlCharacter = true;
                                        Main.PlayerVehicle.IsPositionFrozen = false;
                                        Main.PlayerVehicle.LockStatus = VehicleLockStatus.None;
                                        GarageSwitch = 0;
                                    }
                                }
                                break;
                        }
                    }
                    break;
            }
        }

        public void onShutdown(object sender, EventArgs e)
        {
            
        }

        public static int Show_Color_Index = 0;
        public static void SHOW_RGB(Vehicle veh)
        {
            if (veh != null)
            {
                switch (Show_Color_Index)
                {
                    case 1://index tyre smoke
                        {
                            int[] rgb = { 0, 0, 0 };
                            unsafe
                            {
                                int r = 0;
                                int g = 0;
                                int b = 0;
                                Function.Call(Hash.GET_VEHICLE_TYRE_SMOKE_COLOR, veh, &r, &g, &b);
                                rgb[0] = r;
                                rgb[1] = g;
                                rgb[2] = b;
                            }
                            
                            Function.Call(Hash.DRAW_RECT, 0.0650f, 0.6f, 0.1f, 0.1f, rgb[0], rgb[1], rgb[2], 255, 0);
                            Heist_Hud.drawText("- Tyre Smoke -", 0.0230f, 0.5200f, 0.4f, rgb[0], rgb[1], rgb[2]);
                        }
                        break;
                }
            }
        }

        public static bool MenuOpen = false;
        
        public static LemonUI.ObjectPool MDPool = new LemonUI.ObjectPool();
        public static LemonUI.Menus.NativeMenu MainMenu = new LemonUI.Menus.NativeMenu("AUTO SHOP", "CATEGORIES", "");
        public static unsafe void MOD_SHOP_MENU(Vehicle veh)
        {
            MainMenu.Clear();
            LemonUI.Elements.ScaledTexture backround = new LemonUI.Elements.ScaledTexture(MainMenu.Banner.Position, new SizeF(MainMenu.Banner.Size.Width, MainMenu.Banner.Size.Height), "shopui_title_auto_shop", "shopui_title_auto_shop");

            unsafe
            {
                NativeMenu VehicleModMenu = new NativeMenu("", "Vehicle Mods", "Browse for Vehicle Mods.");
                MDPool.Add(VehicleModMenu);
                VehicleModMenu.UseMouse = false;
                VehicleModMenu.CloseOnInvalidClick = false;
                VehicleModMenu.Banner = backround;
                NativeSubmenuItem VehicleModSubbutton = new NativeSubmenuItem(VehicleModMenu, MainMenu);
                VehicleModSubbutton.AltTitle = "";
                VehicleModMenu.Buttons.Clear();
                InstructionalButton[] Buttons = { new("Set Vehicle Mod", GTA.Control.FrontendAccept), new("Back", GTA.Control.PhoneCancel) };
                VehicleModMenu.Buttons.Add(Buttons[0]);
                VehicleModMenu.Buttons.Add(Buttons[1]);
                MainMenu.Add(0, VehicleModSubbutton);
                
                NativeListItem<int> ModTypeItem = new NativeListItem<int>("Mod Type", "Select a Mod Type.");
                int iVar0 = 0;
                while (iVar0 < 50)
                {
                    if (iVar0 != 17 && iVar0 != 18 && iVar0 != 19 && iVar0 != 20 && iVar0 != 21 && iVar0 != 22)
                    {
                        if (veh.Model.IsBike)
                        {
                            ModTypeItem.Add(iVar0);
                        }
                        else
                        {
                            if (!veh.Model.IsLowrider)
                            {
                                if (iVar0 != 23 && iVar0 != 24 && iVar0 != 25 && iVar0 != 26 && iVar0 != 27 && iVar0 != 28 && iVar0 != 29 && iVar0 != 30 && iVar0 != 31 && iVar0 != 32 && iVar0 != 33 && iVar0 != 34 && iVar0 != 35 && iVar0 != 36 && iVar0 != 37 && iVar0 != 38)
                                {
                                    ModTypeItem.Add(iVar0);
                                }
                            }
                            else
                            {
                                if (iVar0 != 23 && iVar0 != 24)
                                {
                                    ModTypeItem.Add(iVar0);
                                }
                            }
                        }
                    }
                    iVar0++;
                }
                ModTypeItem.GoRight();
                ModTypeItem.GoLeft();
                ModTypeItem.Enabled = true;
                VehicleModMenu.Add(ModTypeItem);

                NativeListItem<int> ModVarItem = new NativeListItem<int>("Mod Variation", "Select a Mod Type.");
                ModVarItem.Clear();
                iVar0 = -1;
                while (iVar0 < Function.Call<int>(Hash.GET_NUM_VEHICLE_MODS, veh, 0))
                {
                    ModVarItem.Add(iVar0 + 1, iVar0);
                    iVar0++;
                }
                ModVarItem.GoRight();
                ModVarItem.GoLeft();
                ModVarItem.Enabled = true;
                VehicleModMenu.Add(ModVarItem);

                ModTypeItem.ItemChanged += (sender, e) =>
                {
                    ModVarItem.Clear();
                    iVar0 = -1;
                    while (iVar0 < Function.Call<int>(Hash.GET_NUM_VEHICLE_MODS, veh, ModTypeItem.SelectedItem))
                    {
                        ModVarItem.Add(iVar0 + 1, iVar0);
                        iVar0++;
                    }
                    ModVarItem.GoRight();
                    ModVarItem.GoLeft();
                    ModVarItem.Enabled = true;
                };

                ModVarItem.Activated += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_MOD, veh, ModTypeItem.SelectedItem, ModVarItem.SelectedItem, Function.Call<int>(Hash.GET_VEHICLE_MOD_VARIATION, veh, 24) == 1);
                    if (ModVarItem.SelectedItem == -1)
                    {
                        Function.Call(Hash.REMOVE_VEHICLE_MOD, veh, ModTypeItem.SelectedItem);
                    }
                };

                NativeItem ModTypeWebItem = new NativeItem("View List of Mod Types", "Open a Google tab to a pastebin that shows you what the numbers mean.");
                ModTypeWebItem.Activated += (sender, e) =>
                {
                    try
                    {
                        System.Diagnostics.Process.Start("https://pastebin.com/QzEAn02v");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"[MEGAPHONE UI] {ex.Message}");
                        Notification.Show("~r~[MEGAPHONE UI] Can't open the Discord invitation link. Make sure your computer has a default browser.");
                    }
                };

                VehicleModMenu.Add(ModTypeWebItem);
            }

            unsafe
            {
                NativeMenu VehicleModMenu = new NativeMenu("", "Toggle Mods", "Browse for Toggle Mods.");
                MDPool.Add(VehicleModMenu);
                VehicleModMenu.UseMouse = false;
                VehicleModMenu.CloseOnInvalidClick = false;
                VehicleModMenu.Banner = backround;
                NativeSubmenuItem VehicleModSubbutton = new NativeSubmenuItem(VehicleModMenu, MainMenu);
                VehicleModSubbutton.AltTitle = "";
                VehicleModMenu.Buttons.Clear();
                InstructionalButton[] Buttons = { new("Toggle Mod", GTA.Control.FrontendAccept), new("Back", GTA.Control.PhoneCancel) };
                VehicleModMenu.Buttons.Add(Buttons[0]);
                VehicleModMenu.Buttons.Add(Buttons[1]);
                MainMenu.Add(1, VehicleModSubbutton);
                
                VehicleModMenu.Opening += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_LIGHTS, veh, 2);
                };
                
                VehicleModMenu.Closing += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_LIGHTS, veh, 0);
                    Show_Color_Index = 0;
                };

                NativeCheckboxItem ToggleMods17Item = new NativeCheckboxItem("Nitrous", "Toggle on or off Vehicle mods. (Activate Nitrous)", Function.Call<bool>(Hash.IS_TOGGLE_MOD_ON, veh, 17));
                VehicleModMenu.Add(ToggleMods17Item);

                ToggleMods17Item.CheckboxChanged += (sender, e) =>
                {
                    Function.Call(Hash.TOGGLE_VEHICLE_MOD, veh, 17, ToggleMods17Item.Checked);
                };

                NativeCheckboxItem ToggleMods18Item = new NativeCheckboxItem("Turbo", "Toggle on or off Vehicle mods. (Activate Turbo)", Function.Call<bool>(Hash.IS_TOGGLE_MOD_ON, veh, 18));
                VehicleModMenu.Add(ToggleMods18Item);

                ToggleMods18Item.CheckboxChanged += (sender, e) =>
                {
                    Function.Call(Hash.TOGGLE_VEHICLE_MOD, veh, 18, ToggleMods18Item.Checked);
                };
                
                NativeCheckboxItem ToggleMods19Item = new NativeCheckboxItem("Subwoofer", "Toggle on or off Vehicle mods. (Only For Lowriders)", Function.Call<bool>(Hash.IS_TOGGLE_MOD_ON, veh, 19));
                VehicleModMenu.Add(ToggleMods19Item);
                
                ToggleMods19Item.CheckboxChanged += (sender, e) =>
                {
                    Function.Call(Hash.TOGGLE_VEHICLE_MOD, veh, 19, ToggleMods19Item.Checked);
                };

                NativeCheckboxItem ToggleMods20Item = new NativeCheckboxItem("Tyre Smoke", "Toggle on or off Vehicle mods. (To Use Tyre Smoke)", Function.Call<bool>(Hash.IS_TOGGLE_MOD_ON, veh, 20));
                VehicleModMenu.Add(ToggleMods20Item);

                ToggleMods20Item.CheckboxChanged += (sender, e) =>
                {
                    Function.Call(Hash.TOGGLE_VEHICLE_MOD, veh, 20, ToggleMods20Item.Checked);
                };

                NativeSliderItem ToggleMods20RItem = new NativeSliderItem("Tyre Smoke R", "Change the Tyre Smokes Red Color.", 255, 0);
                ToggleMods20RItem.Multiplier = 5;
                VehicleModMenu.Add(ToggleMods20RItem);
                NativeSliderItem ToggleMods20GItem = new NativeSliderItem("Tyre Smoke G", "Change the Tyre Smokes Green Color.", 255, 0);
                ToggleMods20GItem.Multiplier = 5;
                VehicleModMenu.Add(ToggleMods20GItem);
                NativeSliderItem ToggleMods20BItem = new NativeSliderItem("Tyre Smoke B", "Change the Tyre Smokes Blue Color.", 255, 0);
                ToggleMods20BItem.Multiplier = 5;
                VehicleModMenu.Add(ToggleMods20BItem);
                //Show_Color_Index
                ToggleMods20RItem.ValueChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_TYRE_SMOKE_COLOR, veh, ToggleMods20RItem.Value, ToggleMods20GItem.Value, ToggleMods20BItem.Value);
                    Show_Color_Index = 1;
                };
                ToggleMods20GItem.ValueChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_TYRE_SMOKE_COLOR, veh, ToggleMods20RItem.Value, ToggleMods20GItem.Value, ToggleMods20BItem.Value);
                    Show_Color_Index = 1;
                };
                ToggleMods20BItem.ValueChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_TYRE_SMOKE_COLOR, veh, ToggleMods20RItem.Value, ToggleMods20GItem.Value, ToggleMods20BItem.Value);
                    Show_Color_Index = 1;
                };

                NativeCheckboxItem ToggleMods21Item = new NativeCheckboxItem("Hydralics", "Toggle on or off Vehicle mods. (Only For Lowriders)", Function.Call<bool>(Hash.IS_TOGGLE_MOD_ON, veh, 21));
                VehicleModMenu.Add(ToggleMods21Item);

                ToggleMods21Item.CheckboxChanged += (sender, e) =>
                {
                    Function.Call(Hash.TOGGLE_VEHICLE_MOD, veh, 21, ToggleMods21Item.Checked);
                };

                NativeCheckboxItem ToggleMods22Item = new NativeCheckboxItem("Xenon Lights", "Toggle on or off Vehicle mods. (To Use Xenon Lights)", Function.Call<bool>(Hash.IS_TOGGLE_MOD_ON, veh, 22));
                VehicleModMenu.Add(ToggleMods22Item);

                ToggleMods22Item.CheckboxChanged += (sender, e) =>
                {
                    Function.Call(Hash.TOGGLE_VEHICLE_MOD, veh, 22, ToggleMods22Item.Checked);
                    Function.Call(Hash.SET_VEHICLE_XENON_LIGHT_COLOR_INDEX, veh, -1);
                };

                NativeSliderItem ToggleMods22ColorItem = new NativeSliderItem("Xenon Lights Color", "Change the Color of the Xenon Lights. (0 - 12)", 12, 0);
                ToggleMods22ColorItem.Multiplier = 1;
                VehicleModMenu.Add(ToggleMods22ColorItem);

                ToggleMods22ColorItem.ValueChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_XENON_LIGHT_COLOR_INDEX, veh, ToggleMods22ColorItem.Value);
                };
            }

            unsafe
            {                
                NativeMenu VehicleModMenu = new NativeMenu("", "Vehicle Paint", "Browse for Vehicle Colors.");
                MDPool.Add(VehicleModMenu);
                VehicleModMenu.UseMouse = false;
                VehicleModMenu.CloseOnInvalidClick = false;
                VehicleModMenu.Banner = backround;
                NativeSubmenuItem VehicleModSubbutton = new NativeSubmenuItem(VehicleModMenu, MainMenu);
                VehicleModSubbutton.AltTitle = "";
                MainMenu.Add(2, VehicleModSubbutton);

                NativeSliderItem VehiclePaintTypeItem = new NativeSliderItem("Paint Type", "Change the Paint Type of the Car. (0 - 6)\n0: Normal\n1: Metallic\n2: Pearl\n3: Matte\n4: Metal\n5: Chrome\n6: Chameleon", 6, 0);
                VehiclePaintTypeItem.Multiplier = 1;
                VehicleModMenu.Add(VehiclePaintTypeItem);

                NativeSliderItem VehiclePaintPrimaryItem = new NativeSliderItem("Primary Color", "Change the Primary Color of the Car.", 0, 0);
                VehiclePaintPrimaryItem.Maximum = Function.Call<int>(Hash.GET_NUM_MOD_COLORS, VehiclePaintTypeItem.Value, 1);
                VehiclePaintPrimaryItem.Multiplier = 1;
                VehicleModMenu.Add(VehiclePaintPrimaryItem);

                NativeSliderItem VehiclePaintSecondaryItem = new NativeSliderItem("Secondary Color", "Change the Secondary Color of the Car.", 0, 0);
                VehiclePaintSecondaryItem.Maximum = Function.Call<int>(Hash.GET_NUM_MOD_COLORS, VehiclePaintTypeItem.Value, 1);
                VehiclePaintSecondaryItem.Multiplier = 1;
                VehicleModMenu.Add(VehiclePaintSecondaryItem);

                NativeSliderItem VehiclePaintPearlItem = new NativeSliderItem("Pearl Color", "Change the Pearl Color of the Car.", 0, 0);
                VehiclePaintPearlItem.Maximum = Function.Call<int>(Hash.GET_NUM_MOD_COLORS, VehiclePaintTypeItem.Value, 1);
                VehiclePaintPearlItem.Multiplier = 1;
                VehicleModMenu.Add(VehiclePaintPearlItem);

                VehiclePaintTypeItem.ValueChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_MOD_COLOR_1, veh, VehiclePaintTypeItem.Value, VehiclePaintPrimaryItem.Value, VehiclePaintPearlItem.Value);
                    
                    Function.Call(Hash.SET_VEHICLE_MOD_COLOR_2, veh, VehiclePaintTypeItem.Value, VehiclePaintSecondaryItem.Value);

                    VehiclePaintPrimaryItem.Maximum = Function.Call<int>(Hash.GET_NUM_MOD_COLORS, VehiclePaintTypeItem.Value, 1);
                    VehiclePaintPrimaryItem.Value = 0;
                    VehiclePaintSecondaryItem.Maximum = Function.Call<int>(Hash.GET_NUM_MOD_COLORS, VehiclePaintTypeItem.Value, 1);
                    VehiclePaintSecondaryItem.Value = 0;
                    VehiclePaintPearlItem.Maximum = Function.Call<int>(Hash.GET_NUM_MOD_COLORS, VehiclePaintTypeItem.Value, 1);
                    VehiclePaintPearlItem.Value = 0;
                };
                
                VehiclePaintPrimaryItem.ValueChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_MOD_COLOR_1, veh, VehiclePaintTypeItem.Value, VehiclePaintPrimaryItem.Value, VehiclePaintPearlItem.Value);
                };

                VehiclePaintSecondaryItem.ValueChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_MOD_COLOR_2, veh, VehiclePaintTypeItem.Value, VehiclePaintSecondaryItem.Value);
                };

                VehiclePaintPearlItem.ValueChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_MOD_COLOR_1, veh, VehiclePaintTypeItem.Value, VehiclePaintPrimaryItem.Value, VehiclePaintPearlItem.Value);
                };
                
                NativeCheckboxItem ToggleCustomPriColorItem = new NativeCheckboxItem("Custom Primary Color", "Toggle on or off Custom Primary RGB Vehicle Color.", false);
                VehicleModMenu.Add(ToggleCustomPriColorItem);

                NativeSliderItem ToggleCustomPriColorRItem = new NativeSliderItem("Primary Color R", "Change the Primary Colors Red Color.", 255, 0);
                ToggleCustomPriColorRItem.Multiplier = 5;
                VehicleModMenu.Add(ToggleCustomPriColorRItem);
                NativeSliderItem ToggleCustomPriColorGItem = new NativeSliderItem("Primary Color G", "Change the Primary Colors Green Color.", 255, 0);
                ToggleCustomPriColorGItem.Multiplier = 5;
                VehicleModMenu.Add(ToggleCustomPriColorGItem);
                NativeSliderItem ToggleCustomPriColorBItem = new NativeSliderItem("Primary Color B", "Change the Primary Colors Blue Color.", 255, 0);
                ToggleCustomPriColorBItem.Multiplier = 5;
                VehicleModMenu.Add(ToggleCustomPriColorBItem);
                ToggleCustomPriColorRItem.ValueChanged += (sender, e) =>
                {
                    if (ToggleCustomPriColorItem.Checked)
                    {
                        Function.Call(Hash.SET_VEHICLE_CUSTOM_PRIMARY_COLOUR, veh, ToggleCustomPriColorRItem.Value, ToggleCustomPriColorGItem.Value, ToggleCustomPriColorBItem.Value);
                    }
                };
                ToggleCustomPriColorGItem.ValueChanged += (sender, e) =>
                {
                    if (ToggleCustomPriColorItem.Checked)
                    {
                        Function.Call(Hash.SET_VEHICLE_CUSTOM_PRIMARY_COLOUR, veh, ToggleCustomPriColorRItem.Value, ToggleCustomPriColorGItem.Value, ToggleCustomPriColorBItem.Value);
                    }
                };
                ToggleCustomPriColorBItem.ValueChanged += (sender, e) =>
                {
                    if (ToggleCustomPriColorItem.Checked)
                    {
                        Function.Call(Hash.SET_VEHICLE_CUSTOM_PRIMARY_COLOUR, veh, ToggleCustomPriColorRItem.Value, ToggleCustomPriColorGItem.Value, ToggleCustomPriColorBItem.Value);
                    }
                };
                
                NativeCheckboxItem ToggleCustomSecColorItem = new NativeCheckboxItem("Custom Secondary Color", "Toggle on or off Custom Secondary RGB Vehicle Color.", false);
                VehicleModMenu.Add(ToggleCustomSecColorItem);

                NativeSliderItem ToggleCustomSecColorRItem = new NativeSliderItem("Secondary Color R", "Change the Secondary Colors Red Color.", 255, 0);
                ToggleCustomSecColorRItem.Multiplier = 5;
                VehicleModMenu.Add(ToggleCustomSecColorRItem);
                NativeSliderItem ToggleCustomSecColorGItem = new NativeSliderItem("Secondary Color G", "Change the Secondary Colors Green Color.", 255, 0);
                ToggleCustomSecColorGItem.Multiplier = 5;
                VehicleModMenu.Add(ToggleCustomSecColorGItem);
                NativeSliderItem ToggleCustomSecColorBItem = new NativeSliderItem("Secondary Color B", "Change the Secondary Colors Blue Color.", 255, 0);
                ToggleCustomSecColorBItem.Multiplier = 5;
                VehicleModMenu.Add(ToggleCustomSecColorBItem);
                ToggleCustomSecColorRItem.ValueChanged += (sender, e) =>
                {
                    if (ToggleCustomSecColorItem.Checked)
                    {
                        Function.Call(Hash.SET_VEHICLE_CUSTOM_SECONDARY_COLOUR, veh, ToggleCustomSecColorRItem.Value, ToggleCustomSecColorGItem.Value, ToggleCustomSecColorBItem.Value);
                    }
                };
                ToggleCustomSecColorGItem.ValueChanged += (sender, e) =>
                {
                    if (ToggleCustomSecColorItem.Checked)
                    {
                        Function.Call(Hash.SET_VEHICLE_CUSTOM_SECONDARY_COLOUR, veh, ToggleCustomSecColorRItem.Value, ToggleCustomSecColorGItem.Value, ToggleCustomSecColorBItem.Value);
                    }
                };
                ToggleCustomSecColorBItem.ValueChanged += (sender, e) =>
                {
                    if (ToggleCustomSecColorItem.Checked)
                    {
                        Function.Call(Hash.SET_VEHICLE_CUSTOM_SECONDARY_COLOUR, veh, ToggleCustomSecColorRItem.Value, ToggleCustomSecColorGItem.Value, ToggleCustomSecColorBItem.Value);
                    }
                };
                
                ToggleCustomPriColorItem.CheckboxChanged += (sender, e) =>
                {
                    if (!ToggleCustomPriColorItem.Checked)
                    {
                        Function.Call(Hash.CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR, veh);
                        ToggleCustomPriColorRItem.Value = 0;
                        ToggleCustomPriColorGItem.Value = 0;
                        ToggleCustomPriColorBItem.Value = 0;
                        Function.Call(Hash.SET_VEHICLE_MOD_COLOR_1, veh, VehiclePaintTypeItem.Value, VehiclePaintPrimaryItem.Value, VehiclePaintPearlItem.Value);
                    }
                    else
                    {
                        Function.Call(Hash.SET_VEHICLE_CUSTOM_PRIMARY_COLOUR, veh, 0, 0, 0);
                    }
                };

                ToggleCustomSecColorItem.CheckboxChanged += (sender, e) =>
                {
                    if (!ToggleCustomSecColorItem.Checked)
                    {
                        Function.Call(Hash.CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR, veh);
                        ToggleCustomSecColorRItem.Value = 0;
                        ToggleCustomSecColorGItem.Value = 0;
                        ToggleCustomSecColorBItem.Value = 0;
                        Function.Call(Hash.SET_VEHICLE_MOD_COLOR_2, veh, VehiclePaintTypeItem.Value, VehiclePaintSecondaryItem.Value);
                    }
                    else
                    {
                        Function.Call(Hash.SET_VEHICLE_CUSTOM_SECONDARY_COLOUR, veh, 0, 0, 0);
                    }
                };

                if (veh.Model.IsLowrider)
                {
                    NativeSliderItem VehicleLivery1Item = new NativeSliderItem("Livey 1", "Change the Livery 1 Type on the Car.", 0, 0);
                    if (Function.Call<int>(Hash.GET_VEHICLE_LIVERY_COUNT, veh) != -1)
                    {
                        VehicleLivery1Item.Maximum = Function.Call<int>(Hash.GET_VEHICLE_LIVERY_COUNT, veh);
                    }
                    VehicleLivery1Item.Multiplier = 1;
                    VehicleModMenu.Add(VehicleLivery1Item);

                    VehicleLivery1Item.ValueChanged += (sender, e) =>
                    {
                        Function.Call(Hash.SET_VEHICLE_LIVERY, veh, VehicleLivery1Item.Value);
                    };

                    NativeSliderItem VehicleLivery2Item = new NativeSliderItem("Livey 2", "Change the Livery 2 Type on the Car.", 0, 0);
                    if (Function.Call<int>(Hash.GET_VEHICLE_LIVERY2_COUNT, veh) != -1)
                    {
                        VehicleLivery2Item.Maximum = Function.Call<int>(Hash.GET_VEHICLE_LIVERY2_COUNT, veh);
                    }
                    VehicleLivery2Item.Multiplier = 1;
                    VehicleModMenu.Add(VehicleLivery2Item);

                    VehicleLivery2Item.ValueChanged += (sender, e) =>
                    {
                        Function.Call(Hash.SET_VEHICLE_LIVERY2, veh, VehicleLivery2Item.Value);
                    };
                }
            }

            unsafe
            {
                NativeMenu VehicleModMenu = new NativeMenu("", "Vehicle Extras", "Browse for Vehicle Extras.");
                MDPool.Add(VehicleModMenu);
                VehicleModMenu.UseMouse = false;
                VehicleModMenu.CloseOnInvalidClick = false;
                VehicleModMenu.Banner = backround;
                NativeSubmenuItem VehicleModSubbutton = new NativeSubmenuItem(VehicleModMenu, MainMenu);
                VehicleModSubbutton.AltTitle = "";
                MainMenu.Add(3, VehicleModSubbutton);
                
                NativeSliderItem VehicleWindowTintItem = new NativeSliderItem("Window Tint", "Change the tint of the windows on the Car.", Function.Call<int>(Hash.GET_NUM_VEHICLE_WINDOW_TINTS), 0);
                VehicleWindowTintItem.Multiplier = 1;
                VehicleModMenu.Add(VehicleWindowTintItem);
                
                VehicleWindowTintItem.ValueChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_WINDOW_TINT, veh, VehicleWindowTintItem.Value);
                };

                NativeSliderItem VehiclePlateTypeItem = new NativeSliderItem("Number Plate Type", "Change the type of your number plate on the back of the car.", Function.Call<int>(Hash.GET_NUMBER_OF_VEHICLE_NUMBER_PLATES), 0);
                VehiclePlateTypeItem.Multiplier = 1;
                VehicleModMenu.Add(VehiclePlateTypeItem);

                VehiclePlateTypeItem.ValueChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX, veh, VehiclePlateTypeItem.Value);
                };

                NativeItem VehiclePlateTextItem = new NativeItem("Number Plate Text", "Change the text on your number plate on the back of the car.", $"{Function.Call<string>(Hash.GET_VEHICLE_NUMBER_PLATE_TEXT, veh)}");
                VehicleModMenu.Add(VehiclePlateTextItem);
                
                VehiclePlateTextItem.Activated += (sender, e) =>
                {
                    string sVar0 = "";
                    sVar0 = ONSCREEN_KEYBOARD.GetUserInput("", Function.Call<string>(Hash.GET_VEHICLE_NUMBER_PLATE_TEXT, veh), 8);
                    if (Function.Call<bool>(Hash.IS_STRING_NULL_OR_EMPTY, sVar0))
                    {
                        Function.Call(Hash.SET_VEHICLE_NUMBER_PLATE_TEXT, veh, Function.Call<string>(Hash.GET_VEHICLE_NUMBER_PLATE_TEXT, veh));
                        Notification.Show("Text Invalid, Returning Plate to Original.");
                    }
                    else
                    {
                        Function.Call(Hash.SET_VEHICLE_NUMBER_PLATE_TEXT, veh, sVar0);
                        if (Main.DEBUG) Notification.Show("Text Accepted, Changing Plate to New Text.");
                        VehiclePlateTextItem.AltTitle = sVar0;
                    }
                };

                NativeCheckboxItem ToggleNeonLeftItem = new NativeCheckboxItem("Vehicle Neon Left Side", "Toggle on or off Vehicle Neon on the Left Side.", false);
                VehicleModMenu.Add(ToggleNeonLeftItem);
                NativeCheckboxItem ToggleNeonRightItem = new NativeCheckboxItem("Vehicle Neon Right Side", "Toggle on or off Vehicle Neon on the Right Side.", false);
                VehicleModMenu.Add(ToggleNeonRightItem);
                NativeCheckboxItem ToggleNeonFrontItem = new NativeCheckboxItem("Vehicle Neon Front Side", "Toggle on or off Vehicle Neon on the Front Side.", false);
                VehicleModMenu.Add(ToggleNeonFrontItem);
                NativeCheckboxItem ToggleNeonBackItem = new NativeCheckboxItem("Vehicle Neon Back Side", "Toggle on or off Vehicle Neon on the Back Side.", false);
                VehicleModMenu.Add(ToggleNeonBackItem);

                ToggleNeonLeftItem.CheckboxChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_NEON_ENABLED, veh, 0, ToggleNeonLeftItem.Checked);
                    Function.Call(Hash.SET_VEHICLE_NEON_COLOUR, veh, 255, 255, 255);
                };

                ToggleNeonRightItem.CheckboxChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_NEON_ENABLED, veh, 1, ToggleNeonRightItem.Checked);
                    Function.Call(Hash.SET_VEHICLE_NEON_COLOUR, veh, 255, 255, 255);
                };

                ToggleNeonFrontItem.CheckboxChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_NEON_ENABLED, veh, 2, ToggleNeonFrontItem.Checked);
                    Function.Call(Hash.SET_VEHICLE_NEON_COLOUR, veh, 255, 255, 255);
                };

                ToggleNeonBackItem.CheckboxChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_NEON_ENABLED, veh, 3, ToggleNeonBackItem.Checked);
                    Function.Call(Hash.SET_VEHICLE_NEON_COLOUR, veh, 255, 255, 255);
                };

                NativeSliderItem ToggleNeonColorRItem = new NativeSliderItem("Vehicle Neon Color R", "Change the Vehicle Neon Colors Red Color.", 255, 255);
                ToggleNeonColorRItem.Multiplier = 5;
                VehicleModMenu.Add(ToggleNeonColorRItem);
                NativeSliderItem ToggleNeonColorGItem = new NativeSliderItem("Vehicle Neon Color G", "Change the Vehicle Neon Colors Green Color.", 255, 255);
                ToggleNeonColorGItem.Multiplier = 5;
                VehicleModMenu.Add(ToggleNeonColorGItem);
                NativeSliderItem ToggleNeonColorBItem = new NativeSliderItem("Vehicle Neon Color B", "Change the Vehicle Neon Colors Blue Color.", 255, 255);
                ToggleNeonColorBItem.Multiplier = 5;
                VehicleModMenu.Add(ToggleNeonColorBItem);
                ToggleNeonColorRItem.ValueChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_NEON_COLOUR, veh, ToggleNeonColorRItem.Value, ToggleNeonColorGItem.Value, ToggleNeonColorBItem.Value);
                };
                ToggleNeonColorGItem.ValueChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_NEON_COLOUR, veh, ToggleNeonColorRItem.Value, ToggleNeonColorGItem.Value, ToggleNeonColorBItem.Value);
                };
                ToggleNeonColorBItem.ValueChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_NEON_COLOUR, veh, ToggleNeonColorRItem.Value, ToggleNeonColorGItem.Value, ToggleNeonColorBItem.Value);
                };

                for (int i = 0; i < 15; i++)
                {
                    if (Function.Call<bool>(Hash.DOES_EXTRA_EXIST, veh, i))
                    {
                        NativeCheckboxItem ToggleExtrasItem = new NativeCheckboxItem($"Vehicle Extra {i}", "Toggle on or off Vehicle Extras.\nNot Checked/False = Enable Extra\nChecked/True = Disable Extra", false);
                        VehicleModMenu.Add(ToggleExtrasItem);

                        ToggleExtrasItem.CheckboxChanged += (sender, e) =>
                        {
                            Function.Call(Hash.SET_VEHICLE_EXTRA, veh, i, ToggleExtrasItem.Checked);
                        };
                    }
                }
            }

            unsafe
            {
                NativeMenu VehicleModMenu = new NativeMenu("", "Vehicle Tires", "Browse for Vehicle Tires.");
                MDPool.Add(VehicleModMenu);
                VehicleModMenu.UseMouse = false;
                VehicleModMenu.CloseOnInvalidClick = false;
                VehicleModMenu.Banner = backround;
                NativeSubmenuItem VehicleModSubbutton = new NativeSubmenuItem(VehicleModMenu, MainMenu);
                VehicleModSubbutton.AltTitle = "";
                MainMenu.Add(4, VehicleModSubbutton);

                NativeCheckboxItem ToggleCustomTireItem = new NativeCheckboxItem($"Custom Tires", "Toggle on or off Custom tires on this vehicle. (Your tires can be customized)", false);
                VehicleModMenu.Add(ToggleCustomTireItem);

                NativeListItem<int> WheelTypeItem = new NativeListItem<int>("Wheel Type", "Select a Wheel Type.\n0: Sport\n1: Muscle\n2: Lowrider\n3: SUV\n4: Offroad\n5: Tuner\n6: Bike Wheels\n7: High End\n8: Benny's Originals\n9: Benny's Bespoke\n10: Racing\n11: Street\n12: Track");
                int iVar0 = 0;
                while (iVar0 < 13)
                {
                    WheelTypeItem.Add(iVar0);
                    iVar0++;
                }
                WheelTypeItem.GoRight();
                WheelTypeItem.GoLeft();
                WheelTypeItem.Enabled = true;
                VehicleModMenu.Add(WheelTypeItem);

                NativeListItem<int> WheelModItem = new NativeListItem<int>("Wheel Mod", "Select a Wheel Mod.");
                WheelModItem.Clear();
                iVar0 = 0;
                while (iVar0 < Function.Call<int>(Hash.GET_NUM_VEHICLE_MODS, veh, 23))
                {
                    WheelModItem.Add(iVar0, iVar0);
                    iVar0++;
                }
                if (veh.Model.IsBike)
                {
                    WheelModItem.Clear();
                    iVar0 = 0;
                    while (iVar0 < Function.Call<int>(Hash.GET_NUM_VEHICLE_MODS, veh, 24))
                    {
                        WheelModItem.Add(iVar0, iVar0);
                        iVar0++;
                    }
                }
                WheelModItem.GoRight();
                WheelModItem.GoLeft();
                WheelModItem.Enabled = true;
                VehicleModMenu.Add(WheelModItem);

                WheelModItem.ItemChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_MOD, veh, 24, WheelModItem.SelectedItem, ToggleCustomTireItem.Checked);
                    Function.Call(Hash.SET_VEHICLE_MOD, veh, 23, WheelModItem.SelectedItem, ToggleCustomTireItem.Checked);
                };

                WheelTypeItem.ItemChanged += (sender, e) =>
                {
                    Function.Call(Hash.SET_VEHICLE_WHEEL_TYPE, veh, WheelTypeItem.SelectedItem);

                    WheelModItem.Clear();
                    iVar0 = 0;
                    while (iVar0 < Function.Call<int>(Hash.GET_NUM_VEHICLE_MODS, veh, 23))
                    {
                        WheelModItem.Add(iVar0, iVar0);
                        iVar0++;
                    }
                    if (veh.Model.IsBike)
                    {
                        WheelModItem.Clear();
                        iVar0 = 0;
                        while (iVar0 < Function.Call<int>(Hash.GET_NUM_VEHICLE_MODS, veh, 24))
                        {
                            WheelModItem.Add(iVar0, iVar0);
                            iVar0++;
                        }
                    }
                    WheelModItem.GoRight();
                    WheelModItem.GoLeft();
                    WheelModItem.Enabled = true;
                };

                NativeListItem<int> WheelRimColorItem = new NativeListItem<int>("Rim Color", "Select a Rim Pearl Color.");
                iVar0 = 0;
                while (iVar0 < Function.Call<int>(Hash.GET_NUM_MOD_COLORS, 0))
                {
                    WheelRimColorItem.Add(iVar0);
                    iVar0++;
                }
                WheelRimColorItem.GoRight();
                WheelRimColorItem.GoLeft();
                WheelRimColorItem.Enabled = false;
                VehicleModMenu.Add(WheelRimColorItem);
                
                WheelRimColorItem.ItemChanged += (sender, e) =>
                {
                    if (ToggleCustomTireItem.Checked)
                    {
                        OutputArgument pearl = new();
                        OutputArgument color = new();
                        Function.Call(Hash.GET_VEHICLE_EXTRA_COLOURS, veh, pearl, color);
                        
                        Function.Call(Hash.SET_VEHICLE_EXTRA_COLOURS, veh, pearl.GetResult<int>(), WheelRimColorItem.SelectedItem);
                    }
                };

                ToggleCustomTireItem.CheckboxChanged += (sender, e) =>
                {
                    WheelRimColorItem.Enabled = ToggleCustomTireItem.Checked;
                    Function.Call(Hash.SET_VEHICLE_MOD, veh, 24, 0, ToggleCustomTireItem.Checked);
                    Function.Call(Hash.SET_VEHICLE_MOD, veh, 23, 0, ToggleCustomTireItem.Checked);

                    WheelModItem.Clear();
                    iVar0 = 0;
                    while (iVar0 < Function.Call<int>(Hash.GET_NUM_VEHICLE_MODS, veh, 23))
                    {
                        WheelModItem.Add(iVar0, iVar0);
                        iVar0++;
                    }
                    if (veh.Model.IsBike)
                    {
                        WheelModItem.Clear();
                        iVar0 = 0;
                        while (iVar0 < Function.Call<int>(Hash.GET_NUM_VEHICLE_MODS, veh, 24))
                        {
                            WheelModItem.Add(iVar0, iVar0);
                            iVar0++;
                        }
                    }
                    WheelModItem.GoRight();
                    WheelModItem.GoLeft();
                    WheelModItem.Enabled = true;
                };
                
                NativeCheckboxItem ToggleBulletProofItem = new NativeCheckboxItem($"Bullet Proof Tires", "Toggle on or off bullet proof tires on this vehicle. (Your tires cannot be shot out)", false);
                VehicleModMenu.Add(ToggleBulletProofItem);

                ToggleBulletProofItem.CheckboxChanged += (sender, e) =>
                {
                    if (ToggleBulletProofItem.Checked)
                    {
                        Function.Call(Hash.SET_VEHICLE_TYRES_CAN_BURST, veh, false);
                    }
                    else
                    {
                        Function.Call(Hash.SET_VEHICLE_TYRES_CAN_BURST, veh, true);
                    }
                };
            }
            
            NativeItem RepairItem = new NativeItem("Repair Vehicle", "Repair your vehicle if it is damaged.", $"${34000}");
            RepairItem.Activated += (sender, e) =>
            {
                if (veh.IsDamaged)
                {
                    if (MPCash.PROCESS_TRANSACTION(34000))
                    {
                        Function.Call(Hash.SET_VEHICLE_FIXED, veh);
                        Function.Call(Hash.SET_VEHICLE_DEFORMATION_FIXED, veh);
                        Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 0);
                        Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 1);
                        Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 2);
                        Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 3);
                        Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 4);
                        Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 5);
                        Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 6);
                        Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 7);
                        Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 8);
                        Function.Call(Hash.SET_VEHICLE_TYRE_FIXED, veh, 0);
                        Function.Call(Hash.SET_VEHICLE_TYRE_FIXED, veh, 1);
                        Function.Call(Hash.SET_VEHICLE_TYRE_FIXED, veh, 2);
                        Function.Call(Hash.SET_VEHICLE_TYRE_FIXED, veh, 3);
                        Function.Call(Hash.SET_VEHICLE_TYRE_FIXED, veh, 4);
                        Function.Call(Hash.SET_VEHICLE_TYRE_FIXED, veh, 5);
                        Function.Call(Hash.SET_VEHICLE_TYRE_FIXED, veh, 45);
                        Function.Call(Hash.SET_VEHICLE_TYRE_FIXED, veh, 47);

                        Function.Call(Hash.SET_ENTITY_HEALTH, veh, 1000, 0);
                        Function.Call(Hash.SET_VEHICLE_ENGINE_HEALTH, veh, 1000f);
                        Function.Call(Hash.SET_VEHICLE_PETROL_TANK_HEALTH, veh, 1000f);
                    }
                    else
                    {
                        Notification.Show("Transaction Failed: Not Enough Money", true);
                    }
                }
                else
                {
                    Notification.Show("Vehicle does not Require Repair.", true);
                }
            };

            MainMenu.Add(5, RepairItem);

            NativeItem PurchaseItem = new NativeItem("Finish Customizing Vehicle", "Purchase your newly upgraded vehicle for a small price and enjoy the miles.", $"${100000}");
            PurchaseItem.Activated += (sender, e) =>
            {
                if (MPCash.PROCESS_TRANSACTION(100000) || Main.DEBUG)
                {
                    Function.Call(Hash.SET_VEHICLE_FIXED, veh);
                    Function.Call(Hash.SET_VEHICLE_DEFORMATION_FIXED, veh);
                    Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 0);
                    Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 1);
                    Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 2);
                    Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 3);
                    Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 4);
                    Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 5);
                    Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 6);
                    Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 7);
                    Function.Call(Hash.FIX_VEHICLE_WINDOW, veh, 8);
                    Function.Call(Hash.SET_VEHICLE_TYRE_FIXED, veh, 0);
                    Function.Call(Hash.SET_VEHICLE_TYRE_FIXED, veh, 1);
                    Function.Call(Hash.SET_VEHICLE_TYRE_FIXED, veh, 2);
                    Function.Call(Hash.SET_VEHICLE_TYRE_FIXED, veh, 3);
                    Function.Call(Hash.SET_VEHICLE_TYRE_FIXED, veh, 4);
                    Function.Call(Hash.SET_VEHICLE_TYRE_FIXED, veh, 5);
                    Function.Call(Hash.SET_VEHICLE_TYRE_FIXED, veh, 45);
                    Function.Call(Hash.SET_VEHICLE_TYRE_FIXED, veh, 47);

                    Function.Call(Hash.SET_ENTITY_HEALTH, veh, 1000, 0);
                    Function.Call(Hash.SET_VEHICLE_ENGINE_HEALTH, veh, 1000f);
                    Function.Call(Hash.SET_VEHICLE_PETROL_TANK_HEALTH, veh, 1000f);

                    MPVehicleLoadout.SAVE_VEHICLE(Main.PlayerVehicle, "scripts\\CruelMastersOnlineOfflineAssets\\Vehicles\\CurrentVehicle.xml");
                    GarageTransactionSpent = true;
                    MainMenu.Visible = false;

                }
                else
                {
                    Notification.Show("Transaction Failed: Not Enough Money", true);
                }
            };

            MainMenu.Add(6, PurchaseItem);

            MainMenu.Visible = true;
        }
    }
    internal class MPDealership : Script
    {
        public static Blip SimeonDealershipBlip;
        public static Vehicle ShownVehicle;
        public static bool MenuOpen = false;
        public static LemonUI.ObjectPool MDPool = new LemonUI.ObjectPool();
        public static LemonUI.Menus.NativeMenu MainMenu = new LemonUI.Menus.NativeMenu("DEALERSHIP", "CATEGORIES", "");
        
        public MPDealership()
        {
            Tick += onTick;
            Aborted += onShutdown;
            
            MDPool = new LemonUI.ObjectPool();
            MainMenu = new LemonUI.Menus.NativeMenu("", "CATEGORIES", "");
            LemonUI.Elements.ScaledTexture backround = new LemonUI.Elements.ScaledTexture(MainMenu.Banner.Position, new SizeF(MainMenu.Banner.Size.Width, MainMenu.Banner.Size.Height), "shopui_title_premium_deluxe_motorsport", "shopui_title_premium_deluxe_motorsport");
            MainMenu.Banner = backround;
            MainMenu.UseMouse = false;
            MainMenu.ItemCount = LemonUI.Menus.CountVisibility.Always;

            MDPool.Add(MainMenu);
        }
        public static void DEALERSHIP_MENU()
        {
            MainMenu.Clear();
            LemonUI.Elements.ScaledTexture backround = new LemonUI.Elements.ScaledTexture(MainMenu.Banner.Position, new SizeF(MainMenu.Banner.Size.Width, MainMenu.Banner.Size.Height), "shopui_title_premium_deluxe_motorsport", "shopui_title_premium_deluxe_motorsport");
            
            unsafe
            {
                NativeMenu VehicleModMenu = new NativeMenu("", "Commercial Vehicles", "Browse for Vehicle Types.");
                MDPool.Add(VehicleModMenu);
                VehicleModMenu.UseMouse = false;
                VehicleModMenu.CloseOnInvalidClick = false;
                VehicleModMenu.Banner = backround;
                NativeSubmenuItem VehicleModSubbutton = new NativeSubmenuItem(VehicleModMenu, MainMenu);
                VehicleModSubbutton.AltTitle = "";
                VehicleModMenu.Buttons.Clear();
                InstructionalButton[] Buttons = { new("Purchase Vehicle", GTA.Control.FrontendAccept), new("Back", GTA.Control.PhoneCancel) };
                VehicleModMenu.Buttons.Add(Buttons[0]);
                VehicleModMenu.Buttons.Add(Buttons[1]);

                VehicleModMenu.Closing += (sender, e) =>
                {
                    SET_CAM_NORMAL();
                    if (ShownVehicle != null)
                    {
                        ShownVehicle.Delete();
                        ShownVehicle = null;
                    }
                };

                MainMenu.Add(0, VehicleModSubbutton);

                NativeItem MuleItem = new NativeItem("Mule", "Purchase The Mule", "$27,000");

                MuleItem.Selected += (sender, e) =>
                {
                    if (ShownVehicle != null)
                    {
                        ShownVehicle.Delete();
                        ShownVehicle = null;
                    }
                    if (ShownVehicle == null)
                    {
                        ShownVehicle = World.CreateVehicle(VehicleHash.Mule, new Vector3(-44.28328f, -1098.583f, 26.42234f - 1f), 117.0062f);
                        ShownVehicle.IsPositionFrozen = true;
                        ShownVehicle.IsCollisionEnabled = false;
                    }
                    if (Main.CutsceneCam2 != null)
                    {
                        Main.CutsceneCam2.Delete();
                        Main.CutsceneCam2 = null;
                    }
                    Main.CutsceneCam2 = World.CreateCamera(new Vector3(-50.00983f, -1103.991f, 26.48197f), new Vector3(0f, 0f, 322.0349f), 30.0f);
                    Main.CutsceneCam2.PointAt(ShownVehicle, new Vector3(1f, 0f, 0f));
                    Main.CutsceneCam2.Shake(CameraShake.Hand, 0.3f);
                    Main.CutsceneCam.InterpTo(Main.CutsceneCam2, 2000, 3, 1);
                };

                MuleItem.Activated += (sender, e) =>
                {
                    
                    if (MPCash.PROCESS_TRANSACTION(27000) || Main.DEBUG)
                    {
                        
                    }
                    else
                    {
                        Notification.Show("Transaction Failed: Not Enough Money", true);
                    }
                };

                VehicleModMenu.Add(MuleItem);

            }

            MenuOpen = true;
        }
        public void onTick(object sender, EventArgs e)
        {
            if (Main.DEBUG)
            {
                if (Game.IsControlJustPressed(GTA.Control.Context))
                {
                    MPOwnedVehicles.SAVE_OWNED_VEHICLE("scripts\\CruelMastersOnlineOfflineAssets\\Vehicles\\CurrentVehicle.xml", "PreviousVehicle");
                }
            }

            if (MDPool != null && MDPool.AreAnyVisible)
            {
                MDPool.Process();
            }

            if (!Main.OnMission)
            {
                if (SimeonDealershipBlip == null)
                {
                    SimeonDealershipBlip = World.CreateBlip(new Vector3(-47.86579f, -1097.077f, 26.42234f));
                }
                else
                {
                    SimeonDealershipBlip.Sprite = BlipSprite.SimeonCarShowroom;
                    SimeonDealershipBlip.Color = BlipColor.White;
                    SimeonDealershipBlip.Name = "Dealership";
                    SimeonDealershipBlip.Alpha = 255;
                }

                if (Game.Player.Character.Position.DistanceTo(new Vector3(-47.82288f, -1096.888f, 26.42235f)) < 30f)
                {
                    Vehicle[] nearbyvehs = World.GetNearbyVehicles(new Vector3(-47.82288f, -1096.888f, 26.42235f), 30f);
                    foreach (Vehicle veh in nearbyvehs)
                    {
                        if (veh != null && veh != ShownVehicle)
                        {
                            if (Game.Player.Character.CurrentVehicle != null)
                            {
                                if (veh != Game.Player.Character.CurrentVehicle)
                                {
                                    veh.Delete();
                                }
                            }
                            else
                            {
                                veh.Delete();
                            }
                        }
                    }
                }
                if (Game.Player.Character.Position.DistanceTo(new Vector3(-47.82288f, -1096.888f, 26.42235f)) < 10f)
                {
                    World.DrawMarker(MarkerType.VerticalCylinder, new Vector3(-47.82288f, -1096.888f, 26.42235f - 1.6f), Vector3.Zero, Vector3.Zero, new Vector3(1.5f, 1.5f, 1.5f), Color.Aqua);
                }
                if (Game.Player.Character.Position.DistanceTo(new Vector3(-47.82288f, -1096.888f, 26.42235f)) < 1.3f)
                {
                    Screen.ShowHelpTextThisFrame("Press ~INPUT_CONTEXT~ to enter the dealership.");
                    if (Game.IsControlJustPressed(GTA.Control.Context) && !MDPool.AreAnyVisible)
                    {
                        while (Main.CutsceneCam == null)
                        {
                            Main.CutsceneCam = World.CreateCamera(new Vector3(-47.39991f, -1103.096f, 26.33568f), new Vector3(0f, 0f, 328.2f), 30.0f);
                            Wait(0);
                        }//-50.00983f, -1103.991f, 26.48197f, 322.0349
                        Main.CutsceneCam.Shake(CameraShake.Hand, 0.3f);
                        World.RenderingCamera = Main.CutsceneCam;
                        Game.Player.Character.Position = new Vector3(-47.57949f, -1096.614f, 26.42235f);
                        Game.Player.Character.Heading = 160.7511f;
                        Game.Player.CanControlCharacter = false;
                        DEALERSHIP_MENU();
                        MainMenu.Visible = !MainMenu.Visible;
                    }
                }
                if (MenuOpen)
                {
                    if (!MDPool.AreAnyVisible)
                    {
                        if (Main.CutsceneCam != null)
                        {
                            Main.CutsceneCam.Delete();
                            Main.CutsceneCam = null;
                        }
                        World.RenderingCamera = null;

                        Game.Player.CanControlCharacter = true;
                        MenuOpen = false;
                    }
                }
            }
            else
            {
                if (SimeonDealershipBlip != null)
                {
                    SimeonDealershipBlip.Alpha = 0;
                }
            }
        }
        public void onShutdown(object sender, EventArgs e)
        {
            if (SimeonDealershipBlip != null)
            {
                SimeonDealershipBlip.Delete();
            } 
            if (ShownVehicle != null)
            {
                ShownVehicle.Delete();
            }
        }

        public static void SET_CAM_NORMAL()
        {
            if (Main.CutsceneCam != null)
            {
                Main.CutsceneCam.StopPointing();
                Main.CutsceneCam.Detach();

                Main.CutsceneCam.Position = new Vector3(-47.39991f, -1103.096f, 26.33568f);
                Main.CutsceneCam.Rotation = new Vector3(0f, 0f, 328.2f);

                Main.CutsceneCam.FieldOfView = 30.0f;
                Main.CutsceneCam.Shake(CameraShake.Hand, 0.3f);

                if (Main.CutsceneCam2 != null)
                {
                    Main.CutsceneCam2.InterpTo(Main.CutsceneCam, 2000, 3, 1);
                    Main.CutsceneCam2.Delete();
                    Main.CutsceneCam2 = null;
                }
            }
        }
    }
    #endregion
    #region MPPhone
    internal class Mobile_Phone : Script
    {
        public static bool PHONE_OPEN = false;
        public static bool CALL_ACTIVE = false;
        public static bool PHONE_LOADED = false;
        public static bool APP_ACTIVE = false;
        public static bool MESSAGE_ACTIVE = false;
        public static bool CAN_CALL = false;
        public static bool CAN_OPEN_PHONE = true;

        public static int MobileID = -1;
        public static int CELLPHONE_IFRUIT = 0;

        public static int currentselection;
        public static int getcurrentselection;
        public static int MouseCheck;
        public static int ScrollTimer = Game.GameTime + 100;

        public static int CurrentEmailAmount = 0;
        public static int CurrentTextAmount = 0;
        public static int CurrentContactAmount = 0;
        public static int CurrentAppActive = -1;

        public static List<string> Text_Contact = new List<string>();
        public static List<string> Text_Message = new List<string>();
        public static List<string> Text_Pic = new List<string>();

        public static List<string> Email_Contact = new List<string>();
        public static List<string> Email_Message = new List<string>();
        public static List<string> Email_Message2 = new List<string>();
        public static List<string> Email_Message3 = new List<string>();
        public static List<string> Email_Pic = new List<string>();
        public static List<string> Email_PicID = new List<string>();

        public static List<string> Contact_Contact = new List<string>();
        public static List<string> Contact_Pic = new List<string>();
        public static string CurrentInContact = "char_default";
        public static bool CallVL = false;

        public static void DeleteCALLSCREENScaleform()
        {
            //"submarine_table" - Submarine Heist Table Render Target Name && Render Target ID - 771658040
            //"club_projector" - Nightclub casino target name && Render Target ID - -824545400
            //"Prop_x17DLC_Monitor_Wall_01a" - Doomsday Heist Facilty Monitor Wall && Target ID - 1080309276
            unsafe
            {
                int handle = CELLPHONE_IFRUIT;
                Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                CELLPHONE_IFRUIT = 0;
            }
            //Function.Call(Hash.CLEAR_TV_CHANNEL_PLAYLIST, 0);
        }
        public static void RequestCALLSCREENScaleform()
        {
            CELLPHONE_IFRUIT = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE, "CELLPHONE_IFRUIT");
        }

        public static void DrawCellphoneCallScaleform()
        {
            Function.Call((Hash)0xE6A9F00D4240B519, CELLPHONE_IFRUIT, 1);
            Function.Call((Hash)0xE6A9F00D4240B519, CELLPHONE_IFRUIT, true);
            Function.Call(Hash.SET_TEXT_RENDER_ID, MobileID);
            Function.Call((Hash)0x61BB1D9B3A95D802, 4);
            Function.Call((Hash)0xC6372ECD45D73BCD, 1);

            Function.Call(Hash.DRAW_SCALEFORM_MOVIE, CELLPHONE_IFRUIT, 0.1f, 0.179f, 0.2f, 0.356f, 255, 255, 255, 255);
            Function.Call(Hash.SET_TEXT_RENDER_ID, Function.Call<int>(Hash.GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID));
        }

        public Mobile_Phone()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }

        public void onTick(object sender, EventArgs e)
        {
            if (!PHONE_LOADED)
            {
                DeleteCALLSCREENScaleform();
                Wait(50);
                DeleteCALLSCREENScaleform();
                RequestCALLSCREENScaleform();
                //Main.LoadTexureDict("char_gooch");
                Wait(50);

                Text_Contact.Clear();
                Text_Message.Clear();
                Text_Pic.Clear();

                Email_Contact.Clear();
                Email_Message.Clear();
                Email_Message2.Clear();
                Email_Message3.Clear();
                Email_Pic.Clear();
                Email_PicID.Clear();

                PHONE_LOADED = true;
            }
            if (Game.IsControlJustPressed(GTA.Control.Context))
            {

            }
            if (Game.IsControlJustPressed(GTA.Control.VehicleDuck))
            {

            }
            if (CAN_OPEN_PHONE && !PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS() && Hud.IsVisible && Hud.IsRadarVisible && Cutscenes.HAS_CUTSCENE_FINISHED() && !Game.Player.Character.IsDead)
            {
                if (!CALL_ACTIVE)
                {
                    if (PHONE_OPEN)
                    {
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, CONTROLS.INPUT_ATTACK, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, CONTROLS.INPUT_ATTACK2, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, CONTROLS.INPUT_AIM, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, CONTROLS.INPUT_VEH_FLY_ATTACK, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, CONTROLS.INPUT_MELEE_ATTACK_LIGHT, true);
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, CONTROLS.INPUT_MELEE_ATTACK_HEAVY, true);

                        if (Game.IsControlJustPressed(GTA.Control.PhoneCancel) && !APP_ACTIVE)
                        {
                            CLOSE_PHONE();
                        }

                        TitleBarTime();
                        DrawCellphoneCallScaleform();
                        PhoneSelection();
                    }
                    else
                    {
                        if (Game.IsControlJustPressed(GTA.Control.Phone))
                        {
                            OPEN_PHONE();
                        }
                    }
                }
                else
                {
                    Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, CONTROLS.INPUT_ATTACK, true);
                    Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, CONTROLS.INPUT_ATTACK2, true);
                    Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, CONTROLS.INPUT_AIM, true);
                    Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, CONTROLS.INPUT_VEH_FLY_ATTACK, true);
                    Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, CONTROLS.INPUT_MELEE_ATTACK_LIGHT, true);
                    Function.Call(Hash.DISABLE_CONTROL_ACTION, 0, CONTROLS.INPUT_MELEE_ATTACK_HEAVY, true);

                    TitleBarTime();
                    DrawCellphoneCallScaleform();

                    if (CurrentInContact != "char_default")
                    {
                        int randomvoiceline = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 1, 4);
                        switch (CurrentInContact)
                        {
                            case "char_default":
                                {
                                    
                                }
                                break;
                        }
                    }
                }
            }
            else
            {
                if (PHONE_OPEN)
                {
                    CLOSE_PHONE();
                }
            }
        }
        public void onShutdown(object sender, EventArgs e)
        {
            #region Vehicles
            #endregion
            #region Peds
            #endregion
            #region Props
            #endregion
            #region Blips
            #endregion
            #region Cameras
            #endregion
            #region Pickups
            #endregion
            DESTROY_PHONE();
            Function.Call(Hash.SET_PED_CONFIG_FLAG, Game.Player.Character, 242, false);
            Function.Call(Hash.SET_PED_CONFIG_FLAG, Game.Player.Character, 243, false);
            Function.Call(Hash.SET_PED_CONFIG_FLAG, Game.Player.Character, 244, false);
            if (Function.Call<bool>(Hash.IS_NAMED_RENDERTARGET_REGISTERED, "npcphone"))
            {
                Function.Call(Hash.RELEASE_NAMED_RENDERTARGET, "npcphone");
            }
            if (Function.Call<bool>(Hash.IS_PED_RINGTONE_PLAYING, Game.Player.Character))
            {
                Function.Call(Hash.STOP_PED_RINGTONE, Game.Player.Character);
            }
            if (PHONE_LOADED)
            {
                DeleteCALLSCREENScaleform();
            }
            Text_Contact.Clear();
            Text_Message.Clear();
            Text_Pic.Clear();
        }

        public static void OPEN_PHONE()
        {
            MobileID = -1;
            if (!Function.Call<bool>(Hash.IS_NAMED_RENDERTARGET_REGISTERED, "npcphone"))
            {
                Function.Call(Hash.REGISTER_NAMED_RENDERTARGET, "npcphone", 0);
                Wait(0);
            }
            else
            {
                return;
            }
            if (!Function.Call<bool>(Hash.IS_NAMED_RENDERTARGET_LINKED, Main.joaat("prop_npc_phone")))
            {
                Function.Call(Hash.LINK_NAMED_RENDERTARGET, Main.joaat("prop_npc_phone"));
                Wait(0);
            }
            else
            {
                return;
            }
            int renderid = 0;
            unsafe
            {
                Function.Call(Hash.GET_MOBILE_PHONE_RENDER_ID, &renderid);
            }

            MobileID = renderid;

            TitleBarTime();
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SLEEP_MODE", false);
            //Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 1f, 1f, 20f, -1f, -1f, "CELL_225" /* GXT: NEXT */, 0, 0, 0, 0);
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 2f, 1f, 2f, -1f, -1f, "CELL_205" /* GXT: SELECT */, 0, 0, 0, 0);
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 2f, 0, 255, 50);
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 3f, 1f, 4f, -1f, -1f, "CELL_206" /* GXT: BACK */, 0, 0, 0, 0);
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 3f, 255, 50, 0);

            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_THEME", 5);
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_BACKGROUND_IMAGE", 0);

            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT_EMPTY", 1);
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 1, 0, 4, "Email", "Email", "Email", "CELL_217", "CELL_217");//email app
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 1, 1, 2, "Texts", "Texts", "Texts", "CELL_217", "CELL_217");//text app
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 1, 2, 5, "Contacts", "Contacts", "Contacts", "CELL_217", "CELL_217");//contact app
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 1, 3, 14, "Play Quick Job", "Play Quick Job", "Play Quick Job", "CELL_217", "CELL_217");//quick job app
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 1, 4, 12, "Job List", "Job List", "Job List", "CELL_217", "CELL_217");//Job List app
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 1, 5, 24, "Settings", "Settings", "Settings", "CELL_217", "CELL_217");//settings app
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 1, 6, 1, "Snapmatic", "Snapmatic", "Snapmatic", "CELL_217", "CELL_217");//Snapmatic app
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 1, 7, 6, "Internet", "Internet", "Internet", "CELL_217", "CELL_217");//internet app
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 1, 8, 3, "Empty", "Empty", "Empty", "CELL_217", "CELL_217");//extra mission app

            //Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT_EMPTY", 8);//empty email
            //Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT_EMPTY", 6);//empty text
            //Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT_EMPTY", 2);//empty contacts

            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 1f, Function.Call<int>(Hash.TO_FLOAT, 0));

            Function.Call(Hash.SET_PED_CONFIG_FLAG, Game.Player.Character, 242, true);
            Function.Call(Hash.SET_PED_CONFIG_FLAG, Game.Player.Character, 243, true);
            Function.Call(Hash.SET_PED_CONFIG_FLAG, Game.Player.Character, 244, true);
            CREATE_PHONE(0);
            //TOGGLE_PHONE(false);
            if (Function.Call<bool>(Hash.GET_IS_HIDEF))
            {
                SET_MOBILE_PHONE_POSITION(Function.Call<float>(Hash.GET_SAFE_ZONE_SIZE) * 117.2f, -50f, -113f);
            }
            else
            {
                SET_MOBILE_PHONE_POSITION(Function.Call<float>(Hash.GET_SAFE_ZONE_SIZE) * 85.7f, -35f, -91.5f);
            }
            SET_MOBILE_PHONE_ROTATION(-90f, 0f, 0f);
            SET_MOBILE_PHONE_SCALE(500f);

            if (!CALL_ACTIVE)
            {
                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pull_Out", "Phone_SoundSet_Default", true);
            }

            PHONE_OPEN = true;
        }

        public static void CLOSE_PHONE()
        {
            if (Function.Call<bool>(Hash.IS_NAMED_RENDERTARGET_REGISTERED, "npcphone"))
            {
                Function.Call(Hash.RELEASE_NAMED_RENDERTARGET, "npcphone");
            }
            MobileID = -1;

            DESTROY_PHONE();

            Function.Call(Hash.SET_PED_CONFIG_FLAG, Game.Player.Character, 242, false);
            Function.Call(Hash.SET_PED_CONFIG_FLAG, Game.Player.Character, 243, false);
            Function.Call(Hash.SET_PED_CONFIG_FLAG, Game.Player.Character, 244, false);

            if (!CALL_ACTIVE)
            {
                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Put_Away", "Phone_SoundSet_Default", true);
            }

            APP_ACTIVE = false;
            MESSAGE_ACTIVE = false;
            CurrentAppActive = -1;
            PHONE_OPEN = false;
        }

        public static void SETUP_PHONECALL(string contactname, string txd, string callstate, string callstate2, bool isDialing = false, int timetodial = 4000, int timetoanswer = 6000)
        {
            CALL_ACTIVE = true;
            CLOSE_PHONE();
            Main.LoadTexureDict(txd);
            Wait(50);
            OPEN_PHONE();
            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Menu_Navigate", "Phone_SoundSet_Default", true);
            int iTimer0 = 0;
            if (!isDialing)
            {
                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 2f, 1f, 5f, -1f, -1f, "CELL_205" /* GXT: SELECT */, 0, 0, 0, 0);
                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 2f, 0, 155, 255);
                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 3f, 1f, -1f, -1f, -1f, "CELL_206" /* GXT: BACK */, 0, 0, 0, 0);
                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 3f, 255, 0, 15);
            }
            else
            {
                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 2f, 1f, -1f, -1f, -1f, "CELL_205" /* GXT: SELECT */, 0, 0, 0, 0);
                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 2f, 0, 155, 255);
                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 3f, 1f, 6f, -1f, -1f, "CELL_206" /* GXT: BACK */, 0, 0, 0, 0);
                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 3f, 255, 0, 15);
            }

            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT_EMPTY", 4);
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 4, 0, 2, contactname, txd, callstate, "CELL_217", "CELL_217");

            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 4f, Function.Call<int>(Hash.TO_FLOAT, 0));

            if (!isDialing)
            {
                Function.Call(Hash.PLAY_PED_RINGTONE, "Remote_Ring", Game.Player.Character, 1);
                iTimer0 = Game.GameTime + timetodial;
                while (Game.GameTime < iTimer0)
                {
                    DrawCellphoneCallScaleform();
                    Wait(0);
                }
            }
            else
            {
                Function.Call(Hash.PLAY_PED_RINGTONE, "Dial_and_Remote_Ring", Game.Player.Character, 1);
                iTimer0 = Game.GameTime + timetoanswer;
                while (Game.GameTime < iTimer0)
                {
                    DrawCellphoneCallScaleform();
                    Wait(0);
                }
            }


            Function.Call(Hash.STOP_PED_RINGTONE, Game.Player.Character);

            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 2f, 1f, -1f, -1f, -1f, "CELL_205" /* GXT: SELECT */, 0, 0, 0, 0);
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 2f, 0, 155, 255);
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 3f, 1f, 6f, -1f, -1f, "CELL_206" /* GXT: BACK */, 0, 0, 0, 0);
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 3f, 255, 0, 15);

            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT_EMPTY", 4);
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 4, 0, 2, contactname, txd, callstate2, "CELL_217", "CELL_217");

            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 4f, Function.Call<int>(Hash.TO_FLOAT, 0));
        }

        public static void END_PHONECALL(bool isincutscene = false)
        {
            if (!isincutscene)
            {
                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Hang_Up", "Phone_SoundSet_Default", true);
            }

            CLOSE_PHONE();

            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 2f, 1f, 5f, -1f, -1f, "CELL_205" /* GXT: SELECT */, 0, 0, 0, 0);
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 2f, 0, 155, 255);
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 3f, 1f, 6f, -1f, -1f, "CELL_206" /* GXT: BACK */, 0, 0, 0, 0);
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 3f, 255, 0, 15);

            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT_EMPTY", 4);
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 4, 0, 2, "", "", "", "CELL_217", "CELL_217");

            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 4f, Function.Call<int>(Hash.TO_FLOAT, 0));

            CALL_ACTIVE = false;
        }

        public static void PhoneSelection()//main menu
        {
            if (Game.GameTime > MouseCheck)
            {
                Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, CELLPHONE_IFRUIT, "GET_CURRENT_SELECTION");
                currentselection = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);
                MouseCheck = Game.GameTime + 100;
            }
            if (Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentselection))
            {
                getcurrentselection = Function.Call<int>(Hash.GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT, currentselection);
            }
            if (APP_ACTIVE)
            {
                if (Game.IsControlJustPressed(GTA.Control.PhoneUp) || Game.IsControlJustPressed(GTA.Control.PhoneScrollForward))
                {
                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 1f, -1082130432, -1082130432, -1082130432, -1082130432);//up
                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Menu_Navigate", "Phone_SoundSet_Default", true);
                }
                if (Game.IsControlJustPressed(GTA.Control.PhoneDown) || Game.IsControlJustPressed(GTA.Control.PhoneScrollBackward))
                {
                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 3f, -1082130432, -1082130432, -1082130432, -1082130432);//down
                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Menu_Navigate", "Phone_SoundSet_Default", true);
                }
                if (Game.IsControlJustPressed(GTA.Control.PhoneLeft) || Game.IsControlJustPressed(GTA.Control.PhoneScrollForward))
                {
                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 4f, -1082130432, -1082130432, -1082130432, -1082130432);//left
                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Menu_Navigate", "Phone_SoundSet_Default", true);
                }
                if (Game.IsControlJustPressed(GTA.Control.PhoneRight) || Game.IsControlJustPressed(GTA.Control.PhoneScrollBackward))
                {
                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 2f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Menu_Navigate", "Phone_SoundSet_Default", true);
                }

                bool clickreturn = false;
                if (Game.IsControlJustPressed(GTA.Control.PhoneSelect) && !MESSAGE_ACTIVE)
                {
                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Menu_Accept", "Phone_SoundSet_Default", true);
                    switch (CurrentAppActive)
                    {
                        case 0://email
                            {
                                if (Email_Contact.Count > 0 && Email_Message.Count > 0 && Email_Pic.Count > 0 && Email_PicID.Count > 0)
                                {
                                    SET_MOBILE_PHONE_ROTATION(-90f, 0f, 90f);
                                    Main.LoadTexureDict(Email_Pic[getcurrentselection]);
                                    Main.LoadTexureDict(Email_Pic[getcurrentselection]);

                                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT_EMPTY", 9);
                                    //Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 9, 0, 1, Email_Contact[getcurrentselection], Email_Message[getcurrentselection], Email_Message2[getcurrentselection], Email_Message3[getcurrentselection], Email_PicID[getcurrentselection]);//email app

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, CELLPHONE_IFRUIT, "SET_DATA_SLOT");
                                    Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT, 9);
                                    Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT, 0);
                                    Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT, 1);
                                    Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING, Email_Contact[getcurrentselection]);
                                    Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING, "<textarea rows=\"1000\" cols=\"1000\">" + Email_Message[getcurrentselection] + "</textarea>");
                                    Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING, "<textarea rows=\"1000\" cols=\"1000\">" + Email_Message2[getcurrentselection] + "</textarea>");
                                    Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING, "<textarea rows=\"1000\" cols=\"1000\">" + Email_Message3[getcurrentselection] + "</textarea>");
                                    Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING, Email_PicID[getcurrentselection]);
                                    Function.Call(Hash.END_SCALEFORM_MOVIE_METHOD);

                                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 9, 0, -1082130432, -1082130432, -1082130432);
                                    MESSAGE_ACTIVE = true;
                                }
                            }
                            break;
                        case 1://text app
                            {
                                if (Text_Contact.Count > 0 && Text_Message.Count > 0 && Text_Pic.Count > 0)
                                {
                                    Main.LoadTexureDict(Text_Pic[getcurrentselection]);
                                    Main.LoadTexureDict(Text_Pic[getcurrentselection]);

                                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT_EMPTY", 7);
                                    //Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 7, 0, Text_Contact[getcurrentselection], Text_Message[getcurrentselection], Text_Pic[getcurrentselection]);//text app

                                    Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, CELLPHONE_IFRUIT, "SET_DATA_SLOT");
                                    Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT, 7);
                                    Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT, 0);
                                    Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING, Text_Contact[getcurrentselection]);
                                    Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING, "<textarea rows=\"1000\" cols=\"1000\">" + Text_Message[getcurrentselection] + "</textarea>");
                                    Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING, Text_Pic[getcurrentselection]);
                                    Function.Call(Hash.END_SCALEFORM_MOVIE_METHOD);

                                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 7, 0, -1082130432, -1082130432, -1082130432);//trackify = 23 //24 - weird gps position thingy //
                                    MESSAGE_ACTIVE = true;
                                }
                            }
                            break;
                        case 2://contacts app
                            {
                                Function.Call(Hash.PLAY_PED_RINGTONE, "Remote_Ring", Game.Player.Character, 1);

                                Main.LoadTexureDict(Contact_Pic[getcurrentselection]);
                                Main.LoadTexureDict(Contact_Pic[getcurrentselection]);

                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT_EMPTY", 4);
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 4, 0, 2, Contact_Contact[getcurrentselection], Contact_Pic[getcurrentselection], "DIALING", "CELL_217", "CELL_217");

                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 4f, Function.Call<int>(Hash.TO_FLOAT, 0));

                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 1f, 1f, -1f, -1f, -1f, "CELL_205" /* GXT: SELECT */, 0, 0, 0, 0);
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 1f, 0, 130, 200);
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 2f, 1f, -1f, -1f, -1f, "CELL_205" /* GXT: SELECT */, 0, 0, 0, 0);
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 2f, 0, 255, 50);
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 3f, 1f, 6f, -1f, -1f, "CELL_206" /* GXT: BACK */, 0, 0, 0, 0);
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 3f, 255, 50, 0);

                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Menu_Navigate", "Phone_SoundSet_Franklin", true);

                                int iTimer0 = Game.GameTime + Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 4000, 6000);
                                while (Game.GameTime < iTimer0)
                                {
                                    if (Game.IsControlJustPressed(GTA.Control.PhoneCancel))
                                    {
                                        clickreturn = true;
                                        break;
                                    }
                                    DrawCellphoneCallScaleform();
                                    Wait(0);
                                }
                                Function.Call(Hash.STOP_PED_RINGTONE, Game.Player.Character);
                                if (clickreturn)
                                {
                                    CurrentInContact = "char_default";
                                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 1f, Function.Call<int>(Hash.TO_FLOAT, 0));
                                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 2f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 2f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 2f, Function.Call<int>(Hash.TO_FLOAT, 0));

                                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 1f, 1f, 9f, -1f, -1f, "CELL_205" /* GXT: SELECT */, 0, 0, 0, 0);
                                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 1f, 0, 130, 200);
                                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 2f, 1f, 5f, -1f, -1f, "CELL_205" /* GXT: SELECT */, 0, 0, 0, 0);
                                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 2f, 0, 255, 50);
                                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 3f, 1f, 4f, -1f, -1f, "CELL_206" /* GXT: BACK */, 0, 0, 0, 0);
                                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 3f, 255, 50, 0);

                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Hang_Up", "Phone_SoundSet_Default", true);
                                    APP_ACTIVE = true;
                                    break;
                                }
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT_EMPTY", 4);
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 4, 0, 2, Contact_Contact[getcurrentselection], Contact_Pic[getcurrentselection], "CONNECTED", "CELL_217", "CELL_217");

                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 4f, Function.Call<int>(Hash.TO_FLOAT, 0));

                                CurrentInContact = Contact_Contact[getcurrentselection];

                                CALL_ACTIVE = true;
                            }
                            break;
                    }
                }
                if (!MESSAGE_ACTIVE)
                {
                    if (Game.IsControlJustPressed(GTA.Control.PhoneCancel) && !clickreturn)
                    {
                        Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 1f, 1f, -1f, -1f, -1f, "CELL_205" /* GXT: SELECT */, 0, 0, 0, 0);
                        Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 1f, 0, 100, 200);
                        Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 2f, 1f, 2f, -1f, -1f, "CELL_205" /* GXT: SELECT */, 0, 0, 0, 0);
                        Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 2f, 0, 255, 50);
                        Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 3f, 1f, 4f, -1f, -1f, "CELL_206" /* GXT: BACK */, 0, 0, 0, 0);
                        Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 3f, 255, 50, 0);

                        Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 1f, Function.Call<int>(Hash.TO_FLOAT, 0));
                        if (CurrentAppActive == 1 || CurrentAppActive == 4 || CurrentAppActive == 7)
                        {
                            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 2f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                        }
                        else if (CurrentAppActive == 2 || CurrentAppActive == 5 || CurrentAppActive == 8)
                        {
                            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 2f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 2f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                        }
                        else if (CurrentAppActive == 3)
                        {
                            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 2f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 2f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 2f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                        }
                        else if (CurrentAppActive == 6)
                        {
                            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 2f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 2f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 2f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 2f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 2f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 2f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                        }
                        Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Menu_Back", "Phone_SoundSet_Default", true);
                        SET_MOBILE_PHONE_ROTATION(-90f, 0f, 0f);
                        APP_ACTIVE = false;
                        CurrentAppActive = -1;
                    }
                }
                else
                {
                    if (Game.IsControlJustPressed(GTA.Control.PhoneCancel))
                    {
                        Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Menu_Back", "Phone_SoundSet_Default", true);
                        switch (CurrentAppActive)
                        {
                            case 0://email
                                {
                                    SET_MOBILE_PHONE_ROTATION(-90f, 0f, 90f);
                                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 1f, Function.Call<int>(Hash.TO_FLOAT, 0));
                                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 8f, Function.Call<int>(Hash.TO_FLOAT, 0));
                                    MESSAGE_ACTIVE = false;
                                }
                                break;
                            case 1://text app
                                {
                                    Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 6f, Function.Call<int>(Hash.TO_FLOAT, 0));
                                    MESSAGE_ACTIVE = false;
                                }
                                break;
                            case 2://contacts app
                                {
                                    //Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 2f, Function.Call<int>(Hash.TO_FLOAT, 0));
                                }
                                break;
                        }
                    }
                }
            }
            else
            {
                if (Game.GameTime > ScrollTimer)
                {
                    if (Game.IsControlJustPressed(GTA.Control.PhoneUp))
                    {
                        Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 1f, -1082130432, -1082130432, -1082130432, -1082130432);//up
                        Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Menu_Navigate", "Phone_SoundSet_Default", true);

                        ScrollTimer = Game.GameTime + 100;
                    }
                    if (Game.IsControlJustPressed(GTA.Control.PhoneDown))
                    {
                        Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 3f, -1082130432, -1082130432, -1082130432, -1082130432);//down
                        Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Menu_Navigate", "Phone_SoundSet_Default", true);

                        ScrollTimer = Game.GameTime + 100;
                    }
                    if (Game.IsControlJustPressed(GTA.Control.PhoneLeft) || Game.IsControlJustPressed(GTA.Control.PhoneScrollForward))
                    {
                        Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 4f, -1082130432, -1082130432, -1082130432, -1082130432);//left
                        Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Menu_Navigate", "Phone_SoundSet_Default", true);

                        if (CurrentAppActive == -1)
                        {
                            if (getcurrentselection == 3 || getcurrentselection == 6)
                            {
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 1f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                                                                                                                                                       //Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 3f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                            }
                            if (getcurrentselection == 0)
                            {
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 1f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                                                                                                                                                       //Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 4f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                            }
                        }

                        ScrollTimer = Game.GameTime + 100;
                    }
                    if (Game.IsControlJustPressed(GTA.Control.PhoneRight) || Game.IsControlJustPressed(GTA.Control.PhoneScrollBackward))
                    {
                        Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 2f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                        Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Menu_Navigate", "Phone_SoundSet_Default", true);

                        if (CurrentAppActive == -1)
                        {
                            if (getcurrentselection == 2 || getcurrentselection == 5)
                            {
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 3f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                            }
                            if (getcurrentselection == 8)
                            {
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 3f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                                                                                                                                                       //Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_INPUT_EVENT", 4f, -1082130432, -1082130432, -1082130432, -1082130432);//right
                            }
                        }

                        ScrollTimer = Game.GameTime + 100;
                    }
                }

                if (Game.IsControlJustPressed(GTA.Control.PhoneSelect))
                {
                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Menu_Accept", "Phone_SoundSet_Default", true);
                    switch (getcurrentselection)
                    {
                        case 0://email
                            {
                                CurrentAppActive = getcurrentselection;
                                SET_MOBILE_PHONE_ROTATION(-90f, 0f, 90f);
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 8f, Function.Call<int>(Hash.TO_FLOAT, 0));
                                APP_ACTIVE = true;
                            }
                            break;
                        case 1://text app
                            {
                                CurrentAppActive = getcurrentselection;
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 6f, Function.Call<int>(Hash.TO_FLOAT, 0));
                                APP_ACTIVE = true;
                            }
                            break;
                        case 2://contacts app
                            {
                                CurrentAppActive = getcurrentselection;
                                // 0 - None// 1 - None // 2 - Plus Sign // 3 - 2 dots (left filled) // 4 - Back Arrow // 5 - Phone Tiled Left // 6 - Phone Facing Down // 7 - Guy And Phone // 8 - Phone Arrow Down // 9 - Dial NumPad
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 1f, 1f, 9f, -1f, -1f, "CELL_205" /* GXT: SELECT */, 0, 0, 0, 0);
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 1f, 0, 130, 200);
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 2f, 1f, 5f, -1f, -1f, "CELL_205" /* GXT: SELECT */, 0, 0, 0, 0);
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 2f, 0, 255, 50);
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS", 3f, 1f, 4f, -1f, -1f, "CELL_206" /* GXT: BACK */, 0, 0, 0, 0);
                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SOFT_KEYS_COLOUR", 3f, 255, 50, 0);

                                Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "DISPLAY_VIEW", 2f, Function.Call<int>(Hash.TO_FLOAT, 0));
                                APP_ACTIVE = true;
                            }
                            break;
                        case 3://quick job app
                            {
                                //APP_ACTIVE = true;
                            }
                            break;
                        case 4://job list app
                            {
                                //APP_ACTIVE = true;
                            }
                            break;
                        case 5://settings app
                            {
                                //APP_ACTIVE = true;
                            }
                            break;
                        case 6://snapmatic app
                            {
                                //APP_ACTIVE = true;
                            }
                            break;
                        case 7://internet app
                            {
                                //APP_ACTIVE = true;
                            }
                            break;
                        case 8://etra app
                            {
                                APP_ACTIVE = true;
                            }
                            break;
                    }
                }
            }
        }
        
        public static void CREATE_TEXT(string contact = "Text_Contact", string message = "Text_Message", string pictxd = "char_default")
        {
            Main.LoadTexureDict(pictxd);
            Main.LoadTexureDict(pictxd);

            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 6, CurrentTextAmount, Function.Call<int>(Hash.GET_CLOCK_HOURS), Function.Call<int>(Hash.GET_CLOCK_MINUTES), contact, message);//text app

            Text_Contact.Add(contact);
            Text_Message.Add(message);
            Text_Pic.Add(pictxd);

            CurrentTextAmount += 1;
        }
        public static void CLEAR_TEXTS()
        {
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT_EMPTY", 6);
            Text_Contact.Clear();
            Text_Message.Clear();
            Text_Pic.Clear();
            CurrentTextAmount = 0;
        }
        public static void CREATE_EMAIL(string contact = "Text_Contact", string message = "Text_Message", string message2 = "message 2", string message3 = "message3", string pictxd = "char_default", string picid = "char_default", int lefticon = 0, bool imageicon = false)
        {
            Main.LoadTexureDict(pictxd);
            Main.LoadTexureDict(pictxd);

            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 8, CurrentEmailAmount, lefticon, imageicon, contact, message, message2, message3, picid);//email app

            Email_Contact.Add(contact);
            Email_Message.Add(message);
            Email_Message2.Add(message2);
            Email_Message3.Add(message3);
            Email_Pic.Add(pictxd);
            Email_PicID.Add(picid);

            CurrentEmailAmount += 1;
        }
        public static void CLEAR_EMAILS()
        {
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT_EMPTY", 8);
            Email_Contact.Clear();
            Email_Message.Clear();
            Email_Message2.Clear();
            Email_Message3.Clear();
            Email_Pic.Clear();
            Email_PicID.Clear();

            CurrentEmailAmount = 0;
        }
        public static void CREATE_CONTACT(string contact = "Text_Contact", string txd = "char_default", bool icon_enabled = false)
        {
            Main.LoadTexureDict(txd);
            Main.LoadTexureDict(txd);

            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT", 2, CurrentContactAmount, icon_enabled, contact, txd, txd);

            Contact_Contact.Add(contact);
            Contact_Pic.Add(txd);

            CurrentContactAmount += 1;
        }
        public static void CLEAR_CONTACTS()
        {
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_DATA_SLOT_EMPTY", 2);
            CurrentContactAmount = 0;
        }

        public static void TitleBarTime()
        {
            int Hour;
            Hour = Function.Call<int>(Hash.GET_CLOCK_HOURS);
            int Min;
            Min = Function.Call<int>(Hash.GET_CLOCK_MINUTES);
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_TITLEBAR_TIME", Hour, Min, ReturnDay());

            int iLocal_87 = 0;
            int scuminess = Function.Call<int>(Hash.GET_ZONE_SCUMMINESS, Function.Call<int>(Hash.GET_ZONE_AT_COORDS, Game.Player.Character.Position.X, Game.Player.Character.Position.Y, Game.Player.Character.Position.Z, true));
            switch (scuminess)
            {
                case 0:
                    iLocal_87 = 5;
                    break;

                case 1:
                    iLocal_87 = 5;
                    break;

                case 2:
                    iLocal_87 = 4;
                    break;

                case 3:
                    iLocal_87 = 4;
                    break;

                case 4:
                    iLocal_87 = 3;
                    break;

                case 5:
                    iLocal_87 = 2;
                    break;

                default:
                    iLocal_87 = 3;
                    break;
            }
            int iLocal_112 = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, 8);
            if (iLocal_112 < 2)
            {
                if (iLocal_87 > 2)
                {
                    iLocal_87 = (iLocal_87 - 1);
                }
            }
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_PROVIDER_ICON", Function.Call<float>(Hash.TO_FLOAT, 1), Function.Call<float>(Hash.TO_FLOAT, iLocal_87));
            Wall_Creator.CallFunction(CELLPHONE_IFRUIT, "SET_SIGNAL_STRENGTH", Function.Call<float>(Hash.TO_FLOAT, scuminess));
        }

        public static string ReturnDay()
        {
            int Day = Function.Call<int>(Hash.GET_CLOCK_DAY_OF_WEEK);
            switch (Day)
            {
                case 0:
                    return "SUN";
                    break;
                case 1:
                    return "MON";
                    break;
                case 2:
                    return "TUES";
                    break;
                case 3:
                    return "WED";
                    break;
                case 4:
                    return "THUR";
                    break;
                case 5:
                    return "FRI";
                    break;
                case 6:
                    return "SAT";
                    break;
            }
            return "";
        }

        public static void CREATE_PHONE(int phoneid) => Function.Call(Hash.CREATE_MOBILE_PHONE, phoneid);// 0 - 4 (any higher than that will most likely crash your game
        public static void TOGGLE_PHONE(bool toggle) => Function.Call(Hash.SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN, toggle);//true takes it off the screen, and false makes it appear
        public static void TOGGLE_PHONE_DOF(bool toggle) => Function.Call(Hash.SET_MOBILE_PHONE_DOF_STATE, toggle);//phone camera depth of field
        public static void SET_MOBILE_PHONE_POSITION(float x, float y, float z) => Function.Call(Hash.SET_MOBILE_PHONE_POSITION, x, y, z);//sets phones position on screen
        public static void SET_MOBILE_PHONE_ROTATION(float x, float y, float z) => Function.Call(Hash.SET_MOBILE_PHONE_ROTATION, x, y, z, 0);//sets phones rotation on screen
        public static void SET_MOBILE_PHONE_SCALE(float scale) => Function.Call(Hash.SET_MOBILE_PHONE_SCALE, scale);//sets phones position on screen

        public static void DESTROY_PHONE() => Function.Call(Hash.DESTROY_MOBILE_PHONE);

        public enum CONTROLS
        {

            //////////////////////////////////////////////////////////////////////////
            // General Controls
            //////////////////////////////////////////////////////////////////////////
            // These act as on foot controls but are technically separate.
            //////////////////////////////////////////////////////////////////////////
            INPUT_NEXT_CAMERA = 0,

            // In range -1 (left/up)...+1(right/down). Sign dependent on direction.
            INPUT_LOOK_LR,
            INPUT_LOOK_UD,

            // In range 0...1. All directions positive.
            INPUT_LOOK_UP_ONLY,
            INPUT_LOOK_DOWN_ONLY,
            INPUT_LOOK_LEFT_ONLY,
            INPUT_LOOK_RIGHT_ONLY,

            INPUT_CINEMATIC_SLOWMO,
            INPUT_SCRIPTED_FLY_UD,
            INPUT_SCRIPTED_FLY_LR,
            INPUT_SCRIPTED_FLY_ZUP,
            INPUT_SCRIPTED_FLY_ZDOWN,

            // These are for selecting a position in the weapon wheel
            INPUT_WEAPON_WHEEL_UD,
            INPUT_WEAPON_WHEEL_LR,

            // These switches between weapons in the same position of the weapon wheel
            INPUT_WEAPON_WHEEL_NEXT,
            INPUT_WEAPON_WHEEL_PREV,

            // These directly switch to the next weapon (used for a PC mouse).
            INPUT_SELECT_NEXT_WEAPON,
            INPUT_SELECT_PREV_WEAPON,

            INPUT_SKIP_CUTSCENE,
            INPUT_CHARACTER_WHEEL,

            INPUT_MULTIPLAYER_INFO,

            //////////////////////////////////////////////////////////////////////////
            // On Foot Controls
            //////////////////////////////////////////////////////////////////////////
            INPUT_SPRINT,
            INPUT_JUMP,
            INPUT_ENTER,
            INPUT_ATTACK,
            INPUT_AIM,
            INPUT_LOOK_BEHIND,
            INPUT_PHONE,

            INPUT_SPECIAL_ABILITY,
            INPUT_SPECIAL_ABILITY_SECONDARY,

            // In range -1 (left/up)...+1(right/down). Sign dependent on direction.
            INPUT_MOVE_LR,
            INPUT_MOVE_UD,

            // In range 0...1. All directions positive.
            INPUT_MOVE_UP_ONLY,
            INPUT_MOVE_DOWN_ONLY,
            INPUT_MOVE_LEFT_ONLY,
            INPUT_MOVE_RIGHT_ONLY,

            INPUT_DUCK,
            INPUT_SELECT_WEAPON,
            INPUT_PICKUP,
            INPUT_SNIPER_ZOOM,
            INPUT_SNIPER_ZOOM_IN_ONLY,
            INPUT_SNIPER_ZOOM_OUT_ONLY,
            INPUT_SNIPER_ZOOM_IN_SECONDARY,
            INPUT_SNIPER_ZOOM_OUT_SECONDARY,
            INPUT_COVER,
            INPUT_RELOAD,
            INPUT_TALK,
            INPUT_DETONATE,
            INPUT_HUD_SPECIAL,
            INPUT_ARREST,
            INPUT_ACCURATE_AIM,
            INPUT_CONTEXT,
            INPUT_CONTEXT_SECONDARY,
            INPUT_WEAPON_SPECIAL,
            INPUT_WEAPON_SPECIAL_TWO,
            INPUT_DIVE,
            INPUT_DROP_WEAPON,
            INPUT_DROP_AMMO,
            INPUT_THROW_GRENADE,

            //////////////////////////////////////////////////////////////////////////
            // In Vehicle Controls
            //////////////////////////////////////////////////////////////////////////
            // In range -1 (left/up)...+1(right/down). Sign dependent on direction.
            INPUT_VEH_MOVE_LR,
            INPUT_VEH_MOVE_UD,

            // In range 0...1. All directions positive.
            INPUT_VEH_MOVE_UP_ONLY,
            INPUT_VEH_MOVE_DOWN_ONLY,
            INPUT_VEH_MOVE_LEFT_ONLY,
            INPUT_VEH_MOVE_RIGHT_ONLY,

            INPUT_VEH_SPECIAL,
            INPUT_VEH_GUN_LR,
            INPUT_VEH_GUN_UD,
            INPUT_VEH_AIM,
            INPUT_VEH_ATTACK,
            INPUT_VEH_ATTACK2,
            INPUT_VEH_ACCELERATE,
            INPUT_VEH_BRAKE,
            INPUT_VEH_DUCK,
            INPUT_VEH_HEADLIGHT,
            INPUT_VEH_EXIT,
            INPUT_VEH_HANDBRAKE,
            INPUT_VEH_HOTWIRE_LEFT,
            INPUT_VEH_HOTWIRE_RIGHT,
            INPUT_VEH_LOOK_BEHIND,
            INPUT_VEH_CIN_CAM,
            INPUT_VEH_NEXT_RADIO,
            INPUT_VEH_PREV_RADIO,
            INPUT_VEH_NEXT_RADIO_TRACK,
            INPUT_VEH_PREV_RADIO_TRACK,
            INPUT_VEH_RADIO_WHEEL,
            INPUT_VEH_HORN,
            INPUT_VEH_FLY_THROTTLE_UP,
            INPUT_VEH_FLY_THROTTLE_DOWN,
            INPUT_VEH_FLY_YAW_LEFT,
            INPUT_VEH_FLY_YAW_RIGHT,
            INPUT_VEH_PASSENGER_AIM,
            INPUT_VEH_PASSENGER_ATTACK,
            INPUT_VEH_SPECIAL_ABILITY_FRANKLIN,
            INPUT_VEH_STUNT_UD,
            INPUT_VEH_CINEMATIC_UD,
            INPUT_VEH_CINEMATIC_UP_ONLY,
            INPUT_VEH_CINEMATIC_DOWN_ONLY,
            INPUT_VEH_CINEMATIC_LR,
            INPUT_VEH_SELECT_NEXT_WEAPON,
            INPUT_VEH_SELECT_PREV_WEAPON,
            INPUT_VEH_ROOF,
            INPUT_VEH_JUMP, // This is for bikes, try INPUT_VEH_CAR_JUMP
            INPUT_VEH_GRAPPLING_HOOK,
            INPUT_VEH_SHUFFLE,
            INPUT_VEH_DROP_PROJECTILE,
            INPUT_VEH_MOUSE_CONTROL_OVERRIDE,

            //////////////////////////////////////////////////////////////////////////
            // In Aircraft specific Controls
            //////////////////////////////////////////////////////////////////////////

            INPUT_VEH_FLY_ROLL_LR,
            INPUT_VEH_FLY_ROLL_LEFT_ONLY,
            INPUT_VEH_FLY_ROLL_RIGHT_ONLY,
            INPUT_VEH_FLY_PITCH_UD,
            INPUT_VEH_FLY_PITCH_UP_ONLY,
            INPUT_VEH_FLY_PITCH_DOWN_ONLY,
            INPUT_VEH_FLY_UNDERCARRIAGE,
            INPUT_VEH_FLY_ATTACK,
            INPUT_VEH_FLY_SELECT_NEXT_WEAPON,
            INPUT_VEH_FLY_SELECT_PREV_WEAPON,
            INPUT_VEH_FLY_SELECT_TARGET_LEFT,
            INPUT_VEH_FLY_SELECT_TARGET_RIGHT,
            INPUT_VEH_FLY_VERTICAL_FLIGHT_MODE,
            INPUT_VEH_FLY_DUCK,
            INPUT_VEH_FLY_ATTACK_CAMERA,
            INPUT_VEH_FLY_MOUSE_CONTROL_OVERRIDE,

            //////////////////////////////////////////////////////////////////////////
            // In Sub Controls
            //////////////////////////////////////////////////////////////////////////

            INPUT_VEH_SUB_TURN_LR,
            INPUT_VEH_SUB_TURN_LEFT_ONLY,
            INPUT_VEH_SUB_TURN_RIGHT_ONLY,
            INPUT_VEH_SUB_PITCH_UD,
            INPUT_VEH_SUB_PITCH_UP_ONLY,
            INPUT_VEH_SUB_PITCH_DOWN_ONLY,
            INPUT_VEH_SUB_THROTTLE_UP,
            INPUT_VEH_SUB_THROTTLE_DOWN,
            INPUT_VEH_SUB_ASCEND,
            INPUT_VEH_SUB_DESCEND,
            INPUT_VEH_SUB_TURN_HARD_LEFT,
            INPUT_VEH_SUB_TURN_HARD_RIGHT,
            INPUT_VEH_SUB_MOUSE_CONTROL_OVERRIDE,

            //////////////////////////////////////////////////////////////////////////
            // On Pushbike Controls
            //////////////////////////////////////////////////////////////////////////

            INPUT_VEH_PUSHBIKE_PEDAL,
            INPUT_VEH_PUSHBIKE_SPRINT,
            INPUT_VEH_PUSHBIKE_FRONT_BRAKE,
            INPUT_VEH_PUSHBIKE_REAR_BRAKE,

            //////////////////////////////////////////////////////////////////////////
            // Melee Combat Controls
            //////////////////////////////////////////////////////////////////////////
            INPUT_MELEE_ATTACK_LIGHT,
            INPUT_MELEE_ATTACK_HEAVY,
            INPUT_MELEE_ATTACK_ALTERNATE,
            INPUT_MELEE_BLOCK,

            //////////////////////////////////////////////////////////////////////////
            // Parachute Controls
            //////////////////////////////////////////////////////////////////////////
            INPUT_PARACHUTE_DEPLOY,
            INPUT_PARACHUTE_DETACH,
            INPUT_PARACHUTE_TURN_LR,
            INPUT_PARACHUTE_TURN_LEFT_ONLY,
            INPUT_PARACHUTE_TURN_RIGHT_ONLY,
            INPUT_PARACHUTE_PITCH_UD,
            INPUT_PARACHUTE_PITCH_UP_ONLY,
            INPUT_PARACHUTE_PITCH_DOWN_ONLY,
            INPUT_PARACHUTE_BRAKE_LEFT,
            INPUT_PARACHUTE_BRAKE_RIGHT,
            INPUT_PARACHUTE_SMOKE,
            INPUT_PARACHUTE_PRECISION_LANDING,

            //////////////////////////////////////////////////////////////////////////
            // PC Specific
            //////////////////////////////////////////////////////////////////////////
            INPUT_MAP,

            INPUT_SELECT_WEAPON_UNARMED,
            INPUT_SELECT_WEAPON_MELEE,
            INPUT_SELECT_WEAPON_HANDGUN,
            INPUT_SELECT_WEAPON_SHOTGUN,
            INPUT_SELECT_WEAPON_SMG,
            INPUT_SELECT_WEAPON_AUTO_RIFLE,
            INPUT_SELECT_WEAPON_SNIPER,
            INPUT_SELECT_WEAPON_HEAVY,
            INPUT_SELECT_WEAPON_SPECIAL,

            INPUT_SELECT_CHARACTER_MICHAEL,
            INPUT_SELECT_CHARACTER_FRANKLIN,
            INPUT_SELECT_CHARACTER_TREVOR,
            INPUT_SELECT_CHARACTER_MULTIPLAYER,

            INPUT_SAVE_REPLAY_CLIP,
            INPUT_SPECIAL_ABILITY_PC, // This is so you can have the same input for both on foot and in-car special abilities on PC

            //////////////////////////////////////////////////////////////////////////
            // Cellphone Controls
            //////////////////////////////////////////////////////////////////////////
            INPUT_CELLPHONE_UP,
            INPUT_CELLPHONE_DOWN,
            INPUT_CELLPHONE_LEFT,
            INPUT_CELLPHONE_RIGHT,
            INPUT_CELLPHONE_SELECT,
            INPUT_CELLPHONE_CANCEL,
            INPUT_CELLPHONE_OPTION,
            INPUT_CELLPHONE_EXTRA_OPTION,
            INPUT_CELLPHONE_SCROLL_FORWARD,
            INPUT_CELLPHONE_SCROLL_BACKWARD,
            INPUT_CELLPHONE_CAMERA_FOCUS_LOCK,
            INPUT_CELLPHONE_CAMERA_GRID,
            INPUT_CELLPHONE_CAMERA_SELFIE,
            INPUT_CELLPHONE_CAMERA_DOF,
            INPUT_CELLPHONE_CAMERA_EXPRESSION,

            //////////////////////////////////////////////////////////////////////////
            // Direct Controls. Used By Frontend ONLY.
            //////////////////////////////////////////////////////////////////////////
            INPUT_FRONTEND_DOWN,
            INPUT_FRONTEND_UP,
            INPUT_FRONTEND_LEFT,
            INPUT_FRONTEND_RIGHT,
            INPUT_FRONTEND_RDOWN,
            INPUT_FRONTEND_RUP,
            INPUT_FRONTEND_RLEFT,
            INPUT_FRONTEND_RRIGHT,
            INPUT_FRONTEND_AXIS_X,
            INPUT_FRONTEND_AXIS_Y,
            INPUT_FRONTEND_RIGHT_AXIS_X,
            INPUT_FRONTEND_RIGHT_AXIS_Y,
            INPUT_FRONTEND_PAUSE,
            INPUT_FRONTEND_PAUSE_ALTERNATE,     // Alternate pause to get around conflict issues with Esc going back on PC.
            INPUT_FRONTEND_ACCEPT,
            INPUT_FRONTEND_CANCEL,
            INPUT_FRONTEND_X,
            INPUT_FRONTEND_Y,
            INPUT_FRONTEND_LB,
            INPUT_FRONTEND_RB,
            INPUT_FRONTEND_LT,
            INPUT_FRONTEND_RT,
            INPUT_FRONTEND_LS,
            INPUT_FRONTEND_RS,
            INPUT_FRONTEND_LEADERBOARD,
            INPUT_FRONTEND_SOCIAL_CLUB,
            INPUT_FRONTEND_SOCIAL_CLUB_SECONDARY,
            INPUT_FRONTEND_DELETE,
            INPUT_FRONTEND_ENDSCREEN_ACCEPT,
            INPUT_FRONTEND_ENDSCREEN_EXPAND,
            INPUT_FRONTEND_SELECT, // DP: ensure you update INPUT_FRONTEND_CONTROL_END if you add any more frontend input! 


            ////////////////////////////////////////////////////////////////////////////////////////////////////
            // Remappable Script controls. For use in minigames and other scripts using a custom control scheme
            // instead of direct pad controls and non-remappable front end controls
            ///////////////////////////////////////////////////////////////////////////////////////////////////


            INPUT_SCRIPT_LEFT_AXIS_X,   // Left stick X analogue input. Values may be > 1 when using a mouse. Usually maps to movement
            INPUT_SCRIPT_LEFT_AXIS_Y,   // Left stick Y analogue input. Values may be > 1 when using a mouse. Usually maps to movement
            INPUT_SCRIPT_RIGHT_AXIS_X,  // Right stick X analogue input. Values may be > 1 when using a mouse. Usually maps to look.
            INPUT_SCRIPT_RIGHT_AXIS_Y,  // Right stick Y analogue input. Values may be > 1 when using a mouse. Usually maps to look.
            INPUT_SCRIPT_RUP,       // PS3 = TRIANGLE, 360 = Y
            INPUT_SCRIPT_RDOWN,     // PS3 = X, 360 = A
            INPUT_SCRIPT_RLEFT,     // PS3 = SQUARE, 360 = X
            INPUT_SCRIPT_RRIGHT,        // PS3 = CIRCLE, 360 = B
            INPUT_SCRIPT_LB,        // Left shoulder button
            INPUT_SCRIPT_RB,        // Right shoulder button
            INPUT_SCRIPT_LT,        // Left shoulder trigger  - DIGITAL ONLY
            INPUT_SCRIPT_RT,        // Right shoulder trigger - DIGITAL ONLY
            INPUT_SCRIPT_LS,        // Left stick L3 button,
            INPUT_SCRIPT_RS,        // Right stick R3 button
            INPUT_SCRIPT_PAD_UP,        // D-Pad / Directional buttons up
            INPUT_SCRIPT_PAD_DOWN,      // D-Pad / Directional buttons down
            INPUT_SCRIPT_PAD_LEFT,      // D-Pad / Directional buttons left
            INPUT_SCRIPT_PAD_RIGHT,     // D-Pad / Directional buttons right
            INPUT_SCRIPT_SELECT,        // Back button on 360, select on PS3


            //////////////////////////////////////////////////////////////////////////
            // NEXT GEN AND PC
            //////////////////////////////////////////////////////////////////////////

            INPUT_CURSOR_ACCEPT,        // Touch pad click or mouse button 1 click
            INPUT_CURSOR_CANCEL,        // Mouse button 2 click
            INPUT_CURSOR_X,             // The cursor X position in the range of 0...1.
            INPUT_CURSOR_Y,             // The cursor Y position in the range of 0...1.
            INPUT_CURSOR_SCROLL_UP,     // Scroll up, e.g. mouse wheel
            INPUT_CURSOR_SCROLL_DOWN,   // Scroll down, e.g. mouse wheel
            INPUT_ENTER_CHEAT_CODE,     // Brings up the cheat code input box.
            INPUT_INTERACTION_MENU,     // Brings up the interaction menu.
            INPUT_MP_TEXT_CHAT_ALL,     // Brings up text chat box. Message sent to all players on a server.
            INPUT_MP_TEXT_CHAT_TEAM,    // Brings up text chat box. Message sent to all players on in the current team.
            INPUT_MP_TEXT_CHAT_FRIENDS, // Brings up text chat box. Message sent to all friends on a server
            INPUT_MP_TEXT_CHAT_CREW,    // Brings up text chat box. Message sent to all crew on a server
            INPUT_PC_PUSH_TO_TALK,      // Push to talk for VOIP
            INPUT_CREATOR_LS,           // Creator Left stick equivalent for functions like field of view, etc.
            INPUT_CREATOR_RS,           // Creator right stick equivalent for functions like field of view, etc.
            INPUT_CREATOR_LT,           // Creator left trigger equivalent for zooming.
            INPUT_CREATOR_RT,           // Creator right trigger equivalent for zooming.
            INPUT_CREATOR_MENU_TOGGLE,  // Creator menu toggle on/off for PC keyboard and mouse.
            INPUT_CREATOR_ACCEPT,       // Creator accept/place items button.
            INPUT_CREATOR_DELETE,       // Creator delete items button.

            //////////////////////////////////////////////////////////////////////////
            // LEGACY SUPPORT
            //////////////////////////////////////////////////////////////////////////
            // Remove once legacy input support has been removed. Also, update
            // GetValue()!
            //////////////////////////////////////////////////////////////////////////
            INPUT_ATTACK2, // Know one knows what this does!
            INPUT_RAPPEL_JUMP,
            INPUT_RAPPEL_LONG_JUMP,
            INPUT_RAPPEL_SMASH_WINDOW,

            // The weapon selecting works differently now. These are temporarily mapped to the weapon wheel. NOTE: the weapon can be switched in other ways than the weapon wheel on PC
            // So these are NOT portable.
            INPUT_PREV_WEAPON,
            INPUT_NEXT_WEAPON,


            INPUT_MELEE_ATTACK1,    // This has been renamed to INPUT_MELEE_ATTACK_LIGHT. If this should be kept as it is, let me know thomas.randall@rockstarleeds.com
            INPUT_MELEE_ATTACK2,    // This has been renamed to INPUT_MELEE_ATTACK_HEAVY. If this should be kept as it is, let me know thomas.randall@rockstarleeds.com

            INPUT_WHISTLE,  // This is mapped to nothing and is not used anywhere, it is added here so scripts work. If this should be kept let me know thomas.randall@rockstarleeds.com

            INPUT_MOVE_LEFT,
            INPUT_MOVE_RIGHT,
            INPUT_MOVE_UP,
            INPUT_MOVE_DOWN,
            INPUT_LOOK_LEFT,
            INPUT_LOOK_RIGHT,
            INPUT_LOOK_UP,
            INPUT_LOOK_DOWN,
            INPUT_SNIPER_ZOOM_IN,
            INPUT_SNIPER_ZOOM_OUT,
            INPUT_SNIPER_ZOOM_IN_ALTERNATE,
            INPUT_SNIPER_ZOOM_OUT_ALTERNATE,

            INPUT_VEH_MOVE_LEFT,
            INPUT_VEH_MOVE_RIGHT,
            INPUT_VEH_MOVE_UP,
            INPUT_VEH_MOVE_DOWN,
            INPUT_VEH_GUN_LEFT,
            INPUT_VEH_GUN_RIGHT,
            INPUT_VEH_GUN_UP,
            INPUT_VEH_GUN_DOWN,
            INPUT_VEH_LOOK_LEFT,
            INPUT_VEH_LOOK_RIGHT,

            INPUT_REPLAY_START_STOP_RECORDING,
            INPUT_REPLAY_START_STOP_RECORDING_SECONDARY,

            INPUT_SCALED_LOOK_LR,
            INPUT_SCALED_LOOK_UD,
            INPUT_SCALED_LOOK_UP_ONLY,
            INPUT_SCALED_LOOK_DOWN_ONLY,
            INPUT_SCALED_LOOK_LEFT_ONLY,
            INPUT_SCALED_LOOK_RIGHT_ONLY,

            INPUT_REPLAY_MARKER_DELETE,
            INPUT_REPLAY_CLIP_DELETE,
            INPUT_REPLAY_PAUSE,
            INPUT_REPLAY_REWIND,
            INPUT_REPLAY_FFWD,
            INPUT_REPLAY_NEWMARKER,
            INPUT_REPLAY_RECORD,
            INPUT_REPLAY_SCREENSHOT,
            INPUT_REPLAY_HIDEHUD,
            INPUT_REPLAY_STARTPOINT,
            INPUT_REPLAY_ENDPOINT,
            INPUT_REPLAY_ADVANCE,
            INPUT_REPLAY_BACK,
            INPUT_REPLAY_TOOLS,
            INPUT_REPLAY_RESTART,
            INPUT_REPLAY_SHOWHOTKEY,
            INPUT_REPLAY_CYCLEMARKERLEFT,
            INPUT_REPLAY_CYCLEMARKERRIGHT,
            INPUT_REPLAY_FOVINCREASE,
            INPUT_REPLAY_FOVDECREASE,
            INPUT_REPLAY_CAMERAUP,
            INPUT_REPLAY_CAMERADOWN,
            INPUT_REPLAY_SAVE,
            INPUT_REPLAY_TOGGLETIME,
            INPUT_REPLAY_TOGGLETIPS,
            INPUT_REPLAY_PREVIEW,
            INPUT_REPLAY_TOGGLE_TIMELINE,
            INPUT_REPLAY_TIMELINE_PICKUP_CLIP,
            INPUT_REPLAY_TIMELINE_DUPLICATE_CLIP,
            INPUT_REPLAY_TIMELINE_PLACE_CLIP,
            INPUT_REPLAY_CTRL,
            INPUT_REPLAY_TIMELINE_SAVE,
            INPUT_REPLAY_PREVIEW_AUDIO,

            INPUT_VEH_DRIVE_LOOK,
            INPUT_VEH_DRIVE_LOOK2,

            INPUT_VEH_FLY_ATTACK2,

            INPUT_RADIO_WHEEL_UD,
            INPUT_RADIO_WHEEL_LR,

            INPUT_VEH_SLOWMO_UP,
            INPUT_VEH_SLOWMO_UP_ONLY,
            INPUT_VEH_SLOWMO_DOWN_ONLY,

            INPUT_VEH_HYDRAULICS_CONTROL_TOGGLE,
            INPUT_VEH_HYDRAULICS_CONTROL_LEFT,
            INPUT_VEH_HYDRAULICS_CONTROL_RIGHT,
            INPUT_VEH_HYDRAULICS_CONTROL_UP,
            INPUT_VEH_HYDRAULICS_CONTROL_DOWN,
            INPUT_VEH_HYDRAULICS_CONTROL_LR,
            INPUT_VEH_HYDRAULICS_CONTROL_UD,

            INPUT_SWITCH_VISOR,

            INPUT_VEH_MELEE_HOLD,
            INPUT_VEH_MELEE_LEFT,
            INPUT_VEH_MELEE_RIGHT,

            INPUT_MAP_POI,
            INPUT_REPLAY_SNAPMATIC_PHOTO,

            INPUT_VEH_CAR_JUMP,
            INPUT_VEH_ROCKET_BOOST,
            INPUT_VEH_FLY_BOOST,
            INPUT_VEH_PARACHUTE,
            INPUT_VEH_BIKE_WINGS,

            INPUT_VEH_FLY_BOMB_BAY,
            INPUT_VEH_FLY_COUNTER,
            INPUT_VEH_TRANSFORM,
            INPUT_QUAD_LOCO_REVERSE,
            INPUT_RESPAWN_FASTER,
            // INPUT_CNC_INTERACT_ATM,  temp removed because of ARCHIVED_SUMMER_CONTENT_ENABLED
            INPUT_HUDMARKER_SELECT,

            INPUT_EAT_SNACK,
            INPUT_USE_ARMOR,
            MAX_INPUTS
        };
    }
    #endregion
    
    #region Stuff I Use Normally For Everything
    internal class Mission_Wall_Creator : Script
    {
        public static bool WallInProgress = false;

        public static int MISSIONPASSED;

        public static float fVar1 = 0f;
        public static float fVar9 = 0f;
        public static float fVar10 = 0f;
        public static float fVar20 = 0f;
        public static float fVar21 = 0f;
        public static float fVar22 = 0f;

        public static int alpha = 0;

        public Mission_Wall_Creator()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }
        public void onTick(object sender, EventArgs e)
        {
            if (Main.DEBUG)
            {
                if (Game.IsControlJustPressed(GTA.Control.Context))
                {

                }
                if (Game.IsControlJustPressed(GTA.Control.VehicleDuck))
                {

                }
            }
        }
        public void onShutdown(object sender, EventArgs e)
        {
            #region Vehicles
            #endregion
            #region Peds
            #endregion
            #region Props
            #endregion
            #region Blips
            #endregion
            #region Cameras
            #endregion
            #region Pickups
            #endregion
        }
        public static void DeleteMissionPassScaleform()
        {
            unsafe
            {
                int handle = MISSIONPASSED;
                Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                MISSIONPASSED = 0;
            }
        }//MISSION PASS
        public static void RequestMissionPassScaleform()
        {
            Yield();
            MISSIONPASSED = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "MP_BIG_MESSAGE_FREEMODE");
        }//MISSION PASS
        public static void CallFunction(int Handle, string name, params object[] args)
        {
            Function.Call((Hash)0xf6e48914c7a8694e, Handle, name);
            pushArgs(args);
            Function.Call((Hash)0xc6796a8ffa375e53);
        }
        public static bool CallFunctionBool(int Handle, string name, params object[] args)
        {
            Function.Call((Hash)0xf6e48914c7a8694e, Handle, name);
            pushArgs(args);
            int ret = Function.Call<int>((Hash)0xC50AA39A577AF886);
            while (!Function.Call<bool>((Hash)0x768FF8961BA904D6, ret)) Yield();
            return Function.Call<bool>((Hash)0xD80A80346A45D761, ret);
        }
        public static int CallFunctionInt(int Handle, string name, params object[] args)
        {
            Function.Call((Hash)0xf6e48914c7a8694e, Handle, name);
            pushArgs(args);
            int ret = Function.Call<int>((Hash)0xC50AA39A577AF886);
            while (!Function.Call<bool>((Hash)0x768FF8961BA904D6, ret)) Yield();
            return Function.Call<int>((Hash)0x2DE7EFA66B906036, ret);
        }
        public static string CallFunctionString(int Handle, string name, params object[] args)
        {
            Function.Call((Hash)0xf6e48914c7a8694e, Handle, name);
            pushArgs(args);
            int ret = Function.Call<int>((Hash)0xC50AA39A577AF886);
            while (!Function.Call<bool>((Hash)0x768FF8961BA904D6, ret)) Yield();
            return Function.Call<string>((Hash)0xE1E258829A885245, ret);
        }

        protected static void pushArgs(object[] args)
        {
            foreach (object x in args)
            {
                if (x.GetType() == typeof(int)) Function.Call<int>((Hash)0xc3d0841a0cc546a6, (int)x);
                else if (x.GetType() == typeof(float)) Function.Call((Hash)0xd69736aae04db51a, (float)x);
                else if (x.GetType() == typeof(double)) Function.Call((Hash)0xd69736aae04db51a, (float)(double)x);
                else if (x.GetType() == typeof(bool)) Function.Call((Hash)0xc58424ba936eb458, (bool)x);
                else if (x.GetType() == typeof(string))
                {
                    Function.Call((Hash)0x80338406f3475e55, "STRING");
                    Function.Call((Hash)0x6c188be134e074aa, (string)x);
                    Function.Call((Hash)0x362e2d3fe93a9959);
                }
                else if (x.GetType() == typeof(char))
                {
                    Function.Call((Hash)0x80338406f3475e55, "STRING");
                    Function.Call((Hash)0x6c188be134e074aa, ((char)x).ToString());
                    Function.Call((Hash)0x362e2d3fe93a9959);
                }
            }
        }

        public static float func_14613(float fParam0)//Position - 0x4C1C10
        {
            return (fParam0 * 0.0013888889f);
        }

        public static float func_14607(float fParam0)//Position - 0x4C1B86
        {
            return (fParam0 * 0.0009259259f);
        }

        public static float func_14612()//Position - 0x4C1BFC
        {
            float fVar0;

            fVar0 = 1f;
            if (Function.Call<bool>(Hash.IS_PC_VERSION))
            {
            }
            return fVar0;
        }

        public static void SET_TEXT_LEFT()
        {
            fVar9 = ((0.499f - (0.4f / 2f)) + 0.006f);
            fVar10 = ((0.499f + (0.4f / 2f)) - 0.006f);
            Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, alpha);
            Function.Call(Hash.SET_TEXT_WRAP, fVar9, fVar10);
            Function.Call(Hash.SET_TEXT_JUSTIFICATION, 1);
            Function.Call(Hash.SET_TEXT_SCALE, 1f, 0.4f);
            Function.Call(Hash.SET_TEXT_CENTRE, false);
            Function.Call(Hash.SET_TEXT_FONT, 0);
        }
        public static void SET_TEXT_RIGHT()
        {
            fVar21 = 0.5f;
            fVar21 = (fVar21 + (((1.0f * 0.28f) + 0.006f) / 2f));
            fVar22 = fVar21;
            fVar22 = (fVar22 - ((1.0f * 0.28f) + 0.006f));
            Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, alpha);
            Function.Call(Hash.SET_TEXT_WRAP, fVar20, fVar21);
            Function.Call(Hash.SET_TEXT_JUSTIFICATION, 2);
            Function.Call(Hash.SET_TEXT_SCALE, 1f, 0.4f);
            Function.Call(Hash.SET_TEXT_CENTRE, false);
            Function.Call(Hash.SET_TEXT_FONT, 0);
        }

        public static void DISPLAY_WALL_TEMP()
        {
            WallInProgress = true;

            Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
            DeleteMissionPassScaleform();
            Wait(500);
            DeleteMissionPassScaleform();
            RequestMissionPassScaleform();
            Wait(500);

            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "WINNER", "CELEBRATION_SOUNDSET", true);//makes the kerching sound effect you've been looking for, for ages!!!
            CallFunction(MISSIONPASSED, "SHOW_MISSION_PASSED_MESSAGE", "~w~Product Sold~w~", "Sell Mission", 100, true, 5, false, 2);
            Screen_Effects.PlayAnimPostFX("SuccessNeutral", 1000, false);

            int iTimer0 = Game.GameTime + 1000;
            while (Game.GameTime < iTimer0)
            {
                Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN, MISSIONPASSED, 255, 255, 255, 255, 0);
                Wait(0);
            }

            CallFunction(MISSIONPASSED, "TRANSITION_UP", 0.15f, true);
            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);

            iTimer0 = Game.GameTime + 400;
            while (Game.GameTime < iTimer0)
            {
                Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN, MISSIONPASSED, 255, 255, 255, 255, 0);
                Wait(0);
            }

            CallFunction(MISSIONPASSED, "ROLL_DOWN_BACKGROUND");

            //HUD::BEGIN_TEXT_COMMAND_DISPLAY_TEXT("PERCENTAGE" /* GXT: ~1~% */);
            //HUD::BEGIN_TEXT_COMMAND_DISPLAY_TEXT("FO_TWO_NUM" /* GXT: ~1~/~1~ */);
            //HUD::BEGIN_TEXT_COMMAND_DISPLAY_TEXT("MTPHPER_XPNO" /* GXT: ~1~RP */);
            //HUD::BEGIN_TEXT_COMMAND_DISPLAY_TEXT("ESDOLLA" /* GXT: $~a~ */); //STRING

            alpha = 0;
            iTimer0 = Game.GameTime + 13000;
            while (Game.GameTime < iTimer0)
            {
                if (alpha < 255)
                {
                    alpha += 5;
                }
                Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN, MISSIONPASSED, 255, 255, 255, 255, 0);

                fVar1 = (0.3f * func_14612());
                fVar1 = (fVar1 - func_14613(6f));
                fVar1 = (fVar1 + (func_14613(30f) - func_14613((2f * 2f))));
                Function.Call(Hash.DRAW_RECT, 0.5f, (fVar1 - (func_14613((2f - 0.5f)) - 0.0013888889f)), 0.3f, func_14607(1f), 255, 255, 255, alpha, false);
                //--------------------------------------------- Top Divider ------------------------------------------------

                fVar1 = (fVar1 + func_14613((25f * 0.2f)));

                SET_TEXT_LEFT();

                fVar20 = fVar9;
                fVar20 = (fVar9 + ((0.119f / func_14612()) / 2.5f));
                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING" /* GXT: ~1~% */);
                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Total Amount Sold");
                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, fVar20, (fVar1 + func_14613((2f * 2f))), 0);

                //--------------------------------------------- Divides Left From Right Side ------------------------------------------------

                SET_TEXT_RIGHT();

                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "ESDOLLA" /* GXT: ~1~% */);
                Function.Call(Hash.ADD_TEXT_COMPONENT_FORMATTED_INTEGER, 0, true);
                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, fVar20, (fVar1 + func_14613((2f * 2f))), 0);

                //--------------------------------------------- Bottom Divider ------------------------------------------------

                fVar1 = (fVar1 + func_14613((2f * 0.3f)));
                fVar1 = (fVar1 + func_14613(65f));
                fVar1 = (fVar1 + func_14613((65f * 0.2f)));
                fVar1 = (fVar1 + func_14613(2f));
                Function.Call(Hash.DRAW_RECT, 0.5f, (fVar1 + func_14613((2f * 0.5f))), 0.3f, func_14607(1f), 255, 255, 255, alpha, false);

                Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, alpha);
                Function.Call(Hash.SET_TEXT_WRAP, fVar20, fVar21);
                Function.Call(Hash.SET_TEXT_JUSTIFICATION, 0);
                Function.Call(Hash.SET_TEXT_SCALE, 1f, 0.4f);
                Function.Call(Hash.SET_TEXT_CENTRE, false);
                Function.Call(Hash.SET_TEXT_FONT, 0);

                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING" /* GXT: ~1~% */);
                Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, "Your Final Take");
                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.4500f, (fVar1 + func_14613((2f * 4f))), 0);

                Function.Call(Hash.SET_TEXT_COLOUR, 255, 255, 255, alpha);
                Function.Call(Hash.SET_TEXT_WRAP, fVar20, fVar21);
                Function.Call(Hash.SET_TEXT_JUSTIFICATION, 0);
                Function.Call(Hash.SET_TEXT_SCALE, 1f, 0.4f);
                Function.Call(Hash.SET_TEXT_CENTRE, false);
                Function.Call(Hash.SET_TEXT_FONT, 0);

                Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "ESDOLLA" /* GXT: ~1~% */);
                Function.Call(Hash.ADD_TEXT_COMPONENT_FORMATTED_INTEGER, 0, true);
                Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, 0.5500f, (fVar1 + func_14613((2f * 4f))), 0);

                Wait(0);
            }
            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
            DeleteMissionPassScaleform();
            WallInProgress = false;
        }
    }
    internal class PickupSteal : Script
    {
        public static bool AllowPickupSteal = false;
        public static int TotalAmount = 0;

        public PickupSteal()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }
        public void onTick(object sender, EventArgs e)
        {
            if (Main.DEBUG)
            {
                if (Game.IsControlJustPressed(GTA.Control.VehicleDuck))
                {

                }
            }
            if (AllowPickupSteal)
            {
                if (PickupSpawn.Count > 0)
                {
                    foreach (Pickup p in PickupSpawn.ToList())
                    {
                        if (p != null)
                        {
                            if (!p.ObjectExists())
                            {
                                Heist_Hud.Actual_Take += TotalAmount;
                                p.Delete();
                                PickupSpawn.Remove(p);
                            }
                        }
                    }
                }
            }
            else
            {
                if (PickupSpawn.Count > 0)
                {
                    foreach (Pickup p in PickupSpawn.ToList())
                    {
                        if (p != null)
                        {
                            if (!p.ObjectExists())
                            {
                                p.Delete();
                                PickupSpawn.Remove(p);
                            }
                        }
                    }
                }
            }
        }
        public static List<Pickup> PickupSpawn = new List<Pickup>()
        {

        };

        public static void SPAWN_PICKUP(PickupType type, Vector3 pos, Vector3 rot, Model model, int value)
        {
            Pickup p = World.CreatePickup(type, pos, rot, model, value);
            PickupSpawn.Add(p);
        }
        public static void SPAWN_PICKUP_WITH_BLIP(PickupType type, Vector3 pos, Vector3 rot, Model model, int value, int blipid, BlipColor color, string name = "", bool minimaledge = true, float scale = 1f)
        {
            Blip b = null;
            Pickup p = null;
            while (p == null)
            {
                p = World.CreatePickup(type, pos, rot, model, value);
                Wait(0);
            }
            while (b == null)
            {
                b = Function.Call<Blip>(Hash.ADD_BLIP_FOR_PICKUP, p);
                Wait(0);
            }
            b.Sprite = (BlipSprite)blipid;
            b.Color = color;
            b.Name = name;
            b.Scale = scale;
            Function.Call(Hash.SET_BLIP_AS_SHORT_RANGE, b, minimaledge);
            PickupSpawn.Add(p);
        }
        public static void RemovePickups()
        {
            if (PickupSpawn.Count > 0)
            {
                foreach (Pickup Loot in PickupSpawn.ToList())
                {
                    if (Loot != null)
                    {
                        Loot.Delete();
                        PickupSpawn.Remove(Loot);
                    }
                }
            }
        }
        public void onShutdown(object sender, EventArgs e)
        {
            #region Vehicles
            #endregion
            #region Peds
            #endregion
            #region Props
            #endregion
            #region Blips
            #endregion
            #region Cameras
            #endregion
            #region Pickups
            RemovePickups();
            #endregion
        }
    }
    public class PedOutfit
    {
        public static float[] FaceFeaturePart = { 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f };
        public static int[] OverlayPart = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
        public static float[] OpacityPart = { -1f, -1f, -1f, -1f, -1f, -1f, -1f, -1f, -1f, -1f, -1f, -1f, -1f };
        public static int[] OutfitPart = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        public static int[] OutfitPart2 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        public static int[] OutfitPart3 = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        public static int[] OutfitPart4 = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };

        public List<OutfitComponent> Components;
        public List<OutfitProp> Props;

        public void Equip(Ped ped)
        {
            foreach (var comp in Components) comp.Equip(ped);
            foreach (var prop in Props) prop.Equip(ped);
        }

        public struct OutfitComponent
        {
            public PedVarComp ComponentId;
            public int DrawableId;
            public int TextureId;
            public int PaletteId;

            public void Equip(Ped ped)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, ped, (int)ComponentId, DrawableId, TextureId, PaletteId);
            }
        }
        public enum PedVarComp
        {
            PV_COMP_INVALID = -1,
            PV_COMP_HEAD,
            PV_COMP_BERD,
            PV_COMP_HAIR,
            PV_COMP_UPPR,
            PV_COMP_LOWR,
            PV_COMP_HAND,
            PV_COMP_FEET,
            PV_COMP_TEEF,
            PV_COMP_ACCS,
            PV_COMP_TASK,
            PV_COMP_DECL,
            PV_COMP_JBIB,
            PV_COMP_MAX
        };
        public struct OutfitProp
        {
            public PedPropsData ComponentId;
            public int DrawableId;
            public int TextureId;

            public void Equip(Ped ped)
            {
                Function.Call(Hash.SET_PED_PROP_INDEX, ped, (int)ComponentId, DrawableId, TextureId);
            }
        }
        public enum PedPropsData
        {
            PED_PROP_HATS = 0,
            PED_PROP_GLASSES = 1,
            PED_PROP_EARS = 2,
            PED_PROP_WATCHES = 3,
        };

        #region Outfit Control
        public static void OutfitOFF(Ped NonCutscene)
        {
            if (Main.IsFreemodeMale || Main.IsFreemodeFemale)
            {
                int iVar0 = 0;
                while (iVar0 < OutfitPart.Length)
                {
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, iVar0, OutfitPart[iVar0], OutfitPart2[iVar0], 2);
                    iVar0++;
                }

                int iVar1 = 0;
                while (iVar1 < OutfitPart3.Length)
                {
                    Function.Call(Hash.SET_PED_PROP_INDEX, NonCutscene, iVar1, OutfitPart3[iVar1], OutfitPart4[iVar1], true);
                    iVar1++;
                }
            }
        }
        public static void GET_OUTFIT(Ped NonCutscene)
        {
            int iVar0 = 0;
            while (iVar0 < OutfitPart.Length)
            {
                OutfitPart[iVar0] = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, iVar0);
                OutfitPart2[iVar0] = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, iVar0);
                iVar0++;
            }

            int iVar1 = 0;
            while (iVar1 < OutfitPart3.Length)
            {
                OutfitPart3[iVar1] = Function.Call<int>(Hash.GET_PED_PROP_INDEX, NonCutscene, iVar1);
                OutfitPart4[iVar1] = Function.Call<int>(Hash.GET_PED_PROP_TEXTURE_INDEX, NonCutscene, iVar1);
                iVar1++;
            }
        }
        #endregion
        #region Mask Control
        public static void TestPatterns(string pattern)
        {
            IntPtr addr = Game.FindPattern(pattern);
            if (addr != IntPtr.Zero) Notification.Show("Pattern found");
            if (addr == IntPtr.Zero) Notification.Show("Pattern not found");
        }
        public static int[] HairPart = { 0, 0, 0 };
        public static bool MaskSetGrabbed = false;
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public struct HeadBlendData
        {
            [FieldOffset(0)]
            public int ShapeFirst;

            [FieldOffset(8)]
            public int ShapeSecond;

            [FieldOffset(16)]
            public int ShapeThird;

            [FieldOffset(24)]
            public int SkinFirst;

            [FieldOffset(32)]
            public int SkinSecond;

            [FieldOffset(40)]
            public int SkinThird;

            [FieldOffset(48)]
            public float ShapeMix;

            [FieldOffset(56)]
            public float SkinMix;

            [FieldOffset(64)]
            public float ThirdMix;
        }

        public static HeadBlendData Data = new HeadBlendData();
        public static void MaskON(Ped NonCutscene, int maskdraw, int masktxd)
        {
            if (Main.IsFreemodeMale || Main.IsFreemodeFemale)
            {
                Function.Call(Hash.SET_PED_HEAD_BLEND_DATA, NonCutscene, 0, 0, 0, 0, 0, 0, 0, 0, 0, false);
                //Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 2, -1, -1, 2);
                for (int i = 0; i < 20; i++)
                {
                    Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, i, 0f);
                }
                if (maskdraw == 0)
                {
                    MaskOFF(NonCutscene);
                }
                else
                {
                    Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 1, maskdraw, masktxd, 1);
                }
                //Notification.Show("outfit saved");
            }
        }
        public static void MaskOFF(Ped NonCutscene)
        {
            if (Main.IsFreemodeMale || Main.IsFreemodeFemale)
            {
                for (int i = 0; i < 20; i++)
                {
                    Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, i, FaceFeaturePart[i]);
                }
                Function.Call(Hash.SET_PED_HEAD_BLEND_DATA, NonCutscene, Data.ShapeFirst, Data.ShapeSecond, Data.ShapeThird, Data.SkinFirst, Data.SkinSecond, Data.SkinThird, Data.ShapeMix, Data.SkinMix, Data.ThirdMix, true);
                //Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 2, HairPart[0], HairPart[1], 2);
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 1, 0, 0, 2);
            }
        }
        public static void GET_FACE(Ped NonCutscene)
        {
            unsafe
            {
                HeadBlendData Data2 = new HeadBlendData();

                unsafe
                {
                    Function.Call((Hash)0x2746BD9D88C5C5D0, Game.Player.Character, &Data2);//GET_PED_HEAD_BLEND_DATA
                    //Screen.ShowHelpText("Data : " + Data.ShapeFirst + "," + Data.ShapeSecond + "," + Data.ShapeThird + ",", 4000);
                    Data = Data2;
                }
                
                HairPart[0] = Function.Call<int>(Hash.GET_PED_DRAWABLE_VARIATION, NonCutscene, 2);
                HairPart[1] = Function.Call<int>(Hash.GET_PED_TEXTURE_VARIATION, NonCutscene, 2);
                
                int iVar0 = 1;
                float fVar0 = 0f;
                while (iVar0 < 20)
                {
                    FaceFeaturePart[iVar0] = GET_PED_FACE_FEATURE(NonCutscene, iVar0);
                    //Function.Call(Hash.SET_PED_MICRO_MORPH, NonCutscene, iVar0, fVar3);
                    iVar0++;
                }
            }
        }
        public static unsafe float GET_PED_FACE_FEATURE(Ped ped, int index)
        {
            float result = 0.0f;
            IntPtr pedAddress = ped.MemoryAddress;

            if (index >= 0 && index < 20 && pedAddress != IntPtr.Zero)
            {
                CPedHeadBlendData* data = GetPedHeadBlendData(pedAddress);
                if (data != null)
                {
                    //Notification.Show("Face Feature Complete");
                    result = data->faceFeature[index];
                    return result;
                }
            }

            return 0f;
        }

        public unsafe delegate ulong gExtensionListGetDelegate(IntPtr address, ulong list);
        public static gExtensionListGetDelegate ExtensionListGet;
        public static unsafe ulong* _id_CPedHeadBlendData;
        
        public static unsafe void InitHeadBlendData()
        {
            IntPtr addr = Game.FindPattern("48 39 5E 38 74 1B 8B 15 ? ? ? ? 48 8D 4F 10 E8");
            if (addr != IntPtr.Zero)
            {
                //Notification.Show("Face Feature Found 1");
                addr = addr + 8;
                _id_CPedHeadBlendData = (ulong*)(addr + *(int*)addr + 4);
            }
        }//safe

        public static unsafe void InitExtensionListGet()
        {
            IntPtr addr = Game.FindPattern("41 83 E0 1F 8B 44 81 08 44 0F A3 C0");
            if (addr != IntPtr.Zero)
            {
                //Notification.Show("Face Feature Found 2");
                addr = addr - 31;
                ExtensionListGet = Marshal.GetDelegateForFunctionPointer<gExtensionListGetDelegate>(addr);

                //Thread thread;
                //thread = new Thread(() => Clipboard.SetText("your mom crashed & gae"));
                //thread.SetApartmentState(ApartmentState.STA); //Set the thread to STA
                //thread.Start();
                //thread.Join();
            }
        }//not safe

        public static unsafe CPedHeadBlendData* GetPedHeadBlendData(IntPtr pedAddr)
        {
            if ((*(byte*)(*(ulong*)(pedAddr + 32) + 646) & 2) != 0)
            {
                //Notification.Show("Face Feature Found 3");
                return (CPedHeadBlendData*)ExtensionListGet(pedAddr + 16, *_id_CPedHeadBlendData);
            }
            return null;
        }

        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct CPedHeadBlendData
        {
            [FieldOffset(160)] public fixed float faceFeature[20];
        };
        
        public static int STRING_TO_INT(string str, int iVar0)
        {
            unsafe
            {
                if (Function.Call<bool>(Hash.STRING_TO_INT, str, &iVar0))
                {
                    return iVar0;
                }
                return 0;
            }
        }
        public static Hash joaat(string str) => Function.Call<Hash>(Hash.GET_HASH_KEY, str);
        public static bool STAT_GET_FLOAT(string hash, out float outValue)
        {
            OutputArgument feat = new OutputArgument();

            unsafe
            {
                if (Function.Call<bool>(Hash.STAT_GET_FLOAT, Main.joaat(hash), feat, -1))
                {
                    outValue = feat.GetResult<float>();
                    Notification.Show($"Stat Got: {outValue}");//func_1663 face feature hashs
                    return true;
                }
                outValue = 0f;
                return false;
            }
        }
        public static int STAT_GET_INT(string hash)
        {
            int uVar1 = 0;

            unsafe
            {
                if (Function.Call<bool>(Hash.STAT_GET_INT, Main.joaat(hash), &uVar1, -1))
                {
                    Notification.Show($"Face Features Got: {uVar1}");//func_1663 face feature hashs
                    return uVar1;
                }
                return 0;
            }
        }

        public static void GetPedDuffelBagOn(Ped NonCutscene, int texture)
        {
            if (Main.IsFreemodeMale || Main.IsFreemodeFemale)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 5, 82, texture, 1);
            }
            if (Game.Player.Character.Model == PedHash.Franklin || Game.Player.Character.Model == PedHash.Michael || Game.Player.Character.Model == PedHash.Trevor)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 9, 1, 0, 2);
            }
        }
        public static void GetPedDuffelBagOff(Ped NonCutscene)
        {
            if (Main.IsFreemodeMale || Main.IsFreemodeFemale)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 5, 0, 0, 1);
            }
            if (Game.Player.Character.Model == PedHash.Franklin || Game.Player.Character.Model == PedHash.Michael || Game.Player.Character.Model == PedHash.Trevor)
            {
                Function.Call(Hash.SET_PED_COMPONENT_VARIATION, NonCutscene, 9, 0, 0, 2);
            }
        }
        #endregion
    }
    internal class SpawnPoints
    {
        public struct SpawnPoint
        {
            public float Heading { get; set; }
            public Vector3 Position { get; set; }
            public static SpawnPoint Zero => new SpawnPoint(0.0f, Vector3.Zero);

            public SpawnPoint(float heading, Vector3 position)
            {
                Heading = heading;
                Position = position;
            }

            public SpawnPoint(float heading, float x, float y, float z)
                : this(heading, new Vector3(x, y, z))
            {
            }

            public static bool operator ==(SpawnPoint s1, SpawnPoint s2)
            {
                return s1.Heading == s2.Heading && s1.Position == s2.Position;
            }

            public static bool operator !=(SpawnPoint s1, SpawnPoint s2)
            {
                return s1.Heading != s2.Heading && s1.Position != s2.Position;
            }

            public float Distance(SpawnPoint spawn)
                => Vector3.Distance(Position, spawn.Position);

            public float Distance2D(SpawnPoint spawn)
                => Vector3.Distance2D(Position, spawn.Position);
        };
    }
    internal class RESPAWN : Script
    {
        public static Vector3 misrespawn = new Vector3(0f, 0f, 0f);
        public static float misrespawnhead = 0f;
        public static int miswantedlevel = 0;
        public static bool misretask = false;
        public RESPAWN()
        {
            Tick += onTick;
            Aborted += OnShutdown;
        }

        public void onTick(object sender, EventArgs e)
        {
            if (!Main.OnMission)
            {
                TriggerDeath();
            }
            else
            {
                TriggerDeathMission2(misrespawn, misrespawnhead, Function.Call<int>(Hash.GET_CLOCK_HOURS), Function.Call<int>(Hash.GET_CLOCK_MINUTES), Function.Call<int>(Hash.GET_CLOCK_SECONDS), miswantedlevel, misretask);
            }
        }

        public static void TriggerDeath()
        {
            int iTimer = Game.GameTime + 2000;
            bool sound = false;
            //World.DrawMarker(MarkerType.VerticalCylinder, Game.Player.Character.Position, Vector3.Zero, new Vector3(0f, 0f, 0f), new Vector3(150f, 150f, 150f), Color.Black, false, false, false, null, null, false);
            if (Game.Player.Character.IsDead)
            {
                if (Game.Player.Character.IsDead)
                {
                    Vector3 playerpos = Game.Player.Character.Position;
                    int numresults = 0;
                    int flag = 2;
                    float distance = 150f;
                    if (Interiors.GET_INTERIOR_FROM_ENTITY(Game.Player.Character) != 0)
                    {
                        distance = 150f;
                        flag = 1;
                    }
                    if (Function.Call<bool>(Hash.SPAWNPOINTS_IS_SEARCH_ACTIVE))
                    {
                        Function.Call(Hash.SPAWNPOINTS_CANCEL_SEARCH);
                        if (Main.DEBUG) Notification.Show("Search Canceled", false);
                    }

                    //Vector3 iVar0 = Function.Call<Vector3>(Hash.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, Game.Player.Character, -1f, -1f, -1f);
                    //Vector3 iVar1 = Function.Call<Vector3>(Hash.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, Game.Player.Character, 1f, 1f, 1f);
                    //if (Function.Call<bool>(Hash.IS_ENTITY_IN_ANGLED_AREA, Game.Player.Character, iVar0.X, iVar0.Y, iVar0.Z, iVar1.X, iVar1.Y, iVar1.Z, 6f, 0, true, 0))
                    {
                        //Function.Call(Hash.SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA, iVar0.X, iVar0.Y, iVar0.Z, iVar1.X, iVar1.Y, iVar1.Z, 1f, (Spawnpointflags)flag, 2.0f, 5000);
                        //if (Main.DEBUG) Notification.Show("Search Started Angled", false);
                    }
                    //else
                    {
                        Function.Call(Hash.SPAWNPOINTS_START_SEARCH, playerpos.X, playerpos.Y, playerpos.Z, distance, 5f, (Spawnpointflags)flag, 2.0f, 20000);
                        if (Main.DEBUG) Notification.Show("Search Started", false);
                    }
                    while (!Function.Call<bool>(Hash.SPAWNPOINTS_IS_SEARCH_COMPLETE))
                    {
                        if (Main.DEBUG) Notification.Show("Searching", false);
                        Wait(0);
                    }
                    numresults = Function.Call<int>(Hash.SPAWNPOINTS_GET_NUM_SEARCH_RESULTS);
                    int randomspot = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, numresults);
                    unsafe
                    {
                        Function.Call(Hash.SPAWNPOINTS_GET_SEARCH_RESULT, randomspot, &playerpos.X, &playerpos.Y, &playerpos.Z);
                    }
                    if (Main.DEBUG) Notification.Show($"Search Complete : Spots:{numresults} Spot Chosen:{randomspot}, X{playerpos.X}, Y{playerpos.Y}, Z{playerpos.Z}", false);
                    
                    //playerpos = World.GetSafeCoordForPed(playerpos, true, 0);
                    if (Game.Player.Character.IsInWater)
                    {
                        if (Function.Call<bool>(Hash.SPAWNPOINTS_IS_SEARCH_ACTIVE))
                        {
                            Function.Call(Hash.SPAWNPOINTS_CANCEL_SEARCH);
                            if (Main.DEBUG) Notification.Show("Search Canceled", false);
                        }
                        OutputArgument pos = new OutputArgument();
                        unsafe
                        {
                            if (Function.Call<bool>(Hash.GET_SAFE_COORD_FOR_PED, Game.Player.Character.Position.X, Game.Player.Character.Position.Y, Game.Player.Character.Position.Z, false, pos, 0))
                            {
                                playerpos = pos.GetResult<Vector3>();
                            }
                        }
                    }
                    if (numresults == 0)
                    {
                        playerpos = Game.Player.Character.Position;
                    }
                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "OFFMISSION_WASTED");
                    Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "OFFMISSION_WASTED", false, -1);
                    Function.Call(Hash.START_AUDIO_SCENE, "DEATH_SCENE");
                    Wait(50);
                    Scaleform shard = new Scaleform("MP_BIG_MESSAGE_FREEMODE");
                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "MP_Flash", "WastedSounds", true);
                    GameplayCamera.Shake(CameraShake.DeathFail, 1.5f);
                    Screen.StartEffect(ScreenEffect.DeathFailMpIn, 0, false);
                    while (!Screen.IsFadedOut)
                    {
                        if (Game.GameTime > iTimer)
                        {
                            shard.CallFunction("SHOW_SHARD_WASTED_MP_MESSAGE", "~r~WASTED", "", 0, true, true);
                            shard.Render2D();
                            if (!sound)
                            {
                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "TextHit", "WastedSounds", true);
                                sound = true;
                            }
                        }
                        Script.Yield();
                    }
                    while (!Screen.IsFadingIn)
                    {
                        shard.CallFunction("SHOW_SHARD_WASTED_MP_MESSAGE", "~r~WASTED", "", 0, true, true);
                        shard.Render2D();
                        Script.Yield();
                    }
                    Game.Player.Character.Position = new Vector3(playerpos.X, playerpos.Y, playerpos.Z - 1f);
                    Function.Call(Hash.STOP_AUDIO_SCENE, "DEATH_SCENE");
                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "OFFMISSION_WASTED");
                    shard.Dispose();
                    //Game.Player.Character.Resurrect();
                    Screen.StopEffects();
                    GameplayCamera.StopShaking();
                    HudHandler.HudandRadar(true, true);
                    Screen.FadeIn(500);
                }
            }
        }
        public static void TriggerDeathMission2(Vector3 playerrespawnpoint, float heading, int hours, int minutes, int seconds, int wantedlevel, bool retaskpeds)
        {
            int iTimer = Game.GameTime + 2000;
            bool sound = false;
            if (Game.Player.Character.IsDead)
            {

                Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "OFFMISSION_WASTED");
                Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "OFFMISSION_WASTED", false, -1);
                Function.Call(Hash.START_AUDIO_SCENE, "DEATH_SCENE");
                Wait(50);
                Scaleform shard = new Scaleform("MP_BIG_MESSAGE_FREEMODE");
                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "MP_Flash", "WastedSounds", true);
                GameplayCamera.Shake(CameraShake.DeathFail, 1.5f);
                Screen.StartEffect(ScreenEffect.DeathFailMpIn, 0, false);
                while (!Screen.IsFadedOut)
                {
                    if (Game.GameTime > iTimer)
                    {
                        shard.CallFunction("SHOW_SHARD_WASTED_MP_MESSAGE", "~r~WASTED", "", 0, true, true);
                        shard.Render2D();
                        if (!sound)
                        {
                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "TextHit", "WastedSounds", true);
                            sound = true;
                        }
                    }
                    Script.Yield();
                }
                while (!Screen.IsFadingIn)
                {
                    shard.CallFunction("SHOW_SHARD_WASTED_MP_MESSAGE", "~r~WASTED", "", 0, true, true);
                    shard.Render2D();
                    Script.Yield();
                }
                Function.Call(Hash.STOP_AUDIO_SCENE, "DEATH_SCENE");
                Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "OFFMISSION_WASTED");
                shard.Dispose();
                //Game.Player.Character.Resurrect();
                Function.Call(Hash.SET_CLOCK_TIME, hours, minutes, seconds);
                Screen.StopEffects();
                GameplayCamera.StopShaking();
                HudHandler.HudandRadar(true, true);
                playerrespawnpoint.Z = playerrespawnpoint.Z - 1f;
                Game.Player.Character.Position = playerrespawnpoint;
                Game.Player.Character.Heading = heading;
                GameplayCamera.RelativeHeading = heading - Game.Player.Character.Heading;
                Game.Player.WantedLevel = wantedlevel;
                Screen.FadeIn(500);
                if (retaskpeds)
                {
                    Groups.TaskEnemyPeds();
                }
            }
        }
        public static void SET_MIS_STAT(Vector3 misrespawnpos, float misrespawnheadnum, int miswantedlevelnum, bool misretaskbool)
        {
            misrespawn = misrespawnpos;
            misrespawnhead = misrespawnheadnum;
            miswantedlevel = miswantedlevelnum;
            misretask = misretaskbool;
        }

        public void OnShutdown(object sender, EventArgs e)
        {
            var A_0 = true;
            if (A_0)
            {
                if (Function.Call<bool>(Hash.SPAWNPOINTS_IS_SEARCH_ACTIVE))
                {
                    Function.Call(Hash.SPAWNPOINTS_CANCEL_SEARCH);
                }
            }
        }

        public enum Spawnpointflags
        {
            SPAWNPOINTS_FLAG_DEFAULT = 0,
            // allow spawn points to be chosen in interiors
            SPAWNPOINTS_FLAG_MAY_SPAWN_IN_INTERIOR = 1,
            // allow spawn points to be chosen in exterior (main map) locations
            SPAWNPOINTS_FLAG_MAY_SPAWN_IN_EXTERIOR = 2,
            // allow to choose polygons not marked as "network spawn candidate"
            SPAWNPOINTS_FLAG_ALLOW_NOT_NETWORK_SPAWN_CANDIDATE_POLYS = 4,
            // allow to choose polygons marked as "isolated"
            SPAWNPOINTS_FLAG_ALLOW_ISOLATED_POLYS = 8,
            // allow to choose polygons marked as "road"
            SPAWNPOINTS_FLAG_ALLOW_ROAD_POLYS = 16,
            // only return points which are against navmesh polygon edges
            SPAWNPOINTS_FLAG_ONLY_POINTS_AGAINST_EDGES = 32
        };
    }
    internal class Chase : Script
    {
        public static bool ChaseActive = false;
        public static bool[] PedAlive = { false, false, false, false, false };
        public static Ped[] ChasePeds = { null, null, null, null, null };
        public static Blip[] ChaseBlips = { null, null, null, null, null };
        public static Vehicle[] ChaseVehicles = { null, null, null, null, null };
        public static int[] SpawnTimes = { 0, 0, 0 };
        public static VehicleHash vehicleHash = 0;
        public static PedHash pedHash = 0;
        public static WeaponHash[] weaponHash = { 0, 0, 0 };
        public Chase()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }
        public void onTick(object sender, EventArgs e)
        {
            if (Main.DEBUG)
            {
                if (Game.IsEnabledControlJustPressed(GTA.Control.Context))
                {
                    //Game.Player.Character.Position = Chase.GetClosestVehNode(Game.Player.Character.Position, 200);
                }
            }
            if (ChaseActive)
            {
                Vector3 playerpos = Game.Player.Character.Position;
                int numresults = 0;
                int flag = 2;

                if (!PedAlive[0] && !PedAlive[1] && Game.GameTime > SpawnTimes[0])
                {
                    if (Function.Call<bool>(Hash.SPAWNPOINTS_IS_SEARCH_ACTIVE))
                    {
                        Function.Call(Hash.SPAWNPOINTS_CANCEL_SEARCH);
                        if (Main.DEBUG) Notification.Show("Search Canceled", false);
                    }

                    //Vector3 iVar0 = Function.Call<Vector3>(Hash.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, Game.Player.Character, -1f, -1f, -1f);
                    //Vector3 iVar1 = Function.Call<Vector3>(Hash.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, Game.Player.Character, 1f, 1f, 1f);
                    //if (Function.Call<bool>(Hash.IS_ENTITY_IN_ANGLED_AREA, Game.Player.Character, iVar0.X, iVar0.Y, iVar0.Z, iVar1.X, iVar1.Y, iVar1.Z, 6f, 0, true, 0))
                    {
                        //Function.Call(Hash.SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA, iVar0.X, iVar0.Y, iVar0.Z, iVar1.X, iVar1.Y, iVar1.Z, 1f, (Spawnpointflags)flag, 2.0f, 5000);
                        //if (Main.DEBUG) Notification.Show("Search Started Angled", false);
                    }
                    //else
                    {
                        Function.Call(Hash.SPAWNPOINTS_START_SEARCH, playerpos.X, playerpos.Y, playerpos.Z, 130f, 5f, 2, 2.0f, 20000);
                        if (Main.DEBUG) Notification.Show("Search Started", false);
                    }
                    while (!Function.Call<bool>(Hash.SPAWNPOINTS_IS_SEARCH_COMPLETE))
                    {
                        if (Main.DEBUG) Notification.Show("Searching", false);
                        Wait(0);
                    }
                    numresults = Function.Call<int>(Hash.SPAWNPOINTS_GET_NUM_SEARCH_RESULTS);
                    int randomspot = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, numresults);
                    unsafe
                    {
                        Function.Call(Hash.SPAWNPOINTS_GET_SEARCH_RESULT, randomspot, &playerpos.X, &playerpos.Y, &playerpos.Z);
                        if (playerpos.DistanceTo(Game.Player.Character.Position) > 130f && (playerpos.DistanceTo(Game.Player.Character.Position) < 70f))
                        {
                            if (Main.DEBUG) Notification.Show("Search Returned", false);
                            return;
                        }
                    }
                    if (Main.DEBUG) Notification.Show($"Search Complete : Spots:{numresults} Spot Chosen:{randomspot}, X{playerpos.X}, Y{playerpos.Y}, Z{playerpos.Z}", false);

                    playerpos = GetClosestVehNode(playerpos, 130f);

                    if (!Function.Call<bool>(Hash.IS_POINT_ON_ROAD, playerpos.X, playerpos.Y, playerpos.Z))
                    {
                        if (Main.DEBUG) Notification.Show("Search Returned", false);
                        return;
                    }
                    ChaseVehicles[0] = World.CreateVehicle(vehicleHash, playerpos, 0f);
                    while (ChaseVehicles[0] == null)
                    {
                        ChaseVehicles[0] = World.CreateVehicle(vehicleHash, World.GetSafeCoordForPed(Game.Player.Character.Position.Around(200), false, 8), Game.Player.Character.Heading);
                        Wait(0);
                    }
                    if (ChaseVehicles[0].IsOnScreen)
                    {
                        ChaseVehicles[0].Delete();
                        ChaseVehicles[0] = null;
                        return;
                    }
                    Vector3 notneeded = new Vector3(0f, 0f, 0f);
                    float desiredheading = 0f;
                    unsafe
                    {
                        if (Function.Call<bool>(Hash.GET_CLOSEST_VEHICLE_NODE_WITH_HEADING, ChaseVehicles[0].Position.X, ChaseVehicles[0].Position.Y, ChaseVehicles[0].Position.Z, &notneeded, &desiredheading, 1, 1077936128, 0))
                        {
                            ChaseVehicles[0].Heading = desiredheading;
                        }
                        else
                        {
                            return;
                        }
                    }
                    ChasePeds[0] = World.CreatePed(pedHash, GetClosestVehNode(Game.Player.Character.Position, 100), Game.Player.Character.Heading);
                    while (ChasePeds[0] == null)
                    {
                        ChasePeds[0] = World.CreatePed(pedHash, GetClosestVehNode(Game.Player.Character.Position, 100), Game.Player.Character.Heading);
                        Wait(0);
                    }
                    ChasePeds[0].SetIntoVehicle(ChaseVehicles[0], VehicleSeat.Driver);
                    ChasePeds[0].Weapons.Give(weaponHash[0], 10000, true, true);
                    ChasePeds[0].Weapons.Give(weaponHash[1], 10000, true, true);
                    ChasePeds[0].RelationshipGroup = Groups.AiTeam;
                    ChasePeds[0].DrivingStyle = DrivingStyle.AvoidTrafficExtremely;
                    ChasePeds[0].DrivingSpeed = 160f;
                    ChasePeds[0].Accuracy = 25;
                    ChasePeds[0].ShootRate = 25;
                    Function.Call(Hash.SET_PED_COMBAT_RANGE, ChasePeds[0], 0);
                    ChasePeds[0].FiringPattern = FiringPattern.BurstFire;
                    //Function.Call(Hash.SET_PED_AS_ENEMY, ChasePeds[0], true);
                    ChaseBlips[0] = ChasePeds[0].AddBlip();
                    ChaseBlips[0].Sprite = (BlipSprite)270;
                    ChaseBlips[0].Color = BlipColor.Red;
                    ChaseBlips[0].Name = "Enemy";
                    ChasePeds[1] = World.CreatePed(pedHash, GetClosestVehNode(Game.Player.Character.Position, 100), Game.Player.Character.Heading);
                    while (ChasePeds[1] == null)
                    {
                        ChasePeds[1] = World.CreatePed(pedHash, GetClosestVehNode(Game.Player.Character.Position, 100), Game.Player.Character.Heading);
                        Wait(0);
                    }
                    //Function.Call(Hash.SET_PED_AS_ENEMY, ChasePeds[1], true);
                    ChasePeds[1].SetIntoVehicle(ChaseVehicles[0], VehicleSeat.Passenger);
                    ChasePeds[1].Weapons.Give(weaponHash[0], 10000, true, true);
                    ChasePeds[1].Weapons.Give(weaponHash[1], 10000, true, true);
                    ChasePeds[1].RelationshipGroup = Groups.AiTeam;
                    ChaseBlips[1] = ChasePeds[1].AddBlip();
                    ChaseBlips[1].Sprite = (BlipSprite)270;
                    ChaseBlips[1].Color = BlipColor.Red;
                    ChaseBlips[1].Name = "Enemy";
                    ChasePeds[1].Accuracy = 25;
                    ChasePeds[1].ShootRate = 25;
                    Function.Call(Hash.SET_PED_COMBAT_RANGE, ChasePeds[1], 0);
                    ChasePeds[1].FiringPattern = FiringPattern.BurstFire;
                    Main.SetRelationshipBetweenGroups(Relationship.Hate, Groups.AiTeam, Groups.playersTeam);
                    Main.SetRelationshipBetweenGroups(Relationship.Hate, Groups.playersTeam, Groups.AiTeam);
                    Function.Call(Hash.TASK_COMBAT_PED, ChasePeds[0], Game.Player.Character, 67108864, 16);
                    Function.Call(Hash.TASK_COMBAT_PED, ChasePeds[1], Game.Player.Character, 67108864, 16);
                    ChasePeds[0].BlockPermanentEvents = true;
                    ChasePeds[0].AlwaysKeepTask = true;
                    ChasePeds[1].BlockPermanentEvents = true;
                    ChasePeds[1].AlwaysKeepTask = true;
                    PedAlive[0] = true;
                    PedAlive[1] = true;
                }

                if (ChasePeds[0] != null && PedAlive[0])
                {
                    if (ChasePeds[0].IsDead)
                    {
                        SpawnTimes[0] = Game.GameTime + 10000;
                        ChaseBlips[0].Delete();
                        ChaseBlips[0] = null;
                        ChasePeds[0].MarkAsNoLongerNeeded();
                        ChasePeds[0] = null;
                        PedAlive[0] = false;
                    }
                }
                if (ChasePeds[0] != null && PedAlive[0] && ChasePeds[0].Position.DistanceTo(Game.Player.Character.Position) > 400)
                {
                    SpawnTimes[0] = Game.GameTime + 10000;
                    ChaseBlips[0].Delete();
                    ChaseBlips[0] = null;
                    ChasePeds[0].MarkAsNoLongerNeeded();
                    ChasePeds[0] = null;
                    PedAlive[0] = false;
                }
                if (ChasePeds[1] != null && PedAlive[1])
                {
                    if (ChasePeds[1].IsDead)
                    {
                        SpawnTimes[0] = Game.GameTime + 10000;
                        ChaseBlips[1].Delete();
                        ChaseBlips[1] = null;
                        ChasePeds[1].MarkAsNoLongerNeeded();
                        ChasePeds[1] = null;
                        PedAlive[1] = false;
                    }
                }
                if (ChasePeds[1] != null && PedAlive[1] && ChasePeds[1].Position.DistanceTo(Game.Player.Character.Position) > 400)
                {
                    SpawnTimes[0] = Game.GameTime + 10000;
                    ChaseBlips[1].Delete();
                    ChaseBlips[1] = null;
                    ChasePeds[1].MarkAsNoLongerNeeded();
                    ChasePeds[1] = null;
                    PedAlive[1] = false;
                }
                if (ChaseVehicles[0] != null && ChaseVehicles[0].IsDead)
                {
                    SpawnTimes[0] = Game.GameTime + 10000;
                    ChaseVehicles[0].MarkAsNoLongerNeeded();
                    ChaseVehicles[0] = null;
                }
                if (ChaseVehicles[0] != null && !PedAlive[0] && !PedAlive[1])
                {
                    SpawnTimes[0] = Game.GameTime + 10000;
                    ChaseVehicles[0].MarkAsNoLongerNeeded();
                    ChaseVehicles[0] = null;
                }
                if (ChaseVehicles[0] != null && ChaseVehicles[0].Position.DistanceTo(Game.Player.Character.Position) > 400)
                {
                    SpawnTimes[0] = Game.GameTime + 10000;
                    if (ChaseBlips[0] != null)
                    {
                        ChaseBlips[0].Delete();
                        ChaseBlips[0] = null;
                    }
                    if (ChasePeds[0] != null)
                    {
                        ChasePeds[0].MarkAsNoLongerNeeded();
                        ChasePeds[0] = null;
                    }
                    PedAlive[0] = false;
                    if (ChaseBlips[1] != null)
                    {
                        ChaseBlips[1].Delete();
                        ChaseBlips[1] = null;
                    }
                    if (ChasePeds[1] != null)
                    {
                        ChasePeds[1].MarkAsNoLongerNeeded();
                        ChasePeds[1] = null;
                    }
                    PedAlive[1] = false;
                    ChaseVehicles[0].MarkAsNoLongerNeeded();
                    ChaseVehicles[0] = null;
                }

                if (!PedAlive[2] && !PedAlive[3] && Game.GameTime > SpawnTimes[1])
                {
                    if (Function.Call<bool>(Hash.SPAWNPOINTS_IS_SEARCH_ACTIVE))
                    {
                        Function.Call(Hash.SPAWNPOINTS_CANCEL_SEARCH);
                        if (Main.DEBUG) Notification.Show("Search Canceled", false);
                    }

                    //Vector3 iVar0 = Function.Call<Vector3>(Hash.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, Game.Player.Character, -1f, -1f, -1f);
                    //Vector3 iVar1 = Function.Call<Vector3>(Hash.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, Game.Player.Character, 1f, 1f, 1f);
                    //if (Function.Call<bool>(Hash.IS_ENTITY_IN_ANGLED_AREA, Game.Player.Character, iVar0.X, iVar0.Y, iVar0.Z, iVar1.X, iVar1.Y, iVar1.Z, 6f, 0, true, 0))
                    {
                        //Function.Call(Hash.SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA, iVar0.X, iVar0.Y, iVar0.Z, iVar1.X, iVar1.Y, iVar1.Z, 1f, (Spawnpointflags)flag, 2.0f, 5000);
                        //if (Main.DEBUG) Notification.Show("Search Started Angled", false);
                    }
                    //else
                    {
                        Function.Call(Hash.SPAWNPOINTS_START_SEARCH, playerpos.X, playerpos.Y, playerpos.Z, 130f, 5f, 2, 2.0f, 20000);
                        if (Main.DEBUG) Notification.Show("Search Started", false);
                    }
                    while (!Function.Call<bool>(Hash.SPAWNPOINTS_IS_SEARCH_COMPLETE))
                    {
                        if (Main.DEBUG) Notification.Show("Searching", false);
                        Wait(0);
                    }
                    numresults = Function.Call<int>(Hash.SPAWNPOINTS_GET_NUM_SEARCH_RESULTS);
                    int randomspot = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, numresults);
                    unsafe
                    {
                        Function.Call(Hash.SPAWNPOINTS_GET_SEARCH_RESULT, randomspot, &playerpos.X, &playerpos.Y, &playerpos.Z);
                        if (playerpos.DistanceTo(Game.Player.Character.Position) > 130f && (playerpos.DistanceTo(Game.Player.Character.Position) < 70f))
                        {
                            if (Main.DEBUG) Notification.Show("Search Returned", false);
                            return;
                        }
                    }
                    if (Main.DEBUG) Notification.Show($"Search Complete : Spots:{numresults} Spot Chosen:{randomspot}, X{playerpos.X}, Y{playerpos.Y}, Z{playerpos.Z}", false);

                    playerpos = GetClosestVehNode(playerpos, 130f);

                    if (!Function.Call<bool>(Hash.IS_POINT_ON_ROAD, playerpos.X, playerpos.Y, playerpos.Z))
                    {
                        if (Main.DEBUG) Notification.Show("Search Returned", false);
                        return;
                    }
                    ChaseVehicles[1] = World.CreateVehicle(vehicleHash, playerpos, 0f);
                    while (ChaseVehicles[1] == null)
                    {
                        ChaseVehicles[1] = World.CreateVehicle(vehicleHash, World.GetNextPositionOnStreet(Game.Player.Character.Position.Around(200), true), Game.Player.Character.Heading);
                        Wait(0);
                    }
                    if (ChaseVehicles[1].IsOnScreen)
                    {
                        ChaseVehicles[1].Delete();
                        ChaseVehicles[1] = null;
                        return;
                    }
                    Vector3 notneeded = new Vector3(0f, 0f, 0f);
                    float desiredheading = 0f;
                    unsafe
                    {
                        if (Function.Call<bool>(Hash.GET_CLOSEST_VEHICLE_NODE_WITH_HEADING, ChaseVehicles[1].Position.X, ChaseVehicles[1].Position.Y, ChaseVehicles[1].Position.Z, &notneeded, &desiredheading, 1, 1077936128, 0))
                        {
                            ChaseVehicles[1].Heading = desiredheading;
                        }
                        else
                        {
                            return;
                        }
                    }
                    ChasePeds[2] = World.CreatePed(pedHash, GetClosestVehNode(Game.Player.Character.Position, 100), Game.Player.Character.Heading);
                    while (ChasePeds[2] == null)
                    {
                        ChasePeds[2] = World.CreatePed(pedHash, GetClosestVehNode(Game.Player.Character.Position, 100), Game.Player.Character.Heading);
                        Wait(0);
                    }
                    ChasePeds[2].SetIntoVehicle(ChaseVehicles[1], VehicleSeat.Driver);
                    ChasePeds[2].Weapons.Give(weaponHash[0], 10000, true, true);
                    ChasePeds[2].Weapons.Give(weaponHash[1], 10000, true, true);
                    ChasePeds[2].RelationshipGroup = Groups.AiTeam;
                    ChasePeds[2].DrivingStyle = DrivingStyle.AvoidTrafficExtremely;
                    ChasePeds[2].DrivingSpeed = 160f;
                    //Function.Call(Hash.SET_PED_AS_ENEMY, ChasePeds[0], true);
                    ChaseBlips[2] = ChasePeds[2].AddBlip();
                    ChaseBlips[2].Sprite = (BlipSprite)270;
                    ChaseBlips[2].Color = BlipColor.Red;
                    ChaseBlips[2].Name = "Enemy";
                    ChasePeds[2].Accuracy = 25;
                    ChasePeds[2].ShootRate = 25;
                    Function.Call(Hash.SET_PED_COMBAT_RANGE, ChasePeds[2], 0);
                    ChasePeds[2].FiringPattern = FiringPattern.BurstFire;
                    ChasePeds[3] = World.CreatePed(pedHash, GetClosestVehNode(Game.Player.Character.Position, 100), Game.Player.Character.Heading);
                    while (ChasePeds[3] == null)
                    {
                        ChasePeds[3] = World.CreatePed(pedHash, GetClosestVehNode(Game.Player.Character.Position, 100), Game.Player.Character.Heading);
                        Wait(0);
                    }
                    //Function.Call(Hash.SET_PED_AS_ENEMY, ChasePeds[1], true);
                    ChasePeds[3].SetIntoVehicle(ChaseVehicles[1], VehicleSeat.Passenger);
                    ChasePeds[3].Weapons.Give(weaponHash[0], 10000, true, true);
                    ChasePeds[3].Weapons.Give(weaponHash[1], 10000, true, true);
                    ChasePeds[3].RelationshipGroup = Groups.AiTeam;
                    ChaseBlips[3] = ChasePeds[3].AddBlip();
                    ChaseBlips[3].Sprite = (BlipSprite)270;
                    ChaseBlips[3].Color = BlipColor.Red;
                    ChaseBlips[3].Name = "Enemy";
                    ChasePeds[3].Accuracy = 25;
                    ChasePeds[3].ShootRate = 25;
                    Function.Call(Hash.SET_PED_COMBAT_RANGE, ChasePeds[3], 0);
                    ChasePeds[3].FiringPattern = FiringPattern.BurstFire;
                    Main.SetRelationshipBetweenGroups(Relationship.Hate, Groups.AiTeam, Groups.playersTeam);
                    Main.SetRelationshipBetweenGroups(Relationship.Hate, Groups.playersTeam, Groups.AiTeam);
                    Function.Call(Hash.TASK_COMBAT_PED, ChasePeds[2], Game.Player.Character, 67108864, 16);
                    Function.Call(Hash.TASK_COMBAT_PED, ChasePeds[3], Game.Player.Character, 67108864, 16);
                    ChasePeds[2].BlockPermanentEvents = true;
                    ChasePeds[2].AlwaysKeepTask = true;
                    ChasePeds[3].BlockPermanentEvents = true;
                    ChasePeds[3].AlwaysKeepTask = true;
                    PedAlive[2] = true;
                    PedAlive[3] = true;
                }
                if (ChasePeds[2] != null && PedAlive[2])
                {
                    if (ChasePeds[2].IsDead)
                    {
                        SpawnTimes[1] = Game.GameTime + 10000;
                        ChaseBlips[2].Delete();
                        ChaseBlips[2] = null;
                        ChasePeds[2].MarkAsNoLongerNeeded();
                        ChasePeds[2] = null;
                        PedAlive[2] = false;
                    }
                }
                if (ChasePeds[2] != null && PedAlive[2] && ChasePeds[2].Position.DistanceTo(Game.Player.Character.Position) > 400)
                {
                    SpawnTimes[1] = Game.GameTime + 10000;
                    ChaseBlips[2].Delete();
                    ChaseBlips[2] = null;
                    ChasePeds[2].MarkAsNoLongerNeeded();
                    ChasePeds[2] = null;
                    PedAlive[2] = false;
                }
                if (ChasePeds[3] != null && PedAlive[3])
                {
                    if (ChasePeds[3].IsDead)
                    {
                        SpawnTimes[1] = Game.GameTime + 10000;
                        ChaseBlips[3].Delete();
                        ChaseBlips[3] = null;
                        ChasePeds[3].MarkAsNoLongerNeeded();
                        ChasePeds[3] = null;
                        PedAlive[3] = false;
                    }
                }
                if (ChasePeds[3] != null && PedAlive[3] && ChasePeds[3].Position.DistanceTo(Game.Player.Character.Position) > 400)
                {
                    SpawnTimes[1] = Game.GameTime + 10000;
                    ChaseBlips[3].Delete();
                    ChaseBlips[3] = null;
                    ChasePeds[3].MarkAsNoLongerNeeded();
                    ChasePeds[3] = null;
                    PedAlive[3] = false;
                }
                if (ChaseVehicles[1] != null && ChaseVehicles[1].IsDead)
                {
                    SpawnTimes[1] = Game.GameTime + 10000;
                    ChaseVehicles[1].MarkAsNoLongerNeeded();
                    ChaseVehicles[1] = null;
                }
                if (ChaseVehicles[1] != null && !PedAlive[2] && !PedAlive[3])
                {
                    SpawnTimes[1] = Game.GameTime + 10000;
                    ChaseVehicles[1].MarkAsNoLongerNeeded();
                    ChaseVehicles[1] = null;
                }
                if (ChaseVehicles[1] != null && ChaseVehicles[1].Position.DistanceTo(Game.Player.Character.Position) > 400)
                {
                    SpawnTimes[1] = Game.GameTime + 10000;
                    if (ChaseBlips[2] != null)
                    {
                        ChaseBlips[2].Delete();
                        ChaseBlips[2] = null;
                    }
                    if (ChasePeds[2] != null)
                    {
                        ChasePeds[2].MarkAsNoLongerNeeded();
                        ChasePeds[2] = null;
                    }
                    PedAlive[2] = false;
                    if (ChaseBlips[3] != null)
                    {
                        ChaseBlips[3].Delete();
                        ChaseBlips[3] = null;
                    }
                    if (ChasePeds[3] != null)
                    {
                        ChasePeds[3].MarkAsNoLongerNeeded();
                        ChasePeds[3] = null;
                    }
                    PedAlive[3] = false;
                    ChaseVehicles[1].MarkAsNoLongerNeeded();
                    ChaseVehicles[1] = null;
                }
            }
            if (!ChaseActive)
            {
                if (ChaseBlips[0] != null)
                {
                    ChaseBlips[0].Delete();
                    ChaseBlips[0] = null;
                }
                if (ChasePeds[0] != null)
                {
                    ChasePeds[0].MarkAsNoLongerNeeded();
                    ChasePeds[0] = null;
                }
                if (ChaseBlips[1] != null)
                {
                    ChaseBlips[1].Delete();
                    ChaseBlips[1] = null;
                }
                if (ChasePeds[1] != null)
                {
                    ChasePeds[1].MarkAsNoLongerNeeded();
                    ChasePeds[1] = null;
                }
                if (ChaseVehicles[0] != null)
                {
                    ChaseVehicles[0].MarkAsNoLongerNeeded();
                    ChaseVehicles[0] = null;
                }
                SpawnTimes[0] = 0;
                PedAlive[0] = false;
                PedAlive[1] = false;

                if (ChaseBlips[2] != null)
                {
                    ChaseBlips[2].Delete();
                    ChaseBlips[2] = null;
                }
                if (ChasePeds[2] != null)
                {
                    ChasePeds[2].MarkAsNoLongerNeeded();
                    ChasePeds[2] = null;
                }
                if (ChaseBlips[3] != null)
                {
                    ChaseBlips[3].Delete();
                    ChaseBlips[3] = null;
                }
                if (ChasePeds[3] != null)
                {
                    ChasePeds[3].MarkAsNoLongerNeeded();
                    ChasePeds[3] = null;
                }
                if (ChaseVehicles[1] != null)
                {
                    ChaseVehicles[1].MarkAsNoLongerNeeded();
                    ChaseVehicles[1] = null;
                }
                SpawnTimes[1] = 0;
                PedAlive[2] = false;
                PedAlive[3] = false;
            }
        }
        public void onShutdown(object sender, EventArgs e)
        {
            var A_0 = true;
            if (A_0)
            {
                foreach (Ped p in ChasePeds)
                {
                    if (p != null)
                    {
                        p.Delete();
                    }
                }
                foreach (Blip b in ChaseBlips)
                {
                    if (b != null)
                    {
                        b.Delete();
                    }
                }
                foreach (Vehicle v in ChaseVehicles)
                {
                    if (v != null)
                    {
                        v.Delete();
                    }
                }
            }
        }

        public static Vector3 GetClosestVehNode(Vector3 posfrom, float distance)
        {
            Vector3 spawnPos; //The position you will use to spawn the ped
            Vector3 pos = posfrom.Around(distance);
            OutputArgument pos1 = new OutputArgument();
            Function.Call(Hash.GET_NTH_CLOSEST_VEHICLE_NODE, pos.X, pos.Y, pos.Z, 0, pos1, 1, 0x40400000, 0);
            spawnPos = pos1.GetResult<Vector3>();

            return spawnPos;
        }
        public enum VehicleNodeFlags
        {
            None = 0,
            /// <summary>
            /// Indicates whether this road node is disabled.
            /// </summary>
            IsDisabled = 1,
            UnknownBit2 = 2,
            /// <summary>
            /// Slow normal roads, for example in the Vinewood hills or in front of the airport building. 
            /// </summary>
            SlowNormalRoad = 4,
            /// <summary>
            /// Minor roads can be found in the desert, quarry, back alleys or in front of gas stations.
            /// </summary>
            MinorRoad = 8,
            /// <summary>
            /// Tunnels for cars or underground parking garages. Subway tunnels and short underpasses are excluded.
            /// </summary>
            TunnelOrUndergroundParking = 16,
            /// <summary>
            /// This flag can be observed on some parking lots and very small side roads in Los Santos, but the exact meaning is unknown. 
            /// </summary>
            UnknownBit32 = 32,
            /// <summary>
            /// Freeways with multiple lanes for one direction.
            /// </summary>
            Freeway = 64,
            /// <summary>
            /// Indicates a junction, regardless of the size or road type.
            /// </summary>
            Junction = 128,
            /// <summary>
            /// A normal stop node, for example on intersections.
            /// </summary>
            StopNode = 256,
            /// <summary>
            /// A stop node before T junction and with no traffic lights. 
            /// </summary>
            SpecialStopNode = 512
        }
        public static void SET_CHASE_ACTIVATE(VehicleHash vehhash, PedHash pedhash, params WeaponHash[] weapons)
        {
            vehicleHash = vehhash;
            pedHash = pedhash;
            weaponHash[0] = weapons[0];
            weaponHash[1] = weapons[1];
            ChaseActive = true;
        }
        public static void SET_CHASE_DEACTIVATE()
        {
            vehicleHash = 0;
            pedHash = 0;
            weaponHash[0] = 0;
            weaponHash[1] = 0;
            ChaseActive = false;
        }
    }
    internal class Glass_Cutters : Script
    {
        public static bool AllowGlassCutterGrab = false;
        public static bool AllowGlassCutterGrab2 = false;

        public static int ExtraLootSwitch = 0;
        public static int CutterTemp = 0;
        public static int CutterProgress = 0;
        public static int SoundId = 0;
        public static int cuttingsound = 0;
        public static int overheatsound = 0;
        public static int plasmaeffects;
        public static int heateffects;

        public static int TotalGlass = 0;
        public static int TotalAmount = 0;

        public static Prop Bag;
        public static Prop GlassCutter;
        public Glass_Cutters()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }
        public static List<Prop> GCSpawn = new List<Prop>()
        {

        };
        public static List<Prop> GC2Spawn = new List<Prop>()
        {

        };
        public static List<Prop> LootSpawn = new List<Prop>()
        {

        };
        public static List<Prop> LootStandSpawn = new List<Prop>()
        {

        };
        public void onTick(object sender, EventArgs e)
        {
            BlipUpLockBoxs();
            if (Main.DEBUG)
            {
                if (Game.IsControlJustPressed(GTA.Control.VehicleDuck))
                {

                }
            }
            if (AllowGlassCutterGrab)
            {
                foreach (Prop GlassCase in GCSpawn.ToList())
                {
                    if (Groups.IS_PED_AT_DESTINATION(Game.Player.Character, GlassCase.Position, 2))
                    {
                        Glass_Cutter_Method(GlassCase);
                    }
                }
            }
            if (AllowGlassCutterGrab2)
            {
                foreach (Prop GlassCase in GCSpawn.ToList())
                {
                    if (Groups.IS_PED_AT_DESTINATION(Game.Player.Character, GlassCase.Position, 2))
                    {
                        Glass_Cutter_Method2(GlassCase);
                    }
                }
            }
        }
        public void onShutdown(object sender, EventArgs e)
        {
            #region Vehicles
            #endregion
            #region Peds
            #endregion
            #region Props
            if (Bag != null)
            {
                Bag.Delete();
            }
            if (GlassCutter != null)
            {
                GlassCutter.Delete();
            }
            RemoveCases();
            #endregion
            #region Blips
            #endregion
            #region Cameras
            #endregion
            #region Pickups
            #endregion
            if (SoundId != 0)
            {
                Audio.StopSound(SoundId);
                Audio.ReleaseSound(SoundId);
            }
            if (cuttingsound != 0)
            {
                Audio.StopSound(cuttingsound);
                Audio.ReleaseSound(cuttingsound);
            }
            if (overheatsound != 0)
            {
                Audio.StopSound(overheatsound);
                Audio.ReleaseSound(overheatsound);
            }
            if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, plasmaeffects))
            {
                Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, plasmaeffects, 0);
            }
            if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, heateffects))
            {
                Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, heateffects, 0);
            }
        }

        public static void Glass_Cutter_Method(Prop GlassCase)
        {
            switch (ExtraLootSwitch)
            {
                case 0://start
                    {
                        if (Game.Player.Character.Position.DistanceTo(GlassCase.Position) < 2)
                        {
                            Screen.ShowHelpTextThisFrame("Press ~INPUT_CONTEXT~ to cut the glass.");
                            if (Game.IsControlJustPressed(GTA.Control.Context))
                            {
                                Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player, true);
                                Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_HEI4/DLCHEI4_GENERIC_01");
                                Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "DLC_HEI4/DLCHEI4_GENERIC_01", false, -1);
                                Wait(50);
                                Vector3 intinaloffsetpos = Function.Call<Vector3>(Hash.GET_ANIM_INITIAL_OFFSET_POSITION, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "enter", GlassCase.Position.X, GlassCase.Position.Y, GlassCase.Position.Z, GlassCase.Rotation.X, GlassCase.Rotation.Y, GlassCase.Rotation.Z, 0f, 2);
                                Vector3 intinaloffsetrot = Function.Call<Vector3>(Hash.GET_ANIM_INITIAL_OFFSET_ROTATION, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "enter", GlassCase.Position.X, GlassCase.Position.Y, GlassCase.Position.Z, GlassCase.Rotation.X, GlassCase.Rotation.Y, GlassCase.Rotation.Z, 0f, 2);

                                unsafe
                                {
                                    int Task5 = 0;
                                    Function.Call(Hash.OPEN_SEQUENCE_TASK, &Task5);
                                    if (Game.Player.Character.IsRunning || Game.Player.Character.IsSprinting)
                                    {
                                        Function.Call(Hash.TASK_FOLLOW_NAV_MESH_TO_COORD, 0, intinaloffsetpos.X, intinaloffsetpos.Y, intinaloffsetpos.Z, 1f, 5000, 0.1f, 512, intinaloffsetrot.Z);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.TASK_FOLLOW_NAV_MESH_TO_COORD, 0, intinaloffsetpos.X, intinaloffsetpos.Y, intinaloffsetpos.Z, 1f, 5000, 0.1f, 2, intinaloffsetrot.Z);
                                    }
                                    Function.Call(Hash.CLOSE_SEQUENCE_TASK, Task5);
                                    Function.Call(Hash.TASK_PERFORM_SEQUENCE, Game.Player.Character, Task5);
                                    Function.Call(Hash.CLEAR_SEQUENCE_TASK, &Task5);
                                }
                                Wait(500);
                                CutterTemp = 0;
                                CutterProgress = 0;
                                while (Function.Call<int>(Hash.GET_SEQUENCE_PROGRESS, Game.Player.Character) != -1)
                                {
                                    Wait(0);
                                }
                                Game.Player.Character.Weapons.Select(WeaponHash.Unarmed);
                                HudHandler.HudandRadar(false, false);
                                while (Bag == null)
                                {
                                    Bag = World.CreateProp(Main.RequestModel("hei_p_m_bag_var22_arm_s"), Game.Player.Character.Position, false, false);
                                    Wait(0);
                                }
                                while (GlassCutter == null)
                                {
                                    GlassCutter = World.CreateProp(Main.RequestModel("h4_prop_h4_cutter_01a"), Game.Player.Character.Position, false, false);
                                    Wait(0);
                                }
                                while (Main.CutsceneCam == null)
                                {
                                    Main.CutsceneCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_ANIMATED_CAMERA", 0);
                                    Wait(0);
                                }
                                GlassCutter.IsVisible = false;
                                Vector3 playerpos = GlassCase.Position;
                                Vector3 playerrot = GlassCase.Rotation;
                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, playerpos.X, playerpos.Y, playerpos.Z, playerrot.X, playerrot.Y, playerrot.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "enter", 0.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "enter_bag", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCutter, Main.TestCutsceneAnim, "enter_cutter", Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), 1000.0f, 0.0f, 0, 1000.0f);
                                Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, GlassCutter, Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(GlassCutter);
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCase, Main.TestCutsceneAnim, "enter_glass_display", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_CAM_ANIM, Main.CutsceneCam, Main.TestCutsceneAnim, "enter_cam", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                GlassCutter.IsVisible = true;
                                Main.GetPedDuffelBagOff(Game.Player.Character);
                                World.RenderingCamera = Main.CutsceneCam;
                                while (!Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), "enter", 3))
                                {
                                    Wait(0);
                                }
                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, playerpos.X, playerpos.Y, playerpos.Z, playerrot.X, playerrot.Y, playerrot.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "idle", 0.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "idle_bag", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCutter, Main.TestCutsceneAnim, "idle_cutter", Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), 1000.0f, 0.0f, 0, 1000.0f);
                                //Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, GlassCutter, Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                GlassCutter.Detach();
                                Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(GlassCutter);
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCase, Main.TestCutsceneAnim, "idle_glass_display", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_CAM_ANIM, Main.CutsceneCam, Main.TestCutsceneAnim, "idle_cam", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, true);
                                Wait(500);
                                ExtraLootSwitch = 1;
                            }
                        }
                    }
                    break;
                case 1://glass cutting
                    {
                        float math1 = (float)CutterTemp / 500.0f;
                        //UI.Notify("math1: " + math1);
                        float math2 = 1f - math1;
                        //UI.Notify("math2: " + math2);
                        //float shhealth = (float)currentstock / 100f;
                        float barperc = math1;
                        drawSprite5("timerbars", "all_black_bg", 0.89f, 0.970f, 0.210f, 0.04f, 255, 255, 255, 130);
                        if (CutterTemp > 400)
                        {
                            drawSprite5("timerbars", "damagebarfill_128", 0.94f, 0.970f, 0.08f, 0.03f, 255, 0, 0, 130);
                            drawSprite5("timerbars", "damagebarfill_128", progressxcoord(barperc), 0.970f, progresswidth(barperc), 0.03f, 255, 0, 0, 255);
                        }
                        else
                        {
                            drawSprite5("timerbars", "damagebarfill_128", 0.94f, 0.970f, 0.08f, 0.03f, 115, 115, 255, 130);
                            drawSprite5("timerbars", "damagebarfill_128", progressxcoord(barperc), 0.970f, progresswidth(barperc), 0.03f, 115, 115, 255, 255);
                        }
                        drawText("HEAT", 0.805f, 0.961f, 0.30f, 255, 255, 255);
                        float timecycheat = ((float)CutterTemp / 500.0f);
                        Function.Call(Hash.SET_TIMECYCLE_MODIFIER, "IslandGlassPlinthHeat");
                        Function.Call(Hash.SET_TIMECYCLE_MODIFIER_STRENGTH, timecycheat);
                        if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, heateffects))
                        {
                            Function.Call(Hash.SET_PARTICLE_FX_LOOPED_EVOLUTION, heateffects, "heat", ((float)CutterTemp / 500.0f), 0);
                        }
                        if (CutterTemp > 0)
                        {
                            CutterTemp -= 2;
                        }
                        if (Game.IsControlPressed(GTA.Control.Attack))
                        {
                            if (!Anims.IS_ENTITY_PLAYING_ANIM(Game.Player.Character, Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), "CUTTING_LOOP"))
                            {
                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, GlassCase.Position.X, GlassCase.Position.Y, GlassCase.Position.Z, GlassCase.Rotation.X, GlassCase.Rotation.Y, GlassCase.Rotation.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "CUTTING_LOOP", 6.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "CUTTING_LOOP_bag", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCutter, Main.TestCutsceneAnim, "CUTTING_LOOP_cutter", Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), 1000.0f, 0.0f, 0, 1000.0f);
                                //Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, GlassCutter, Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(GlassCutter);
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCase, Main.TestCutsceneAnim, "CUTTING_LOOP_glass_display", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_CAM_ANIM, Main.CutsceneCam, Main.TestCutsceneAnim, "CUTTING_LOOP_cam", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, true);
                                if (SoundId == 0)
                                {
                                    SoundId = Function.Call<int>(Hash.GET_SOUND_ID);
                                    Function.Call(Hash.PLAY_SOUND_FROM_ENTITY, SoundId, "StartCutting", GlassCutter, "DLC_H4_anims_glass_cutter_Sounds", true, 80);
                                }
                            }
                            if (!Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, plasmaeffects))
                            {
                                Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_ih_fin");
                                Function.Call(Hash.USE_PARTICLE_FX_ASSET, "scr_ih_fin");
                                plasmaeffects = Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_ON_ENTITY, "scr_ih_fin_glass_cutter_cut", GlassCutter, 0f, 0f, 0f, 0f, 0f, 0f, 1065353216, 0, 0, 0, 1065353216, 1065353216, 1065353216, 0);
                                Function.Call(Hash.SET_PARTICLE_FX_LOOPED_EVOLUTION, plasmaeffects, "power", 0f, 0);
                            }
                            else
                            {
                                Function.Call(Hash.SET_PARTICLE_FX_LOOPED_EVOLUTION, plasmaeffects, "power", 1f, 0);
                            }
                            if (!Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, heateffects))
                            {
                                Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_ih_fin");
                                Function.Call(Hash.USE_PARTICLE_FX_ASSET, "scr_ih_fin");
                                heateffects = Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_ON_ENTITY, "scr_ih_fin_glass_cutter_overheat", GlassCutter, 0f, 0f, 0f, 0f, 0f, 0f, 1065353216, 0, 0, 0, 1065353216, 1065353216, 1065353216, 0);
                                Function.Call(Hash.SET_PARTICLE_FX_LOOPED_EVOLUTION, heateffects, "heat", 0f, 0);
                            }
                            else
                            {
                                Function.Call(Hash.SET_PARTICLE_FX_LOOPED_EVOLUTION, heateffects, "heat", ((float)CutterTemp / 500.0f), 0);
                            }
                            CutterTemp += 4;
                            CutterProgress += 1;
                            if (CutterTemp >= 500)
                            {
                                if (!Anims.IS_ENTITY_PLAYING_ANIM(Game.Player.Character, Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), "OVERHEAT_REACT_01"))
                                {
                                    Audio.StopSound(SoundId);
                                    Audio.ReleaseSound(SoundId);
                                    SoundId = 0;
                                    if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, plasmaeffects))
                                    {
                                        Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, plasmaeffects, 0);
                                    }
                                    if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, heateffects))
                                    {
                                        Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, heateffects, 0);
                                    }
                                    Function.Call(Hash.PLAY_SOUND_FROM_ENTITY, 0, "Overheated", GlassCutter, "DLC_H4_anims_glass_cutter_Sounds", true, 50);
                                    Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, GlassCase.Position.X, GlassCase.Position.Y, GlassCase.Position.Z, GlassCase.Rotation.X, GlassCase.Rotation.Y, GlassCase.Rotation.Z, 2);
                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "OVERHEAT_REACT_01", 6.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "OVERHEAT_REACT_01_bag", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCutter, Main.TestCutsceneAnim, "OVERHEAT_REACT_01_cutter", Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), 1000.0f, 0.0f, 0, 1000.0f);
                                    //Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, GlassCutter, Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                    Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(GlassCutter);
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCase, Main.TestCutsceneAnim, "OVERHEAT_REACT_01_glass_display", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_CAM_ANIM, Main.CutsceneCam, Main.TestCutsceneAnim, "OVERHEAT_REACT_01_cam", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                    while (!Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), "OVERHEAT_REACT_01", 3))
                                    {
                                        Wait(0);
                                    }
                                    Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, GlassCase.Position.X, GlassCase.Position.Y, GlassCase.Position.Z, GlassCase.Rotation.X, GlassCase.Rotation.Y, GlassCase.Rotation.Z, 2);
                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "idle", 6.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "idle_bag", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCutter, Main.TestCutsceneAnim, "idle_cutter", Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), 1000.0f, 0.0f, 0, 1000.0f);
                                    //Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, GlassCutter, Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                    Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(GlassCutter);
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCase, Main.TestCutsceneAnim, "idle_glass_display", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_CAM_ANIM, Main.CutsceneCam, Main.TestCutsceneAnim, "idle_cam", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                    Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, true);
                                }
                            }
                            if (CutterProgress >= 400)
                            {
                                if (!Anims.IS_ENTITY_PLAYING_ANIM(Game.Player.Character, Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), "success"))
                                {
                                    //if (Main.DEBUG) Heist_Hud.TAKE_BAR_SHOW = true;
                                    foreach (Prop GlassCase2 in GC2Spawn.ToList())
                                    {
                                        if (Groups.IS_PED_AT_DESTINATION(Game.Player.Character, GlassCase2.Position, 2))
                                        {
                                            if (GlassCase2 != null)
                                            {
                                                if (GC2Spawn.Count > 0)
                                                {
                                                    GlassCase2.IsVisible = true;
                                                    GlassCase2.IsCollisionEnabled = true;
                                                    GlassCase2.MarkAsNoLongerNeeded();
                                                    GC2Spawn.Remove(GlassCase2);
                                                }
                                            }
                                        }
                                    }
                                    GlassCase.IsVisible = false;
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    Screen_Effects.StopAllAnimPostFX();
                                    Audio.StopSound(SoundId);
                                    Audio.ReleaseSound(SoundId);
                                    SoundId = 0;
                                    if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, plasmaeffects))
                                    {
                                        Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, plasmaeffects, 0);
                                    }
                                    if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, heateffects))
                                    {
                                        Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, heateffects, 0);
                                    }
                                    Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, GlassCase.Position.X, GlassCase.Position.Y, GlassCase.Position.Z, GlassCase.Rotation.X, GlassCase.Rotation.Y, GlassCase.Rotation.Z, 2);
                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "success", 6.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "success_bag", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCutter, Main.TestCutsceneAnim, "success_cutter", Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), 1000.0f, 0.0f, 0, 1000.0f);
                                    //Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, GlassCutter, Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                    Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(GlassCutter);
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCase, Main.TestCutsceneAnim, "success_glass_display", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_CAM_ANIM, Main.CutsceneCam, Main.TestCutsceneAnim, "success_cam", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                    Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, false);
                                    while (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) < 0.538f)
                                    {
                                        Wait(0);
                                    }
                                    foreach (Prop Loot in LootSpawn.ToList())
                                    {
                                        if (Groups.IS_PED_AT_DESTINATION(Game.Player.Character, Loot.Position, 2))
                                        {
                                            if (Loot != null)
                                            {
                                                if (LootSpawn.Count > 0)
                                                {
                                                    if (RETURN_LOOT_TYPE(Loot) == 0)
                                                    {
                                                        Heist_Hud.Actual_Take += 2090000;
                                                    }
                                                    if (RETURN_LOOT_TYPE(Loot) == 1)
                                                    {
                                                        Heist_Hud.Actual_Take += 1430000;
                                                    }
                                                    if (RETURN_LOOT_TYPE(Loot) == 2)
                                                    {
                                                        Heist_Hud.Actual_Take += 1100000;
                                                    }
                                                    if (RETURN_LOOT_TYPE(Loot) == 3)
                                                    {
                                                        Heist_Hud.Actual_Take += 990000;
                                                    }
                                                    Loot.Delete();
                                                    LootSpawn.Remove(Loot);
                                                }
                                            }
                                        }
                                    }
                                    foreach (Prop LootStand in LootStandSpawn.ToList())
                                    {
                                        if (Groups.IS_PED_AT_DESTINATION(Game.Player.Character, LootStand.Position, 2))
                                        {
                                            if (LootStand != null)
                                            {
                                                if (LootStandSpawn.Count > 0)
                                                {
                                                    LootStand.MarkAsNoLongerNeeded();
                                                    LootStandSpawn.Remove(LootStand);
                                                }
                                            }
                                        }
                                    }
                                    while (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) < 0.99f)
                                    {
                                        Wait(0);
                                    }
                                    GameplayCamera.RelativeHeading = Game.Player.Character.Heading - Game.Player.Character.Heading;
                                    Main.CutsceneCam.Delete();
                                    Main.CutsceneCam = null;
                                    Cameras.RENDER_SCRIPT_CAMS(false, true, 1000, false, false, false);
                                    if (GCSpawn.Count > 0)
                                    {
                                        if (GlassCase.AttachedBlip != null)
                                        {
                                            GlassCase.AttachedBlip.Delete();
                                        }
                                        GlassCase.Delete();
                                        GCSpawn.Remove(GlassCase);
                                    }
                                    if (GlassCutter != null)
                                    {
                                        GlassCutter.Delete();
                                        GlassCutter = null;
                                    }
                                    Main.GetPedDuffelBagOn(Game.Player.Character);
                                    if (Bag != null)
                                    {
                                        Bag.Delete();
                                        Bag = null;
                                    }
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_HEI4/DLCHEI4_GENERIC_01");
                                    Game.Player.Character.Task.ClearAll();
                                    HudHandler.HudandRadar(true, true);
                                    Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player, false);
                                    ExtraLootSwitch = 0;
                                }
                                //ExtraLootSwitch = 2;
                            }
                        }
                        else
                        {
                            Screen.ShowHelpTextThisFrame("Use ~INPUT_ATTACK~ to cut through the glass. Be careful or the cutter will overheat.", false);
                            if (!Anims.IS_ENTITY_PLAYING_ANIM(Game.Player.Character, Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), "idle"))
                            {
                                Audio.StopSound(SoundId);
                                Audio.ReleaseSound(SoundId);
                                SoundId = 0;
                                if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, plasmaeffects))
                                {
                                    Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, plasmaeffects, 0);
                                }
                                if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, heateffects))
                                {
                                    Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, heateffects, 0);
                                }
                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, GlassCase.Position.X, GlassCase.Position.Y, GlassCase.Position.Z, GlassCase.Rotation.X, GlassCase.Rotation.Y, GlassCase.Rotation.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "idle", 6.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "idle_bag", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCutter, Main.TestCutsceneAnim, "idle_cutter", Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), 1000.0f, 0.0f, 0, 1000.0f);
                                //Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, GlassCutter, Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(GlassCutter);
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCase, Main.TestCutsceneAnim, "idle_glass_display", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_CAM_ANIM, Main.CutsceneCam, Main.TestCutsceneAnim, "idle_cam", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, true);
                            }
                        }
                    }
                    break;
            }
        }
        public static void Glass_Cutter_Method2(Prop GlassCase)
        {
            switch (ExtraLootSwitch)
            {
                case 0://start
                    {
                        if (Game.Player.Character.Position.DistanceTo(GlassCase.Position) < 2)
                        {
                            Screen.ShowHelpTextThisFrame("Press ~INPUT_CONTEXT~ to cut the glass.");
                            if (Game.IsControlJustPressed(GTA.Control.Context))
                            {
                                Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player, true);
                                Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_HEI4/DLCHEI4_GENERIC_01");
                                Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "DLC_HEI4/DLCHEI4_GENERIC_01", false, -1);
                                Wait(50);
                                Vector3 intinaloffsetpos = Function.Call<Vector3>(Hash.GET_ANIM_INITIAL_OFFSET_POSITION, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "enter", GlassCase.Position.X, GlassCase.Position.Y, GlassCase.Position.Z, GlassCase.Rotation.X, GlassCase.Rotation.Y, GlassCase.Rotation.Z, 0f, 2);
                                Vector3 intinaloffsetrot = Function.Call<Vector3>(Hash.GET_ANIM_INITIAL_OFFSET_ROTATION, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "enter", GlassCase.Position.X, GlassCase.Position.Y, GlassCase.Position.Z, GlassCase.Rotation.X, GlassCase.Rotation.Y, GlassCase.Rotation.Z, 0f, 2);

                                unsafe
                                {
                                    int Task5 = 0;
                                    Function.Call(Hash.OPEN_SEQUENCE_TASK, &Task5);
                                    if (Game.Player.Character.IsRunning || Game.Player.Character.IsSprinting)
                                    {
                                        Function.Call(Hash.TASK_FOLLOW_NAV_MESH_TO_COORD, 0, intinaloffsetpos.X, intinaloffsetpos.Y, intinaloffsetpos.Z, 1f, 5000, 0.1f, 512, intinaloffsetrot.Z);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.TASK_FOLLOW_NAV_MESH_TO_COORD, 0, intinaloffsetpos.X, intinaloffsetpos.Y, intinaloffsetpos.Z, 1f, 5000, 0.1f, 2, intinaloffsetrot.Z);
                                    }
                                    Function.Call(Hash.CLOSE_SEQUENCE_TASK, Task5);
                                    Function.Call(Hash.TASK_PERFORM_SEQUENCE, Game.Player.Character, Task5);
                                    Function.Call(Hash.CLEAR_SEQUENCE_TASK, &Task5);
                                }
                                Wait(500);
                                CutterTemp = 0;
                                CutterProgress = 0;
                                while (Function.Call<int>(Hash.GET_SEQUENCE_PROGRESS, Game.Player.Character) != -1)
                                {
                                    Wait(0);
                                }
                                Game.Player.Character.Weapons.Select(WeaponHash.Unarmed);
                                HudHandler.HudandRadar(false, false);
                                while (Bag == null)
                                {
                                    Bag = World.CreateProp(Main.RequestModel("hei_p_m_bag_var22_arm_s"), Game.Player.Character.Position, false, false);
                                    Wait(0);
                                }
                                while (GlassCutter == null)
                                {
                                    GlassCutter = World.CreateProp(Main.RequestModel("h4_prop_h4_cutter_01a"), Game.Player.Character.Position, false, false);
                                    Wait(0);
                                }
                                while (Main.CutsceneCam == null)
                                {
                                    Main.CutsceneCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_ANIMATED_CAMERA", 0);
                                    Wait(0);
                                }
                                GlassCutter.IsVisible = false;
                                Vector3 playerpos = GlassCase.Position;
                                Vector3 playerrot = GlassCase.Rotation;
                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, playerpos.X, playerpos.Y, playerpos.Z, playerrot.X, playerrot.Y, playerrot.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "enter", 0.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "enter_bag", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCutter, Main.TestCutsceneAnim, "enter_cutter", Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), 1000.0f, 0.0f, 0, 1000.0f);
                                Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, GlassCutter, Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(GlassCutter);
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCase, Main.TestCutsceneAnim, "enter_glass_display", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_CAM_ANIM, Main.CutsceneCam, Main.TestCutsceneAnim, "enter_cam", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                GlassCutter.IsVisible = true;
                                Main.GetPedDuffelBagOff(Game.Player.Character);
                                World.RenderingCamera = Main.CutsceneCam;
                                while (!Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), "enter", 3))
                                {
                                    Wait(0);
                                }
                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, playerpos.X, playerpos.Y, playerpos.Z, playerrot.X, playerrot.Y, playerrot.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "idle", 0.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "idle_bag", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCutter, Main.TestCutsceneAnim, "idle_cutter", Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), 1000.0f, 0.0f, 0, 1000.0f);
                                //Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, GlassCutter, Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                GlassCutter.Detach();
                                Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(GlassCutter);
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCase, Main.TestCutsceneAnim, "idle_glass_display", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_CAM_ANIM, Main.CutsceneCam, Main.TestCutsceneAnim, "idle_cam", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, true);
                                Wait(500);
                                ExtraLootSwitch = 1;
                            }
                        }
                    }
                    break;
                case 1://glass cutting
                    {
                        float math1 = (float)CutterTemp / 500.0f;
                        //UI.Notify("math1: " + math1);
                        float math2 = 1f - math1;
                        //UI.Notify("math2: " + math2);
                        //float shhealth = (float)currentstock / 100f;
                        float barperc = math1;
                        drawSprite5("timerbars", "all_black_bg", 0.89f, 0.970f, 0.210f, 0.04f, 255, 255, 255, 130);
                        if (CutterTemp > 400)
                        {
                            drawSprite5("timerbars", "damagebarfill_128", 0.94f, 0.970f, 0.08f, 0.03f, 255, 0, 0, 130);
                            drawSprite5("timerbars", "damagebarfill_128", progressxcoord(barperc), 0.970f, progresswidth(barperc), 0.03f, 255, 0, 0, 255);
                        }
                        else
                        {
                            drawSprite5("timerbars", "damagebarfill_128", 0.94f, 0.970f, 0.08f, 0.03f, 115, 115, 255, 130);
                            drawSprite5("timerbars", "damagebarfill_128", progressxcoord(barperc), 0.970f, progresswidth(barperc), 0.03f, 115, 115, 255, 255);
                        }
                        drawText("HEAT", 0.805f, 0.961f, 0.30f, 255, 255, 255);
                        float timecycheat = ((float)CutterTemp / 500.0f);
                        Function.Call(Hash.SET_TIMECYCLE_MODIFIER, "IslandGlassPlinthHeat");
                        Function.Call(Hash.SET_TIMECYCLE_MODIFIER_STRENGTH, timecycheat);
                        if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, heateffects))
                        {
                            Function.Call(Hash.SET_PARTICLE_FX_LOOPED_EVOLUTION, heateffects, "heat", ((float)CutterTemp / 500.0f), 0);
                        }
                        if (CutterTemp > 0)
                        {
                            CutterTemp -= 2;
                        }
                        if (Game.IsControlPressed(GTA.Control.Attack))
                        {
                            if (!Anims.IS_ENTITY_PLAYING_ANIM(Game.Player.Character, Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), "CUTTING_LOOP"))
                            {
                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, GlassCase.Position.X, GlassCase.Position.Y, GlassCase.Position.Z, GlassCase.Rotation.X, GlassCase.Rotation.Y, GlassCase.Rotation.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "CUTTING_LOOP", 6.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "CUTTING_LOOP_bag", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCutter, Main.TestCutsceneAnim, "CUTTING_LOOP_cutter", Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), 1000.0f, 0.0f, 0, 1000.0f);
                                //Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, GlassCutter, Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(GlassCutter);
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCase, Main.TestCutsceneAnim, "CUTTING_LOOP_glass_display", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_CAM_ANIM, Main.CutsceneCam, Main.TestCutsceneAnim, "CUTTING_LOOP_cam", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, true);
                                if (SoundId == 0)
                                {
                                    SoundId = Function.Call<int>(Hash.GET_SOUND_ID);
                                    Function.Call(Hash.PLAY_SOUND_FROM_ENTITY, SoundId, "StartCutting", GlassCutter, "DLC_H4_anims_glass_cutter_Sounds", true, 80);
                                }
                            }
                            if (!Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, plasmaeffects))
                            {
                                Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_ih_fin");
                                Function.Call(Hash.USE_PARTICLE_FX_ASSET, "scr_ih_fin");
                                plasmaeffects = Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_ON_ENTITY, "scr_ih_fin_glass_cutter_cut", GlassCutter, 0f, 0f, 0f, 0f, 0f, 0f, 1065353216, 0, 0, 0, 1065353216, 1065353216, 1065353216, 0);
                                Function.Call(Hash.SET_PARTICLE_FX_LOOPED_EVOLUTION, plasmaeffects, "power", 0f, 0);
                            }
                            else
                            {
                                Function.Call(Hash.SET_PARTICLE_FX_LOOPED_EVOLUTION, plasmaeffects, "power", 1f, 0);
                            }
                            if (!Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, heateffects))
                            {
                                Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_ih_fin");
                                Function.Call(Hash.USE_PARTICLE_FX_ASSET, "scr_ih_fin");
                                heateffects = Function.Call<int>(Hash.START_PARTICLE_FX_LOOPED_ON_ENTITY, "scr_ih_fin_glass_cutter_overheat", GlassCutter, 0f, 0f, 0f, 0f, 0f, 0f, 1065353216, 0, 0, 0, 1065353216, 1065353216, 1065353216, 0);
                                Function.Call(Hash.SET_PARTICLE_FX_LOOPED_EVOLUTION, heateffects, "heat", 0f, 0);
                            }
                            else
                            {
                                Function.Call(Hash.SET_PARTICLE_FX_LOOPED_EVOLUTION, heateffects, "heat", ((float)CutterTemp / 500.0f), 0);
                            }
                            CutterTemp += 4;
                            CutterProgress += 1;
                            if (CutterTemp >= 500)
                            {
                                if (!Anims.IS_ENTITY_PLAYING_ANIM(Game.Player.Character, Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), "OVERHEAT_REACT_01"))
                                {
                                    Audio.StopSound(SoundId);
                                    Audio.ReleaseSound(SoundId);
                                    SoundId = 0;
                                    if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, plasmaeffects))
                                    {
                                        Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, plasmaeffects, 0);
                                    }
                                    if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, heateffects))
                                    {
                                        Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, heateffects, 0);
                                    }
                                    Function.Call(Hash.PLAY_SOUND_FROM_ENTITY, 0, "Overheated", GlassCutter, "DLC_H4_anims_glass_cutter_Sounds", true, 50);
                                    Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, GlassCase.Position.X, GlassCase.Position.Y, GlassCase.Position.Z, GlassCase.Rotation.X, GlassCase.Rotation.Y, GlassCase.Rotation.Z, 2);
                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "OVERHEAT_REACT_01", 6.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "OVERHEAT_REACT_01_bag", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCutter, Main.TestCutsceneAnim, "OVERHEAT_REACT_01_cutter", Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), 1000.0f, 0.0f, 0, 1000.0f);
                                    //Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, GlassCutter, Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                    Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(GlassCutter);
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCase, Main.TestCutsceneAnim, "OVERHEAT_REACT_01_glass_display", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_CAM_ANIM, Main.CutsceneCam, Main.TestCutsceneAnim, "OVERHEAT_REACT_01_cam", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                    while (!Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), "OVERHEAT_REACT_01", 3))
                                    {
                                        Wait(0);
                                    }
                                    Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, GlassCase.Position.X, GlassCase.Position.Y, GlassCase.Position.Z, GlassCase.Rotation.X, GlassCase.Rotation.Y, GlassCase.Rotation.Z, 2);
                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "idle", 6.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "idle_bag", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCutter, Main.TestCutsceneAnim, "idle_cutter", Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), 1000.0f, 0.0f, 0, 1000.0f);
                                    //Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, GlassCutter, Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                    Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(GlassCutter);
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCase, Main.TestCutsceneAnim, "idle_glass_display", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_CAM_ANIM, Main.CutsceneCam, Main.TestCutsceneAnim, "idle_cam", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                    Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, true);
                                }
                            }
                            if (CutterProgress >= 400)
                            {
                                if (!Anims.IS_ENTITY_PLAYING_ANIM(Game.Player.Character, Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), "success"))
                                {
                                    //if (Main.DEBUG) Heist_Hud.TAKE_BAR_SHOW = true;
                                    foreach (Prop GlassCase2 in GC2Spawn.ToList())
                                    {
                                        if (Groups.IS_PED_AT_DESTINATION(Game.Player.Character, GlassCase2.Position, 2))
                                        {
                                            if (GlassCase2 != null)
                                            {
                                                if (GC2Spawn.Count > 0)
                                                {
                                                    GlassCase2.IsVisible = true;
                                                    GlassCase2.IsCollisionEnabled = true;
                                                    GlassCase2.MarkAsNoLongerNeeded();
                                                    GC2Spawn.Remove(GlassCase2);
                                                }
                                            }
                                        }
                                    }
                                    GlassCase.IsVisible = false;
                                    Screen_Effects.CLEAR_TIMECYCLE_MODIFIER();
                                    Screen_Effects.StopAllAnimPostFX();
                                    Audio.StopSound(SoundId);
                                    Audio.ReleaseSound(SoundId);
                                    SoundId = 0;
                                    if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, plasmaeffects))
                                    {
                                        Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, plasmaeffects, 0);
                                    }
                                    if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, heateffects))
                                    {
                                        Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, heateffects, 0);
                                    }
                                    Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, GlassCase.Position.X, GlassCase.Position.Y, GlassCase.Position.Z, GlassCase.Rotation.X, GlassCase.Rotation.Y, GlassCase.Rotation.Z, 2);
                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "success", 6.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "success_bag", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCutter, Main.TestCutsceneAnim, "success_cutter", Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), 1000.0f, 0.0f, 0, 1000.0f);
                                    //Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, GlassCutter, Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                    Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(GlassCutter);
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCase, Main.TestCutsceneAnim, "success_glass_display", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_CAM_ANIM, Main.CutsceneCam, Main.TestCutsceneAnim, "success_cam", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                    Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, false);
                                    while (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) < 0.538f)
                                    {
                                        Wait(0);
                                    }
                                    foreach (Prop Loot in LootSpawn.ToList())
                                    {
                                        if (Groups.IS_PED_AT_DESTINATION(Game.Player.Character, Loot.Position, 2))
                                        {
                                            if (Loot != null)
                                            {
                                                if (LootSpawn.Count > 0)
                                                {
                                                    Heist_Hud.Actual_Take += TotalAmount / TotalGlass;
                                                    Loot.Delete();
                                                    LootSpawn.Remove(Loot);
                                                }
                                            }
                                        }
                                    }
                                    foreach (Prop LootStand in LootStandSpawn.ToList())
                                    {
                                        if (Groups.IS_PED_AT_DESTINATION(Game.Player.Character, LootStand.Position, 2))
                                        {
                                            if (LootStand != null)
                                            {
                                                if (LootStandSpawn.Count > 0)
                                                {
                                                    LootStand.MarkAsNoLongerNeeded();
                                                    LootStandSpawn.Remove(LootStand);
                                                }
                                            }
                                        }
                                    }
                                    while (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) < 0.99f)
                                    {
                                        Wait(0);
                                    }
                                    GameplayCamera.RelativeHeading = Game.Player.Character.Heading - Game.Player.Character.Heading;
                                    Main.CutsceneCam.Delete();
                                    Main.CutsceneCam = null;
                                    Cameras.RENDER_SCRIPT_CAMS(false, true, 1000, false, false, false);
                                    if (GCSpawn.Count > 0)
                                    {
                                        if (GlassCase.AttachedBlip != null)
                                        {
                                            GlassCase.AttachedBlip.Delete();
                                        }
                                        GlassCase.Delete();
                                        GCSpawn.Remove(GlassCase);
                                    }
                                    if (GlassCutter != null)
                                    {
                                        GlassCutter.Delete();
                                        GlassCutter = null;
                                    }
                                    Main.GetPedDuffelBagOn(Game.Player.Character);
                                    if (Bag != null)
                                    {
                                        Bag.Delete();
                                        Bag = null;
                                    }
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_HEI4/DLCHEI4_GENERIC_01");
                                    Game.Player.Character.Task.ClearAll();
                                    HudHandler.HudandRadar(true, true);
                                    Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player, false);
                                    ExtraLootSwitch = 0;
                                }
                                //ExtraLootSwitch = 2;
                            }
                        }
                        else
                        {
                            Screen.ShowHelpTextThisFrame("Use ~INPUT_ATTACK~ to cut through the glass. Be careful or the cutter will overheat.", false);
                            if (!Anims.IS_ENTITY_PLAYING_ANIM(Game.Player.Character, Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), "idle"))
                            {
                                Audio.StopSound(SoundId);
                                Audio.ReleaseSound(SoundId);
                                SoundId = 0;
                                if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, plasmaeffects))
                                {
                                    Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, plasmaeffects, 0);
                                }
                                if (Function.Call<bool>(Hash.DOES_PARTICLE_FX_LOOPED_EXIST, heateffects))
                                {
                                    Function.Call(Hash.STOP_PARTICLE_FX_LOOPED, heateffects, 0);
                                }
                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, GlassCase.Position.X, GlassCase.Position.Y, GlassCase.Position.Z, GlassCase.Rotation.X, GlassCase.Rotation.Y, GlassCase.Rotation.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", "idle", 6.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "idle_bag", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCutter, Main.TestCutsceneAnim, "idle_cutter", Main.LoadDict("ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@"), 1000.0f, 0.0f, 0, 1000.0f);
                                //Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, GlassCutter, Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(GlassCutter);
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, GlassCase, Main.TestCutsceneAnim, "idle_glass_display", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@", 1000.0f, 0.0f, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_CAM_ANIM, Main.CutsceneCam, Main.TestCutsceneAnim, "idle_cam", "ANIM@SCRIPTED@HEIST@IG16_GLASS_CUT@MALE@");
                                Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, true);
                            }
                        }
                    }
                    break;
            }
        }
        public static void RemoveCases()
        {
            if (GCSpawn.Count > 0)
            {
                foreach (Prop Case in GCSpawn.ToList())
                {
                    if (Case != null)
                    {
                        Case.Delete();
                        GCSpawn.Remove(Case);
                    }
                }
            }
            if (GC2Spawn.Count > 0)
            {
                foreach (Prop Case2 in GC2Spawn.ToList())
                {
                    if (Case2 != null)
                    {
                        Case2.Delete();
                        GC2Spawn.Remove(Case2);
                    }
                }
            }
            if (LootSpawn.Count > 0)
            {
                foreach (Prop Loot in LootSpawn.ToList())
                {
                    if (Loot != null)
                    {
                        Loot.Delete();
                        LootSpawn.Remove(Loot);
                    }
                }
            }
            if (LootStandSpawn.Count > 0)
            {
                foreach (Prop LootStand in LootStandSpawn.ToList())
                {
                    if (LootStand != null)
                    {
                        LootStand.Delete();
                        LootStandSpawn.Remove(LootStand);
                    }
                }
            }
        }
        public static void BlipUpLockBoxs()
        {
            if (GCSpawn.Count > 0)
            {
                foreach (Prop GlassCase in GCSpawn)
                {
                    if (GlassCase != null)
                    {
                        if (GlassCase.AttachedBlip == null)
                        {
                            GlassCase.AddBlip();
                        }
                        if (GlassCase.AttachedBlip != null)
                        {
                            GlassCase.IsInvincible = true;
                            GlassCase.IsPositionFrozen = true;
                            GlassCase.AttachedBlip.Sprite = (BlipSprite)1;
                            GlassCase.AttachedBlip.Color = BlipColor.Green;
                            GlassCase.AttachedBlip.Name = "Glass Display";
                            GlassCase.AttachedBlip.IsShortRange = true;
                        }
                    }
                }
            }
        }
        public static Prop RandomCase(Vector3 pposition, float HHeading)//Random Loot with Glass Display
        {
            Prop returnedprop;
            Model Casemodel = new Model("h4_prop_h4_glass_disp_01a");
            returnedprop = World.CreatePropNoOffset(Casemodel, new Vector3(0, 0, 0), false);
            returnedprop.MarkAsNoLongerNeeded();
            if (returnedprop != null)
            {
                returnedprop.Delete();
            }

            Random random = new Random();
            string[] tequilas = { "h4_prop_h4_t_bottle_01a", "h4_prop_h4_t_bottle_02a", "h4_prop_h4_t_bottle_02b" };
            int randlootteq = random.Next(tequilas.Length);
            int randlootchoice = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 1, 5);
            switch (randlootchoice)
            {
                case 1:// panther loot
                    {
                        Casemodel = new Model("h4_prop_h4_glass_disp_01a");
                        Casemodel.Request(10000);
                        if (Casemodel.IsValid && Casemodel.IsInCdImage)
                        {
                            while (!Casemodel.IsLoaded) Script.Wait(50);
                            returnedprop = World.CreateProp(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false, false);
                            if (returnedprop != null) Glass_Cutters.GCSpawn.Add(returnedprop);
                            Prop CaseModel2 = World.CreateProp(Main.RequestModel("h4_prop_h4_glass_disp_01b"), pposition, false, false);
                            CaseModel2.IsVisible = false;
                            CaseModel2.Heading = HHeading;
                            if (CaseModel2 != null) GC2Spawn.Add(CaseModel2);
                            Prop lootpanther = World.CreateProp(Main.RequestModel("h4_prop_h4_art_pant_01a"), new Vector3(pposition.X, pposition.Y, pposition.Z + 1f), false, false);
                            lootpanther.Heading = HHeading;
                            if (lootpanther != null) LootSpawn.Add(lootpanther);
                            return returnedprop;
                        }
                        break;
                    }
                case 2:// diamond loot
                    {
                        Casemodel = new Model("h4_prop_h4_glass_disp_01a");
                        Casemodel.Request(10000);
                        if (Casemodel.IsValid && Casemodel.IsInCdImage)
                        {
                            while (!Casemodel.IsLoaded) Script.Wait(50);
                            returnedprop = World.CreateProp(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false, false);
                            if (returnedprop != null) Glass_Cutters.GCSpawn.Add(returnedprop);
                            Prop CaseModel2 = World.CreateProp(Main.RequestModel("h4_prop_h4_glass_disp_01b"), pposition, false, false);
                            CaseModel2.IsVisible = false;
                            CaseModel2.Heading = HHeading;
                            if (CaseModel2 != null) GC2Spawn.Add(CaseModel2);
                            Prop lootdiamond = World.CreateProp(Main.RequestModel("h4_prop_h4_diamond_01a"), new Vector3(pposition.X, pposition.Y, pposition.Z + 1.2f), false, false);
                            lootdiamond.Heading = HHeading;
                            if (lootdiamond != null) LootSpawn.Add(lootdiamond);
                            Prop lootstanddiamond = World.CreateProp(Main.RequestModel("h4_prop_h4_diamond_disp_01a"), new Vector3(pposition.X, pposition.Y, pposition.Z + 1f), false, false);
                            lootstanddiamond.Heading = HHeading;
                            if (lootstanddiamond != null) LootStandSpawn.Add(lootstanddiamond);
                            return returnedprop;
                        }
                        break;
                    }
                case 3:// necklace loot
                    {
                        Casemodel = new Model("h4_prop_h4_glass_disp_01a");
                        Casemodel.Request(10000);
                        if (Casemodel.IsValid && Casemodel.IsInCdImage)
                        {
                            while (!Casemodel.IsLoaded) Script.Wait(50);
                            returnedprop = World.CreateProp(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false, false);
                            if (returnedprop != null) Glass_Cutters.GCSpawn.Add(returnedprop);
                            Prop CaseModel2 = World.CreateProp(Main.RequestModel("h4_prop_h4_glass_disp_01b"), pposition, false, false);
                            CaseModel2.IsVisible = false;
                            CaseModel2.Heading = HHeading;
                            if (CaseModel2 != null) GC2Spawn.Add(CaseModel2);
                            Prop lootnecklace = World.CreateProp(Main.RequestModel("h4_prop_h4_necklace_01a"), new Vector3(pposition.X, pposition.Y, pposition.Z + 1.2f), false, false);
                            lootnecklace.Heading = HHeading;
                            if (lootnecklace != null) LootSpawn.Add(lootnecklace);
                            Prop lootstandnecklace = World.CreateProp(Main.RequestModel("h4_prop_h4_neck_disp_01a"), new Vector3(pposition.X, pposition.Y, pposition.Z + 1f), false, false);
                            lootstandnecklace.Heading = HHeading;
                            if (lootstandnecklace != null) LootStandSpawn.Add(lootstandnecklace);
                            return returnedprop;
                        }
                        break;
                    }
                case 4:// tequila loot
                    {
                        Casemodel = new Model("h4_prop_h4_glass_disp_01a");
                        Casemodel.Request(10000);
                        if (Casemodel.IsValid && Casemodel.IsInCdImage)
                        {
                            while (!Casemodel.IsLoaded) Script.Wait(50);
                            returnedprop = World.CreateProp(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false, false);
                            if (returnedprop != null) Glass_Cutters.GCSpawn.Add(returnedprop);
                            Prop CaseModel2 = World.CreateProp(Main.RequestModel("h4_prop_h4_glass_disp_01b"), pposition, false, false);
                            CaseModel2.IsVisible = false;
                            CaseModel2.Heading = HHeading;
                            if (CaseModel2 != null) GC2Spawn.Add(CaseModel2);
                            Prop lootpanther = World.CreateProp(Main.RequestModel(tequilas[randlootteq]), new Vector3(pposition.X, pposition.Y, pposition.Z + 1f), false, false);
                            lootpanther.Heading = HHeading;
                            if (lootpanther != null) LootSpawn.Add(lootpanther);
                            return returnedprop;
                        }
                        break;
                    }
                default://default is panther
                    {
                        Casemodel = new Model("h4_prop_h4_glass_disp_01a");
                        Casemodel.Request(10000);
                        if (Casemodel.IsValid && Casemodel.IsInCdImage)
                        {
                            while (!Casemodel.IsLoaded) Script.Wait(50);
                            returnedprop = World.CreateProp(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false, false);
                            if (returnedprop != null) Glass_Cutters.GCSpawn.Add(returnedprop);
                            Prop CaseModel2 = World.CreateProp(Main.RequestModel("h4_prop_h4_glass_disp_01b"), pposition, false, false);
                            CaseModel2.IsVisible = false;
                            CaseModel2.Heading = HHeading;
                            if (CaseModel2 != null) GC2Spawn.Add(CaseModel2);
                            Prop lootpanther = World.CreateProp(Main.RequestModel("h4_prop_h4_art_pant_01a"), new Vector3(pposition.X, pposition.Y, pposition.Z + 1f), false, false);
                            lootpanther.Heading = HHeading;
                            if (lootpanther != null) LootSpawn.Add(lootpanther);
                            return returnedprop;
                        }
                        break;
                    }
            }
            return returnedprop;
        }
        public static Prop PantherCase(Vector3 pposition, float HHeading)//Panther Loot with Glass Display
        {
            Prop returnedprop;
            Model Casemodel = new Model("h4_prop_h4_glass_disp_01a");
            returnedprop = World.CreatePropNoOffset(Casemodel, new Vector3(0, 0, 0), false);
            returnedprop.MarkAsNoLongerNeeded();
            if (returnedprop != null)
            {
                returnedprop.Delete();
            }

            //Random random = new Random();
            //int randlootchoice = random.Next(1, 3);
            int randlootchoice = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 1, 2);
            switch (randlootchoice)
            {
                case 1:// panther loot
                    {
                        Casemodel = new Model("h4_prop_h4_glass_disp_01a");
                        Casemodel.Request(10000);
                        if (Casemodel.IsValid && Casemodel.IsInCdImage)
                        {
                            while (!Casemodel.IsLoaded) Script.Wait(50);
                            returnedprop = World.CreateProp(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false, false);
                            if (returnedprop != null) Glass_Cutters.GCSpawn.Add(returnedprop);
                            Prop CaseModel2 = World.CreateProp(Main.RequestModel("h4_prop_h4_glass_disp_01b"), pposition, false, false);
                            CaseModel2.IsVisible = false;
                            CaseModel2.Heading = HHeading;
                            if (CaseModel2 != null) GC2Spawn.Add(CaseModel2);
                            Prop lootpanther = World.CreateProp(Main.RequestModel("h4_prop_h4_art_pant_01a"), new Vector3(pposition.X, pposition.Y, pposition.Z + 1f), false, false);
                            lootpanther.Heading = HHeading;
                            if (lootpanther != null) LootSpawn.Add(lootpanther);
                            return returnedprop;
                        }
                        break;
                    }
                default://default is panther
                    {
                        Casemodel = new Model("h4_prop_h4_glass_disp_01a");
                        Casemodel.Request(10000);
                        if (Casemodel.IsValid && Casemodel.IsInCdImage)
                        {
                            while (!Casemodel.IsLoaded) Script.Wait(50);
                            returnedprop = World.CreateProp(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false, false);
                            if (returnedprop != null) Glass_Cutters.GCSpawn.Add(returnedprop);
                            Prop CaseModel2 = World.CreateProp(Main.RequestModel("h4_prop_h4_glass_disp_01b"), pposition, false, false);
                            CaseModel2.IsVisible = false;
                            CaseModel2.Heading = HHeading;
                            if (CaseModel2 != null) GC2Spawn.Add(CaseModel2);
                            Prop lootpanther = World.CreateProp(Main.RequestModel("h4_prop_h4_art_pant_01a"), new Vector3(pposition.X, pposition.Y, pposition.Z + 1f), false, false);
                            lootpanther.Heading = HHeading;
                            if (lootpanther != null) LootSpawn.Add(lootpanther);
                            return returnedprop;
                        }
                        break;
                    }
            }
            return returnedprop;
        }
        public static Prop DiamondCase(Vector3 pposition, float HHeading)//Diamond Loot with Glass Display
        {
            Prop returnedprop;
            Model Casemodel = new Model("h4_prop_h4_glass_disp_01a");
            returnedprop = World.CreatePropNoOffset(Casemodel, new Vector3(0, 0, 0), false);
            returnedprop.MarkAsNoLongerNeeded();
            if (returnedprop != null)
            {
                returnedprop.Delete();
            }

            //Random random = new Random();
            //int randlootchoice = random.Next(1, 3);
            int randlootchoice = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 1, 2);
            switch (randlootchoice)
            {
                case 1:// Diamond loot
                    {
                        Casemodel = new Model("h4_prop_h4_glass_disp_01a");
                        Casemodel.Request(10000);
                        if (Casemodel.IsValid && Casemodel.IsInCdImage)
                        {
                            while (!Casemodel.IsLoaded) Script.Wait(50);
                            returnedprop = World.CreateProp(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false, false);
                            if (returnedprop != null) Glass_Cutters.GCSpawn.Add(returnedprop);
                            Prop CaseModel2 = World.CreateProp(Main.RequestModel("h4_prop_h4_glass_disp_01b"), pposition, false, false);
                            CaseModel2.IsVisible = false;
                            CaseModel2.Heading = HHeading;
                            if (CaseModel2 != null) GC2Spawn.Add(CaseModel2);
                            Prop lootdiamond = World.CreateProp(Main.RequestModel("h4_prop_h4_diamond_01a"), new Vector3(pposition.X, pposition.Y, pposition.Z + 1.2f), false, false);
                            lootdiamond.Heading = HHeading;
                            if (lootdiamond != null) LootSpawn.Add(lootdiamond);
                            Prop lootstanddiamond = World.CreateProp(Main.RequestModel("h4_prop_h4_diamond_disp_01a"), new Vector3(pposition.X, pposition.Y, pposition.Z + 1f), false, false);
                            lootstanddiamond.Heading = HHeading;
                            if (lootstanddiamond != null) LootStandSpawn.Add(lootstanddiamond);
                            return returnedprop;
                        }
                        break;
                    }
                default://default is Diamond
                    {
                        Casemodel = new Model("h4_prop_h4_glass_disp_01a");
                        Casemodel.Request(10000);
                        if (Casemodel.IsValid && Casemodel.IsInCdImage)
                        {
                            while (!Casemodel.IsLoaded) Script.Wait(50);
                            returnedprop = World.CreateProp(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false, false);
                            if (returnedprop != null) Glass_Cutters.GCSpawn.Add(returnedprop);
                            Prop CaseModel2 = World.CreateProp(Main.RequestModel("h4_prop_h4_glass_disp_01b"), pposition, false, false);
                            CaseModel2.IsVisible = false;
                            CaseModel2.Heading = HHeading;
                            if (CaseModel2 != null) GC2Spawn.Add(CaseModel2);
                            Prop lootdiamond = World.CreateProp(Main.RequestModel("h4_prop_h4_diamond_01a"), new Vector3(pposition.X, pposition.Y, pposition.Z + 1.2f), false, false);
                            lootdiamond.Heading = HHeading;
                            if (lootdiamond != null) LootSpawn.Add(lootdiamond);
                            Prop lootstanddiamond = World.CreateProp(Main.RequestModel("h4_prop_h4_diamond_disp_01a"), new Vector3(pposition.X, pposition.Y, pposition.Z + 1f), false, false);
                            lootstanddiamond.Heading = HHeading;
                            if (lootstanddiamond != null) LootStandSpawn.Add(lootstanddiamond);
                            return returnedprop;
                        }
                        break;
                    }
            }
            return returnedprop;
        }
        public static Prop NecklaceCase(Vector3 pposition, float HHeading)//Necklace Loot with Glass Display
        {
            Prop returnedprop;
            Model Casemodel = new Model("h4_prop_h4_glass_disp_01a");
            returnedprop = World.CreatePropNoOffset(Casemodel, new Vector3(0, 0, 0), false);
            returnedprop.MarkAsNoLongerNeeded();
            if (returnedprop != null)
            {
                returnedprop.Delete();
            }

            //Random random = new Random();
            //int randlootchoice = random.Next(1, 3);
            int randlootchoice = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 1, 2);
            switch (randlootchoice)
            {
                case 1:// necklace loot
                    {
                        Casemodel = new Model("h4_prop_h4_glass_disp_01a");
                        Casemodel.Request(10000);
                        if (Casemodel.IsValid && Casemodel.IsInCdImage)
                        {
                            while (!Casemodel.IsLoaded) Script.Wait(50);
                            returnedprop = World.CreateProp(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false, false);
                            if (returnedprop != null) Glass_Cutters.GCSpawn.Add(returnedprop);
                            Prop CaseModel2 = World.CreateProp(Main.RequestModel("h4_prop_h4_glass_disp_01b"), pposition, false, false);
                            CaseModel2.IsVisible = false;
                            CaseModel2.Heading = HHeading;
                            if (CaseModel2 != null) GC2Spawn.Add(CaseModel2);
                            Prop lootnecklace = World.CreateProp(Main.RequestModel("h4_prop_h4_necklace_01a"), new Vector3(pposition.X, pposition.Y, pposition.Z + 1.2f), false, false);
                            lootnecklace.Heading = HHeading;
                            if (lootnecklace != null) LootSpawn.Add(lootnecklace);
                            Prop lootstandnecklace = World.CreateProp(Main.RequestModel("h4_prop_h4_neck_disp_01a"), new Vector3(pposition.X, pposition.Y, pposition.Z + 1f), false, false);
                            lootstandnecklace.Heading = HHeading;
                            if (lootstandnecklace != null) LootStandSpawn.Add(lootstandnecklace);
                            return returnedprop;
                        }
                        break;
                    }
                default://default is necklace
                    {
                        Casemodel = new Model("h4_prop_h4_glass_disp_01a");
                        Casemodel.Request(10000);
                        if (Casemodel.IsValid && Casemodel.IsInCdImage)
                        {
                            while (!Casemodel.IsLoaded) Script.Wait(50);
                            returnedprop = World.CreateProp(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false, false);
                            if (returnedprop != null) Glass_Cutters.GCSpawn.Add(returnedprop);
                            Prop CaseModel2 = World.CreateProp(Main.RequestModel("h4_prop_h4_glass_disp_01b"), pposition, false, false);
                            CaseModel2.IsVisible = false;
                            CaseModel2.Heading = HHeading;
                            if (CaseModel2 != null) GC2Spawn.Add(CaseModel2);
                            Prop lootnecklace = World.CreateProp(Main.RequestModel("h4_prop_h4_necklace_01a"), new Vector3(pposition.X, pposition.Y, pposition.Z + 1.2f), false, false);
                            lootnecklace.Heading = HHeading;
                            if (lootnecklace != null) LootSpawn.Add(lootnecklace);
                            Prop lootstandnecklace = World.CreateProp(Main.RequestModel("h4_prop_h4_neck_disp_01a"), new Vector3(pposition.X, pposition.Y, pposition.Z + 1f), false, false);
                            lootstandnecklace.Heading = HHeading;
                            if (lootstandnecklace != null) LootStandSpawn.Add(lootstandnecklace);
                            return returnedprop;
                        }
                        break;
                    }
            }
            return returnedprop;
        }
        public static Prop TequilaCase(Vector3 pposition, float HHeading)//Necklace Loot with Glass Display
        {
            Prop returnedprop;
            Model Casemodel = new Model("h4_prop_h4_glass_disp_01a");
            returnedprop = World.CreatePropNoOffset(Casemodel, new Vector3(0, 0, 0), false);
            returnedprop.MarkAsNoLongerNeeded();
            if (returnedprop != null)
            {
                returnedprop.Delete();
            }

            Random random = new Random();
            string[] tequilas = { "h4_prop_h4_t_bottle_01a", "h4_prop_h4_t_bottle_02a", "h4_prop_h4_t_bottle_02b" };
            int randlootteq = random.Next(tequilas.Length);
            int randlootchoice = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 1, 2);
            switch (randlootchoice)
            {
                case 1:// tequila loot
                    {
                        Casemodel = new Model("h4_prop_h4_glass_disp_01a");
                        Casemodel.Request(10000);
                        if (Casemodel.IsValid && Casemodel.IsInCdImage)
                        {
                            while (!Casemodel.IsLoaded) Script.Wait(50);
                            returnedprop = World.CreateProp(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false, false);
                            if (returnedprop != null) Glass_Cutters.GCSpawn.Add(returnedprop);
                            Prop CaseModel2 = World.CreateProp(Main.RequestModel("h4_prop_h4_glass_disp_01b"), pposition, false, false);
                            CaseModel2.IsVisible = false;
                            CaseModel2.Heading = HHeading;
                            if (CaseModel2 != null) GC2Spawn.Add(CaseModel2);
                            Prop lootpanther = World.CreateProp(Main.RequestModel(tequilas[randlootteq]), new Vector3(pposition.X, pposition.Y, pposition.Z + 1f), false, false);
                            lootpanther.Heading = HHeading;
                            if (lootpanther != null) LootSpawn.Add(lootpanther);
                            return returnedprop;
                        }
                        break;
                    }
                default://default is tequila
                    {
                        Casemodel = new Model("h4_prop_h4_glass_disp_01a");
                        Casemodel.Request(10000);
                        if (Casemodel.IsValid && Casemodel.IsInCdImage)
                        {
                            while (!Casemodel.IsLoaded) Script.Wait(50);
                            returnedprop = World.CreateProp(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false, false);
                            if (returnedprop != null) Glass_Cutters.GCSpawn.Add(returnedprop);
                            Prop CaseModel2 = World.CreateProp(Main.RequestModel("h4_prop_h4_glass_disp_01b"), pposition, false, false);
                            CaseModel2.IsVisible = false;
                            CaseModel2.Heading = HHeading;
                            if (CaseModel2 != null) GC2Spawn.Add(CaseModel2);
                            Prop lootpanther = World.CreateProp(Main.RequestModel(tequilas[randlootteq]), new Vector3(pposition.X, pposition.Y, pposition.Z + 1f), false, false);
                            lootpanther.Heading = HHeading;
                            if (lootpanther != null) LootSpawn.Add(lootpanther);
                            return returnedprop;
                        }
                        break;
                    }
            }
            return returnedprop;
        }
        public static void SPAWN_CASE(Vector3 pposition, float HHeading, string loottype = "Random")
        {
            if (loottype == "Random")
            {
                Prop Case = Glass_Cutters.RandomCase(pposition, HHeading + 180f);
            }
            if (loottype == "Panther Statue")
            {
                Prop Case = Glass_Cutters.PantherCase(pposition, HHeading + 180f);
            }
            if (loottype == "Pink Diamond")
            {
                Prop Case = Glass_Cutters.DiamondCase(pposition, HHeading + 180f);
            }
            if (loottype == "Ruby Necklace")
            {
                Prop Case = Glass_Cutters.NecklaceCase(pposition, HHeading + 180f);
            }
            if (loottype == "Tequila")
            {
                Prop Case = Glass_Cutters.TequilaCase(pposition, HHeading + 180f);
            }
        }
        public static int RETURN_LOOT_TYPE(Prop loot)
        {
            if (loot.Model == "h4_prop_h4_art_pant_01a")
            {
                return 0;
            }
            if (loot.Model == "h4_prop_h4_diamond_01a")
            {
                return 1;
            }
            if (loot.Model == "h4_prop_h4_necklace_01a")
            {
                return 2;
            }
            if (loot.Model == "h4_prop_h4_t_bottle_01a" || loot.Model == "h4_prop_h4_t_bottle_02a" || loot.Model == "h4_prop_h4_t_bottle_02b")
            {
                return 3;
            }
            return 0;
        }
        public static void drawSprite5(string textureDict, string textureName, float screenX, float screenY, float width, float height, int r, int g, int b, int alpha)
        {
            Function.Call((Hash)0xDFA2EF8E04127DD5, textureDict, 0);
            if (Function.Call<bool>(Hash.HAS_STREAMED_TEXTURE_DICT_LOADED, textureDict))
            {
                Function.Call((Hash)0xE7FFAE5EBF23D890, textureDict, textureName, screenX, screenY, width, height, 0, r, g, b, alpha, 0);
            }
        }
        public static void drawText(string text, float x, float y, float scale, int r, int g, int b)
        {
            Function.Call((Hash)0x25FBB336DF1804CB, "STRING");
            Function.Call((Hash)0x6C188BE134E074AA, text);
            Function.Call((Hash)0xBE6B23FFA53FB442, r, g, b, 255);
            Function.Call(Hash.SET_TEXT_SCALE, 0f, scale);
            Function.Call((Hash)0xCD015E5BB0D96A57, x, y, 0.1);
        }
        public static float progresswidth(float percent)
        {
            //empty 0f
            //full 0.08f
            float calc = 0.08f * percent;
            return calc;
        }
        public static float progressxcoord(float percent)
        {
            float val1 = 0.04f * percent;
            float val2 = 0.9f + val1;
            return val2;
        }
    }
    internal class Crate_Grab : Script
    {
        public static bool AllowCrateGrab = false;
        public static bool OwnsCrowbar = false;

        public static int ExtraLootSwitch = 1;
        public static int TotalAmount = 0;

        public static Prop Bag;
        public static Prop Crowbar;
        public static Prop Loot;
        public Crate_Grab()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }


        public void onTick(object sender, EventArgs e)
        {
            if (Main.DEBUG)
            {
                if (Game.IsControlJustPressed(GTA.Control.VehicleDuck))
                {
                    //Props.SPAWN_PROP_NO_OFFSET_WITH_BLIP("tr_prop_tr_adv_case_01a", new Vector3(253.4008f, -1388.185f, 39.53437f - 0.7f), new Vector3(0f, 0f, 31.10962f + 180f), false, true, true, true, true, 440, BlipColor.Blue, "Crate", true);
                }
            }
            if (AllowCrateGrab)
            {
                Prop[] loots = World.GetAllProps(Main.RequestModel("xm3_prop_xm3_crate_01a"));

                foreach (Prop loot in loots.ToList())
                {
                    if (Props.propList.Count > 0 && Props.propList.Contains(loot))
                    {
                        if (Game.Player.Character.Position.DistanceTo(loot.Position) < 2)
                        {
                            CRATE_GRAB_METHOD(loot);
                        }
                    }
                }
            }
        }

        public void onShutdown(object sender, EventArgs e)
        {
            var A_0 = true;
            if (A_0)
            {
                #region Vehicles
                #endregion
                #region Peds
                #endregion
                #region Props
                if (Bag != null)
                {
                    Bag.Delete();
                }
                if (Crowbar != null)
                {
                    Crowbar.Delete();
                }
                if (Loot != null)
                {
                    Loot.Delete();
                }
                #endregion
                #region Blips
                #endregion
                #region Cameras
                #endregion
                #region Pickups
                #endregion
            }
        }

        public static void CRATE_GRAB_METHOD(Prop loot)
        {
            switch (ExtraLootSwitch)
            {
                case 1://grab
                    {
                        if (Game.Player.Character.Position.DistanceTo(loot.Position) < 2)
                        {
                            if (!OwnsCrowbar)
                            {
                                Screen.ShowHelpTextThisFrame("Requires: Crowbar", true);
                            }
                            else
                            {
                                Screen.ShowHelpTextThisFrame("Press ~INPUT_CONTEXT~ to search the crate.", true);
                            }
                            if (Game.IsControlJustPressed(GTA.Control.Context) && OwnsCrowbar)
                            {
                                int randnum = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, 5);
                                string randomanim = "anim@scripted@player@mission@trn_ig1_loot@male@";
                                string animpart = "loot";
                                if (randnum == 0 || randnum == 2 || randnum == 4)
                                {
                                    randomanim = "anim@scripted@player@mission@trn_ig1_loot@male@";
                                    animpart = "loot";
                                }
                                if (randnum == 1 || randnum == 3)
                                {
                                    randomanim = "anim@scripted@player@mission@trn_ig2_empty@male@";
                                    animpart = "empty";
                                }
                                Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player, true);
                                Main.LoadDict("anim@scripted@player@mission@trn_ig1_loot@male@");
                                Main.LoadDict("anim@scripted@player@mission@trn_ig2_empty@male@");
                                Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_CM2022/CM2022_GENERIC_01");
                                Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_CM2022/CM2022_FREEMODE_01");
                                Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "DLC_CM2022/CM2022_GENERIC_01", false);
                                Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "DLC_CM2022/CM2022_FREEMODE_01", false);
                                Wait(50);

                                Vector3 intinaloffsetpos = Function.Call<Vector3>(Hash.GET_ANIM_INITIAL_OFFSET_POSITION, "anim@scripted@player@mission@trn_ig1_loot@male@", "loot", loot.Position.X, loot.Position.Y, loot.Position.Z, loot.Rotation.X, loot.Rotation.Y, loot.Rotation.Z, 0f, 2);
                                Vector3 intinaloffsetrot = Function.Call<Vector3>(Hash.GET_ANIM_INITIAL_OFFSET_ROTATION, "anim@scripted@player@mission@trn_ig1_loot@male@", "loot", loot.Position.X, loot.Position.Y, loot.Position.Z, loot.Rotation.X, loot.Rotation.Y, loot.Rotation.Z, 0f, 2);

                                unsafe
                                {
                                    int Task5 = 0;
                                    Function.Call(Hash.OPEN_SEQUENCE_TASK, &Task5);
                                    if (Game.Player.Character.IsRunning || Game.Player.Character.IsSprinting)
                                    {
                                        Function.Call(Hash.TASK_FOLLOW_NAV_MESH_TO_COORD, 0, intinaloffsetpos.X, intinaloffsetpos.Y, intinaloffsetpos.Z, 1f, 5000, 0.1f, 512, intinaloffsetrot.Z);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.TASK_FOLLOW_NAV_MESH_TO_COORD, 0, intinaloffsetpos.X, intinaloffsetpos.Y, intinaloffsetpos.Z, 1f, 5000, 0.1f, 2, intinaloffsetrot.Z);
                                    }
                                    Function.Call(Hash.CLOSE_SEQUENCE_TASK, Task5);
                                    Function.Call(Hash.TASK_PERFORM_SEQUENCE, Game.Player.Character, Task5);
                                    Function.Call(Hash.CLEAR_SEQUENCE_TASK, &Task5);
                                }
                                Wait(500);
                                Game.Player.Character.Weapons.Select(WeaponHash.Unarmed);
                                HudHandler.HudandRadar(false, false);
                                while (Function.Call<int>(Hash.GET_SEQUENCE_PROGRESS, Game.Player.Character) != -1)
                                {
                                    Wait(0);
                                }
                                while (Crowbar == null)//hei_p_m_bag_var22_arm_s
                                {
                                    Crowbar = Function.Call<Prop>(Hash.CREATE_WEAPON_OBJECT, WeaponHash.Crowbar, 1, Game.Player.Character.Position.X, Game.Player.Character.Position.Y, Game.Player.Character.Position.Z, true, 1.0f, 0, 0, 0);
                                    Wait(0);
                                }
                                Crowbar.IsCollisionEnabled = false;
                                Crowbar.IsVisible = false;
                                if (randnum == 0 || randnum == 2 || randnum == 4)
                                {
                                    while (Loot == null)
                                    {
                                        Loot = World.CreateProp(Main.RequestModel("xm3_prop_xm3_can_hl_01a"), Game.Player.Character.Position, false, false);
                                        Wait(0);
                                    }
                                    Loot.IsCollisionEnabled = false;
                                    Loot.IsVisible = false;
                                }

                                int joe;
                                joe = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, 4);
                                //Main.GetPedDuffelBagOff(Game.Player.Character);
                                if (Main.CutsceneCam == null)
                                {
                                    Vector3 iVar0 = Function.Call<Vector3>(Hash.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, loot, 0.5f, -0.6900f, 1.2f);
                                    Main.CutsceneCam = World.CreateCamera(iVar0, new Vector3(0f, 0f, 0f), 60.0f);
                                }
                                if (Main.CutsceneCam != null)
                                {
                                    Main.CutsceneCam.PointAt(Crowbar, new Vector3(0f, 0f, 0.0f));
                                    Main.CutsceneCam.Shake(CameraShake.Hand, 1.0f);
                                    Cameras.RENDER_SCRIPT_CAMS(true, false, 2000, false, false, false);
                                }

                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, loot.Position.X, loot.Position.Y, loot.Position.Z, 0.0, 0.0, loot.Heading, 2);

                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, Main.LoadDict(randomanim), animpart, 0.0, 0.0, 0, 0, 1148846080, 0);
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Crowbar, Main.TestCutsceneAnim, animpart + "_crowbar", Main.LoadDict(randomanim), 1000.0f, 0.0f, 0, 1000.0f);
                                if (Loot != null)
                                {
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Loot, Main.TestCutsceneAnim, animpart + "_can", Main.LoadDict(randomanim), 1000.0f, 0.0f, 0, 1000.0f);
                                }
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, loot, Main.TestCutsceneAnim, animpart + "_crate", Main.LoadDict(randomanim), 1000.0f, 0.0f, 0, 1000.0f);
                                Function.Call(Hash.PLAY_FACIAL_ANIM, Game.Player.Character, animpart + "_facial", Main.LoadDict(randomanim));
                                //Main.GetPedDuffelBagOff(Game.Player.Character);
                                Crowbar.IsVisible = true;
                                if (Loot != null)
                                {
                                    Loot.IsVisible = true;
                                }

                                while (Anims.GET_SYNCHRONIZED_SCENE_PHASE(Main.TestCutsceneAnim) < 0.3100f)
                                {
                                    Wait(0);
                                }
                                ExtraLootSwitch = 2;

                            }
                        }
                    }
                    break;
                case 2:
                    {
                        float animphase = 0.3100f;
                        while (Anims.GET_SYNCHRONIZED_SCENE_PHASE(Main.TestCutsceneAnim) < 0.3900f)
                        {
                            Screen.ShowHelpTextThisFrame("Repeatedly Press ~INPUT_ATTACK~ to break open the crate.", true);
                            Anims.SET_SYNCHRONIZED_SCENE_PHASE(Main.TestCutsceneAnim, animphase);
                            if (Game.IsControlPressed(GTA.Control.Attack))
                            {
                                animphase += 0.001f;
                                Main.CutsceneCam.FieldOfView += 0.2f;
                            }
                            else if (!Game.IsControlJustPressed(GTA.Control.Attack))
                            {
                                if (Anims.GET_SYNCHRONIZED_SCENE_PHASE(Main.TestCutsceneAnim) > 0.3100f)
                                {
                                    animphase -= 0.00015f;
                                    if (Main.CutsceneCam.FieldOfView >= 60.0f)
                                    {
                                        Main.CutsceneCam.FieldOfView -= 0.2f;
                                    }
                                }
                            }
                            Wait(0);
                        }
                        Anims.SET_SYNCHRONIZED_SCENE_RATE(Main.TestCutsceneAnim, 1f);
                        Main.CutsceneCam.Delete();
                        Main.CutsceneCam = null;
                        if (Main.CutsceneCam == null)
                        {
                            Vector3 iVar0 = Function.Call<Vector3>(Hash.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, loot, 0.0f, 0.5f, 0.3f);
                            Main.CutsceneCam = World.CreateCamera(iVar0, new Vector3(0f, 0f, 0f), 30.0f);
                        }
                        if (Main.CutsceneCam != null)
                        {
                            Main.CutsceneCam.PointAt(Game.Player.Character, new Vector3(0f, 0.5f, 0.5f));
                            Main.CutsceneCam.Shake(CameraShake.Hand, 1.0f);
                            Cameras.RENDER_SCRIPT_CAMS(true, false, 2000, false, false, false);
                        }
                        while (Anims.GET_SYNCHRONIZED_SCENE_PHASE(Main.TestCutsceneAnim) < 0.6f)
                        {
                            Wait(0);
                        }
                        Main.CutsceneCam.Delete();
                        Main.CutsceneCam = null;
                        while (Anims.GET_SYNCHRONIZED_SCENE_PHASE(Main.TestCutsceneAnim) < 1f)
                        {
                            Wait(0);
                        }
                        Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_CM2022/CM2022_GENERIC_01");
                        Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_CM2022/CM2022_FREEMODE_01");
                        //Main.GetPedDuffelBagOn(Game.Player.Character);
                        Crowbar.Delete();
                        Crowbar = null;
                        if (Loot != null)
                        {
                            Loot.Delete();
                            Loot = null;
                            Heist_Hud.Actual_Take += Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 350000, 550000);
                        }
                        Game.Player.Character.Task.ClearAll();
                        Cameras.RESET_GAMEPLAY_CAM();
                        HudHandler.HudandRadar(true, true);
                        ExtraLootSwitch = 1;
                        if (loot.AttachedBlip != null)
                        {
                            loot.AttachedBlip.Delete();
                        }
                        loot.MarkAsNoLongerNeeded();
                        Props.propList.Remove(loot);
                        World.RenderingCamera = null;
                        Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player, false);
                    }
                    break;
            }
        }

    }
    internal class Cash_Grab_New : Script
    {
        public static int ExtraLootSwitch = 1;
        public static int CashAnim = 0;
        public static int SpeedSwitch = 0;
        public static int clickytimer = 0;
        public static int clickyint = 0;
        public static float SCENE_POS = 0f;
        public static float SCENE_CASH_POS = 0f;
        public static bool AllowCashGrab = false;

        public static Prop Bag;
        public Cash_Grab_New()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }
        public void onTick(object sender, EventArgs e)
        {
            if (Main.DEBUG)
            {
                if (Game.IsControlJustPressed(GTA.Control.VehicleDuck))
                {

                }
            }
            if (AllowCashGrab)
            {
                Prop[] loot1 = World.GetAllProps(Main.RequestModel("h4_prop_h4_cash_stack_01a"));
                Prop[] loot2 = World.GetAllProps(Main.RequestModel("h4_prop_h4_gold_stack_01a"));
                Prop[] loot3 = World.GetAllProps(Main.RequestModel("h4_prop_h4_weed_stack_01a"));
                Prop[] loot4 = World.GetAllProps(Main.RequestModel("h4_prop_h4_coke_stack_01a"));
                foreach (Prop loot in loot1.ToList())
                {
                    if (Game.Player.Character.Position.DistanceTo(loot.Position) < 1)
                    {
                        CASH_GRAB_NEW_METHOD(loot, "cash");
                    }
                }
                foreach (Prop loot in loot2.ToList())
                {
                    if (Game.Player.Character.Position.DistanceTo(loot.Position) < 1)
                    {
                        CASH_GRAB_NEW_METHOD(loot, "gold");
                    }
                }
                foreach (Prop loot in loot3.ToList())
                {
                    if (Game.Player.Character.Position.DistanceTo(loot.Position) < 1)
                    {
                        CASH_GRAB_NEW_METHOD(loot, "weed");
                    }
                }
                foreach (Prop loot in loot4.ToList())
                {
                    if (Game.Player.Character.Position.DistanceTo(loot.Position) < 1)
                    {
                        CASH_GRAB_NEW_METHOD(loot, "coke");
                    }
                }
            }
        }
        public static void CASH_GRAB_NEW_METHOD(Prop Cash, string type)
        {
            switch (ExtraLootSwitch)
            {
                case 1://start
                    {
                        if (Game.Player.Character.Position.DistanceTo(Cash.Position) < 1)
                        {
                            Screen.ShowHelpTextThisFrame("Press ~INPUT_CONTEXT~ to start looting.");
                            if (Game.IsControlJustPressed(GTA.Control.Context))
                            {
                                Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player, true);
                                Main.LoadDict("anim@scripted@heist@ig1_table_grab@cash@male@");
                                Main.LoadDict("anim@scripted@heist@ig1_table_grab@cash@male@");
                                Main.LoadDict("anim@scripted@heist@ig1_table_grab@gold@male@");
                                Main.LoadDict("anim@scripted@heist@ig1_table_grab@gold@male@");
                                Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "DLC_HEIST3/HEIST_FINALE_STEAL_PAINTINGS", false);
                                Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "DLC_HEI4/DLCHEI4_GENERIC_01", false);
                                Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                Wait(50);
                                if (type == "cash" || type == "weed" || type == "coke")
                                {
                                    Vector3 intinaloffsetpos = Function.Call<Vector3>(Hash.GET_ANIM_INITIAL_OFFSET_POSITION, "anim@scripted@heist@ig1_table_grab@cash@male@", "enter", Cash.Position.X, Cash.Position.Y, Cash.Position.Z, Cash.Rotation.X, Cash.Rotation.Y, Cash.Rotation.Z, 0f, 2);
                                    Vector3 intinaloffsetrot = Function.Call<Vector3>(Hash.GET_ANIM_INITIAL_OFFSET_ROTATION, "anim@scripted@heist@ig1_table_grab@cash@male@", "enter", Cash.Position.X, Cash.Position.Y, Cash.Position.Z, Cash.Rotation.X, Cash.Rotation.Y, Cash.Rotation.Z, 0f, 2);

                                    unsafe
                                    {
                                        int Task5 = 0;
                                        Function.Call(Hash.OPEN_SEQUENCE_TASK, &Task5);
                                        if (Game.Player.Character.IsRunning || Game.Player.Character.IsSprinting)
                                        {
                                            Function.Call(Hash.TASK_FOLLOW_NAV_MESH_TO_COORD, 0, intinaloffsetpos.X, intinaloffsetpos.Y, intinaloffsetpos.Z, 1f, 5000, 0.1f, 512, intinaloffsetrot.Z);
                                        }
                                        else
                                        {
                                            Function.Call(Hash.TASK_FOLLOW_NAV_MESH_TO_COORD, 0, intinaloffsetpos.X, intinaloffsetpos.Y, intinaloffsetpos.Z, 1f, 5000, 0.1f, 2, intinaloffsetrot.Z);
                                        }
                                        Function.Call(Hash.CLOSE_SEQUENCE_TASK, Task5);
                                        Function.Call(Hash.TASK_PERFORM_SEQUENCE, Game.Player.Character, Task5);
                                        Function.Call(Hash.CLEAR_SEQUENCE_TASK, &Task5);
                                    }
                                    Wait(500);
                                    while (Function.Call<int>(Hash.GET_SEQUENCE_PROGRESS, Game.Player.Character) != -1)
                                    {
                                        Wait(0);
                                    }
                                }
                                else
                                {
                                    Vector3 intinaloffsetpos = Function.Call<Vector3>(Hash.GET_ANIM_INITIAL_OFFSET_POSITION, "anim@scripted@heist@ig1_table_grab@gold@male@", "enter", Cash.Position.X, Cash.Position.Y, Cash.Position.Z, Cash.Rotation.X, Cash.Rotation.Y, Cash.Rotation.Z, 0f, 2);
                                    Vector3 intinaloffsetrot = Function.Call<Vector3>(Hash.GET_ANIM_INITIAL_OFFSET_ROTATION, "anim@scripted@heist@ig1_table_grab@gold@male@", "enter", Cash.Position.X, Cash.Position.Y, Cash.Position.Z, Cash.Rotation.X, Cash.Rotation.Y, Cash.Rotation.Z, 0f, 2);

                                    unsafe
                                    {
                                        int Task5 = 0;
                                        Function.Call(Hash.OPEN_SEQUENCE_TASK, &Task5);
                                        if (Game.Player.Character.IsRunning || Game.Player.Character.IsSprinting)
                                        {
                                            Function.Call(Hash.TASK_FOLLOW_NAV_MESH_TO_COORD, 0, intinaloffsetpos.X, intinaloffsetpos.Y, intinaloffsetpos.Z, 1f, 5000, 0.1f, 512, intinaloffsetrot.Z);
                                        }
                                        else
                                        {
                                            Function.Call(Hash.TASK_FOLLOW_NAV_MESH_TO_COORD, 0, intinaloffsetpos.X, intinaloffsetpos.Y, intinaloffsetpos.Z, 1f, 5000, 0.1f, 2, intinaloffsetrot.Z);
                                        }
                                        Function.Call(Hash.CLOSE_SEQUENCE_TASK, Task5);
                                        Function.Call(Hash.TASK_PERFORM_SEQUENCE, Game.Player.Character, Task5);
                                        Function.Call(Hash.CLEAR_SEQUENCE_TASK, &Task5);
                                    }
                                    Wait(500);
                                    while (Function.Call<int>(Hash.GET_SEQUENCE_PROGRESS, Game.Player.Character) != -1)
                                    {
                                        Wait(0);
                                    }
                                }
                                SpeedSwitch = 0;
                                SCENE_POS = 0f;
                                Game.Player.Character.Weapons.Select(WeaponHash.Unarmed);
                                while (Bag == null)
                                {
                                    Bag = World.CreateProp(Main.RequestModel("hei_p_m_bag_var22_arm_s"), Game.Player.Character.Position, false, false);
                                    Wait(0);
                                }
                                Bag.IsCollisionEnabled = false;
                                if (Bag != null)
                                {
                                    int joe;
                                    joe = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, 3);
                                    Main.GetPedDuffelBagOff(Game.Player.Character);
                                    if (Main.CutsceneCam == null)
                                    {
                                        switch (joe)
                                        {
                                            case 0:
                                                Vector3 iVar0 = Function.Call<Vector3>(Hash.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, Cash, -0.7f, -0.7f, 0.3f);
                                                Main.CutsceneCam = World.CreateCamera(iVar0, new Vector3(0f, 0f, 0f), 60.0f);
                                                break;
                                            case 1:
                                                Vector3 iVar1 = Function.Call<Vector3>(Hash.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, Cash, -0.5f, 0.5f, 1f);
                                                Main.CutsceneCam = World.CreateCamera(iVar1, new Vector3(0f, 0f, 0f), 30.0f);
                                                break;
                                            case 2:
                                                Vector3 iVar2 = Function.Call<Vector3>(Hash.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, Cash, 0.6f, 0.6f, 1f);
                                                Main.CutsceneCam = World.CreateCamera(iVar2, new Vector3(0f, 0f, 0f), 36.0f);
                                                break;
                                        }
                                    }
                                    if (Main.CutsceneCam != null)
                                    {
                                        joe = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, 3);
                                        switch (joe)
                                        {
                                            case 0:
                                                Main.CutsceneCam.PointAt(Game.Player.Character, new Vector3(0f, 0f, 0f));
                                                break;
                                            case 1:
                                                Main.CutsceneCam.PointAt(Cash, new Vector3(0f, 0f, 0f));
                                                break;
                                            case 2:
                                                Main.CutsceneCam.PointAt(Bag, new Vector3(0f, 0f, 0f));
                                                break;
                                        }
                                        Main.CutsceneCam.Shake(CameraShake.Hand, 1.0f);
                                        Cameras.RENDER_SCRIPT_CAMS(true, true, 2000, false, false, false);
                                    }
                                    if (Cash.Model == "h4_prop_h4_cash_stack_01a")
                                    {
                                        Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, Cash.Position.X, Cash.Position.Y, Cash.Position.Z, 0.0, 0.0, Cash.Heading, 2);

                                        Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, Main.LoadDict("anim@scripted@heist@ig1_table_grab@cash@male@"), "enter", 0.0, 0.0, 0, 0, 1148846080, 0);
                                        Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "enter_bag", Main.LoadDict("anim@scripted@heist@ig1_table_grab@cash@male@"), 1000.0f, 0.0f, 0, 1000.0f);
                                    }
                                    else if (Cash.Model == "h4_prop_h4_gold_stack_01a")
                                    {
                                        Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, Cash.Position.X, Cash.Position.Y, Cash.Position.Z, 0.0, 0.0, Cash.Heading, 2);

                                        Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, Main.LoadDict("anim@scripted@heist@ig1_table_grab@gold@male@"), "enter", 0.0, 0.0, 0, 0, 1148846080, 0);
                                        Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "enter_bag", Main.LoadDict("anim@scripted@heist@ig1_table_grab@gold@male@"), 1000.0f, 0.0f, 0, 1000.0f);
                                    }
                                    else if (Cash.Model == "h4_prop_h4_coke_stack_01a")
                                    {
                                        Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, Cash.Position.X, Cash.Position.Y, Cash.Position.Z, 0.0, 0.0, Cash.Heading, 2);

                                        Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, Main.LoadDict("anim@scripted@heist@ig1_table_grab@cash@male@"), "enter", 0.0, 0.0, 0, 0, 1148846080, 0);
                                        Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "enter_bag", Main.LoadDict("anim@scripted@heist@ig1_table_grab@cash@male@"), 1000.0f, 0.0f, 0, 1000.0f);
                                    }
                                    else if (Cash.Model == "h4_prop_h4_weed_stack_01a")
                                    {
                                        Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, Cash.Position.X, Cash.Position.Y, Cash.Position.Z, 0.0, 0.0, Cash.Heading, 2);

                                        Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, Main.LoadDict("anim@scripted@heist@ig1_table_grab@cash@male@"), "enter", 0.0, 0.0, 0, 0, 1148846080, 0);
                                        Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "enter_bag", Main.LoadDict("anim@scripted@heist@ig1_table_grab@cash@male@"), 1000.0f, 0.0f, 0, 1000.0f);
                                    }
                                    while (Anims.GET_SYNCHRONIZED_SCENE_PHASE(Main.TestCutsceneAnim) < 1f)
                                    {
                                        Wait(0);
                                    }
                                    if (type == "cash" || type == "weed" || type == "coke")
                                    {
                                        Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, Cash.Position.X, Cash.Position.Y, Cash.Position.Z, Cash.Rotation.X, Cash.Rotation.Y, Cash.Rotation.Z, 2);
                                        Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "anim@scripted@heist@ig1_table_grab@cash@male@", "grab_idle", 3.0, 3.0, 0, 0, 1148846080, 0); // Objects
                                        Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "grab_idle_bag", "anim@scripted@heist@ig1_table_grab@cash@male@", 3.0, 3.0, 0, 1000.0f); // Objects
                                        Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, true);
                                    }
                                    else
                                    {
                                        Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, Cash.Position.X, Cash.Position.Y, Cash.Position.Z, Cash.Rotation.X, Cash.Rotation.Y, Cash.Rotation.Z, 2);
                                        Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "anim@scripted@heist@ig1_table_grab@gold@male@", "grab_idle", 3.0, 3.0, 0, 0, 1148846080, 0); // Objects
                                        Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "grab_idle_bag", "anim@scripted@heist@ig1_table_grab@gold@male@", 3.0, 3.0, 0, 1000.0f); // Objects
                                        Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, true);
                                    }
                                    ExtraLootSwitch = 2;
                                }
                            }
                        }
                    }
                    break;
                case 2://start grab
                    {
                        if (type == "cash") Screen.ShowHelpTextThisFrame("Repeatedly tap ~INPUT_ATTACK~ to quickly grab the cash.");
                        if (type == "gold") Screen.ShowHelpTextThisFrame("Repeatedly tap ~INPUT_ATTACK~ to quickly grab the gold.");
                        if (type == "weed") Screen.ShowHelpTextThisFrame("Repeatedly tap ~INPUT_ATTACK~ to quickly grab the drugs.");
                        if (type == "coke") Screen.ShowHelpTextThisFrame("Repeatedly tap ~INPUT_ATTACK~ to quickly grab the drugs.");
                        if (type == "cash" || type == "weed" || type == "coke")
                        {
                            if (Game.IsControlJustPressed(GTA.Control.Attack))
                            {
                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, Cash.Position.X, Cash.Position.Y, Cash.Position.Z, Cash.Rotation.X, Cash.Rotation.Y, Cash.Rotation.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "anim@scripted@heist@ig1_table_grab@cash@male@", "grab", 3.0, 3.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "grab_bag", "anim@scripted@heist@ig1_table_grab@cash@male@", 3.0, 3.0, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Cash, Main.TestCutsceneAnim, "grab_cash", "anim@scripted@heist@ig1_table_grab@cash@male@", 3.0, 3.0, 0, 1000.0f); // Objects
                                Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, false);
                                Anims.SET_SYNCHRONIZED_SCENE_PHASE(Main.TestCutsceneAnim, SCENE_POS);
                                ExtraLootSwitch = 3;
                            }
                        }
                        else
                        {
                            if (Game.IsControlJustPressed(GTA.Control.Attack))
                            {
                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, Cash.Position.X, Cash.Position.Y, Cash.Position.Z, Cash.Rotation.X, Cash.Rotation.Y, Cash.Rotation.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "anim@scripted@heist@ig1_table_grab@gold@male@", "grab", 3.0, 3.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "grab_bag", "anim@scripted@heist@ig1_table_grab@gold@male@", 3.0, 3.0, 0, 1000.0f); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Cash, Main.TestCutsceneAnim, "grab_gold", "anim@scripted@heist@ig1_table_grab@gold@male@", 3.0, 3.0, 0, 1000.0f); // Objects
                                Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, false);
                                Anims.SET_SYNCHRONIZED_SCENE_PHASE(Main.TestCutsceneAnim, SCENE_POS);
                                ExtraLootSwitch = 3;
                            }
                        }
                    }
                    break;
                case 3://grabbing
                    {
                        if (type == "cash") Screen.ShowHelpTextThisFrame("Repeatedly tap ~INPUT_ATTACK~ to quickly grab the cash.");
                        if (type == "gold") Screen.ShowHelpTextThisFrame("Repeatedly tap ~INPUT_ATTACK~ to quickly grab the gold.");
                        if (type == "weed") Screen.ShowHelpTextThisFrame("Repeatedly tap ~INPUT_ATTACK~ to quickly grab the drugs.");
                        if (type == "coke") Screen.ShowHelpTextThisFrame("Repeatedly tap ~INPUT_ATTACK~ to quickly grab the drugs.");
                        if (type == "cash" || type == "weed" || type == "coke")
                        {
                            if (Anims.IS_ENTITY_PLAYING_ANIM(Game.Player.Character, "anim@scripted@heist@ig1_table_grab@cash@male@", "grab"))
                            {
                                SCENE_POS = Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim);
                                if (clickyint < 7)
                                {
                                    if (Function.Call<bool>(Hash.IS_CONTROL_JUST_PRESSED, 2, 237) || Function.Call<bool>(Hash.IS_CONTROL_JUST_PRESSED, 2, 201))
                                    {
                                        //UI.Notify("+ " + clickyint);
                                        clickyint += 1;
                                        clickytimer = Game.GameTime + 500;
                                    }
                                }
                                if (clickyint > 0)
                                {
                                    if (Game.GameTime > clickytimer)
                                    {
                                        //UI.Notify("- " + clickyint);
                                        clickyint -= 1;
                                        clickytimer = Game.GameTime + 500;
                                    }
                                }
                                switch (clickyint)
                                {
                                    case 0:
                                        {
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 0.55f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 0.55);
                                            }
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim) != 0.55f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim, 0.55);
                                            }

                                            break;
                                        }
                                    case 1:
                                        {
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 0.6f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 0.6);
                                            }
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim) != 0.6)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim, 0.6);
                                            }

                                            break;
                                        }
                                    case 2:
                                        {
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 0.75f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 0.75);
                                            }
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim) != 0.75)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim, 0.75);
                                            }

                                            break;
                                        }
                                    case 3:
                                        {
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 0.9f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 0.9);
                                            }
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim) != 0.9)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim, 0.9);
                                            }

                                            break;
                                        }
                                    case 4:
                                        {
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 1.0f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 1.0);
                                            }
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim) != 1.0)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim, 1.0);
                                            }

                                            break;
                                        }
                                    case 5:
                                        {
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 1.05f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 1.05);
                                            }
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim) != 1.05)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim, 1.05);
                                            }

                                            break;
                                        }
                                    case 6:
                                        {
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 1.12f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 1.12);
                                            }
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim) != 1.12)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim, 1.12);
                                            }

                                            break;
                                        }
                                    case 7:
                                        {
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 1.32f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 1.32);
                                            }
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim) != 1.32)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim, 1.32);
                                            }

                                            break;
                                        }
                                }
                            }
                            if (Anims.GET_SYNCHRONIZED_SCENE_PHASE(Main.TestCutsceneAnim) >= 1f)
                            {
                                Cameras.RESET_GAMEPLAY_CAM();
                                Main.CutsceneCam.Delete();
                                Main.CutsceneCam = null;
                                Cameras.RENDER_SCRIPT_CAMS(false, true, 2000, false, false, false);
                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, Cash.Position.X, Cash.Position.Y, Cash.Position.Z, Cash.Rotation.X, Cash.Rotation.Y, Cash.Rotation.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "anim@scripted@heist@ig1_table_grab@cash@male@", "exit", 3.0, 3.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "exit_bag", "anim@scripted@heist@ig1_table_grab@cash@male@", 3.0, 3.0, 0, 1000.0f); // Objects
                                Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, false);
                                Anims.SET_SYNCHRONIZED_SCENE_RATE(Main.TestCutsceneAnim, 1f);
                                ExtraLootSwitch = 4;
                            }
                        }
                        else
                        {
                            if (Anims.IS_ENTITY_PLAYING_ANIM(Game.Player.Character, "anim@scripted@heist@ig1_table_grab@gold@male@", "grab"))
                            {
                                SCENE_POS = Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim);
                                if (clickyint < 7)
                                {
                                    if (Function.Call<bool>(Hash.IS_CONTROL_JUST_PRESSED, 2, 237) || Function.Call<bool>(Hash.IS_CONTROL_JUST_PRESSED, 2, 201))
                                    {
                                        //UI.Notify("+ " + clickyint);
                                        clickyint += 1;
                                        clickytimer = Game.GameTime + 500;
                                    }
                                }
                                if (clickyint > 0)
                                {
                                    if (Game.GameTime > clickytimer)
                                    {
                                        //UI.Notify("- " + clickyint);
                                        clickyint -= 1;
                                        clickytimer = Game.GameTime + 500;
                                    }
                                }
                                switch (clickyint)
                                {
                                    case 0:
                                        {
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 0.55f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 0.55);
                                            }
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim) != 0.55f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim, 0.55);
                                            }

                                            break;
                                        }
                                    case 1:
                                        {
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 0.6f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 0.6);
                                            }
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim) != 0.6)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim, 0.6);
                                            }

                                            break;
                                        }
                                    case 2:
                                        {
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 0.75f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 0.75);
                                            }
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim) != 0.75)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim, 0.75);
                                            }

                                            break;
                                        }
                                    case 3:
                                        {
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 0.9f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 0.9);
                                            }
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim) != 0.9)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim, 0.9);
                                            }

                                            break;
                                        }
                                    case 4:
                                        {
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 1.0f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 1.0);
                                            }
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim) != 1.0)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim, 1.0);
                                            }

                                            break;
                                        }
                                    case 5:
                                        {
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 1.05f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 1.05);
                                            }
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim) != 1.05)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim, 1.05);
                                            }

                                            break;
                                        }
                                    case 6:
                                        {
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 1.12f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 1.12);
                                            }
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim) != 1.12)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim, 1.12);
                                            }

                                            break;
                                        }
                                    case 7:
                                        {
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 1.32f)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 1.32);
                                            }
                                            if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim) != 1.32)
                                            {
                                                Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Cash_Grab_New.CashAnim, 1.32);
                                            }

                                            break;
                                        }
                                }
                            }
                            if (Anims.GET_SYNCHRONIZED_SCENE_PHASE(Main.TestCutsceneAnim) >= 1f)
                            {
                                Cameras.RESET_GAMEPLAY_CAM();
                                Main.CutsceneCam.Delete();
                                Main.CutsceneCam = null;
                                Cameras.RENDER_SCRIPT_CAMS(false, true, 2000, false, false, false);
                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, Cash.Position.X, Cash.Position.Y, Cash.Position.Z, Cash.Rotation.X, Cash.Rotation.Y, Cash.Rotation.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "anim@scripted@heist@ig1_table_grab@gold@male@", "exit", 3.0, 3.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "exit_bag", "anim@scripted@heist@ig1_table_grab@gold@male@", 3.0, 3.0, 0, 1000.0f); // Objects
                                Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, false);
                                Anims.SET_SYNCHRONIZED_SCENE_RATE(Main.TestCutsceneAnim, 1f);
                                ExtraLootSwitch = 4;
                            }
                        }
                        if (type == "cash" || type == "weed" || type == "coke")
                        {
                            switch (SpeedSwitch)
                            {
                                case 0:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.0674)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 1;
                                        }
                                        break;
                                    }
                                case 1:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.185)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 2;
                                        }
                                        break;
                                    }
                                case 2:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.287)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 3;
                                        }
                                        break;
                                    }
                                case 3:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.374)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 4;
                                        }
                                        break;
                                    }
                                case 4:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.443)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 5;
                                        }
                                        break;
                                    }
                                case 5:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.535)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 6;
                                        }
                                        break;
                                    }
                                case 6:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.628)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 7;
                                        }
                                        break;
                                    }
                                case 7:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.754)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 8;
                                        }
                                        break;
                                    }
                                case 8:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.780)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 9;
                                        }
                                        break;
                                    }
                                case 9:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.862)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 10;
                                        }
                                        break;
                                    }
                                case 10:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.876)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 11;
                                        }
                                        break;
                                    }
                                case 11:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.948)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 12;
                                        }
                                        break;
                                    }
                                case 12:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.9899)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 6 - 6 / 1 / 1;
                                            if (type == "gold") Heist_Hud.Actual_Take += 6 / 1 / 1;
                                            if (type == "weed") Heist_Hud.Actual_Take += 6 / 1 / 1;
                                            if (type == "coke") Heist_Hud.Actual_Take += 6 - 3 / 1 / 1;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = -1;
                                        }
                                        break;
                                    }
                            }
                        }
                        else
                        {
                            switch (SpeedSwitch)
                            {
                                case 0:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.09f)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 1;
                                        }
                                        break;
                                    }
                                case 1:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.18f)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 2;
                                        }
                                        break;
                                    }
                                case 2:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.202f)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 3;
                                        }
                                        break;
                                    }
                                case 3:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.288f)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 4;
                                        }
                                        break;
                                    }
                                case 4:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.409f)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 5;
                                        }
                                        break;
                                    }
                                case 5:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.522f)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 6;
                                        }
                                        break;
                                    }
                                case 6:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.614f)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 7;
                                        }
                                        break;
                                    }
                                case 7:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.761f)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 8;
                                        }
                                        break;
                                    }
                                case 8:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.797f)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 9;
                                        }
                                        break;
                                    }
                                case 9:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.931f)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 90000 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 332184 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 147870 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 220095 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 10;
                                        }
                                        break;
                                    }
                                case 10:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim) >= 0.988f)
                                        {
                                            if (type == "cash") Heist_Hud.Actual_Take += 6 / 1 / 12;
                                            if (type == "gold") Heist_Hud.Actual_Take += 6 + 4 / 1 / 10;
                                            if (type == "weed") Heist_Hud.Actual_Take += 6 / 1 / 12;
                                            if (type == "coke") Heist_Hud.Actual_Take += 6 - 3 / 1 / 12;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "ROBBERY_MONEY_TOTAL", "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                            SpeedSwitch = 11;
                                        }
                                        break;
                                    }
                            }
                        }
                    }
                    break;
                case 4://end grab
                    {
                        while (Anims.GET_SYNCHRONIZED_SCENE_PHASE(Main.TestCutsceneAnim) < 1f)
                        {
                            Wait(0);
                        }
                        Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_HEIST3/HEIST_FINALE_STEAL_PAINTINGS");
                        Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_HEI4/DLCHEI4_GENERIC_01");
                        Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_FRONTEND_CUSTOM_SOUNDSET");
                        Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_FRONTEND_CUSTOM_SOUNDSET");
                        Main.GetPedDuffelBagOn(Game.Player.Character);
                        Bag.Delete();
                        Bag = null;
                        Game.Player.Character.Task.ClearAll();
                        ExtraLootSwitch = 1;
                        Cash.Delete();
                        Props.propList.Remove(Cash);
                        Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player, false);
                    }
                    break;
            }
        }

        public void onShutdown(object sender, EventArgs e)
        {
            #region Vehicles
            #endregion
            #region Peds
            #endregion
            #region Props
            if (Bag != null)
            {
                Bag.Delete();
            }
            #endregion
            #region Blips
            #endregion
            #region Cameras
            #endregion
            #region Pickups
            #endregion
        }
    }
    internal class KeyPad_Hacking : Script
    {
        public static bool AllowKeyPadHack = false;
        public static bool HelpSHOW = false;
        public static bool AllowControl = true;
        public static bool HackOutCome = false;
        public static bool IsUsingActionMode = false;
        public static int ExtraLootSwitch = 0;
        public static int SoundId = 0;
        public static int SoundId2 = 0;
        public static int[] BGSwitch = { 0, 0, 0, 0, 0 };
        public static int[] bgtimer = { 0, 0, 0, 0, 0 };
        public static int[] bgset = { 0, 0, 0, 0, 0 };
        public static int HackSwitch = 0;
        public static int PrintsAllowed = 1;
        public static int fcalpha = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 127, 255);
        public static int[] RandomSpots = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        public static Random RNG = new Random(DateTime.Now.Millisecond);
        public static int[] PrintChoice = { 0, 0, 0, 0, 0, 0 };
        public static List<int> SelectedTiles = new List<int>();
        public static int currentlySelectedTile = 0;
        public static int previousUpdate = Game.GameTime;
        public static int iVar6 = 0;
        public static int timer = 0;
        public static int MoveLR = 0;
        public static int MoveUD = 0;
        public static int Lives = 0;
        public static int AbortTimer = 0;
        public static int animchoice = 1;
        public static int Bink = 0;

        public static int numMin = 0;
        public static int numSec = 0;
        public static int numSec2 = 0;
        public static int numMil = 0;
        public static int numMil2 = 0;

        public static int previousUpdate2 = Game.GameTime;
        public static int iVar62 = 31;

        public static Vector3 keycardzoffset = new Vector3(0f, 0f, -70.7372f + 0.3600f);
        public static Vector3 keypadzoffset = new Vector3(0f, 0f, 0f);

        public static Prop Phone;
        public static Prop USB;

        public static string doormodel = "";
        public static float disttodoor = 5f;
        public KeyPad_Hacking()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }
        public static List<Prop> KeyPadSpawn = new List<Prop>()
        {

        };

        public void onTick(object sender, EventArgs e)
        {
            //BlipUpKeyPads();
            if (Main.DEBUG)
            {
                if (Game.IsControlJustPressed(GTA.Control.VehicleDuck))
                {
                    //Game.Player.Character.Position = new Vector3(2519.7913f, -226.4721f, keycardzoffset.Z);
                    //KeyPad_Hacking.KeyPad(new Vector3(2519.7913f, -226.4721f, keycardzoffset.Z), 0.5488f);
                }
            }
            if (AllowKeyPadHack)
            {
                foreach (Prop KeyPad in KeyPadSpawn.ToList())
                {
                    if (Groups.IS_PED_AT_DESTINATION(Game.Player.Character, KeyPad.Position, 1))
                    {
                        KeyPads_Method(KeyPad);
                        if (HelpSHOW)
                        {
                            HELP();
                        }
                    }
                }
            }
        }
        public static void KeyPads_Method(Prop KeyPad)
        {
            switch (ExtraLootSwitch)
            {
                case 0://start
                    {
                        if (Game.Player.Character.Position.DistanceTo(KeyPad.Position) < 1 && KeyPad.AttachedBlip != null)
                        {
                            Screen.ShowHelpTextThisFrame("Press ~INPUT_CONTEXT~ to hack the keypad.");
                            if (Game.IsControlJustPressed(GTA.Control.Context))
                            {
                                Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player, true);
                                if (Groups.IS_PED_USING_ACTION_MODE(Game.Player.Character))
                                {
                                    Groups.SET_PED_USING_ACTION_MODE(Game.Player.Character, false, "DEFAULT_ACTION");
                                    IsUsingActionMode = true;
                                }
                                else
                                {
                                    IsUsingActionMode = false;
                                }
                                AllowControl = true;
                                iVar62 = 31;
                                numMin = 3;
                                numSec = 6;
                                numSec2 = 0;
                                numMil = 0;
                                numMil2 = 0;
                                Random rand = new Random();
                                animchoice = rand.Next(1, 3);
                                PrintsAllowed = rand.Next(1, 5);
                                MoveLR = 1;
                                MoveUD = 1;
                                SelectedTiles.Clear();
                                Lives = rand.Next(1, 7);
                                RandomSpots[0] = 0;
                                RandomSpots[1] = 0;
                                RandomSpots[2] = 0;
                                RandomSpots[3] = 0;
                                RandomSpots[4] = 0;
                                RandomSpots[5] = 0;
                                RandomSpots[6] = 0;
                                RandomSpots[7] = 0;
                                RandomSpots[8] = 0;
                                PrintChoice[0] = 0;
                                PrintChoice[1] = 0;
                                PrintChoice[2] = 0;
                                PrintChoice[3] = 0;
                                Main.LoadDict("anim_heist@hs3f@ig1_hack_keypad@male@");
                                Main.LoadDict("anim_heist@hs3f@ig1_hack_keypad@male@");
                                Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_HEIST3/Fingerprint_Match");
                                Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "DLC_HEIST3/Fingerprint_Match", false, -1);
                                Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_HEIST3/Door_Hacking");
                                Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "DLC_HEIST3/Door_Hacking", false, -1);
                                Wait(50);
                                Vector3 intinaloffsetpos = Function.Call<Vector3>(Hash.GET_ANIM_INITIAL_OFFSET_POSITION, "anim_heist@hs3f@ig1_hack_keypad@male@", "action_var_0" + animchoice, KeyPad.Position.X, KeyPad.Position.Y, KeyPad.Position.Z, KeyPad.Rotation.X, KeyPad.Rotation.Y, KeyPad.Rotation.Z, 0f, 2);
                                Vector3 intinaloffsetrot = Function.Call<Vector3>(Hash.GET_ANIM_INITIAL_OFFSET_ROTATION, "anim_heist@hs3f@ig1_hack_keypad@male@", "action_var_0" + animchoice, KeyPad.Position.X, KeyPad.Position.Y, KeyPad.Position.Z, KeyPad.Rotation.X, KeyPad.Rotation.Y, KeyPad.Rotation.Z, 0f, 2);

                                unsafe
                                {
                                    int Task5 = 0;
                                    Function.Call(Hash.OPEN_SEQUENCE_TASK, &Task5);
                                    if (Game.Player.Character.IsRunning || Game.Player.Character.IsSprinting)
                                    {
                                        Function.Call(Hash.TASK_FOLLOW_NAV_MESH_TO_COORD, 0, intinaloffsetpos.X, intinaloffsetpos.Y, intinaloffsetpos.Z, 1f, 5000, 0.1f, 512, intinaloffsetrot.Z);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.TASK_FOLLOW_NAV_MESH_TO_COORD, 0, intinaloffsetpos.X, intinaloffsetpos.Y, intinaloffsetpos.Z, 1f, 5000, 0.1f, 2, intinaloffsetrot.Z);
                                    }
                                    Function.Call(Hash.CLOSE_SEQUENCE_TASK, Task5);
                                    Function.Call(Hash.TASK_PERFORM_SEQUENCE, Game.Player.Character, Task5);
                                    Function.Call(Hash.CLEAR_SEQUENCE_TASK, &Task5);
                                }
                                Wait(500);
                                while (Function.Call<int>(Hash.GET_SEQUENCE_PROGRESS, Game.Player.Character) != -1)
                                {
                                    Wait(0);
                                }
                                Game.Player.Character.Weapons.Select(WeaponHash.Unarmed);
                                //HudHandler.HudandRadar(false, false);
                                while (Phone == null)
                                {
                                    Phone = World.CreateProp(Main.RequestModel("prop_phone_ing"), new Vector3(0f, 0f, 0f), false, false);
                                    Wait(0);
                                }
                                Phone.IsVisible = false;
                                while (USB == null)
                                {
                                    USB = World.CreateProp(Main.RequestModel("ch_prop_ch_usb_drive01x"), new Vector3(0f, 0f, 0f), false, false);
                                    Wait(0);
                                }
                                USB.IsVisible = false;
                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, KeyPad.Position.X, KeyPad.Position.Y, KeyPad.Position.Z, KeyPad.Rotation.X, KeyPad.Rotation.Y, KeyPad.Rotation.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "anim_heist@hs3f@ig1_hack_keypad@male@", "action_var_0" + animchoice, 0.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Phone, Main.TestCutsceneAnim, "action_var_0" + animchoice + "prop_phone_ing", Main.LoadDict("anim_heist@hs3f@ig1_hack_keypad@male@"), 1000.0f, 0.0f, 0, 1000.0f);
                                Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, Phone, Game.Player.Character, Game.Player.Character.Bones[(Bone)28422].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(Phone);
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, USB, Main.TestCutsceneAnim, "action_var_0" + animchoice + "ch_prop_ch_usb_drive01x", Main.LoadDict("anim_heist@hs3f@ig1_hack_keypad@male@"), 1000.0f, 0.0f, 0, 1000.0f);
                                Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, USB, Game.Player.Character, Game.Player.Character.Bones[(Bone)60309].Index, 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(USB);
                                USB.IsVisible = true;
                                Phone.IsVisible = true;
                                while (!Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, Main.LoadDict("anim_heist@hs3f@ig1_hack_keypad@male@"), "action_var_0" + animchoice, 3))
                                {
                                    Wait(0);
                                }
                                Function.Call(Hash.REQUEST_STREAMED_TEXTURE_DICT, "MPFClone_Common");
                                Function.Call(Hash.REQUEST_STREAMED_TEXTURE_DICT, "MPFClone_Grid");
                                Function.Call(Hash.REQUEST_STREAMED_TEXTURE_DICT, "MPFClone_Grid1");
                                Function.Call(Hash.REQUEST_STREAMED_TEXTURE_DICT, "MPFClone_Grid2");
                                Function.Call(Hash.REQUEST_STREAMED_TEXTURE_DICT, "MPFClone_GridDetails");
                                Function.Call(Hash.REQUEST_STREAMED_TEXTURE_DICT, "MPFClone_Decor");
                                Function.Call(Hash.REQUEST_STREAMED_TEXTURE_DICT, "MPFClone_Decor1");
                                int iVar0 = 0;
                                while (iVar0 <= 3)
                                {
                                    Function.Call(Hash.REQUEST_STREAMED_TEXTURE_DICT, "MPFClone_Print" + iVar0);
                                    iVar0++;
                                    Wait(0);
                                }
                                Function.Call(Hash.REQUEST_STREAMED_TEXTURE_DICT, "mphackinggameoverlay");
                                Function.Call(Hash.REQUEST_STREAMED_TEXTURE_DICT, "mphackinggameoverlay1");
                                Function.Call(Hash.REQUEST_STREAMED_TEXTURE_DICT, "mphackinggame");
                                Function.Call(Hash.REQUEST_STREAMED_TEXTURE_DICT, "mphackinggamebg");
                                Function.Call(Hash.REQUEST_STREAMED_TEXTURE_DICT, "mphackinggamewin");
                                Function.Call(Hash.REQUEST_STREAMED_TEXTURE_DICT, "mphackinggamewin3");

                                int iVar4 = 0;
                                while (iVar4 < 4)
                                {
                                    int newNumber = RNG.Next(1, 5);
                                    if (!PrintChoice.Contains(newNumber))
                                    {
                                        PrintChoice[iVar4] = newNumber;
                                        iVar4++;
                                    }
                                    else
                                    {
                                        newNumber = RNG.Next(1, 5);
                                    }
                                    Wait(0);
                                }

                                int iVar5 = 1;
                                while (iVar5 <= 8)
                                {
                                    int newNumber = RNG.Next(1, 9);
                                    if (!RandomSpots.Contains(newNumber))
                                    {
                                        RandomSpots[iVar5] = newNumber;
                                        iVar5++;
                                    }
                                    else
                                    {
                                        newNumber = RNG.Next(1, 9);
                                    }
                                    Wait(0);
                                }

                                fcalpha = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 127, 255);

                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, KeyPad.Position.X, KeyPad.Position.Y, KeyPad.Position.Z, KeyPad.Rotation.X, KeyPad.Rotation.Y, KeyPad.Rotation.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "anim_heist@hs3f@ig1_hack_keypad@male@", "hack_loop_var_0" + animchoice, 0.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Phone, Main.TestCutsceneAnim, "hack_loop_var_0" + animchoice + "prop_phone_ing", Main.LoadDict("anim_heist@hs3f@ig1_hack_keypad@male@"), 1000.0f, 0.0f, 0, 1000.0f);
                                Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(Phone);
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, USB, Main.TestCutsceneAnim, "hack_loop_var_0" + animchoice + "ch_prop_ch_usb_drive01x", Main.LoadDict("anim_heist@hs3f@ig1_hack_keypad@male@"), 1000.0f, 0.0f, 0, 1000.0f);
                                Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(USB);
                                Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, true);
                                HudHandler.HudandRadar(false, false);
                                Wait(1000);
                                Function.Call(Hash.START_AUDIO_SCENE, "DLC_H3_Fingerprint_Hack_Scene");
                                while (Bink == 0)
                                {
                                    if (Game.Player.Character.IsDead)
                                    {
                                        break;
                                    }
                                    Bink = Function.Call<int>(Hash.SET_BINK_MOVIE, "INTRO_FC");
                                    Wait(0);
                                }
                                Function.Call(Hash.PLAY_BINK_MOVIE, Bink);
                                Function.Call(Hash.SET_BINK_MOVIE_TIME, Bink, 0.0f);
                                while (Function.Call<float>(Hash.GET_BINK_MOVIE_TIME, Bink) < 0.1f)
                                {
                                    if (Game.Player.Character.IsDead)
                                    {
                                        break;
                                    }
                                    Function.Call(Hash.DRAW_BINK_MOVIE, Bink, 0.5f, 0.5f, 1.0f, 1.0f, 0f, 255, 255, 255, 255);
                                    Wait(0);
                                }
                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Startup_Sequence", "DLC_H3_Cas_Door_Minigame_Sounds", true);
                                while (Function.Call<float>(Hash.GET_BINK_MOVIE_TIME, Bink) < 75f)
                                {
                                    if (Game.Player.Character.IsDead)
                                    {
                                        break;
                                    }
                                    Function.Call(Hash.DRAW_BINK_MOVIE, Bink, 0.5f, 0.5f, 1.0f, 1.0f, 0f, 255, 255, 255, 255);
                                    Wait(0);
                                }
                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Draw_Screen", "DLC_H3_Cas_Door_Minigame_Sounds", true);
                                while (Function.Call<float>(Hash.GET_BINK_MOVIE_TIME, Bink) < 99f)
                                {
                                    if (Game.Player.Character.IsDead)
                                    {
                                        break;
                                    }
                                    Function.Call(Hash.DRAW_BINK_MOVIE, Bink, 0.5f, 0.5f, 1.0f, 1.0f, 0f, 255, 255, 255, 255);
                                    Wait(0);
                                }
                                Function.Call(Hash.STOP_BINK_MOVIE, Bink);
                                Function.Call(Hash.RELEASE_BINK_MOVIE, Bink);
                                SoundId = Function.Call<int>(Hash.GET_SOUND_ID);
                                Function.Call(Hash.PLAY_SOUND_FRONTEND, SoundId, "Background_Hum", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                Bink = 0;
                                HelpSHOW = true;
                                ExtraLootSwitch = 1;
                            }
                        }
                    }
                    break;
                case 1://mainframe
                    {
                        //int screenresx, screenresy;
                        //unsafe
                        //{
                        //Function.Call(Hash.GET_SCREEN_RESOLUTION, &screenresx, &screenresy);
                        //}
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 2, 27, true);//  DISABLE Phone
                        Function.Call(Hash.DISABLE_CONTROL_ACTION, 2, 19, true);//  DISABLE PLAYER SWITCH HUD
                        func_687();
                        Function.Call(Hash.DRAW_SPRITE, "mphackinggamebg", "bg", 0.5f, 0.5f, 1920f / 1920f, 1080f / 1080f, 0f, 255, 255, 255, 255, 0);
                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Black_BG", 0.5f, 0.5f, 1920f / 1920f, 1080f / 1080f, 0f, 5, 5, 5, 100, 0);
                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "background_layout", 0.5f, 0.5f, 1264f / 1920f, 940f / 1080f, 0f, 255, 255, 255, 255, 0);
                        Function.Call(Hash.DRAW_SPRITE, "mphackinggameoverlay", "grid_rgb_pixels", 0.5f, 0.5f, 1264f / 1920f, 940f / 1080f, 0f, 255, 255, 255, 255, 0);
                        Function.Call(Hash.DRAW_SPRITE, "mphackinggameoverlay1", "ScreenGrid", 0.5f, 0.5f, 1264f / 1920f, 940f / 1080f, 0f, 255, 255, 255, 255, 0);
                        switch (BGSwitch[0])
                        {
                            case 0:
                                {
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_Decor", "techaration_" + bgset[0], 0.5f, 0.5f, 1264f / 1920f, 940f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_GridDetails", "griddetails_" + bgset[0], func_10943(0.439f), 0.379f, 16f / 1920f, 512f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_GridDetails", "griddetails_" + bgset[0], func_10943(0.902f), 0.379f, 16f / 1920f, 512f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    if (Game.GameTime > bgtimer[0])
                                    {
                                        bgset[0]++;
                                        bgtimer[0] = Game.GameTime + 500;
                                    }
                                    if (bgset[0] > 1)
                                    {
                                        BGSwitch[0] = 1;
                                        bgtimer[0] = Game.GameTime + 500;
                                    }
                                }
                                break;
                            case 1:
                                {
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_Decor1", "techaration_" + bgset[0], 0.5f, 0.5f, 1264f / 1920f, 940f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_GridDetails", "griddetails_" + bgset[0], func_10943(0.439f), 0.379f, 16f / 1920f, 512f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_GridDetails", "griddetails_" + bgset[0], func_10943(0.902f), 0.379f, 16f / 1920f, 512f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    if (Game.GameTime > bgtimer[0])
                                    {
                                        bgset[0]++;
                                        bgtimer[0] = Game.GameTime + 500;
                                    }
                                    if (bgset[0] > 3)
                                    {
                                        bgset[0] = 0;
                                        BGSwitch[0] = 0;
                                    }
                                }
                                break;
                        }//sprite anim 1
                        switch (BGSwitch[1])
                        {
                            case 0:
                                {
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disc_a" + bgset[1], func_10943(0.983f), 0.669f, 100f / 1920f, 100f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disc_b" + bgset[1], func_10943(0.983f), 0.669f, 100f / 1920f, 100f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disc_c" + bgset[1], func_10943(0.983f), 0.669f, 100f / 1920f, 100f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    if (Game.GameTime > bgtimer[1])
                                    {
                                        bgset[1]++;
                                        bgtimer[1] = Game.GameTime + 500;
                                    }
                                    if (bgset[1] > 2)
                                    {
                                        bgset[1] = 0;
                                        bgtimer[1] = Game.GameTime + 500;
                                    }
                                }
                                break;
                        }//sprite anim 2
                        switch (BGSwitch[3])
                        {
                            case 0:// * 1f & 2f == middle nums || 
                                {
                                    Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "numbers_colon", func_10943(0.122f), 0.144f, 40f / 1920f, 60f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "numbers_colon", func_10943(0.122f + 0.031f * 3f), 0.144f, 40f / 1920f, 60f / 1080f, 0f, 255, 255, 255, 255, 0);



                                    numMil2--;
                                    if (numMil > 9)
                                    {
                                        numMil = 0;
                                    }
                                    else if (numMil < 0)
                                    {
                                        numMil = 9;
                                    }
                                    if (numMil2 > 9)
                                    {
                                        numMil2 = 0;
                                    }
                                    else if (numMil2 < 0)
                                    {
                                        numMil2 = 9;
                                    }
                                    if (numMil2 == 0)
                                    {
                                        numMil2 = 9;
                                        numMil--;
                                        if (numMil < 0)
                                        {
                                            numSec2--;
                                            numMil = 9;
                                        }
                                        else
                                        {

                                        }
                                    }
                                    Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "numbers_" + numMil, func_10943(0.122f + 0.031f * 4f), 0.144f, 40f / 1920f, 60f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "numbers_" + numMil2, func_10943(0.122f + 0.031f * 5f), 0.144f, 40f / 1920f, 60f / 1080f, 0f, 255, 255, 255, 255, 0);

                                    if (numSec > 6)
                                    {
                                        numSec = 0;
                                    }
                                    else if (numSec < 0)
                                    {
                                        numSec = 6;
                                    }

                                    if (numSec2 > 9)
                                    {
                                        numSec2 = 0;
                                    }
                                    else if (numSec2 < -1)
                                    {
                                        numSec2 = 9;
                                    }
                                    if (numSec2 == -1)
                                    {
                                        numSec2 = 9;
                                        numSec--;
                                        if (numSec < 0)
                                        {
                                            numSec2 = 0;
                                            numMin--;
                                            numSec = 6;
                                        }
                                        else
                                        {

                                        }
                                    }
                                    Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "numbers_" + numSec, func_10943(0.122f + 0.031f * 1f), 0.144f, 40f / 1920f, 60f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "numbers_" + numSec2, func_10943(0.122f + 0.031f * 2f), 0.144f, 40f / 1920f, 60f / 1080f, 0f, 255, 255, 255, 255, 0);

                                    if (numSec == 0 && numSec2 == -1)
                                    {
                                        numMin--;
                                        if (numMin < 0)
                                        {
                                            numMin = 3;
                                        }
                                        else
                                        {

                                        }
                                    }
                                    Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "numbers_0", func_10943(0.122f - 0.031f * 2f), 0.144f, 40f / 1920f, 60f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "numbers_" + numMin, func_10943(0.122f - 0.031f), 0.144f, 40f / 1920f, 60f / 1080f, 0f, 255, 255, 255, 255, 0);

                                    if (numMin == 0 && numSec == 0 && numSec2 == 0)
                                    {
                                        HackSwitch = 50;
                                    }
                                }
                                break;
                        }//timer sprite anim 1

                        switch (HackSwitch)
                        {
                            case 0://print 1
                                {
                                    if (AllowControl) CONTROLS();
                                    int actualprint = PrintChoice[0] - 1;
                                    int iVar0 = 1;
                                    while (iVar0 <= 8)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Print" + actualprint, "fp" + PrintChoice[0] + "_" + iVar0, func_10943(0.674f), 0.379f, 400f / 1920f, 512f / 1080f, 0f, 255, 255, 255, fcalpha, 0);
                                        iVar0++;
                                    }
                                    int iVar1 = 1;
                                    float posx = 0;
                                    float posy = 0;
                                    while (iVar1 <= 8)
                                    {
                                        int color = SelectedTiles.Contains(RandomSpots[iVar1]) ? 255 : 125;
                                        func_10961(RandomSpots[iVar1], out posx, out posy);
                                        Function.Call(Hash.DRAW_SPRITE, $"MPFClone_Print{actualprint}", $"fp{PrintChoice[0]}_comp_{iVar1}", func_10943(posx), posy, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, color, 0);
                                        iVar1++;
                                    }
                                    int iVar2 = 1;
                                    while (iVar2 <= Lives)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "life", func_10943(0.983f), 0.19f + 0.055f * iVar2, 64f / 1920f, 64f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        iVar2++;
                                    }
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decyphered_selector", func_10943(0.536f), 0.832f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    if (actualprint == 0)
                                    {
                                        if (SelectedTiles.Contains(RandomSpots[1]) && SelectedTiles.Contains(RandomSpots[4]) && SelectedTiles.Contains(RandomSpots[6]) && SelectedTiles.Contains(RandomSpots[7]))
                                        {
                                            HackOutCome = true;
                                        }
                                        else
                                        {
                                            HackOutCome = false;
                                        }
                                        if (SelectedTiles.Count == 4)
                                        {
                                            if (Game.IsControlJustPressed(GTA.Control.Context))
                                            {
                                                iVar62 = 31; AllowControl = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Window_Draw", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                SoundId2 = Function.Call<int>(Hash.GET_SOUND_ID);
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, SoundId2, "Processing", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 1;
                                            }
                                        }
                                    }
                                    if (actualprint == 1)
                                    {
                                        if (SelectedTiles.Contains(RandomSpots[1]) && SelectedTiles.Contains(RandomSpots[2]) && SelectedTiles.Contains(RandomSpots[3]) && SelectedTiles.Contains(RandomSpots[4]))
                                        {
                                            HackOutCome = true;
                                        }
                                        else
                                        {
                                            HackOutCome = false;
                                        }
                                        if (SelectedTiles.Count == 4)
                                        {
                                            if (Game.IsControlJustPressed(GTA.Control.Context))
                                            {
                                                iVar62 = 31; AllowControl = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Window_Draw", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                SoundId2 = Function.Call<int>(Hash.GET_SOUND_ID);
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, SoundId2, "Processing", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 1;
                                            }
                                        }
                                    }
                                    if (actualprint == 2)
                                    {
                                        if (SelectedTiles.Contains(RandomSpots[1]) && SelectedTiles.Contains(RandomSpots[2]) && SelectedTiles.Contains(RandomSpots[3]) && SelectedTiles.Contains(RandomSpots[4]))
                                        {
                                            HackOutCome = true;
                                        }
                                        else
                                        {
                                            HackOutCome = false;
                                        }
                                        if (SelectedTiles.Count == 4)
                                        {
                                            if (Game.IsControlJustPressed(GTA.Control.Context))
                                            {
                                                iVar62 = 31; AllowControl = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Window_Draw", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                SoundId2 = Function.Call<int>(Hash.GET_SOUND_ID);
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, SoundId2, "Processing", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 1;
                                            }
                                        }
                                    }
                                    if (actualprint == 3)
                                    {
                                        if (SelectedTiles.Contains(RandomSpots[1]) && SelectedTiles.Contains(RandomSpots[2]) && SelectedTiles.Contains(RandomSpots[3]) && SelectedTiles.Contains(RandomSpots[4]))
                                        {
                                            HackOutCome = true;
                                        }
                                        else
                                        {
                                            HackOutCome = false;
                                        }
                                        if (SelectedTiles.Count == 4)
                                        {
                                            if (Game.IsControlJustPressed(GTA.Control.Context))
                                            {
                                                iVar62 = 31; AllowControl = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Window_Draw", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                SoundId2 = Function.Call<int>(Hash.GET_SOUND_ID);
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, SoundId2, "Processing", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 1;
                                            }
                                        }
                                    }
                                    if (Lives <= 0)
                                    {
                                        HackSwitch = 50;
                                    }
                                }
                                break;
                            case 1://print 1 processing
                                {

                                    if (MoveLR == 1 && MoveUD == 1)
                                    {
                                        currentlySelectedTile = 1;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 1)
                                    {
                                        currentlySelectedTile = 2;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 2)
                                    {
                                        currentlySelectedTile = 3;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 2)
                                    {
                                        currentlySelectedTile = 4;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 3)
                                    {
                                        currentlySelectedTile = 5;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 3)
                                    {
                                        currentlySelectedTile = 6;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 4)
                                    {
                                        currentlySelectedTile = 7;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 4)
                                    {
                                        currentlySelectedTile = 8;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    int actualprint = PrintChoice[0] - 1;
                                    int iVar0 = 1;
                                    while (iVar0 <= 8)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Print" + actualprint, "fp" + PrintChoice[0] + "_" + iVar0, func_10943(0.674f), 0.379f, 400f / 1920f, 512f / 1080f, 0f, 255, 255, 255, fcalpha, 0);
                                        iVar0++;
                                    }
                                    int iVar1 = 1;
                                    float posx = 0;
                                    float posy = 0;
                                    while (iVar1 <= 8)
                                    {
                                        int color = SelectedTiles.Contains(RandomSpots[iVar1]) ? 255 : 125;
                                        func_10961(RandomSpots[iVar1], out posx, out posy);
                                        Function.Call(Hash.DRAW_SPRITE, $"MPFClone_Print{actualprint}", $"fp{PrintChoice[0]}_comp_{iVar1}", func_10943(posx), posy, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, color, 0);
                                        iVar1++;
                                    }
                                    int iVar2 = 1;
                                    while (iVar2 <= Lives)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "life", func_10943(0.983f), 0.19f + 0.055f * iVar2, 64f / 1920f, 64f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        iVar2++;
                                    }
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decyphered_selector", func_10943(0.536f), 0.832f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);

                                    Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Loading_Window", 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);

                                    if (Game.GameTime > previousUpdate + 60)
                                    {
                                        previousUpdate = Game.GameTime;
                                        if (iVar6 < 35)
                                        {
                                            iVar6++;
                                        }
                                    }
                                    for (int i = 0; i < iVar6; i++)
                                    {
                                        float x = 0.33f + 0.01f * i;
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Loading_Bar_Segment", KeyPad_Hacking.func_10943(x), 0.516f, 12f / 1920f, 40f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (iVar6 >= 35)
                                    {
                                        Audio.StopSound(SoundId2);
                                        Audio.ReleaseSound(SoundId2);
                                        if (HackOutCome)
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Target_Match", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                        }
                                        else
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "No_Match", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                        }
                                        bgtimer[2] = Game.GameTime + 500;
                                        iVar6 = 0;
                                        HackSwitch = 2;
                                    }
                                }
                                break;
                            case 2://print 1 processed
                                {
                                    if (MoveLR == 1 && MoveUD == 1)
                                    {
                                        currentlySelectedTile = 1;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 1)
                                    {
                                        currentlySelectedTile = 2;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 2)
                                    {
                                        currentlySelectedTile = 3;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 2)
                                    {
                                        currentlySelectedTile = 4;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 3)
                                    {
                                        currentlySelectedTile = 5;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 3)
                                    {
                                        currentlySelectedTile = 6;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 4)
                                    {
                                        currentlySelectedTile = 7;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 4)
                                    {
                                        currentlySelectedTile = 8;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    int actualprint = PrintChoice[0] - 1;
                                    int iVar0 = 1;
                                    while (iVar0 <= 8)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Print" + actualprint, "fp" + PrintChoice[0] + "_" + iVar0, func_10943(0.674f), 0.379f, 400f / 1920f, 512f / 1080f, 0f, 255, 255, 255, fcalpha, 0);
                                        iVar0++;
                                    }
                                    int iVar1 = 1;
                                    float posx = 0;
                                    float posy = 0;
                                    while (iVar1 <= 8)
                                    {
                                        int color = SelectedTiles.Contains(RandomSpots[iVar1]) ? 255 : 125;
                                        func_10961(RandomSpots[iVar1], out posx, out posy);
                                        Function.Call(Hash.DRAW_SPRITE, $"MPFClone_Print{actualprint}", $"fp{PrintChoice[0]}_comp_{iVar1}", func_10943(posx), posy, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, color, 0);
                                        iVar1++;
                                    }
                                    int iVar2 = 1;
                                    while (iVar2 <= Lives)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "life", func_10943(0.983f), 0.19f + 0.055f * iVar2, 64f / 1920f, 64f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        iVar2++;
                                    }
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decyphered_selector", func_10943(0.536f), 0.832f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);

                                    Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Loading_Window", 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    if (HackOutCome)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "correct_" + bgset[2], 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        if (Game.GameTime > bgtimer[2])
                                        {
                                            timer++;
                                            bgset[2]++;
                                            bgtimer[2] = Game.GameTime + 500;
                                        }
                                        if (bgset[2] > 1)
                                        {
                                            bgset[2] = 0;
                                            bgtimer[2] = Game.GameTime + 500;
                                        }
                                    }
                                    else
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "incorrect_" + bgset[2], 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        if (Game.GameTime > bgtimer[2])
                                        {
                                            timer++;
                                            bgset[2]++;
                                            bgtimer[2] = Game.GameTime + 500;
                                        }
                                        if (bgset[2] > 1)
                                        {
                                            bgset[2] = 0;
                                            bgtimer[2] = Game.GameTime + 500;
                                        }
                                    }
                                    if (timer >= 6)
                                    {
                                        if (!HackOutCome)
                                        {
                                            AllowControl = true;
                                            Lives--;
                                            timer = 0;
                                            SelectedTiles.Clear();
                                            RANDOMIZE_PRINTS_COMPS();
                                            MoveLR = 1;
                                            MoveUD = 1;
                                            HackOutCome = false;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Print_Appears", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                            HackSwitch = 0;
                                        }
                                        else
                                        {
                                            if (PrintsAllowed > 1)
                                            {
                                                AllowControl = true;
                                                timer = 0;
                                                SelectedTiles.Clear();
                                                RANDOMIZE_PRINTS_COMPS();
                                                MoveLR = 1;
                                                MoveUD = 1;
                                                HackOutCome = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Print_Appears", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 3;
                                            }
                                            else
                                            {
                                                AllowControl = true;
                                                timer = 0;
                                                SelectedTiles.Clear();
                                                RANDOMIZE_PRINTS_COMPS();
                                                MoveLR = 1;
                                                MoveUD = 1;
                                                HackOutCome = false;
                                                HackSwitch = 12;
                                            }
                                        }
                                    }
                                }
                                break;
                            case 3://print 2
                                {
                                    if (AllowControl) CONTROLS();
                                    int actualprint = PrintChoice[1] - 1;
                                    int iVar0 = 1;
                                    while (iVar0 <= 8)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Print" + actualprint, "fp" + PrintChoice[1] + "_" + iVar0, func_10943(0.674f), 0.379f, 400f / 1920f, 512f / 1080f, 0f, 255, 255, 255, fcalpha, 0);
                                        iVar0++;
                                    }
                                    int iVar1 = 1;
                                    float posx = 0;
                                    float posy = 0;
                                    while (iVar1 <= 8)
                                    {
                                        int color = SelectedTiles.Contains(RandomSpots[iVar1]) ? 255 : 125;
                                        func_10961(RandomSpots[iVar1], out posx, out posy);
                                        Function.Call(Hash.DRAW_SPRITE, $"MPFClone_Print{actualprint}", $"fp{PrintChoice[1]}_comp_{iVar1}", func_10943(posx), posy, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, color, 0);
                                        iVar1++;
                                    }
                                    int iVar2 = 1;
                                    while (iVar2 <= Lives)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "life", func_10943(0.983f), 0.19f + 0.055f * iVar2, 64f / 1920f, 64f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        iVar2++;
                                    }
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decyphered_selector", func_10943(0.662f), 0.832f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    if (actualprint == 0)
                                    {
                                        if (SelectedTiles.Contains(RandomSpots[1]) && SelectedTiles.Contains(RandomSpots[4]) && SelectedTiles.Contains(RandomSpots[6]) && SelectedTiles.Contains(RandomSpots[7]))
                                        {
                                            HackOutCome = true;
                                        }
                                        else
                                        {
                                            HackOutCome = false;
                                        }
                                        if (SelectedTiles.Count == 4)
                                        {
                                            if (Game.IsControlJustPressed(GTA.Control.Context))
                                            {
                                                iVar62 = 31; AllowControl = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Window_Draw", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                SoundId2 = Function.Call<int>(Hash.GET_SOUND_ID);
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, SoundId2, "Processing", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 4;
                                            }
                                        }
                                    }
                                    if (actualprint == 1)
                                    {
                                        if (SelectedTiles.Contains(RandomSpots[1]) && SelectedTiles.Contains(RandomSpots[2]) && SelectedTiles.Contains(RandomSpots[3]) && SelectedTiles.Contains(RandomSpots[4]))
                                        {
                                            HackOutCome = true;
                                        }
                                        else
                                        {
                                            HackOutCome = false;
                                        }
                                        if (SelectedTiles.Count == 4)
                                        {
                                            if (Game.IsControlJustPressed(GTA.Control.Context))
                                            {
                                                iVar62 = 31; AllowControl = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Window_Draw", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                SoundId2 = Function.Call<int>(Hash.GET_SOUND_ID);
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, SoundId2, "Processing", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 4;
                                            }
                                        }
                                    }
                                    if (actualprint == 2)
                                    {
                                        if (SelectedTiles.Contains(RandomSpots[1]) && SelectedTiles.Contains(RandomSpots[2]) && SelectedTiles.Contains(RandomSpots[3]) && SelectedTiles.Contains(RandomSpots[4]))
                                        {
                                            HackOutCome = true;
                                        }
                                        else
                                        {
                                            HackOutCome = false;
                                        }
                                        if (SelectedTiles.Count == 4)
                                        {
                                            if (Game.IsControlJustPressed(GTA.Control.Context))
                                            {
                                                iVar62 = 31; AllowControl = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Window_Draw", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                SoundId2 = Function.Call<int>(Hash.GET_SOUND_ID);
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, SoundId2, "Processing", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 4;
                                            }
                                        }
                                    }
                                    if (actualprint == 3)
                                    {
                                        if (SelectedTiles.Contains(RandomSpots[1]) && SelectedTiles.Contains(RandomSpots[2]) && SelectedTiles.Contains(RandomSpots[3]) && SelectedTiles.Contains(RandomSpots[4]))
                                        {
                                            HackOutCome = true;
                                        }
                                        else
                                        {
                                            HackOutCome = false;
                                        }
                                        if (SelectedTiles.Count == 4)
                                        {
                                            if (Game.IsControlJustPressed(GTA.Control.Context))
                                            {
                                                iVar62 = 31; AllowControl = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Window_Draw", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                SoundId2 = Function.Call<int>(Hash.GET_SOUND_ID);
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, SoundId2, "Processing", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 4;
                                            }
                                        }
                                    }
                                    if (Lives <= 0)
                                    {
                                        HackSwitch = 50;
                                    }
                                }
                                break;
                            case 4://print 2 processing
                                {
                                    if (MoveLR == 1 && MoveUD == 1)
                                    {
                                        currentlySelectedTile = 1;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 1)
                                    {
                                        currentlySelectedTile = 2;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 2)
                                    {
                                        currentlySelectedTile = 3;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 2)
                                    {
                                        currentlySelectedTile = 4;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 3)
                                    {
                                        currentlySelectedTile = 5;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 3)
                                    {
                                        currentlySelectedTile = 6;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 4)
                                    {
                                        currentlySelectedTile = 7;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 4)
                                    {
                                        currentlySelectedTile = 8;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    int actualprint = PrintChoice[1] - 1;
                                    int iVar0 = 1;
                                    while (iVar0 <= 8)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Print" + actualprint, "fp" + PrintChoice[1] + "_" + iVar0, func_10943(0.674f), 0.379f, 400f / 1920f, 512f / 1080f, 0f, 255, 255, 255, fcalpha, 0);
                                        iVar0++;
                                    }
                                    int iVar1 = 1;
                                    float posx = 0;
                                    float posy = 0;
                                    while (iVar1 <= 8)
                                    {
                                        int color = SelectedTiles.Contains(RandomSpots[iVar1]) ? 255 : 125;
                                        func_10961(RandomSpots[iVar1], out posx, out posy);
                                        Function.Call(Hash.DRAW_SPRITE, $"MPFClone_Print{actualprint}", $"fp{PrintChoice[1]}_comp_{iVar1}", func_10943(posx), posy, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, color, 0);
                                        iVar1++;
                                    }
                                    int iVar2 = 1;
                                    while (iVar2 <= Lives)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "life", func_10943(0.983f), 0.19f + 0.055f * iVar2, 64f / 1920f, 64f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        iVar2++;
                                    }
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decyphered_selector", func_10943(0.662f), 0.832f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);

                                    Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Loading_Window", 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);

                                    if (Game.GameTime > previousUpdate + 60)
                                    {
                                        previousUpdate = Game.GameTime;
                                        if (iVar6 < 35)
                                        {
                                            iVar6++;
                                        }
                                    }
                                    for (int i = 0; i < iVar6; i++)
                                    {
                                        float x = 0.33f + 0.01f * i;
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Loading_Bar_Segment", KeyPad_Hacking.func_10943(x), 0.516f, 12f / 1920f, 40f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (iVar6 >= 35)
                                    {
                                        Audio.StopSound(SoundId2);
                                        Audio.ReleaseSound(SoundId2);
                                        if (HackOutCome)
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Target_Match", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                        }
                                        else
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "No_Match", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                        }
                                        bgtimer[2] = Game.GameTime + 500;
                                        iVar6 = 0;
                                        HackSwitch = 5;
                                    }
                                }
                                break;
                            case 5://print 2 processed
                                {
                                    if (MoveLR == 1 && MoveUD == 1)
                                    {
                                        currentlySelectedTile = 1;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 1)
                                    {
                                        currentlySelectedTile = 2;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 2)
                                    {
                                        currentlySelectedTile = 3;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 2)
                                    {
                                        currentlySelectedTile = 4;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 3)
                                    {
                                        currentlySelectedTile = 5;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 3)
                                    {
                                        currentlySelectedTile = 6;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 4)
                                    {
                                        currentlySelectedTile = 7;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 4)
                                    {
                                        currentlySelectedTile = 8;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    int actualprint = PrintChoice[1] - 1;
                                    int iVar0 = 1;
                                    while (iVar0 <= 8)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Print" + actualprint, "fp" + PrintChoice[1] + "_" + iVar0, func_10943(0.674f), 0.379f, 400f / 1920f, 512f / 1080f, 0f, 255, 255, 255, fcalpha, 0);
                                        iVar0++;
                                    }
                                    int iVar1 = 1;
                                    float posx = 0;
                                    float posy = 0;
                                    while (iVar1 <= 8)
                                    {
                                        int color = SelectedTiles.Contains(RandomSpots[iVar1]) ? 255 : 125;
                                        func_10961(RandomSpots[iVar1], out posx, out posy);
                                        Function.Call(Hash.DRAW_SPRITE, $"MPFClone_Print{actualprint}", $"fp{PrintChoice[1]}_comp_{iVar1}", func_10943(posx), posy, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, color, 0);
                                        iVar1++;
                                    }
                                    int iVar2 = 1;
                                    while (iVar2 <= Lives)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "life", func_10943(0.983f), 0.19f + 0.055f * iVar2, 64f / 1920f, 64f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        iVar2++;
                                    }
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decyphered_selector", func_10943(0.662f), 0.832f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);

                                    Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Loading_Window", 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    if (HackOutCome)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "correct_" + bgset[2], 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        if (Game.GameTime > bgtimer[2])
                                        {
                                            timer++;
                                            bgset[2]++;
                                            bgtimer[2] = Game.GameTime + 500;
                                        }
                                        if (bgset[2] > 1)
                                        {
                                            bgset[2] = 0;
                                            bgtimer[2] = Game.GameTime + 500;
                                        }
                                    }
                                    else
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "incorrect_" + bgset[2], 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        if (Game.GameTime > bgtimer[2])
                                        {
                                            timer++;
                                            bgset[2]++;
                                            bgtimer[2] = Game.GameTime + 500;
                                        }
                                        if (bgset[2] > 1)
                                        {
                                            bgset[2] = 0;
                                            bgtimer[2] = Game.GameTime + 500;
                                        }
                                    }
                                    if (timer >= 6)
                                    {
                                        if (!HackOutCome)
                                        {
                                            AllowControl = true;
                                            Lives--;
                                            timer = 0;
                                            SelectedTiles.Clear();
                                            RANDOMIZE_PRINTS_COMPS();
                                            MoveLR = 1;
                                            MoveUD = 1;
                                            HackOutCome = false;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Print_Appears", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                            HackSwitch = 3;
                                        }
                                        else
                                        {
                                            if (PrintsAllowed > 2)
                                            {
                                                AllowControl = true;
                                                timer = 0;
                                                SelectedTiles.Clear();
                                                RANDOMIZE_PRINTS_COMPS();
                                                MoveLR = 1;
                                                MoveUD = 1;
                                                HackOutCome = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Print_Appears", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 6;
                                            }
                                            else
                                            {
                                                AllowControl = true;
                                                timer = 0;
                                                SelectedTiles.Clear();
                                                RANDOMIZE_PRINTS_COMPS();
                                                MoveLR = 1;
                                                MoveUD = 1;
                                                HackOutCome = false;
                                                HackSwitch = 12;
                                            }
                                        }
                                    }
                                }
                                break;
                            case 6://print 3
                                {
                                    if (AllowControl) CONTROLS();
                                    int actualprint = PrintChoice[2] - 1;
                                    int iVar0 = 1;
                                    while (iVar0 <= 8)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Print" + actualprint, "fp" + PrintChoice[2] + "_" + iVar0, func_10943(0.674f), 0.379f, 400f / 1920f, 512f / 1080f, 0f, 255, 255, 255, fcalpha, 0);
                                        iVar0++;
                                    }
                                    int iVar1 = 1;
                                    float posx = 0;
                                    float posy = 0;
                                    while (iVar1 <= 8)
                                    {
                                        int color = SelectedTiles.Contains(RandomSpots[iVar1]) ? 255 : 125;
                                        func_10961(RandomSpots[iVar1], out posx, out posy);
                                        Function.Call(Hash.DRAW_SPRITE, $"MPFClone_Print{actualprint}", $"fp{PrintChoice[2]}_comp_{iVar1}", func_10943(posx), posy, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, color, 0);
                                        iVar1++;
                                    }
                                    int iVar2 = 1;
                                    while (iVar2 <= Lives)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "life", func_10943(0.983f), 0.19f + 0.055f * iVar2, 64f / 1920f, 64f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        iVar2++;
                                    }
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decyphered_selector", func_10943(0.782f), 0.832f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    if (actualprint == 0)
                                    {
                                        if (SelectedTiles.Contains(RandomSpots[1]) && SelectedTiles.Contains(RandomSpots[4]) && SelectedTiles.Contains(RandomSpots[6]) && SelectedTiles.Contains(RandomSpots[7]))
                                        {
                                            HackOutCome = true;
                                        }
                                        else
                                        {
                                            HackOutCome = false;
                                        }
                                        if (SelectedTiles.Count == 4)
                                        {
                                            if (Game.IsControlJustPressed(GTA.Control.Context))
                                            {
                                                iVar62 = 31; AllowControl = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Window_Draw", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                SoundId2 = Function.Call<int>(Hash.GET_SOUND_ID);
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, SoundId2, "Processing", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 7;
                                            }
                                        }
                                    }
                                    if (actualprint == 1)
                                    {
                                        if (SelectedTiles.Contains(RandomSpots[1]) && SelectedTiles.Contains(RandomSpots[2]) && SelectedTiles.Contains(RandomSpots[3]) && SelectedTiles.Contains(RandomSpots[4]))
                                        {
                                            HackOutCome = true;
                                        }
                                        else
                                        {
                                            HackOutCome = false;
                                        }
                                        if (SelectedTiles.Count == 4)
                                        {
                                            if (Game.IsControlJustPressed(GTA.Control.Context))
                                            {
                                                iVar62 = 31; AllowControl = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Window_Draw", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                SoundId2 = Function.Call<int>(Hash.GET_SOUND_ID);
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, SoundId2, "Processing", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 7;
                                            }
                                        }
                                    }
                                    if (actualprint == 2)
                                    {
                                        if (SelectedTiles.Contains(RandomSpots[1]) && SelectedTiles.Contains(RandomSpots[2]) && SelectedTiles.Contains(RandomSpots[3]) && SelectedTiles.Contains(RandomSpots[4]))
                                        {
                                            HackOutCome = true;
                                        }
                                        else
                                        {
                                            HackOutCome = false;
                                        }
                                        if (SelectedTiles.Count == 4)
                                        {
                                            if (Game.IsControlJustPressed(GTA.Control.Context))
                                            {
                                                iVar62 = 31; AllowControl = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Window_Draw", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                SoundId2 = Function.Call<int>(Hash.GET_SOUND_ID);
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, SoundId2, "Processing", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 7;
                                            }
                                        }
                                    }
                                    if (actualprint == 3)
                                    {
                                        if (SelectedTiles.Contains(RandomSpots[1]) && SelectedTiles.Contains(RandomSpots[2]) && SelectedTiles.Contains(RandomSpots[3]) && SelectedTiles.Contains(RandomSpots[4]))
                                        {
                                            HackOutCome = true;
                                        }
                                        else
                                        {
                                            HackOutCome = false;
                                        }
                                        if (SelectedTiles.Count == 4)
                                        {
                                            if (Game.IsControlJustPressed(GTA.Control.Context))
                                            {
                                                iVar62 = 31; AllowControl = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Window_Draw", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                SoundId2 = Function.Call<int>(Hash.GET_SOUND_ID);
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, SoundId2, "Processing", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 7;
                                            }
                                        }
                                    }
                                    if (Lives <= 0)
                                    {
                                        HackSwitch = 50;
                                    }
                                }
                                break;
                            case 7://print 3 processing
                                {
                                    if (MoveLR == 1 && MoveUD == 1)
                                    {
                                        currentlySelectedTile = 1;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 1)
                                    {
                                        currentlySelectedTile = 2;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 2)
                                    {
                                        currentlySelectedTile = 3;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 2)
                                    {
                                        currentlySelectedTile = 4;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 3)
                                    {
                                        currentlySelectedTile = 5;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 3)
                                    {
                                        currentlySelectedTile = 6;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 4)
                                    {
                                        currentlySelectedTile = 7;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 4)
                                    {
                                        currentlySelectedTile = 8;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    int actualprint = PrintChoice[2] - 1;
                                    int iVar0 = 1;
                                    while (iVar0 <= 8)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Print" + actualprint, "fp" + PrintChoice[2] + "_" + iVar0, func_10943(0.674f), 0.379f, 400f / 1920f, 512f / 1080f, 0f, 255, 255, 255, fcalpha, 0);
                                        iVar0++;
                                    }
                                    int iVar1 = 1;
                                    float posx = 0;
                                    float posy = 0;
                                    while (iVar1 <= 8)
                                    {
                                        int color = SelectedTiles.Contains(RandomSpots[iVar1]) ? 255 : 125;
                                        func_10961(RandomSpots[iVar1], out posx, out posy);
                                        Function.Call(Hash.DRAW_SPRITE, $"MPFClone_Print{actualprint}", $"fp{PrintChoice[2]}_comp_{iVar1}", func_10943(posx), posy, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, color, 0);
                                        iVar1++;
                                    }
                                    int iVar2 = 1;
                                    while (iVar2 <= Lives)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "life", func_10943(0.983f), 0.19f + 0.055f * iVar2, 64f / 1920f, 64f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        iVar2++;
                                    }
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decyphered_selector", func_10943(0.782f), 0.832f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);

                                    Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Loading_Window", 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);

                                    if (Game.GameTime > previousUpdate + 60)
                                    {
                                        previousUpdate = Game.GameTime;
                                        if (iVar6 < 35)
                                        {
                                            iVar6++;
                                        }
                                    }
                                    for (int i = 0; i < iVar6; i++)
                                    {
                                        float x = 0.33f + 0.01f * i;
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Loading_Bar_Segment", KeyPad_Hacking.func_10943(x), 0.516f, 12f / 1920f, 40f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (iVar6 >= 35)
                                    {
                                        Audio.StopSound(SoundId2);
                                        Audio.ReleaseSound(SoundId2);
                                        if (HackOutCome)
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Target_Match", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                        }
                                        else
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "No_Match", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                        }
                                        bgtimer[2] = Game.GameTime + 500;
                                        iVar6 = 0;
                                        HackSwitch = 8;
                                    }
                                }
                                break;
                            case 8://print 3 processed
                                {
                                    if (MoveLR == 1 && MoveUD == 1)
                                    {
                                        currentlySelectedTile = 1;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 1)
                                    {
                                        currentlySelectedTile = 2;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 2)
                                    {
                                        currentlySelectedTile = 3;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 2)
                                    {
                                        currentlySelectedTile = 4;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 3)
                                    {
                                        currentlySelectedTile = 5;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 3)
                                    {
                                        currentlySelectedTile = 6;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 4)
                                    {
                                        currentlySelectedTile = 7;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 4)
                                    {
                                        currentlySelectedTile = 8;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    int actualprint = PrintChoice[2] - 1;
                                    int iVar0 = 1;
                                    while (iVar0 <= 8)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Print" + actualprint, "fp" + PrintChoice[2] + "_" + iVar0, func_10943(0.674f), 0.379f, 400f / 1920f, 512f / 1080f, 0f, 255, 255, 255, fcalpha, 0);
                                        iVar0++;
                                    }
                                    int iVar1 = 1;
                                    float posx = 0;
                                    float posy = 0;
                                    while (iVar1 <= 8)
                                    {
                                        int color = SelectedTiles.Contains(RandomSpots[iVar1]) ? 255 : 125;
                                        func_10961(RandomSpots[iVar1], out posx, out posy);
                                        Function.Call(Hash.DRAW_SPRITE, $"MPFClone_Print{actualprint}", $"fp{PrintChoice[2]}_comp_{iVar1}", func_10943(posx), posy, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, color, 0);
                                        iVar1++;
                                    }
                                    int iVar2 = 1;
                                    while (iVar2 <= Lives)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "life", func_10943(0.983f), 0.19f + 0.055f * iVar2, 64f / 1920f, 64f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        iVar2++;
                                    }
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decyphered_selector", func_10943(0.782f), 0.832f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);

                                    Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Loading_Window", 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    if (HackOutCome)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "correct_" + bgset[2], 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        if (Game.GameTime > bgtimer[2])
                                        {
                                            timer++;
                                            bgset[2]++;
                                            bgtimer[2] = Game.GameTime + 500;
                                        }
                                        if (bgset[2] > 1)
                                        {
                                            bgset[2] = 0;
                                            bgtimer[2] = Game.GameTime + 500;
                                        }
                                    }
                                    else
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "incorrect_" + bgset[2], 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        if (Game.GameTime > bgtimer[2])
                                        {
                                            timer++;
                                            bgset[2]++;
                                            bgtimer[2] = Game.GameTime + 500;
                                        }
                                        if (bgset[2] > 1)
                                        {
                                            bgset[2] = 0;
                                            bgtimer[2] = Game.GameTime + 500;
                                        }
                                    }
                                    if (timer >= 6)
                                    {
                                        if (!HackOutCome)
                                        {
                                            AllowControl = true;
                                            Lives--;
                                            timer = 0;
                                            SelectedTiles.Clear();
                                            RANDOMIZE_PRINTS_COMPS();
                                            MoveLR = 1;
                                            MoveUD = 1;
                                            HackOutCome = false;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Print_Appears", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                            HackSwitch = 6;
                                        }
                                        else
                                        {
                                            if (PrintsAllowed > 3)
                                            {
                                                AllowControl = true;
                                                timer = 0;
                                                SelectedTiles.Clear();
                                                RANDOMIZE_PRINTS_COMPS();
                                                MoveLR = 1;
                                                MoveUD = 1;
                                                HackOutCome = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Print_Appears", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 9;
                                            }
                                            else
                                            {
                                                AllowControl = true;
                                                timer = 0;
                                                SelectedTiles.Clear();
                                                RANDOMIZE_PRINTS_COMPS();
                                                MoveLR = 1;
                                                MoveUD = 1;
                                                HackOutCome = false;
                                                HackSwitch = 12;
                                            }
                                        }
                                    }
                                }
                                break;
                            case 9://print 4
                                {
                                    if (AllowControl) CONTROLS();
                                    int actualprint = PrintChoice[3] - 1;
                                    int iVar0 = 1;
                                    while (iVar0 <= 8)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Print" + actualprint, "fp" + PrintChoice[3] + "_" + iVar0, func_10943(0.674f), 0.379f, 400f / 1920f, 512f / 1080f, 0f, 255, 255, 255, fcalpha, 0);
                                        iVar0++;
                                    }
                                    int iVar1 = 1;
                                    float posx = 0;
                                    float posy = 0;
                                    while (iVar1 <= 8)
                                    {
                                        int color = SelectedTiles.Contains(RandomSpots[iVar1]) ? 255 : 125;
                                        func_10961(RandomSpots[iVar1], out posx, out posy);
                                        Function.Call(Hash.DRAW_SPRITE, $"MPFClone_Print{actualprint}", $"fp{PrintChoice[3]}_comp_{iVar1}", func_10943(posx), posy, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, color, 0);
                                        iVar1++;
                                    }
                                    int iVar2 = 1;
                                    while (iVar2 <= Lives)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "life", func_10943(0.983f), 0.19f + 0.055f * iVar2, 64f / 1920f, 64f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        iVar2++;
                                    }
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decyphered_selector", func_10943(0.905f), 0.832f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    if (actualprint == 0)
                                    {
                                        if (SelectedTiles.Contains(RandomSpots[1]) && SelectedTiles.Contains(RandomSpots[4]) && SelectedTiles.Contains(RandomSpots[6]) && SelectedTiles.Contains(RandomSpots[7]))
                                        {
                                            HackOutCome = true;
                                        }
                                        else
                                        {
                                            HackOutCome = false;
                                        }
                                        if (SelectedTiles.Count == 4)
                                        {
                                            if (Game.IsControlJustPressed(GTA.Control.Context))
                                            {
                                                iVar62 = 31; AllowControl = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Window_Draw", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                SoundId2 = Function.Call<int>(Hash.GET_SOUND_ID);
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, SoundId2, "Processing", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 10;
                                            }
                                        }
                                    }
                                    if (actualprint == 1)
                                    {
                                        if (SelectedTiles.Contains(RandomSpots[1]) && SelectedTiles.Contains(RandomSpots[2]) && SelectedTiles.Contains(RandomSpots[3]) && SelectedTiles.Contains(RandomSpots[4]))
                                        {
                                            HackOutCome = true;
                                        }
                                        else
                                        {
                                            HackOutCome = false;
                                        }
                                        if (SelectedTiles.Count == 4)
                                        {
                                            if (Game.IsControlJustPressed(GTA.Control.Context))
                                            {
                                                iVar62 = 31; AllowControl = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Window_Draw", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                SoundId2 = Function.Call<int>(Hash.GET_SOUND_ID);
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, SoundId2, "Processing", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 10;
                                            }
                                        }
                                    }
                                    if (actualprint == 2)
                                    {
                                        if (SelectedTiles.Contains(RandomSpots[1]) && SelectedTiles.Contains(RandomSpots[2]) && SelectedTiles.Contains(RandomSpots[3]) && SelectedTiles.Contains(RandomSpots[4]))
                                        {
                                            HackOutCome = true;
                                        }
                                        else
                                        {
                                            HackOutCome = false;
                                        }
                                        if (SelectedTiles.Count == 4)
                                        {
                                            if (Game.IsControlJustPressed(GTA.Control.Context))
                                            {
                                                iVar62 = 31; AllowControl = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Window_Draw", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                SoundId2 = Function.Call<int>(Hash.GET_SOUND_ID);
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, SoundId2, "Processing", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 10;
                                            }
                                        }
                                    }
                                    if (actualprint == 3)
                                    {
                                        if (SelectedTiles.Contains(RandomSpots[1]) && SelectedTiles.Contains(RandomSpots[2]) && SelectedTiles.Contains(RandomSpots[3]) && SelectedTiles.Contains(RandomSpots[4]))
                                        {
                                            HackOutCome = true;
                                        }
                                        else
                                        {
                                            HackOutCome = false;
                                        }
                                        if (SelectedTiles.Count == 4)
                                        {
                                            if (Game.IsControlJustPressed(GTA.Control.Context))
                                            {
                                                iVar62 = 31; AllowControl = false;
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Window_Draw", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                SoundId2 = Function.Call<int>(Hash.GET_SOUND_ID);
                                                Function.Call(Hash.PLAY_SOUND_FRONTEND, SoundId2, "Processing", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                                HackSwitch = 10;
                                            }
                                        }
                                    }
                                    if (Lives <= 0)
                                    {
                                        HackSwitch = 50;
                                    }
                                }
                                break;
                            case 10://print 4 processing
                                {
                                    if (MoveLR == 1 && MoveUD == 1)
                                    {
                                        currentlySelectedTile = 1;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 1)
                                    {
                                        currentlySelectedTile = 2;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 2)
                                    {
                                        currentlySelectedTile = 3;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 2)
                                    {
                                        currentlySelectedTile = 4;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 3)
                                    {
                                        currentlySelectedTile = 5;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 3)
                                    {
                                        currentlySelectedTile = 6;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 4)
                                    {
                                        currentlySelectedTile = 7;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 4)
                                    {
                                        currentlySelectedTile = 8;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    int actualprint = PrintChoice[3] - 1;
                                    int iVar0 = 1;
                                    while (iVar0 <= 8)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Print" + actualprint, "fp" + PrintChoice[3] + "_" + iVar0, func_10943(0.674f), 0.379f, 400f / 1920f, 512f / 1080f, 0f, 255, 255, 255, fcalpha, 0);
                                        iVar0++;
                                    }
                                    int iVar1 = 1;
                                    float posx = 0;
                                    float posy = 0;
                                    while (iVar1 <= 8)
                                    {
                                        int color = SelectedTiles.Contains(RandomSpots[iVar1]) ? 255 : 125;
                                        func_10961(RandomSpots[iVar1], out posx, out posy);
                                        Function.Call(Hash.DRAW_SPRITE, $"MPFClone_Print{actualprint}", $"fp{PrintChoice[3]}_comp_{iVar1}", func_10943(posx), posy, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, color, 0);
                                        iVar1++;
                                    }
                                    int iVar2 = 1;
                                    while (iVar2 <= Lives)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "life", func_10943(0.983f), 0.19f + 0.055f * iVar2, 64f / 1920f, 64f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        iVar2++;
                                    }
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decyphered_selector", func_10943(0.905f), 0.832f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);

                                    Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Loading_Window", 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);

                                    if (Game.GameTime > previousUpdate + 60)
                                    {
                                        previousUpdate = Game.GameTime;
                                        if (iVar6 < 35)
                                        {
                                            iVar6++;
                                        }
                                    }
                                    for (int i = 0; i < iVar6; i++)
                                    {
                                        float x = 0.33f + 0.01f * i;
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Loading_Bar_Segment", KeyPad_Hacking.func_10943(x), 0.516f, 12f / 1920f, 40f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (iVar6 >= 35)
                                    {
                                        Audio.StopSound(SoundId2);
                                        Audio.ReleaseSound(SoundId2);
                                        if (HackOutCome)
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Target_Match", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                        }
                                        else
                                        {
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "No_Match", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                        }
                                        bgtimer[2] = Game.GameTime + 500;
                                        iVar6 = 0;
                                        HackSwitch = 11;
                                    }
                                }
                                break;
                            case 11://print 4 processed
                                {
                                    if (MoveLR == 1 && MoveUD == 1)
                                    {
                                        currentlySelectedTile = 1;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 1)
                                    {
                                        currentlySelectedTile = 2;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 2)
                                    {
                                        currentlySelectedTile = 3;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 2)
                                    {
                                        currentlySelectedTile = 4;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 3)
                                    {
                                        currentlySelectedTile = 5;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 3)
                                    {
                                        currentlySelectedTile = 6;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }

                                    if (MoveLR == 1 && MoveUD == 4)
                                    {
                                        currentlySelectedTile = 7;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    if (MoveLR == 2 && MoveUD == 4)
                                    {
                                        currentlySelectedTile = 8;
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    }
                                    int actualprint = PrintChoice[3] - 1;
                                    int iVar0 = 1;
                                    while (iVar0 <= 8)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Print" + actualprint, "fp" + PrintChoice[3] + "_" + iVar0, func_10943(0.674f), 0.379f, 400f / 1920f, 512f / 1080f, 0f, 255, 255, 255, fcalpha, 0);
                                        iVar0++;
                                    }
                                    int iVar1 = 1;
                                    float posx = 0;
                                    float posy = 0;
                                    while (iVar1 <= 8)
                                    {
                                        int color = SelectedTiles.Contains(RandomSpots[iVar1]) ? 255 : 125;
                                        func_10961(RandomSpots[iVar1], out posx, out posy);
                                        Function.Call(Hash.DRAW_SPRITE, $"MPFClone_Print{actualprint}", $"fp{PrintChoice[3]}_comp_{iVar1}", func_10943(posx), posy, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, color, 0);
                                        iVar1++;
                                    }
                                    int iVar2 = 1;
                                    while (iVar2 <= Lives)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "life", func_10943(0.983f), 0.19f + 0.055f * iVar2, 64f / 1920f, 64f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        iVar2++;
                                    }
                                    Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decyphered_selector", func_10943(0.905f), 0.832f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);

                                    Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Loading_Window", 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                    if (HackOutCome)
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "correct_" + bgset[2], 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        if (Game.GameTime > bgtimer[2])
                                        {
                                            timer++;
                                            bgset[2]++;
                                            bgtimer[2] = Game.GameTime + 500;
                                        }
                                        if (bgset[2] > 1)
                                        {
                                            bgset[2] = 0;
                                            bgtimer[2] = Game.GameTime + 500;
                                        }
                                    }
                                    else
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "incorrect_" + bgset[2], 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        if (Game.GameTime > bgtimer[2])
                                        {
                                            timer++;
                                            bgset[2]++;
                                            bgtimer[2] = Game.GameTime + 500;
                                        }
                                        if (bgset[2] > 1)
                                        {
                                            bgset[2] = 0;
                                            bgtimer[2] = Game.GameTime + 500;
                                        }
                                    }
                                    if (timer >= 6)
                                    {
                                        if (!HackOutCome)
                                        {
                                            AllowControl = true;
                                            Lives--;
                                            timer = 0;
                                            SelectedTiles.Clear();
                                            RANDOMIZE_PRINTS_COMPS();
                                            MoveLR = 1;
                                            MoveUD = 1;
                                            HackOutCome = false;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Print_Appears", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                            HackSwitch = 9;
                                        }
                                        else
                                        {
                                            AllowControl = true;
                                            timer = 0;
                                            SelectedTiles.Clear();
                                            RANDOMIZE_PRINTS_COMPS();
                                            MoveLR = 1;
                                            MoveUD = 1;
                                            HackOutCome = false;
                                            HackSwitch = 12;
                                        }
                                    }
                                }
                                break;
                            case 12://success exit
                                {
                                    Audio.StopSound(SoundId);
                                    Audio.ReleaseSound(SoundId);
                                    Audio.StopSound(SoundId2);
                                    Audio.ReleaseSound(SoundId2);
                                    Phone.Delete();
                                    Phone = null;
                                    while (Bink == 0)
                                    {
                                        if (Game.Player.Character.IsDead)
                                        {
                                            break;
                                        }
                                        Bink = Function.Call<int>(Hash.SET_BINK_MOVIE, "Success_FC");
                                        Wait(0);
                                    }
                                    Function.Call(Hash.PLAY_BINK_MOVIE, Bink);
                                    Function.Call(Hash.SET_BINK_MOVIE_TIME, Bink, 0.0f);
                                    HelpSHOW = false;
                                    while (Function.Call<float>(Hash.GET_BINK_MOVIE_TIME, Bink) < 0.1f)
                                    {
                                        if (Game.Player.Character.IsDead)
                                        {
                                            break;
                                        }
                                        Function.Call(Hash.DRAW_BINK_MOVIE, Bink, 0.5f, 0.5f, 1.0f, 1.0f, 0f, 255, 255, 255, 255);
                                        Wait(0);
                                    }
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Hack_Success", "DLC_H3_Cas_Door_Minigame_Sounds", true);
                                    while (Function.Call<float>(Hash.GET_BINK_MOVIE_TIME, Bink) < 75f)
                                    {
                                        if (Game.Player.Character.IsDead)
                                        {
                                            break;
                                        }
                                        Function.Call(Hash.DRAW_BINK_MOVIE, Bink, 0.5f, 0.5f, 1.0f, 1.0f, 0f, 255, 255, 255, 255);
                                        Wait(0);
                                    }
                                    while (Function.Call<float>(Hash.GET_BINK_MOVIE_TIME, Bink) < 99f)
                                    {
                                        if (Game.Player.Character.IsDead)
                                        {
                                            break;
                                        }
                                        Function.Call(Hash.DRAW_BINK_MOVIE, Bink, 0.5f, 0.5f, 1.0f, 1.0f, 0f, 255, 255, 255, 255);
                                        Wait(0);
                                    }
                                    Function.Call(Hash.STOP_BINK_MOVIE, Bink);
                                    Function.Call(Hash.RELEASE_BINK_MOVIE, Bink);
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, KeyPad.Position.X, KeyPad.Position.Y, KeyPad.Position.Z, KeyPad.Rotation.X, KeyPad.Rotation.Y, KeyPad.Rotation.Z, 2);
                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "anim_heist@hs3f@ig1_hack_keypad@male@", "success_react_exit_var_0" + animchoice, 0.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, USB, Main.TestCutsceneAnim, "success_react_exit_var_0" + animchoice + "_ch_prop_ch_usb_drive01x", Main.LoadDict("anim_heist@hs3f@ig1_hack_keypad@male@"), 1000.0f, 0.0f, 0, 1000.0f);
                                    Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(USB);
                                    Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, false);
                                    HudHandler.HudandRadar(true, true);
                                    Bink = 0;
                                    HackSwitch = 0;
                                    BGSwitch[0] = 0;
                                    BGSwitch[1] = 0;
                                    bgset[0] = 0;
                                    bgset[1] = 0;
                                    bgset[2] = 0;
                                    ExtraLootSwitch = 0;
                                    while (!Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, Main.LoadDict("anim_heist@hs3f@ig1_hack_keypad@male@"), "success_react_exit_var_0" + animchoice, 3))
                                    {
                                        Wait(0);
                                    }
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_HEIST3/Fingerprint_Match");
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_HEIST3/Door_Hacking");
                                    Prop[] gates = World.GetNearbyProps(KeyPad.Position, disttodoor, Main.RequestModel(doormodel));
                                    foreach (Prop gate in gates)
                                    {
                                        if (gate != null)
                                        {
                                            while (gate.IsPositionFrozen)
                                            {
                                                gate.IsPositionFrozen = false;
                                                Wait(0);
                                            }
                                        }
                                    }
                                    USB.Delete();
                                    USB = null;
                                    if (KeyPad.AttachedBlip != null)
                                    {
                                        KeyPad.AttachedBlip.Delete();
                                    }
                                    Game.Player.Character.Task.ClearAll();
                                    if (IsUsingActionMode)
                                    {
                                        Groups.SET_PED_USING_ACTION_MODE(Game.Player.Character, true, "DEFAULT_ACTION");
                                    }
                                    Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player, false);
                                }
                                break;
                            case 50://fail exit
                                {
                                    Audio.StopSound(SoundId);
                                    Audio.ReleaseSound(SoundId);
                                    Audio.StopSound(SoundId2);
                                    Audio.ReleaseSound(SoundId2);
                                    Phone.Delete();
                                    Phone = null;
                                    while (Bink == 0)
                                    {
                                        if (Game.Player.Character.IsDead)
                                        {
                                            break;
                                        }
                                        Bink = Function.Call<int>(Hash.SET_BINK_MOVIE, "FAIL_FC");
                                        Wait(0);
                                    }
                                    Function.Call(Hash.PLAY_BINK_MOVIE, Bink);
                                    Function.Call(Hash.SET_BINK_MOVIE_TIME, Bink, 0.0f);
                                    HelpSHOW = false;
                                    while (Function.Call<float>(Hash.GET_BINK_MOVIE_TIME, Bink) < 0.1f)
                                    {
                                        if (Game.Player.Character.IsDead)
                                        {
                                            break;
                                        }
                                        Function.Call(Hash.DRAW_BINK_MOVIE, Bink, 0.5f, 0.5f, 1.0f, 1.0f, 0f, 255, 255, 255, 255);
                                        Wait(0);
                                    }
                                    Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Hack_Failed", "DLC_H3_Cas_Door_Minigame_Sounds", true);
                                    while (Function.Call<float>(Hash.GET_BINK_MOVIE_TIME, Bink) < 75f)
                                    {
                                        if (Game.Player.Character.IsDead)
                                        {
                                            break;
                                        }
                                        Function.Call(Hash.DRAW_BINK_MOVIE, Bink, 0.5f, 0.5f, 1.0f, 1.0f, 0f, 255, 255, 255, 255);
                                        Wait(0);
                                    }
                                    while (Function.Call<float>(Hash.GET_BINK_MOVIE_TIME, Bink) < 99f)
                                    {
                                        if (Game.Player.Character.IsDead)
                                        {
                                            break;
                                        }
                                        Function.Call(Hash.DRAW_BINK_MOVIE, Bink, 0.5f, 0.5f, 1.0f, 1.0f, 0f, 255, 255, 255, 255);
                                        Wait(0);
                                    }
                                    Function.Call(Hash.STOP_BINK_MOVIE, Bink);
                                    Function.Call(Hash.RELEASE_BINK_MOVIE, Bink);
                                    Function.Call(Hash.STOP_AUDIO_SCENES);
                                    Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, KeyPad.Position.X, KeyPad.Position.Y, KeyPad.Position.Z, KeyPad.Rotation.X, KeyPad.Rotation.Y, KeyPad.Rotation.Z, 2);
                                    Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "anim_heist@hs3f@ig1_hack_keypad@male@", "fail_react_quick", 0.0, 0.0, 0, 0, 1148846080, 0); // Objects
                                    Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, USB, Main.TestCutsceneAnim, "fail_react_quick_ch_prop_ch_usb_drive01x", Main.LoadDict("anim_heist@hs3f@ig1_hack_keypad@male@"), 1000.0f, 0.0f, 0, 1000.0f);
                                    Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(USB);
                                    Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, false);
                                    HudHandler.HudandRadar(true, true);
                                    Bink = 0;
                                    HackSwitch = 0;
                                    BGSwitch[0] = 0;
                                    BGSwitch[1] = 0;
                                    bgset[0] = 0;
                                    bgset[1] = 0;
                                    bgset[2] = 0;
                                    ExtraLootSwitch = 0;
                                    while (!Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, Main.LoadDict("anim_heist@hs3f@ig1_hack_keypad@male@"), "fail_react_quick", 3))
                                    {
                                        Wait(0);
                                    }
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_HEIST3/Fingerprint_Match");
                                    Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_HEIST3/Door_Hacking");
                                    USB.Delete();
                                    USB = null;
                                    Game.Player.Character.Task.ClearAll();
                                    if (IsUsingActionMode)
                                    {
                                        Groups.SET_PED_USING_ACTION_MODE(Game.Player.Character, true, "DEFAULT_ACTION");
                                    }
                                    Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player, false);
                                }
                                break;
                        }
                        if (Game.IsControlPressed(GTA.Control.Reload))
                        {
                            if (Game.GameTime > AbortTimer)
                            {
                                AbortTimer = 0;
                                HackSwitch = 50;
                            }
                        }
                        else
                        {
                            AbortTimer = Game.GameTime + 3000;
                        }

                        if (ExtraLootSwitch == 1)
                        {
                            if (PrintsAllowed == 1)
                            {
                                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[0], func_10943(0.536f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disabled_signal", func_10943(0.662f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disabled_signal", func_10943(0.782f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disabled_signal", func_10943(0.905f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                            }
                            if (PrintsAllowed == 2)
                            {
                                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[0], func_10943(0.536f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[1], func_10943(0.662f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disabled_signal", func_10943(0.782f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disabled_signal", func_10943(0.905f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                            }
                            if (PrintsAllowed == 3)
                            {
                                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[0], func_10943(0.536f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[1], func_10943(0.662f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[2], func_10943(0.782f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disabled_signal", func_10943(0.905f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                            }
                            if (PrintsAllowed == 4)
                            {
                                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[0], func_10943(0.536f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[1], func_10943(0.662f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[2], func_10943(0.782f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[3], func_10943(0.905f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                            }
                            //Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Scrambler_BG", 0.169f, 0.845f, 400f / 1920f, 64f / 1080f, 0f, 255, 255, 255, 250, 0);

                            switch (BGSwitch[4])
                            {
                                case 0:
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Scrambler_BG", 0.313f, 0.846f, 400f / 1920f, 64f / 1080f, 0f, 255, 255, 255, 255, 0);

                                        if (Game.GameTime > previousUpdate2)
                                        {
                                            previousUpdate2 = Game.GameTime + 3000;
                                            if (iVar62 > 0)
                                            {
                                                if (AllowControl) iVar62--;
                                            }
                                        }
                                        for (int i = 0; i < iVar62; i++)
                                        {
                                            float x = 0.217f + 0.00635f * i;
                                            Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "scrambler_fill_segment", x, 0.852f, 12f / 1920f, 80f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        }
                                        if (iVar62 == 0)
                                        {
                                            SelectedTiles.Clear();
                                            MoveLR = 1;
                                            MoveUD = 1;
                                            AllowControl = false;
                                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Print_Shuffle", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                                            bgtimer[2] = Game.GameTime + 500;
                                            iVar62 = 31; AllowControl = false;
                                            BGSwitch[4] = 1;
                                        }
                                    }
                                    break;
                                case 1:
                                    {
                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Scrambler_BG", 0.313f, 0.846f, 400f / 1920f, 64f / 1080f, 0f, 255, 255, 255, 255, 0);

                                        Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "loading_window_blank", 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);

                                        if (Game.GameTime > previousUpdate + 130)
                                        {
                                            RANDOMIZE_PRINTS_COMPS();
                                            previousUpdate = Game.GameTime;
                                            if (iVar6 < 35)
                                            {
                                                iVar6++;
                                            }
                                        }
                                        for (int i = 0; i < iVar6; i++)
                                        {
                                            float x = 0.33f + 0.01f * i;
                                            Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Loading_Bar_Segment", KeyPad_Hacking.func_10943(x), 0.516f, 12f / 1920f, 40f / 1080f, 0f, 255, 255, 255, 255, 0);
                                        }
                                        if (iVar6 >= 35)
                                        {
                                            AllowControl = true;
                                            bgtimer[2] = Game.GameTime + 500;
                                            iVar6 = 0;
                                            BGSwitch[4] = 0;
                                        }
                                    }
                                    break;
                            }//timer sprite anim 2
                        }
                    }
                    break;
            }
        }
        public void onShutdown(object sender, EventArgs e)
        {
            #region Vehicles
            #endregion
            #region Peds
            #endregion
            #region Props
            if (Phone != null)
            {
                Phone.Delete();
            }
            if (USB != null)
            {
                USB.Delete();
            }
            RemoveKeyPads();
            #endregion
            #region Blips
            #endregion
            #region Cameras
            #endregion
            #region Pickups
            #endregion
            Audio.StopSound(SoundId);
            Audio.ReleaseSound(SoundId);
            Audio.StopSound(SoundId2);
            Audio.ReleaseSound(SoundId2);
            if (Bink != 0)
            {
                Function.Call(Hash.STOP_BINK_MOVIE, Bink);
                Function.Call(Hash.RELEASE_BINK_MOVIE, Bink);
            }
        }
        public static Prop KeyPad(Vector3 pposition, float HHeading)//KeyPad Spawn
        {
            Prop returnedprop;
            Model Casemodel = new Model("ch_prop_fingerprint_scanner_01c");
            returnedprop = World.CreatePropNoOffset(Casemodel, new Vector3(0, 0, 0), false);
            returnedprop.MarkAsNoLongerNeeded();
            if (returnedprop != null)
            {
                returnedprop.Delete();
            }

            Casemodel = new Model("ch_prop_fingerprint_scanner_01c");
            Casemodel.Request(10000);
            if (Casemodel.IsValid && Casemodel.IsInCdImage)
            {
                while (!Casemodel.IsLoaded) Script.Wait(50);
                returnedprop = World.CreatePropNoOffset(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false);
                if (returnedprop != null) KeyPad_Hacking.KeyPadSpawn.Add(returnedprop);
                return returnedprop;
            }
            return returnedprop;
        }
        public static void SPAWN_KEYPAD(Vector3 pposition, float HHeading)
        {
            Prop KeyPad = KeyPad_Hacking.KeyPad(pposition, HHeading);

            BlipUpKeyPads();
        }
        public static void RemoveKeyPads()
        {
            if (KeyPadSpawn.Count > 0)
            {
                foreach (Prop KeyPad in KeyPadSpawn.ToList())
                {
                    if (KeyPad != null)
                    {
                        KeyPad.Delete();
                        KeyPadSpawn.Remove(KeyPad);
                    }
                }
            }
            Audio.StopSound(SoundId);
            Audio.ReleaseSound(SoundId);
            Audio.StopSound(SoundId2);
            Audio.ReleaseSound(SoundId2);
            if (Phone != null)
            {
                Phone.Delete();
                Phone = null;
            }
            if (USB != null)
            {
                USB.Delete();
                USB = null;
            }
            if (Bink != 0)
            {
                Bink = 0;
                Function.Call(Hash.STOP_BINK_MOVIE, Bink);
                Function.Call(Hash.RELEASE_BINK_MOVIE, Bink);
            }
            HackSwitch = 0;
            BGSwitch[0] = 0;
            BGSwitch[1] = 0;
            bgset[0] = 0;
            bgset[1] = 0;
            bgset[2] = 0;
            ExtraLootSwitch = 0;
            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_HEIST3/Fingerprint_Match");
            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_HEIST3/Door_Hacking");
        }
        public static void RecycleKeyPads()
        {
            if (KeyPadSpawn.Count > 0)
            {
                foreach (Prop KeyPad in KeyPadSpawn.ToList())
                {
                    if (KeyPad != null)
                    {
                        KeyPad.MarkAsNoLongerNeeded();
                        KeyPadSpawn.Remove(KeyPad);
                    }
                }
            }
            Audio.StopSound(SoundId);
            Audio.ReleaseSound(SoundId);
            Audio.StopSound(SoundId2);
            Audio.ReleaseSound(SoundId2);
            if (Phone != null)
            {
                Phone.Delete();
                Phone = null;
            }
            if (USB != null)
            {
                USB.Delete();
                USB = null;
            }
            if (Bink != 0)
            {
                Bink = 0;
                Function.Call(Hash.STOP_BINK_MOVIE, Bink);
                Function.Call(Hash.RELEASE_BINK_MOVIE, Bink);
            }
            HackSwitch = 0;
            BGSwitch[0] = 0;
            BGSwitch[1] = 0;
            bgset[0] = 0;
            bgset[1] = 0;
            bgset[2] = 0;
            ExtraLootSwitch = 0;
            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_HEIST3/Fingerprint_Match");
            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_HEIST3/Door_Hacking");
        }
        public static void BlipUpKeyPads()
        {
            if (KeyPadSpawn.Count > 0)
            {
                foreach (Prop KeyPad in KeyPadSpawn)
                {
                    if (KeyPad != null)
                    {
                        if (KeyPad.AttachedBlip == null)
                        {
                            KeyPad.AddBlip();
                        }
                        if (KeyPad.AttachedBlip != null)
                        {
                            if (Game.Player.Character.Position.DistanceTo(KeyPad.Position) < 3)
                            {
                                KeyPad.AttachedBlip.Alpha = 255;
                            }
                            else
                            {
                                KeyPad.AttachedBlip.Alpha = 0;
                            }
                            KeyPad.IsInvincible = true;
                            KeyPad.IsPositionFrozen = true;
                            KeyPad.AttachedBlip.Sprite = (BlipSprite)732;
                            KeyPad.AttachedBlip.Color = BlipColor.Green;
                            KeyPad.AttachedBlip.Name = "Keypad";
                        }
                    }
                }
            }
        }
        public static float IntToFloat(int num)
        {
            return Function.Call<float>(Hash.TO_FLOAT, num);
        }
        public static float func_10943(float fParam0)
        {
            fParam0 = (0.5f - ((0.5f - fParam0) / Function.Call<float>(Hash.GET_ASPECT_RATIO, 0)));
            return fParam0;
        }
        public static void func_10961(int iParam0, out float uParam1, out float uParam2)
        {
            uParam1 = 0.105f;
            uParam2 = 0.306f;
            //iParam0 = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 1, 9);
            switch (iParam0)
            {
                case 1:
                    uParam1 = 0.105f;
                    uParam2 = 0.306f;
                    break;

                case 2:
                    uParam1 = 0.239f;
                    uParam2 = 0.306f;
                    break;

                case 3:
                    uParam1 = 0.105f;
                    uParam2 = 0.439f;
                    break;

                case 4:
                    uParam1 = 0.239f;
                    uParam2 = 0.439f;
                    break;

                case 5:
                    uParam1 = 0.105f;
                    uParam2 = 0.572f;
                    break;

                case 6:
                    uParam1 = 0.239f;
                    uParam2 = 0.572f;
                    break;

                case 7:
                    uParam1 = 0.105f;
                    uParam2 = 0.706f;
                    break;

                case 8:
                    uParam1 = 0.239f;
                    uParam2 = 0.706f;
                    break;
            }
        }
        public static void RANDOMIZE_PRINTS_COMPS()
        {
            RandomSpots[0] = 0;
            RandomSpots[1] = 0;
            RandomSpots[2] = 0;
            RandomSpots[3] = 0;
            RandomSpots[4] = 0;
            RandomSpots[5] = 0;
            RandomSpots[6] = 0;
            RandomSpots[7] = 0;
            RandomSpots[8] = 0;
            int iVar5 = 1;
            while (iVar5 <= 8)
            {
                int newNumber = RNG.Next(1, 9);
                if (!RandomSpots.Contains(newNumber))
                {
                    RandomSpots[iVar5] = newNumber;
                    iVar5++;
                }
                else
                {
                    newNumber = RNG.Next(1, 9);
                }
            }
        }
        public static void CONTROLS()
        {
            if (Game.IsControlJustPressed(GTA.Control.MoveRightOnly) || Game.IsControlJustPressed(GTA.Control.PhoneRight))
            {
                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Cursor_Move", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                MoveLR += 1;
            }
            if (Game.IsControlJustPressed(GTA.Control.MoveLeftOnly) || Game.IsControlJustPressed(GTA.Control.PhoneLeft))
            {
                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Cursor_Move", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                MoveLR -= 1;
            }
            if (MoveLR > 2)
            {
                MoveLR = 1;
            }
            if (MoveLR < 1)
            {
                MoveLR = 2;
            }
            if (Game.IsControlJustPressed(GTA.Control.MoveUpOnly) || Game.IsControlJustPressed(GTA.Control.PhoneUp))
            {
                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Cursor_Move", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                MoveUD -= 1;
            }
            if (Game.IsControlJustPressed(GTA.Control.MoveDownOnly) || Game.IsControlJustPressed(GTA.Control.PhoneDown))
            {
                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Cursor_Move", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                MoveUD += 1;
            }
            if (MoveUD > 4)
            {
                MoveUD = 1;
            }
            if (MoveUD < 1)
            {
                MoveUD = 4;
            }

            if (MoveLR == 1 && MoveUD == 1)
            {
                currentlySelectedTile = 1;
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
            }
            if (MoveLR == 2 && MoveUD == 1)
            {
                currentlySelectedTile = 2;
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
            }

            if (MoveLR == 1 && MoveUD == 2)
            {
                currentlySelectedTile = 3;
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
            }
            if (MoveLR == 2 && MoveUD == 2)
            {
                currentlySelectedTile = 4;
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
            }

            if (MoveLR == 1 && MoveUD == 3)
            {
                currentlySelectedTile = 5;
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
            }
            if (MoveLR == 2 && MoveUD == 3)
            {
                currentlySelectedTile = 6;
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
            }

            if (MoveLR == 1 && MoveUD == 4)
            {
                currentlySelectedTile = 7;
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
            }
            if (MoveLR == 2 && MoveUD == 4)
            {
                currentlySelectedTile = 8;
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
            }
            if (Game.IsControlJustPressed(GTA.Control.FrontendAccept))
            {
                if (!SelectedTiles.Contains(currentlySelectedTile))
                {
                    if (SelectedTiles.Count != 4)
                    {
                        Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Select_Print_Tile", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                        SelectedTiles.Add(currentlySelectedTile);
                    }
                }
                else
                {
                    if (SelectedTiles.Count != 0)
                    {
                        Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Deselect_Print_Tile", "DLC_H3_Cas_Finger_Minigame_Sounds", true);
                        SelectedTiles.Remove(currentlySelectedTile);
                    }
                }
            }
        }
        public static void DRAW_PREV()
        {
            Function.Call(Hash.DRAW_SPRITE, "mphackinggamebg", "bg", 0.5f, 0.5f, 1920f / 1920f, 1080f / 1080f, 0f, 255, 255, 255, 255, 0);
            Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "Black_BG", 0.5f, 0.5f, 1920f / 1920f, 1080f / 1080f, 0f, 5, 5, 5, 100, 0);
            Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "background_layout", 0.5f, 0.5f, 1264f / 1920f, 940f / 1080f, 0f, 255, 255, 255, 255, 0);
            Function.Call(Hash.DRAW_SPRITE, "mphackinggameoverlay", "grid_rgb_pixels", 0.5f, 0.5f, 1264f / 1920f, 940f / 1080f, 0f, 255, 255, 255, 255, 0);
            Function.Call(Hash.DRAW_SPRITE, "mphackinggameoverlay1", "ScreenGrid", 0.5f, 0.5f, 1264f / 1920f, 940f / 1080f, 0f, 255, 255, 255, 255, 0);
            switch (BGSwitch[0])
            {
                case 0:
                    {
                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Decor", "techaration_" + bgset[0], 0.5f, 0.5f, 1264f / 1920f, 940f / 1080f, 0f, 255, 255, 255, 255, 0);
                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_GridDetails", "griddetails_" + bgset[0], func_10943(0.439f), 0.379f, 16f / 1920f, 512f / 1080f, 0f, 255, 255, 255, 255, 0);
                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_GridDetails", "griddetails_" + bgset[0], func_10943(0.902f), 0.379f, 16f / 1920f, 512f / 1080f, 0f, 255, 255, 255, 255, 0);
                        if (Game.GameTime > bgtimer[0])
                        {
                            bgset[0]++;
                            bgtimer[0] = Game.GameTime + 500;
                        }
                        if (bgset[0] > 1)
                        {
                            BGSwitch[0] = 1;
                            bgtimer[0] = Game.GameTime + 500;
                        }
                    }
                    break;
                case 1:
                    {
                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Decor1", "techaration_" + bgset[0], 0.5f, 0.5f, 1264f / 1920f, 940f / 1080f, 0f, 255, 255, 255, 255, 0);
                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_GridDetails", "griddetails_" + bgset[0], func_10943(0.439f), 0.379f, 16f / 1920f, 512f / 1080f, 0f, 255, 255, 255, 255, 0);
                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_GridDetails", "griddetails_" + bgset[0], func_10943(0.902f), 0.379f, 16f / 1920f, 512f / 1080f, 0f, 255, 255, 255, 255, 0);
                        if (Game.GameTime > bgtimer[0])
                        {
                            bgset[0]++;
                            bgtimer[0] = Game.GameTime + 500;
                        }
                        if (bgset[0] > 3)
                        {
                            bgset[0] = 0;
                            BGSwitch[0] = 0;
                        }
                    }
                    break;
            }//sprite anim 1
            switch (BGSwitch[1])
            {
                case 0:
                    {
                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disc_a" + bgset[1], func_10943(0.983f), 0.669f, 100f / 1920f, 100f / 1080f, 0f, 255, 255, 255, 255, 0);
                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disc_b" + bgset[1], func_10943(0.983f), 0.669f, 100f / 1920f, 100f / 1080f, 0f, 255, 255, 255, 255, 0);
                        Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disc_c" + bgset[1], func_10943(0.983f), 0.669f, 100f / 1920f, 100f / 1080f, 0f, 255, 255, 255, 255, 0);
                        if (Game.GameTime > bgtimer[1])
                        {
                            bgset[1]++;
                            bgtimer[1] = Game.GameTime + 500;
                        }
                        if (bgset[1] > 2)
                        {
                            bgset[1] = 0;
                            bgtimer[1] = Game.GameTime + 500;
                        }
                    }
                    break;
            }//sprite anim 2

            if (MoveLR == 1 && MoveUD == 1)
            {
                currentlySelectedTile = 1;
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
            }
            if (MoveLR == 2 && MoveUD == 1)
            {
                currentlySelectedTile = 2;
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.306f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
            }

            if (MoveLR == 1 && MoveUD == 2)
            {
                currentlySelectedTile = 3;
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
            }
            if (MoveLR == 2 && MoveUD == 2)
            {
                currentlySelectedTile = 4;
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.439f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
            }

            if (MoveLR == 1 && MoveUD == 3)
            {
                currentlySelectedTile = 5;
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
            }
            if (MoveLR == 2 && MoveUD == 3)
            {
                currentlySelectedTile = 6;
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.572f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
            }

            if (MoveLR == 1 && MoveUD == 4)
            {
                currentlySelectedTile = 7;
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.105f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
            }
            if (MoveLR == 2 && MoveUD == 4)
            {
                currentlySelectedTile = 8;
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "selectorframe", func_10943(0.239f), 0.706f, 180f / 1920f, 180f / 1080f, 0f, 255, 255, 255, 255, 0);
            }
            int actualprint = PrintChoice[0] - 1;
            int iVar0 = 1;
            while (iVar0 <= 8)
            {
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Print" + actualprint, "fp" + PrintChoice[0] + "_" + iVar0, func_10943(0.674f), 0.379f, 400f / 1920f, 512f / 1080f, 0f, 255, 255, 255, fcalpha, 0);
                iVar0++;
            }
            int iVar1 = 1;
            float posx = 0;
            float posy = 0;
            while (iVar1 <= 8)
            {
                int color = SelectedTiles.Contains(RandomSpots[iVar1]) ? 255 : 125;
                func_10961(RandomSpots[iVar1], out posx, out posy);
                Function.Call(Hash.DRAW_SPRITE, $"MPFClone_Print{actualprint}", $"fp{PrintChoice[0]}_comp_{iVar1}", func_10943(posx), posy, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, color, 0);
                iVar1++;
            }
            Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decyphered_selector", func_10943(0.536f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);



            Function.Call(Hash.DRAW_SPRITE, "mphackinggame", "loading_window", 0.5f, 0.5f, 480f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);


            if (PrintsAllowed == 1)
            {
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[0], func_10943(0.536f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disabled_signal", func_10943(0.662f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disabled_signal", func_10943(0.782f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disabled_signal", func_10943(0.905f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
            }
            if (PrintsAllowed == 2)
            {
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[0], func_10943(0.536f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[1], func_10943(0.662f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disabled_signal", func_10943(0.782f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disabled_signal", func_10943(0.905f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
            }
            if (PrintsAllowed == 3)
            {
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[0], func_10943(0.536f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[1], func_10943(0.662f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[2], func_10943(0.782f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "disabled_signal", func_10943(0.905f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
            }
            if (PrintsAllowed == 4)
            {
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[0], func_10943(0.536f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[1], func_10943(0.662f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[2], func_10943(0.782f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
                Function.Call(Hash.DRAW_SPRITE, "MPFClone_Common", "decypher_" + PrintChoice[3], func_10943(0.905f), 0.832f, 128f / 1920f, 128f / 1080f, 0f, 255, 255, 255, 255, 0);
            }
        }
        public static void HELP()
        {
            var InstructionButtons = new Scaleform("instructional_buttons");
            InstructionButtons.CallFunction("CLEAR_ALL");
            InstructionButtons.CallFunction("TOGGLE_MOUSE_BUTTONS", 0);
            InstructionButtons.CallFunction("CREATE_CONTAINER");
            if (SelectedTiles.Count == 4)
            {
                InstructionButtons.CallFunction("SET_DATA_SLOT", 0, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 0, (int)GTA.Control.Reload, 0), "Abort Hack (Hold)");
                InstructionButtons.CallFunction("SET_DATA_SLOT", 1, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 0, (int)GTA.Control.FrontendAccept, 0), "Select");
                InstructionButtons.CallFunction("SET_DATA_SLOT", 2, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 0, (int)GTA.Control.Context, 0), "Run Check");
                InstructionButtons.CallFunction("SET_DATA_SLOT", 3, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 0, (int)GTA.Control.PhoneRight, 0), "");
                InstructionButtons.CallFunction("SET_DATA_SLOT", 4, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 0, (int)GTA.Control.PhoneLeft, 0), "");
                InstructionButtons.CallFunction("SET_DATA_SLOT", 5, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 0, (int)GTA.Control.PhoneDown, 0), "");
                InstructionButtons.CallFunction("SET_DATA_SLOT", 6, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 0, (int)GTA.Control.PhoneUp, 0), "Move Selector");
            }
            else
            {
                InstructionButtons.CallFunction("SET_DATA_SLOT", 0, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 0, (int)GTA.Control.Reload, 0), "Abort Hack (Hold)");
                InstructionButtons.CallFunction("SET_DATA_SLOT", 1, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 0, (int)GTA.Control.FrontendAccept, 0), "Select");
                InstructionButtons.CallFunction("SET_DATA_SLOT", 2, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 0, (int)GTA.Control.PhoneRight, 0), "");
                InstructionButtons.CallFunction("SET_DATA_SLOT", 3, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 0, (int)GTA.Control.PhoneLeft, 0), "");
                InstructionButtons.CallFunction("SET_DATA_SLOT", 4, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 0, (int)GTA.Control.PhoneDown, 0), "");
                InstructionButtons.CallFunction("SET_DATA_SLOT", 5, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 0, (int)GTA.Control.PhoneUp, 0), "Move Selector");
            }
            InstructionButtons.CallFunction("DRAW_INSTRUCTIONAL_BUTTONS", -1);
            InstructionButtons.Render2D();
        }
        public static void func_10998(out string sParam0, out int iParam1)
        {
            sParam0 = "Numbers_";
            iParam1 = 0;
            iParam1++;
            if (iParam1 > 9)
            {
                iParam1 = 9;
            }
            else if (iParam1 < 0)
            {
                iParam1 = 0;
            }
            else
            {
                iParam1 = iParam1;
            }
        }
        public static void func_687()
        {
            Function.Call(Hash.DISABLE_FRONTEND_THIS_FRAME);
            Function.Call(Hash.SUPPRESS_FRONTEND_RENDERING_THIS_FRAME);
            if (Function.Call<bool>(Hash.IS_PAUSE_MENU_ACTIVE))
            {
                Function.Call(Hash.SET_PAUSE_MENU_ACTIVE, 0);
            }
        }
    }
    internal class Trollys : Script
    {
        public static bool AllowTrollyGrab = false;

        public static int ExtraLootSwitch = 0;
        public static int CashAnim = 0;
        public static int SpeedSwitch = 0;
        public static int clickytimer = 0;
        public static int clickyint = 0;

        public static int TrollyAmount = 0;
        public static int PileAmount = 45;
        public static int TotalAmount = 0;


        public static float SCENE_POS = 0f;
        public static float SCENE_CASH_POS = 0f;
        public static float _polarAngleDeg = 0;
        public static float _azimuthAngleDeg = 90;
        public static float _radius = 1.4f;
        public static float currentheading = 0;
        public static float _orbitAngle;

        public static Prop Bag;
        public static Prop Bar;

        public Trollys()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }
        public static List<Prop> TrollySpawn = new List<Prop>()
        {

        };
        public void onTick(object sender, EventArgs e)
        {
            if (Main.DEBUG)
            {
                if (Game.IsControlJustPressed(GTA.Control.VehicleDuck))
                {
                    //SPAWN_Trolly(new Vector3(683.2517f, 610.9154f, 128.9111f - 0.5f), 238.2237f);
                }
            }
            if (AllowTrollyGrab)
            {
                foreach (Prop Trolly in TrollySpawn.ToList())
                {
                    if (Groups.IS_PED_AT_DESTINATION(Game.Player.Character, Trolly.Position, 1))
                    {
                        Trollys_Method(Trolly);
                    }
                }
            }
        }
        public void onShutdown(object sender, EventArgs e)
        {
            #region Vehicles
            #endregion
            #region Peds
            #endregion
            #region Props
            if (Bag != null)
            {
                Bag.Delete();
            }
            if (Bar != null)
            {
                Bar.Delete();
            }
            RemoveTrollys();
            #endregion
            #region Blips
            #endregion
            #region Cameras
            #endregion
            #region Pickups
            #endregion
        }
        public static void Trollys_Method(Prop Trolly)
        {
            if (Main.CutsceneCam != null)
            {
                if (Function.Call<int>(Hash.GET_FOLLOW_PED_CAM_VIEW_MODE) == 0 || Function.Call<int>(Hash.GET_FOLLOW_PED_CAM_VIEW_MODE) == 1 || Function.Call<int>(Hash.GET_FOLLOW_PED_CAM_VIEW_MODE) == 2)
                {
                    CamRotate();
                    World.RenderingCamera = Main.CutsceneCam;
                }
                if (Function.Call<int>(Hash.GET_FOLLOW_PED_CAM_VIEW_MODE) == 4)
                {
                    World.RenderingCamera = null;
                }
            }
            string[] loot = { "ch_cash", "gold", "diamond" };
            string[] lootletter = { "a", "b", "c" };
            switch (ExtraLootSwitch)
            {
                case 0://start
                    {
                        if (Game.Player.Character.Position.DistanceTo(Trolly.Position) < 1)
                        {
                            if (RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[0] + "_trolly_01" + lootletter[0] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[0] + "_trolly_01" + lootletter[1] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[0] + "_trolly_01" + lootletter[2])
                            {
                                Screen.ShowHelpTextThisFrame("Press ~INPUT_CONTEXT~ to begin grabbing the cash.");
                            }
                            if (RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[1] + "_trolly_01" + lootletter[0] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[1] + "_trolly_01" + lootletter[1] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[1] + "_trolly_01" + lootletter[2])
                            {
                                Screen.ShowHelpTextThisFrame("Press ~INPUT_CONTEXT~ to begin grabbing the gold.");
                            }
                            if (RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[2] + "_trolly_01" + lootletter[0] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[2] + "_trolly_01" + lootletter[1] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[2] + "_trolly_01" + lootletter[2])
                            {
                                Screen.ShowHelpTextThisFrame("Press ~INPUT_CONTEXT~ to begin grabbing the diamonds.");
                            }
                            if (Game.IsControlJustPressed(GTA.Control.Context))
                            {
                                SCENE_POS = 0f;
                                SCENE_CASH_POS = 0f;
                                //if (Main.DEBUG) Heist_Hud.TAKE_BAR_SHOW = true;
                                Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player, true);
                                Main.LoadDict("anim@heists@ornate_bank@grab_cash");
                                Main.LoadDict("anim@heists@ornate_bank@grab_cash");
                                Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_MPHEIST/HEIST_STASH_SWAG");
                                Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "DLC_MPHEIST/HEIST_STASH_SWAG", false, -1);
                                Wait(50);
                                Vector3 intinaloffsetpos = Function.Call<Vector3>(Hash.GET_ANIM_INITIAL_OFFSET_POSITION, "anim@heists@ornate_bank@grab_cash", "intro", Trolly.Position.X, Trolly.Position.Y, Trolly.Position.Z, Trolly.Rotation.X, Trolly.Rotation.Y, Trolly.Rotation.Z, 0f, 2);
                                Vector3 intinaloffsetrot = Function.Call<Vector3>(Hash.GET_ANIM_INITIAL_OFFSET_ROTATION, "anim@heists@ornate_bank@grab_cash", "intro", Trolly.Position.X, Trolly.Position.Y, Trolly.Position.Z, Trolly.Rotation.X, Trolly.Rotation.Y, Trolly.Rotation.Z, 0f, 2);

                                unsafe
                                {
                                    int Task5 = 0;
                                    Function.Call(Hash.OPEN_SEQUENCE_TASK, &Task5);
                                    if (Game.Player.Character.IsRunning || Game.Player.Character.IsSprinting)
                                    {
                                        Function.Call(Hash.TASK_FOLLOW_NAV_MESH_TO_COORD, 0, intinaloffsetpos.X, intinaloffsetpos.Y, intinaloffsetpos.Z, 1f, 5000, 0.1f, 512, intinaloffsetrot.Z);
                                    }
                                    else
                                    {
                                        Function.Call(Hash.TASK_FOLLOW_NAV_MESH_TO_COORD, 0, intinaloffsetpos.X, intinaloffsetpos.Y, intinaloffsetpos.Z, 1f, 5000, 0.1f, 2, intinaloffsetrot.Z);
                                    }
                                    Function.Call(Hash.CLOSE_SEQUENCE_TASK, Task5);
                                    Function.Call(Hash.TASK_PERFORM_SEQUENCE, Game.Player.Character, Task5);
                                    Function.Call(Hash.CLEAR_SEQUENCE_TASK, &Task5);
                                }
                                Wait(500);
                                while (Function.Call<int>(Hash.GET_SEQUENCE_PROGRESS, Game.Player.Character) != -1)
                                {
                                    Wait(0);
                                }
                                Game.Player.Character.Weapons.Select(WeaponHash.Unarmed);
                                HudHandler.HudandRadar(false, false);
                                while (Bag == null)
                                {
                                    Bag = World.CreateProp(Main.RequestModel("hei_p_m_bag_var22_arm_s"), Game.Player.Character.Position, false, false);
                                    Wait(0);
                                }
                                Bag.IsVisible = false;
                                Bag.IsCollisionEnabled = false;
                                Bag.IsPositionFrozen = true;
                                Vector3 frontpos = Game.Player.Character.GetOffsetPosition(new Vector3(0f, 0.10f, 0f));
                                Vector3 backPos = Game.Player.Character.GetOffsetPosition(new Vector3(0.7f, 1.9f, 0.20f));
                                var nextCamLocation = polar3DToWorld3D(frontpos, _radius, _polarAngleDeg, _azimuthAngleDeg);
                                while (Main.CutsceneCam == null)
                                {
                                    Main.CutsceneCam = World.CreateCamera(new Vector3(nextCamLocation.X, nextCamLocation.Y, nextCamLocation.Z), new Vector3(0, 0, 0), 50f);
                                    Wait(0);
                                }
                                Main.CutsceneCam.PointAt(frontpos);
                                if (RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[0] + "_trolly_01" + lootletter[0] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[0] + "_trolly_01" + lootletter[1] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[0] + "_trolly_01" + lootletter[2])
                                {
                                    Main.Potential_Cut = 2115000;
                                    while (Bar == null)
                                    {
                                        Bar = World.CreateProp(Main.RequestModel("hei_prop_heist_cash_pile"), new Vector3(2519.042f, -247.6816f, -66.20467f), false, false);
                                        Wait(0);
                                    }
                                }
                                if (RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[1] + "_trolly_01" + lootletter[0] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[1] + "_trolly_01" + lootletter[1] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[1] + "_trolly_01" + lootletter[2])
                                {
                                    Main.Potential_Cut = 2585000;
                                    while (Bar == null)
                                    {
                                        Bar = World.CreateProp(Main.RequestModel("ch_prop_gold_bar_01a"), new Vector3(2519.042f, -247.6816f, -66.20467f), false, false);
                                        Wait(0);
                                    }
                                }
                                if (RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[2] + "_trolly_01" + lootletter[0] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[2] + "_trolly_01" + lootletter[1] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[2] + "_trolly_01" + lootletter[2])
                                {
                                    Main.Potential_Cut = 3619000;
                                    while (Bar == null)
                                    {
                                        Bar = World.CreateProp(Main.RequestModel("ch_prop_vault_dimaondbox_01a"), new Vector3(2519.042f, -247.6816f, -66.20467f), false, false);
                                        Wait(0);
                                    }
                                }
                                Bar.IsVisible = false;
                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, Trolly.Position.X, Trolly.Position.Y, Trolly.Position.Z, Trolly.Rotation.X, Trolly.Rotation.Y, Trolly.Rotation.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "anim@heists@ornate_bank@grab_cash", "intro", 1.0, 3.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "bag_intro", "anim@heists@ornate_bank@grab_cash", 1.0, 3.0, 0, 1000.0f); // Objects
                                //Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Trolly, Main.TestCutsceneAnim, "cart_intro", "anim@heists@ornate_bank@grab_cash", 3.0, 3.0, 0, 1000.0f); // Objects
                                Function.Call(Hash.ATTACH_ENTITY_TO_ENTITY, Bar, Game.Player.Character, Function.Call<int>(Hash.GET_PED_BONE_INDEX, Game.Player.Character, 60309), 0f, 0f, 0f, 0f, 0f, 0f, 0, 0, 0, 0, 2, 1);
                                Anims.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(Bar);
                                Main.GetPedDuffelBagOff(Game.Player.Character);
                                Bag.IsCollisionEnabled = true;
                                Bag.IsPositionFrozen = false;
                                Bag.IsVisible = true;
                                //Bar.IsVisible = true;
                                while (!Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, Main.LoadDict("anim@heists@ornate_bank@grab_cash"), "intro", 3))
                                {
                                    if (Function.Call<int>(Hash.GET_FOLLOW_PED_CAM_VIEW_MODE) == 0 || Function.Call<int>(Hash.GET_FOLLOW_PED_CAM_VIEW_MODE) == 1 || Function.Call<int>(Hash.GET_FOLLOW_PED_CAM_VIEW_MODE) == 2)
                                    {
                                        CamRotate();
                                        GameplayCamera.RelativeHeading = Main.CutsceneCam.Rotation.Z - Game.Player.Character.Heading;
                                        if (!Function.Call<bool>(Hash.IS_CAM_RENDERING, Main.CutsceneCam))
                                        {
                                            Cameras.RENDER_SCRIPT_CAMS(true, true, 2000, false, false, false);
                                        }
                                    }
                                    if (Function.Call<int>(Hash.GET_FOLLOW_PED_CAM_VIEW_MODE) == 4)
                                    {
                                        World.RenderingCamera = null;
                                    }
                                    Wait(0);
                                }
                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, Trolly.Position.X, Trolly.Position.Y, Trolly.Position.Z, Trolly.Rotation.X, Trolly.Rotation.Y, Trolly.Rotation.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "anim@heists@ornate_bank@grab_cash", "grab_idle", 3.0, 3.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "bag_grab_idle", "anim@heists@ornate_bank@grab_cash", 3.0, 3.0, 0, 1000.0f); // Objects
                                //Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Trolly, Main.TestCutsceneAnim, "cart_grab_idle", "anim@heists@ornate_bank@grab_cash", 3.0, 3.0, 0, 1000.0f); // Objects
                                Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, true);
                                SpeedSwitch = 1;
                                ExtraLootSwitch = 2;
                            }
                        }
                    }
                    break;
                case 2://Cash Grab Main
                    {
                        //CamRotate();
                        if (Anims.IS_ENTITY_PLAYING_ANIM(Game.Player.Character, "anim@heists@ornate_bank@grab_cash", "grab"))
                        {
                            SCENE_POS = Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Main.TestCutsceneAnim);
                            SCENE_CASH_POS = Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, Trollys.CashAnim);
                            if (clickyint < 7)
                            {
                                if (Function.Call<bool>(Hash.IS_CONTROL_JUST_PRESSED, 2, 237) || Function.Call<bool>(Hash.IS_CONTROL_JUST_PRESSED, 2, 201))
                                {
                                    //UI.Notify("+ " + clickyint);
                                    clickyint += 1;
                                    clickytimer = Game.GameTime + 500;
                                }
                            }
                            if (clickyint > 0)
                            {
                                if (Game.GameTime > clickytimer)
                                {
                                    //UI.Notify("- " + clickyint);
                                    clickyint -= 1;
                                    clickytimer = Game.GameTime + 500;
                                }
                            }
                            switch (clickyint)
                            {
                                case 0:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 0.55f)
                                        {
                                            Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 0.55);
                                        }
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Trollys.CashAnim) != 0.55f)
                                        {
                                            Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Trollys.CashAnim, 0.55);
                                        }

                                        break;
                                    }
                                case 1:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 0.6f)
                                        {
                                            Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 0.6);
                                        }
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Trollys.CashAnim) != 0.6)
                                        {
                                            Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Trollys.CashAnim, 0.6);
                                        }

                                        break;
                                    }
                                case 2:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 0.75f)
                                        {
                                            Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 0.75);
                                        }
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Trollys.CashAnim) != 0.75)
                                        {
                                            Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Trollys.CashAnim, 0.75);
                                        }

                                        break;
                                    }
                                case 3:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 0.9f)
                                        {
                                            Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 0.9);
                                        }
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Trollys.CashAnim) != 0.9)
                                        {
                                            Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Trollys.CashAnim, 0.9);
                                        }

                                        break;
                                    }
                                case 4:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 1.0f)
                                        {
                                            Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 1.0);
                                        }
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Trollys.CashAnim) != 1.0)
                                        {
                                            Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Trollys.CashAnim, 1.0);
                                        }

                                        break;
                                    }
                                case 5:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 1.05f)
                                        {
                                            Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 1.05);
                                        }
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Trollys.CashAnim) != 1.05)
                                        {
                                            Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Trollys.CashAnim, 1.05);
                                        }

                                        break;
                                    }
                                case 6:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 1.12f)
                                        {
                                            Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 1.12);
                                        }
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Trollys.CashAnim) != 1.12)
                                        {
                                            Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Trollys.CashAnim, 1.12);
                                        }

                                        break;
                                    }
                                case 7:
                                    {
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) != 1.32f)
                                        {
                                            Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim, 1.32);
                                        }
                                        if (Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Trollys.CashAnim) != 1.32)
                                        {
                                            Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, Trollys.CashAnim, 1.32);
                                        }

                                        break;
                                    }
                            }
                        }
                        if (!Anims.IS_ENTITY_PLAYING_ANIM(Game.Player.Character, "anim@heists@ornate_bank@grab_cash", "grab"))
                        {
                            if (Game.IsControlJustPressed(GTA.Control.Attack))
                            {
                                Trollys.CashAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, Trolly.Position.X, Trolly.Position.Y, Trolly.Position.Z, Trolly.Rotation.X, Trolly.Rotation.Y, Trolly.Rotation.Z, 2);
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Trolly, Trollys.CashAnim, "cart_cash_dissapear", "anim@heists@ornate_bank@grab_cash", 3.0, 3.0, 0, 1000.0f); // Objects
                                Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Trollys.CashAnim, false);
                                Anims.SET_SYNCHRONIZED_SCENE_PHASE(Trollys.CashAnim, SCENE_CASH_POS);

                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, Trolly.Position.X, Trolly.Position.Y, Trolly.Position.Z, Trolly.Rotation.X, Trolly.Rotation.Y, Trolly.Rotation.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "anim@heists@ornate_bank@grab_cash", "grab", 3.0, 3.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "bag_grab", "anim@heists@ornate_bank@grab_cash", 3.0, 3.0, 0, 1000.0f); // Objects
                                Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, false);
                                Anims.SET_SYNCHRONIZED_SCENE_PHASE(Main.TestCutsceneAnim, SCENE_POS);
                            }
                        }
                        else if (!Anims.IS_ENTITY_PLAYING_ANIM(Game.Player.Character, "anim@heists@ornate_bank@grab_cash", "grab_idle"))
                        {
                            if (Function.Call<bool>(Hash.HAS_ANIM_EVENT_FIRED, Game.Player.Character, Function.Call<Hash>(Hash.GET_HASH_KEY, "RELEASE_CASH_DESTROY")) && !Game.IsControlPressed(GTA.Control.Attack) && !Game.IsControlJustPressed(GTA.Control.Attack) && Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_RATE, Main.TestCutsceneAnim) == 0.55f)
                            {
                                Trollys.CashAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, Trolly.Position.X, Trolly.Position.Y, Trolly.Position.Z, Trolly.Rotation.X, Trolly.Rotation.Y, Trolly.Rotation.Z, 2);
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Trolly, Trollys.CashAnim, "cart_cash_dissapear", "anim@heists@ornate_bank@grab_cash", 3.0, 3.0, 0, 1000.0f); // Objects
                                Anims.SET_SYNCHRONIZED_SCENE_PHASE(Trollys.CashAnim, SCENE_CASH_POS);
                                Anims.SET_SYNCHRONIZED_SCENE_RATE(Trollys.CashAnim, 0f);

                                Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, Trolly.Position.X, Trolly.Position.Y, Trolly.Position.Z, Trolly.Rotation.X, Trolly.Rotation.Y, Trolly.Rotation.Z, 2);
                                Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "anim@heists@ornate_bank@grab_cash", "grab_idle", 3.0, 3.0, 0, 0, 1148846080, 0); // Objects
                                Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "bag_grab_idle", "anim@heists@ornate_bank@grab_cash", 3.0, 3.0, 0, 1000.0f); // Objects
                                Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, true);
                            }
                        }
                        if (SCENE_CASH_POS >= 1f)
                        {
                            Heist_Hud.Actual_Take += TotalAmount / TrollyAmount / PileAmount;
                            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "LOCAL_PLYR_CASH_COUNTER_COMPLETE", "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS", 1);
                            SpeedSwitch = 0;
                            if (Trolly.AttachedBlip != null)
                            {
                                Trolly.AttachedBlip.Delete();
                            }
                            Trolly.MarkAsNoLongerNeeded();
                            TrollySpawn.Remove(Trolly);
                            Bar.Delete();
                            Bar = null;
                            Main.TestCutsceneAnim = Function.Call<int>(Hash.CREATE_SYNCHRONIZED_SCENE, Trolly.Position.X, Trolly.Position.Y, Trolly.Position.Z, Trolly.Rotation.X, Trolly.Rotation.Y, Trolly.Rotation.Z, 2);
                            Function.Call(Hash.TASK_SYNCHRONIZED_SCENE, Game.Player.Character, Main.TestCutsceneAnim, "anim@heists@ornate_bank@grab_cash", "exit", 3.0, 3.0, 0, 0, 1148846080, 0); // Objects
                            Function.Call(Hash.PLAY_SYNCHRONIZED_ENTITY_ANIM, Bag, Main.TestCutsceneAnim, "bag_exit", "anim@heists@ornate_bank@grab_cash", 3.0, 3.0, 0, 1000.0f); // Objects
                            Anims.SET_SYNCHRONIZED_SCENE_LOOPED(Main.TestCutsceneAnim, false);
                            //GameplayCamera.RelativeHeading = Game.Player.Character.Heading - Game.Player.Character.Heading;
                            Cameras.RENDER_SCRIPT_CAMS(false, true, 2000, false, false, false);
                            GameplayCamera.RelativeHeading = Main.CutsceneCam.Rotation.Z - Game.Player.Character.Heading;
                            while (!Function.Call<bool>(Hash.HAS_ENTITY_ANIM_FINISHED, Game.Player.Character, Main.LoadDict("anim@heists@ornate_bank@grab_cash"), "exit", 3))
                            {
                                CamRotate();
                                Wait(0);
                            }
                            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_MPHEIST/HEIST_STASH_SWAG");
                            Main.CutsceneCam.Delete();
                            Main.CutsceneCam = null;
                            Main.GetPedDuffelBagOn(Game.Player.Character);
                            Bag.Delete();
                            Bag = null;
                            Game.Player.Character.Task.ClearAll();
                            HudHandler.HudandRadar(true, true);
                            Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player, false);
                            ExtraLootSwitch = 0;
                        }
                    }
                    break;
            }
            switch (SpeedSwitch)
            {
                case 1:
                    {
                        if (RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[0] + "_trolly_01" + lootletter[0] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[0] + "_trolly_01" + lootletter[1] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[0] + "_trolly_01" + lootletter[2])
                        {
                            Screen.ShowHelpTextThisFrame("Repeatedly tap ~INPUT_ATTACK~ to quickly grab the cash.");
                        }
                        if (RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[1] + "_trolly_01" + lootletter[0] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[1] + "_trolly_01" + lootletter[1] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[1] + "_trolly_01" + lootletter[2])
                        {
                            Screen.ShowHelpTextThisFrame("Repeatedly tap ~INPUT_ATTACK~ to quickly grab the gold.");
                        }
                        if (RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[2] + "_trolly_01" + lootletter[0] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[2] + "_trolly_01" + lootletter[1] || RETURN_LOOT_TYPE(Trolly) == "ch_prop_" + loot[2] + "_trolly_01" + lootletter[2])
                        {
                            Screen.ShowHelpTextThisFrame("Repeatedly tap ~INPUT_ATTACK~ to quickly grab the diamonds.");
                        }
                        if (Anims.IS_ENTITY_PLAYING_ANIM(Game.Player.Character, "anim@heists@ornate_bank@grab_cash", "grab"))
                        {
                            if (Function.Call<bool>(Hash.HAS_ANIM_EVENT_FIRED, Game.Player.Character, Function.Call<Hash>(Hash.GET_HASH_KEY, "CASH_APPEAR")))
                            {
                                //if (Main.DEBUG) Screen.ShowSubtitle("Cash Visible", 2500);
                                Function.Call(Hash.RELEASE_SCRIPT_AUDIO_BANK, "HUD_FRONTEND_CUSTOM_SOUNDSET");
                                Function.Call(Hash.SET_ENTITY_VISIBLE, Bar, true, 0);
                            }
                            if (Function.Call<bool>(Hash.HAS_ANIM_EVENT_FIRED, Game.Player.Character, Function.Call<Hash>(Hash.GET_HASH_KEY, "RELEASE_CASH_DESTROY")))
                            {
                                Heist_Hud.Actual_Take += TotalAmount / TrollyAmount / PileAmount;
                                //if (Main.DEBUG) Screen.ShowSubtitle("Cash Not Visible", 2500);
                                Function.Call(Hash.SET_ENTITY_VISIBLE, Bar, false, 0);
                                Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_FRONTEND_CUSTOM_SOUNDSET", 1);
                                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "LOCAL_PLYR_CASH_COUNTER_INCREASE", "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS", 1);
                            }
                        }
                    }
                    break;
            }
        }
        public static Prop RandomTrolly(Vector3 pposition, float HHeading)//Random Trolly
        {
            string[] loot = { "ch_cash", "gold", "diamond" };
            int randloot = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, 3);
            string[] lootletter = { "a", "b", "c" };
            int randletter = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, 3);
            Prop returnedprop;
            Model Casemodel = new Model("ch_prop_ch_cash_trolly_01a");
            returnedprop = World.CreatePropNoOffset(Casemodel, new Vector3(0, 0, 0), false);
            returnedprop.MarkAsNoLongerNeeded();
            if (returnedprop != null)
            {
                returnedprop.Delete();
            }

            Casemodel = new Model("ch_prop_" + loot[randloot] + "_trolly_01" + lootletter[randletter]);
            Casemodel.Request(10000);
            if (Casemodel.IsValid && Casemodel.IsInCdImage)
            {
                while (!Casemodel.IsLoaded) Script.Wait(50);
                returnedprop = World.CreatePropNoOffset(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false);
                if (returnedprop != null) Trollys.TrollySpawn.Add(returnedprop);
                return returnedprop;
            }
            return returnedprop;
        }
        public static Prop CashTrolly(Vector3 pposition, float HHeading)//Cash Trolly
        {
            string[] lootletter = { "a", "b", "c" };
            int randletter = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, 3);
            Prop returnedprop;
            Model Casemodel = new Model("ch_prop_ch_cash_trolly_01a");
            returnedprop = World.CreatePropNoOffset(Casemodel, new Vector3(0, 0, 0), false);
            returnedprop.MarkAsNoLongerNeeded();
            if (returnedprop != null)
            {
                returnedprop.Delete();
            }

            Casemodel = new Model("ch_prop_" + "ch_cash" + "_trolly_01" + lootletter[randletter]);
            Casemodel.Request(10000);
            if (Casemodel.IsValid && Casemodel.IsInCdImage)
            {
                while (!Casemodel.IsLoaded) Script.Wait(50);
                returnedprop = World.CreatePropNoOffset(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false);
                if (returnedprop != null) Trollys.TrollySpawn.Add(returnedprop);
                return returnedprop;
            }
            return returnedprop;
        }
        public static Prop GoldTrolly(Vector3 pposition, float HHeading)//Gold Trolly
        {
            string[] lootletter = { "a", "b", "c" };
            int randletter = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, 3);
            Prop returnedprop;
            Model Casemodel = new Model("ch_prop_gold_trolly_01a");
            returnedprop = World.CreatePropNoOffset(Casemodel, new Vector3(0, 0, 0), false);
            returnedprop.MarkAsNoLongerNeeded();
            if (returnedprop != null)
            {
                returnedprop.Delete();
            }

            Casemodel = new Model("ch_prop_" + "gold" + "_trolly_01" + lootletter[randletter]);
            Casemodel.Request(10000);
            if (Casemodel.IsValid && Casemodel.IsInCdImage)
            {
                while (!Casemodel.IsLoaded) Script.Wait(50);
                returnedprop = World.CreatePropNoOffset(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false);
                if (returnedprop != null) Trollys.TrollySpawn.Add(returnedprop);
                return returnedprop;
            }
            return returnedprop;
        }
        public static Prop DiamondTrolly(Vector3 pposition, float HHeading)//Diamond Trolly
        {
            string[] lootletter = { "a", "b", "c" };
            int randletter = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, 3);
            Prop returnedprop;
            Model Casemodel = new Model("ch_prop_diamond_trolly_01a");
            returnedprop = World.CreatePropNoOffset(Casemodel, new Vector3(0, 0, 0), false);
            returnedprop.MarkAsNoLongerNeeded();
            if (returnedprop != null)
            {
                returnedprop.Delete();
            }

            Casemodel = new Model("ch_prop_" + "diamond" + "_trolly_01" + lootletter[randletter]);
            Casemodel.Request(10000);
            if (Casemodel.IsValid && Casemodel.IsInCdImage)
            {
                while (!Casemodel.IsLoaded) Script.Wait(50);
                returnedprop = World.CreatePropNoOffset(Casemodel, pposition, new Vector3(0f, 0f, HHeading), false);
                if (returnedprop != null) Trollys.TrollySpawn.Add(returnedprop);
                return returnedprop;
            }
            return returnedprop;
        }
        public static void SPAWN_Trolly(Vector3 pposition, float HHeading, string loot = "Random")
        {
            if (loot == "Random")
            {
                Prop Trolly = Trollys.RandomTrolly(pposition, HHeading);
            }
            if (loot == "Cash")
            {
                Prop Trolly = Trollys.CashTrolly(pposition, HHeading);
            }
            if (loot == "Gold")
            {
                Prop Trolly = Trollys.GoldTrolly(pposition, HHeading);
            }
            if (loot == "Diamond")
            {
                Prop Trolly = Trollys.DiamondTrolly(pposition, HHeading);
            }
        }
        public static void RemoveTrollys()
        {
            if (TrollySpawn.Count > 0)
            {
                foreach (Prop Loot in TrollySpawn.ToList())
                {
                    if (Loot != null)
                    {
                        Loot.Delete();
                        TrollySpawn.Remove(Loot);
                    }
                }
            }
            if (Bag != null)
            {
                Bag.Delete();
                Bag = null;
            }
            if (Bar != null)
            {
                Bar.Delete();
                Bar = null;
            }
            ExtraLootSwitch = 0;
        }
        public static Model RETURN_LOOT_TYPE(Prop loot)
        {
            return loot.Model;
        }

        public static void CamRotate()
        {
            var xMagnitude = Function.Call<float>(Hash.GET_DISABLED_CONTROL_NORMAL, 0, (int)GTA.Control.LookLeftRight);
            var yMagnitude = Function.Call<float>(Hash.GET_DISABLED_CONTROL_NORMAL, 0, (int)GTA.Control.LookUpDown);

            _polarAngleDeg += (xMagnitude * 10);

            if (_polarAngleDeg >= 360)
                _polarAngleDeg = 0;

            _azimuthAngleDeg += (yMagnitude * 10);

            if (_azimuthAngleDeg >= 360)
                _azimuthAngleDeg = 0;
            Vector3 frontpos = Game.Player.Character.GetOffsetPosition(new Vector3(0f, 0.10f, 0f));
            var nextCamLocation = polar3DToWorld3D(frontpos, _radius, _polarAngleDeg, _azimuthAngleDeg);
            World.RenderingCamera.Position = new Vector3(nextCamLocation.X, nextCamLocation.Y, nextCamLocation.Z);
            World.RenderingCamera.PointAt(frontpos);
        }
        public static Vector3 polar3DToWorld3D(Vector3 entityPosition, float radius, float polarAngleDeg, float azimuthAngleDeg)
        {
            // convert degrees to radians
            var polarAngleRad = polarAngleDeg * Math.PI / 180.0;
            var azimuthAngleRad = azimuthAngleDeg * Math.PI / 180.0;

            float x = entityPosition.X + radius * (float)(Math.Sin(azimuthAngleRad) * Math.Cos(polarAngleRad));
            float y = entityPosition.Y - radius * (float)(Math.Sin(azimuthAngleRad) * Math.Sin(polarAngleRad));
            float z = entityPosition.Z - radius * (float)(Math.Cos(azimuthAngleRad));

            return new Vector3(x, y, z);
        }
        public static void OnTickRotateChange(Prop Crate)
        {
            if (World.RenderingCamera != null &&
            (Game.IsControlPressed(GTA.Control.LookRightOnly) ||
            Game.IsControlPressed(GTA.Control.WeaponWheelLeftRight)))
            {
                _orbitAngle += 1f;
                if (_orbitAngle >= 360)
                    _orbitAngle = 0;
                var nextCamLocation = RotateAround(Crate.Position, 2f, _orbitAngle);
                Vector3 frontpos = Crate.GetOffsetPosition(new Vector3(0f, 0f, 0.20f));
                World.RenderingCamera.Position = new Vector3(nextCamLocation.X, nextCamLocation.Y, frontpos.Z);
            }
            else if (World.RenderingCamera != null &&
            (Game.IsControlPressed(GTA.Control.LookLeftOnly)))
            {
                //UI.ShowSubtitle("looking left");
                _orbitAngle -= 1f;
                //if (_orbitAngle <= 0)
                //    _orbitAngle = 360;
                var nextCamLocation = RotateAround(Crate.Position, 2f, _orbitAngle);
                Vector3 frontpos = Crate.GetOffsetPosition(new Vector3(0f, 0f, 0.20f));
                World.RenderingCamera.Position = new Vector3(nextCamLocation.X, nextCamLocation.Y, frontpos.Z);
            }
        }
        public static Vector2 RotateAround(Vector3 entityPosition, float radius, float orbitAngle)
        {
            float x = entityPosition.X + radius * (float)Math.Cos(orbitAngle * Math.PI / 180);
            float y = entityPosition.Y - radius * (float)Math.Sin(orbitAngle * Math.PI / 180);
            return new Vector2(x, y);
        }
        public static float TO_FLOAT(int iParam0)
        {
            return Function.Call<float>(Hash.TO_FLOAT, iParam0);
        }
    }
    internal class Wall_Creator : Script
    {
        public static bool Wall_In_Progress = false;
        public static bool Wall2_In_Progress = false;
        public static bool Wall3_In_Progress = false;
        public static bool Wall4_In_Progress = false;
        public static bool WallFail_In_Progress = false;
        public static bool WallPass_In_Progress = false;
        public static string MissionType = "";
        public static string SelectedRobbery = "";
        public static string CashWonStat = "";
        public static int CashWon = 0;
        public static int RPWon = 0;
        public static int Waves = 0;
        public static int TotalKills = 0;
        public static string FailReason = "";
        public static int RobberyStartWall = 1;
        public static int RobberyFinishWall = 1;
        public static int MissionFinaleStartswitch = 1;
        public static int MissionFinalePassswitch = 1;
        public static int ShardMissionStartPass;
        public static int MISSIONPASSED;
        public static int MISSIONPASSED2;
        public static int MISSIONPASSED3;
        public static int ShardTimer = 0;
        public static int CleanUpSwitch = 0;

        public static Camera FailCam;
        enum FRONTEND_MENU_TYPE
        {
            FE_MENU_VERSION_CORONA_BETTING = -545108805,
            FE_MENU_VERSION_CORONA_INVITE_MATCHED_PLAYERS = 14955678,
            FE_MENU_VERSION_CORONA_INVITE_LAST_JOB_PLAYERS = -1664703635,
            FE_MENU_VERSION_CORONA_INVITE_FRIENDS = -818055323,
            FE_MENU_VERSION_CORONA_JOINED_PLAYERS = -708066240,
            FE_MENU_VERSION_CORONA = 889053273,
        };

        public Wall_Creator()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }
        public void onTick(object sender, EventArgs e)
        {
            switch (RobberyStartWall)
            {
                case 1:
                    {
                        if (SelectedRobbery != "" && MissionType != "" && Wall_In_Progress)
                        {
                            Audio.SetAudioFlag(AudioFlags.LoadMPData, true);
                            DeleteMissionPassScaleform();
                            RequestMissionPassScaleform();
                            Wait(500);
                            Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true); //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "PUSH", "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS", true);
                            HudHandler.HudandRadar(false, false);
                            RobberyStartWall = 2;
                        }
                    }
                    break;
                case 2:
                    {
                        CallFunction(MISSIONPASSED, "CLEANUP", "intro");
                        CallFunction(MISSIONPASSED2, "CLEANUP", "intro");
                        CallFunction(MISSIONPASSED3, "CLEANUP", "intro");
                        CallFunction(MISSIONPASSED, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_HEIST_BACKGROUND");
                        CallFunction(MISSIONPASSED2, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_HEIST_BACKGROUND");
                        CallFunction(MISSIONPASSED3, "CREATE_STAT_WALL", "intro", "HUD_COLOUR_HEIST_BACKGROUND");
                        CallFunction(MISSIONPASSED, "ADD_INTRO_TO_WALL", "intro", MissionType, SelectedRobbery, "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                        CallFunction(MISSIONPASSED2, "ADD_INTRO_TO_WALL", "intro", MissionType, SelectedRobbery, "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                        CallFunction(MISSIONPASSED3, "ADD_INTRO_TO_WALL", "intro", MissionType, SelectedRobbery, "", "", "", "", 0, 0, true, "HUD_COLOUR_WHITE");
                        CallFunction(MISSIONPASSED, "PAUSE", "intro", 3);
                        CallFunction(MISSIONPASSED2, "PAUSE", "intro", 3);
                        CallFunction(MISSIONPASSED3, "PAUSE", "intro", 3);
                        CallFunction(MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                        CallFunction(MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                        CallFunction(MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "intro", 75, 1);
                        CallFunction(MISSIONPASSED, "SHOW_STAT_WALL", "intro");
                        CallFunction(MISSIONPASSED2, "SHOW_STAT_WALL", "intro");
                        CallFunction(MISSIONPASSED3, "SHOW_STAT_WALL", "intro");
                        ShardTimer = Game.GameTime + 8000;
                        RobberyStartWall = 3;
                    }
                    break;
                case 3:
                    {
                        MissionCelebrate(MISSIONPASSED, MISSIONPASSED2, MISSIONPASSED3);
                        if (Game.GameTime > ShardTimer)
                        {
                            Function.Call(Hash.STOP_AUDIO_SCENES);
                            DeleteMissionPassScaleform();
                            SelectedRobbery = "";
                            MissionType = "";
                            ShardTimer = 0;
                            Wall_In_Progress = false;
                            RobberyStartWall = 1;
                        }
                    }
                    break;
            }
            switch (RobberyFinishWall)
            {
                case 1:
                    {
                        if (SelectedRobbery != "" && Wall2_In_Progress)
                        {
                            Audio.SetAudioFlag(AudioFlags.LoadMPData, true);
                            DeleteMissionPassScaleform();
                            RequestMissionPassScaleform();
                            Wait(500);
                            Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                            Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                            Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true); //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "PUSH", "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS", true);
                            //Main.MISSIONPASSED.Play();
                            HudHandler.HudandRadar(false, false);
                            RobberyFinishWall = 2;
                        }
                    }
                    break;
                case 2:
                    {
                        CallFunction(MISSIONPASSED, "CLEANUP", "CELEB_HEIST");
                        CallFunction(MISSIONPASSED2, "CLEANUP", "CELEB_HEIST");
                        CallFunction(MISSIONPASSED3, "CLEANUP", "CELEB_HEIST");

                        CallFunction(MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_HEIST", "HUD_COLOUR_BLACK");
                        CallFunction(MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_HEIST", "HUD_COLOUR_BLACK");
                        CallFunction(MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_HEIST", "HUD_COLOUR_BLACK");

                        CallFunction(MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_HEIST", SelectedRobbery, "PASSED", "", true, true, true);
                        CallFunction(MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_HEIST", SelectedRobbery, "PASSED", "", true, true, true);
                        CallFunction(MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_HEIST", SelectedRobbery, "PASSED", "", true, true, true);

                        CallFunction(MISSIONPASSED, "PAUSE", "CELEB_HEIST", 2);
                        CallFunction(MISSIONPASSED2, "PAUSE", "CELEB_HEIST", 2);
                        CallFunction(MISSIONPASSED3, "PAUSE", "CELEB_HEIST", 2);

                        CallFunction(MISSIONPASSED, "CREATE_STAT_TABLE", "CELEB_HEIST", "CELEB_PSCORE");
                        CallFunction(MISSIONPASSED2, "CREATE_STAT_TABLE", "CELEB_HEIST", "CELEB_PSCORE");
                        CallFunction(MISSIONPASSED3, "CREATE_STAT_TABLE", "CELEB_HEIST", "CELEB_PSCORE");

                        CallFunction(MISSIONPASSED, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", Main.Player_Name, "PLATINUM", Main.Player_Name, true, true, false, "HUD_COLOUR_PLATINUM");
                        CallFunction(MISSIONPASSED2, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", Main.Player_Name, "PLATINUM", Main.Player_Name, true, true, false, "HUD_COLOUR_PLATINUM");
                        CallFunction(MISSIONPASSED3, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", Main.Player_Name, "PLATINUM", Main.Player_Name, true, true, false, "HUD_COLOUR_PLATINUM");

                        CallFunction(MISSIONPASSED, "ADD_STAT_TABLE_TO_WALL", "CELEB_HEIST", "CELEB_PSCORE");
                        CallFunction(MISSIONPASSED2, "ADD_STAT_TABLE_TO_WALL", "CELEB_HEIST", "CELEB_PSCORE");
                        CallFunction(MISSIONPASSED3, "ADD_STAT_TABLE_TO_WALL", "CELEB_HEIST", "CELEB_PSCORE");

                        CallFunction(MISSIONPASSED, "PAUSE", "CELEB_HEIST", 2);
                        CallFunction(MISSIONPASSED2, "PAUSE", "CELEB_HEIST", 2);
                        CallFunction(MISSIONPASSED3, "PAUSE", "CELEB_HEIST", 2);

                        CallFunction(MISSIONPASSED, "PAUSE", "CELEB_HEIST", 2);
                        CallFunction(MISSIONPASSED2, "PAUSE", "CELEB_HEIST", 2);
                        CallFunction(MISSIONPASSED3, "PAUSE", "CELEB_HEIST", 2);

                        CallFunction(MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_HEIST", 75, 0);
                        CallFunction(MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_HEIST", 75, 0);
                        CallFunction(MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_HEIST", 75, 0);
                        CallFunction(MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_HEIST");
                        CallFunction(MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_HEIST");
                        CallFunction(MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_HEIST");
                        ShardTimer = Game.GameTime + 22000;
                        Screen_Effects.PlayAnimPostFX("HeistCelebPass", 0, true);
                        RobberyFinishWall = 3;
                    }
                    break;
                case 3:
                    {
                        MissionCelebrate(MISSIONPASSED, MISSIONPASSED2, MISSIONPASSED3);
                        if (Game.GameTime > ShardTimer)
                        {
                            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                            Function.Call(Hash.STOP_AUDIO_SCENES);
                            DeleteMissionPassScaleform();
                            SelectedRobbery = "";
                            MissionType = "";
                            ShardTimer = 0;
                            Wall2_In_Progress = false;
                            RobberyFinishWall = 1;
                        }
                    }
                    break;
            }
            switch (MissionFinalePassswitch)
            {
                case 1:
                    {
                        if (SelectedRobbery != "" && Wall4_In_Progress)
                        {
                            Audio.SetAudioFlag(AudioFlags.LoadMPData, true);
                            DeleteMissionPassScaleform();
                            RequestHeistPassScaleform();
                            Wait(500);
                            Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                            Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
                            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                            Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
                            //Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
                            //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true); //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "PUSH", "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS", true);
                            HudHandler.HudandRadar(false, false);
                            MissionFinalePassswitch = 2;
                        }
                    }
                    break;
                case 2:
                    {
                        //Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FINALE_SCREEN_SOUNDS", true);

                        CallFunction(MISSIONPASSED, "CLEANUP", "CELEB_HEIST");
                        CallFunction(MISSIONPASSED2, "CLEANUP", "CELEB_HEIST");
                        CallFunction(MISSIONPASSED3, "CLEANUP", "CELEB_HEIST");

                        CallFunction(MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_HEIST", "HUD_COLOUR_WAYPOINTDARK");
                        CallFunction(MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_HEIST", "HUD_COLOUR_WAYPOINTDARK");
                        CallFunction(MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_HEIST", "HUD_COLOUR_WAYPOINTDARK");

                        CallFunction(MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_HEIST", SelectedRobbery, "PASSED", "", true, true, true);
                        CallFunction(MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_HEIST", SelectedRobbery, "PASSED", "", true, true, true);
                        CallFunction(MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_HEIST", SelectedRobbery, "PASSED", "", true, true, true);

                        CallFunction(MISSIONPASSED, "PAUSE", "CELEB_HEIST", 2);
                        CallFunction(MISSIONPASSED2, "PAUSE", "CELEB_HEIST", 2);
                        CallFunction(MISSIONPASSED3, "PAUSE", "CELEB_HEIST", 2);

                        CallFunction(MISSIONPASSED, "CREATE_STAT_TABLE", "CELEB_HEIST", "CELEB_PSCORE");
                        CallFunction(MISSIONPASSED2, "CREATE_STAT_TABLE", "CELEB_HEIST", "CELEB_PSCORE");
                        CallFunction(MISSIONPASSED3, "CREATE_STAT_TABLE", "CELEB_HEIST", "CELEB_PSCORE");

                        CallFunction(MISSIONPASSED, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", Main.Player_Name, "PLATINUM", Main.Player_Name, true, true, false, "HUD_COLOUR_PLATINUM");
                        CallFunction(MISSIONPASSED2, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", Main.Player_Name, "PLATINUM", Main.Player_Name, true, true, false, "HUD_COLOUR_PLATINUM");
                        CallFunction(MISSIONPASSED3, "ADD_STAT_TO_TABLE", "CELEB_HEIST", "CELEB_PSCORE", Main.Player_Name, "PLATINUM", Main.Player_Name, true, true, false, "HUD_COLOUR_PLATINUM");

                        CallFunction(MISSIONPASSED, "PAUSE", "CELEB_HEIST", 2);
                        CallFunction(MISSIONPASSED2, "PAUSE", "CELEB_HEIST", 2);
                        CallFunction(MISSIONPASSED3, "PAUSE", "CELEB_HEIST", 2);

                        CallFunction(MISSIONPASSED, "CREATE_INCREMENTAL_CASH_ANIMATION", "CELEB_HEIST", "SUMMARY");
                        CallFunction(MISSIONPASSED2, "CREATE_INCREMENTAL_CASH_ANIMATION", "CELEB_HEIST", "SUMMARY");
                        CallFunction(MISSIONPASSED3, "CREATE_INCREMENTAL_CASH_ANIMATION", "CELEB_HEIST", "SUMMARY");

                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", 0, Main.Potential_Cut, "POTENTIAL TAKE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", 0, Main.Potential_Cut, "POTENTIAL TAKE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", 0, Main.Potential_Cut, "POTENTIAL TAKE", "", "", 3, 3);

                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", Main.Potential_Cut, Heist_Hud.Actual_Take, "ACTUAL TAKE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", Main.Potential_Cut, Heist_Hud.Actual_Take, "ACTUAL TAKE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", Main.Potential_Cut, Heist_Hud.Actual_Take, "ACTUAL TAKE", "", "", 3, 3);

                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", Heist_Hud.Actual_Take, Heist_Hud.Actual_Take, "100% CUT OF TAKE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", Heist_Hud.Actual_Take, Heist_Hud.Actual_Take, "100% CUT OF TAKE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", Heist_Hud.Actual_Take, Heist_Hud.Actual_Take, "100% CUT OF TAKE", "", "", 3, 3);

                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", Heist_Hud.Actual_Take, Heist_Hud.Actual_Take, "TOTAL CASH EARNED", "", "", 3, 3);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", Heist_Hud.Actual_Take, Heist_Hud.Actual_Take, "TOTAL CASH EARNED", "", "", 3, 3);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_HEIST", "SUMMARY", Heist_Hud.Actual_Take, Heist_Hud.Actual_Take, "TOTAL CASH EARNED", "", "", 3, 3);

                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_ANIMATION_TO_WALL", "CELEB_HEIST", "SUMMARY");
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_ANIMATION_TO_WALL", "CELEB_HEIST", "SUMMARY");
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_ANIMATION_TO_WALL", "CELEB_HEIST", "SUMMARY");

                        CallFunction(MISSIONPASSED, "PAUSE", "CELEB_HEIST", 2);
                        CallFunction(MISSIONPASSED2, "PAUSE", "CELEB_HEIST", 2);
                        CallFunction(MISSIONPASSED3, "PAUSE", "CELEB_HEIST", 2);

                        CallFunction(MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_HEIST", 90, 1);
                        CallFunction(MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_HEIST", 90, 1);
                        CallFunction(MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_HEIST", 90, 1);

                        CallFunction(MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_HEIST");
                        CallFunction(MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_HEIST");
                        CallFunction(MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_HEIST");
                        ShardTimer = Game.GameTime + 22000;
                        MissionFinalePassswitch = 3;
                    }
                    break;
                case 3:
                    {
                        MissionCelebrate(MISSIONPASSED, MISSIONPASSED2, MISSIONPASSED3);
                        if (Game.GameTime >= ShardTimer)
                        {
                            Function.Call(Hash.STOP_AUDIO_SCENES);
                            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
                            Function.Call(Hash.CLEAR_GPS_MULTI_ROUTE);
                            DeleteMissionPassScaleform();
                            Heist_Hud.Actual_Take = 0;
                            Wall4_In_Progress = false;
                            ShardTimer = 0;
                            MissionFinalePassswitch = 1;
                        }
                    }
                    break;
            }
        }
        public void onShutdown(object sender, EventArgs e)
        {
            #region Vehicles
            #endregion
            #region Peds
            #endregion
            #region Props
            #endregion
            #region Blips
            #endregion
            #region Cameras
            if (FailCam != null)
            {
                FailCam.Delete();
            }
            #endregion
            #region Pickups
            #endregion

            //if (MISSIONPASSED != 0 || MISSIONPASSED2 != 0 || MISSIONPASSED3 != 0)
            {
                //DeleteMissionPassScaleform();
            }
        }
        public static void DeleteMissionPassScaleform()
        {
            //uParam0 = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "MP_CELEBRATION_BG");
            //uParam1 = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "MP_CELEBRATION_FG");
            //uParam2 = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "MP_CELEBRATION");
            unsafe
            {
                int handle = MISSIONPASSED;
                Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                MISSIONPASSED = 0;

                int handle2 = MISSIONPASSED2;
                Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle2);
                MISSIONPASSED2 = 0;

                int handle3 = MISSIONPASSED3;
                Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle3);
                MISSIONPASSED3 = 0;
            }
            //Function.Call(Hash.CLEAR_TV_CHANNEL_PLAYLIST, 0);
        }//MISSION PASS
        public static void RequestMissionPassScaleform()
        {
            Yield();
            MISSIONPASSED = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "MP_CELEBRATION_BG");
            MISSIONPASSED2 = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "MP_CELEBRATION_FG");
            MISSIONPASSED3 = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "MP_CELEBRATION");
        }//MISSION PASS
        public static void RequestHeistPassScaleform()
        {
            Yield();
            MISSIONPASSED = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "HEIST_CELEBRATION_BG");
            MISSIONPASSED2 = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "HEIST_CELEBRATION_FG");
            MISSIONPASSED3 = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "HEIST_CELEBRATION");
        }//Heist MISSION PASS
        public static void RequestHeist2PassScaleform()
        {
            Yield();
            MISSIONPASSED = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "HEIST2_CELEBRATION_BG");
            MISSIONPASSED2 = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "HEIST2_CELEBRATION_FG");
            MISSIONPASSED3 = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "HEIST2_CELEBRATION");
        }//Heist2 MISSION PASS
        public static void DeleteMissionShardScaleform()
        {
            //uParam0 = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "MP_CELEBRATION_BG");
            //uParam1 = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "MP_CELEBRATION_FG");
            //uParam2 = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "MP_CELEBRATION");
            unsafe
            {
                int handle = ShardMissionStartPass;
                Function.Call(Hash.SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, &handle);
                ShardMissionStartPass = 0;
            }
            //Function.Call(Hash.CLEAR_TV_CHANNEL_PLAYLIST, 0);
        }//MISSION SHARD
        public static void RequestMissionShardScaleform()
        {
            Yield();
            ShardMissionStartPass = Function.Call<int>(Hash.REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN, "MIDSIZED_MESSAGE");
        }//MISSION SHARD
        public static void MissionCelebrate(int uParam1, int uParam2, int uParam3)
        {
            Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED, uParam1, uParam2, 255, 255, 255, 255);
            Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN, uParam3, 255, 255, 255, 255, 0);
        }
        public static void MissionShard(int uParam1)
        {
            Function.Call(Hash.DRAW_SCALEFORM_MOVIE_FULLSCREEN, uParam1, 255, 255, 255, 255, 0);
        }
        public static void Shard_In(string ShardName, string ShardDescription, int color, float speed)
        {
            DeleteMissionShardScaleform();
            RequestMissionShardScaleform();
            Wall_Creator.Wait(500);

            Wall_Creator.CallFunction(ShardMissionStartPass, "SHOW_SHARD_MIDSIZED_MESSAGE", ShardName, ShardDescription, 2, false, true);
            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Shard_Appear", "GTAO_FM_Events_Soundset", true);
            int i = Game.GameTime + 7000;
            while (Game.GameTime < i)
            {
                MissionShard(ShardMissionStartPass);
                Wall_Creator.Wait(0);
            }
            Shard_Out(color, speed);
            i = Game.GameTime + 2000;
            while (Game.GameTime < i)
            {
                MissionShard(ShardMissionStartPass);
                Wall_Creator.Wait(0);
            }
            DeleteMissionShardScaleform();
        }
        public static void Shard_Out(int color, float speed)
        {
            Wall_Creator.CallFunction(ShardMissionStartPass, "SHARD_ANIM_OUT", color, speed);// 9, 0.33f
            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Shard_Disappear", "GTAO_FM_Events_Soundset", true);
        }
        public static void Mission_Shard_In(int timer = 6000, string color = "HUD_COLOUR_WAYPOINTDARK", string missiontype = "", string selectedmission = "", string challengetext = "", string challengepart = "", string targetTypeText = "", string targetValue = "", int delay = 0, string targetValuePrefix = "$", bool literalstring = true, string textcolor = "HUD_COLOUR_WHITE", int pausedur = 3, int alpha = 75, int walltype = 1)
        {

            int walltimer = 0;
            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
            Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
            DeleteMissionPassScaleform();
            RequestMissionPassScaleform();
            Wait(500);
            Wall_In_Progress = true;
            Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
            HudHandler.HudandRadar(false, false);

            CallFunction(MISSIONPASSED, "CLEANUP", "intro");
            CallFunction(MISSIONPASSED2, "CLEANUP", "intro");
            CallFunction(MISSIONPASSED3, "CLEANUP", "intro");
            CallFunction(MISSIONPASSED, "CREATE_STAT_WALL", "intro", color, "100.0");
            CallFunction(MISSIONPASSED2, "CREATE_STAT_WALL", "intro", color, "100.0");
            CallFunction(MISSIONPASSED3, "CREATE_STAT_WALL", "intro", color, "100.0");
            CallFunction(MISSIONPASSED, "ADD_INTRO_TO_WALL", "intro", missiontype, selectedmission, challengetext, challengepart, targetTypeText, targetValue, delay, targetValuePrefix, literalstring, textcolor);
            CallFunction(MISSIONPASSED2, "ADD_INTRO_TO_WALL", "intro", missiontype, selectedmission, challengetext, challengepart, targetTypeText, targetValue, delay, targetValuePrefix, literalstring, textcolor);
            CallFunction(MISSIONPASSED3, "ADD_INTRO_TO_WALL", "intro", missiontype, selectedmission, challengetext, challengepart, targetTypeText, targetValue, delay, targetValuePrefix, literalstring, textcolor);
            CallFunction(MISSIONPASSED, "PAUSE", "intro", pausedur);
            CallFunction(MISSIONPASSED2, "PAUSE", "intro", pausedur);
            CallFunction(MISSIONPASSED3, "PAUSE", "intro", pausedur);
            CallFunction(MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "intro", alpha, walltype);
            CallFunction(MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "intro", alpha, walltype);
            CallFunction(MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "intro", alpha, walltype);
            CallFunction(MISSIONPASSED, "SHOW_STAT_WALL", "intro");
            CallFunction(MISSIONPASSED2, "SHOW_STAT_WALL", "intro");
            CallFunction(MISSIONPASSED3, "SHOW_STAT_WALL", "intro");

            walltimer = Game.GameTime + timer;
            while (Game.GameTime < walltimer)
            {
                MissionCelebrate(MISSIONPASSED, MISSIONPASSED2, MISSIONPASSED3);
                Wait(0);
            }
            walltimer = Game.GameTime + 2000;
            while (Game.GameTime < walltimer)
            {
                MissionCelebrate(MISSIONPASSED, MISSIONPASSED2, MISSIONPASSED3);
                Wait(0);
            }
            Function.Call(Hash.STOP_AUDIO_SCENES);
            Wall_In_Progress = false;
            HudHandler.HudandRadar(true, true);
            DeleteMissionPassScaleform();
            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
        }
        public static void Mission_Fail_In(int timer = 6000, string color = "HUD_COLOUR_WAYPOINTDARK", string missionTextLabel = "", string passFailTextLabel = "", string messageLabel = "", bool isMessageRawText = true, bool isPassFailRawText = true, bool isMissionTextRawText = true, int pausedur = 3, int alpha = 75, int walltype = 1, string[] musicarg = null, Vector3[] pos = null, float[] heading = null, string selectedmission = "", string challengetext = "", string challengepart = "", string targetTypeText = "", string targetValue = "", string textcolor = "HUD_COLOUR_WHITE", int pausedur2 = 3, int alpha2 = 75, int walltype2 = 1, bool usingactionmode = true)
        {
            bool wasdead = false;
            int walltimer = 0;
            Ped player = Game.Player.Character;
            Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player, true);
            Weapons.Anim_Weapon_Off();
            player.IsInvincible = true;
            Main.LoadDict("anim@deathmatch_intros@unarmed");
            Main.LoadDict("anim@heists@team_respawn@variations@variation_c");
            if (!Game.Player.Character.IsDead)
            {
                player.CanRagdoll = false;
                Function.Call(Hash.SET_PED_CONFIG_FLAG, player, 188, true);
                Audios.Stop_Music_Event();
                Function.Call(Hash.SET_HIDOF_OVERRIDE, 1, 1, 0f, Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_NEAR_DOF), Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_FAR_DOF), (Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_FAR_DOF) + 25f));
                WallFail_In_Progress = true;
                Groups.SET_PED_USING_ACTION_MODE(Game.Player.Character, usingactionmode);
                Game.Player.CanControlCharacter = false;
                HudHandler.HudandRadar(false, false);
                Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
                Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFail", 0, false);
                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FAILED_SCREEN_SOUNDS", true);
                walltimer = Game.GameTime + 2000;
                while (Game.GameTime < walltimer)
                {
                    Wait(0);
                }
            }
            else
            {
                wasdead = true;
            }
            while (Game.Player.Character.IsDead)
            {
                Wait(0);
            }
            if (wasdead)
            {
                Screen.FadeOut(0);
                Audios.Stop_Music_Event();
                Function.Call(Hash.SET_HIDOF_OVERRIDE, 1, 1, 0f, Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_NEAR_DOF), Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_FAR_DOF), (Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_FAR_DOF) + 25f));
                WallFail_In_Progress = true;
                Groups.SET_PED_USING_ACTION_MODE(Game.Player.Character, usingactionmode);
                Game.Player.CanControlCharacter = false;
                HudHandler.HudandRadar(false, false);
                Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
                Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFail", 0, false);
                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FAILED_SCREEN_SOUNDS", true);
            }
            walltimer = Game.GameTime + 2000;
            while (Game.GameTime < walltimer)
            {
                Wait(0);
            }
            if (FailCam != null)
            {
                FailCam.Delete();
                FailCam = null;
            }
            while (FailCam == null)
            {
                FailCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", 0);
                Wait(0);
            }
            Random rand = new Random();
            int index = rand.Next(1, 8);
            if (index == 1)
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, FailCam, Game.Player.Character, 2.0f, 3.0f, 0.6f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                Function.Call(Hash.SET_CAM_FOV, FailCam, 10f);
            }
            if (index == 2)
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, FailCam, Game.Player.Character, 1.0f, 3.0f, 0.0f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                Function.Call(Hash.SET_CAM_FOV, FailCam, 10f);
            }
            if (index == 3)
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, FailCam, Game.Player.Character, 0.5f, 3.0f, 0.0f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                Function.Call(Hash.SET_CAM_FOV, FailCam, 12f);
            }
            if (index == 4)
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, FailCam, Game.Player.Character, 1.0f, 3.0f, -1.0f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, FailCam, Game.Player.Character, -0.2f, 0f, 0.5f, true);
                Function.Call(Hash.SET_CAM_FOV, FailCam, 12f);
            }
            if (index == 5)
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, FailCam, Game.Player.Character, 0f, 2f, 0.6f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, FailCam, Game.Player.Character, 0.0f, 0.0f, 0.6f, true);
                Function.Call(Hash.SET_CAM_FOV, FailCam, 12f);
            }
            if (index == 6)
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, FailCam, Game.Player.Character, 0.5f, 0.5f, -1.0f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, FailCam, Game.Player.Character, -0.2f, 0.0f, 1.0f, true);
                Function.Call(Hash.SET_CAM_FOV, FailCam, 25f);
            }
            if (index == 7)
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, FailCam, Game.Player.Character, -0.5f, 2f, 0.0f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, FailCam, Game.Player.Character, 0.2f, 0.0f, 0.6f, true);
                Function.Call(Hash.SET_CAM_FOV, FailCam, 15f);
            }
            World.RenderingCamera = FailCam;
            Wait(1500);
            Screen.FadeIn(500);
            while (!Screen.IsFadedIn)
            {
                Wait(0);
            }
            Weapons.Anim_Weapon_Off();
            Function.Call(Hash.SET_SEETHROUGH, false);
            Function.Call(Hash.SET_NIGHTVISION, false);
            Function.Call(Hash.SET_ARTIFICIAL_LIGHTS_STATE, false);
            Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
            Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFail", 0, false);
            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FAILED_SCREEN_SOUNDS", true);
            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
            Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
            DeleteMissionPassScaleform();
            RequestHeistPassScaleform();
            Wait(1000);
            Wall_In_Progress = true;
            //Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
            //Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
            Function.Call(Hash.START_AUDIO_SCENE, "MP_CELEB_SCREEN_SCENE");
            HudHandler.HudandRadar(false, false);

            CallFunction(MISSIONPASSED, "CLEANUP", "CELEB_FAILED");
            CallFunction(MISSIONPASSED2, "CLEANUP", "CELEB_FAILED");
            CallFunction(MISSIONPASSED3, "CLEANUP", "CELEB_FAILED");
            CallFunction(MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_FAILED", color, 2);
            CallFunction(MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_FAILED", color, 2);
            CallFunction(MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_FAILED", color, 2);
            CallFunction(MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", missionTextLabel, passFailTextLabel, messageLabel, isMessageRawText, isPassFailRawText, isMissionTextRawText);
            CallFunction(MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", missionTextLabel, passFailTextLabel, messageLabel, isMessageRawText, isPassFailRawText, isMissionTextRawText);
            CallFunction(MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", missionTextLabel, passFailTextLabel, messageLabel, isMessageRawText, isPassFailRawText, isMissionTextRawText);
            CallFunction(MISSIONPASSED, "PAUSE", "CELEB_FAILED", pausedur);
            CallFunction(MISSIONPASSED2, "PAUSE", "CELEB_FAILED", pausedur);
            CallFunction(MISSIONPASSED3, "PAUSE", "CELEB_FAILED", pausedur);
            CallFunction(MISSIONPASSED, "ADD_CASH_TO_WALL", "CELEB_FAILED", 0, "left");
            CallFunction(MISSIONPASSED2, "ADD_CASH_TO_WALL", "CELEB_FAILED", 0, "left");
            CallFunction(MISSIONPASSED3, "ADD_CASH_TO_WALL", "CELEB_FAILED", 0, "left");
            CallFunction(MISSIONPASSED, "PAUSE", "CELEB_FAILED", pausedur);
            CallFunction(MISSIONPASSED2, "PAUSE", "CELEB_FAILED", pausedur);
            CallFunction(MISSIONPASSED3, "PAUSE", "CELEB_FAILED", pausedur);
            CallFunction(MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", alpha, walltype);
            CallFunction(MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", alpha, walltype);
            CallFunction(MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", alpha, walltype);
            CallFunction(MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_FAILED");
            CallFunction(MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_FAILED");
            CallFunction(MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_FAILED");

            walltimer = Game.GameTime + 300;
            while (Game.GameTime < walltimer)
            {
                MissionCelebrate(MISSIONPASSED, MISSIONPASSED2, MISSIONPASSED3);
                Wait(0);
            }
            Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
            Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFailBW", 0, true);

            walltimer = Game.GameTime + timer;
            while (Game.GameTime < walltimer)
            {
                MissionCelebrate(MISSIONPASSED, MISSIONPASSED2, MISSIONPASSED3);
                Wait(0);
            }
            Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFailBW");
            Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebEnd", 0, false);
            walltimer = Game.GameTime + 2000;
            while (Game.GameTime < walltimer)
            {
                MissionCelebrate(MISSIONPASSED, MISSIONPASSED2, MISSIONPASSED3);
                Wait(0);
            }
            DeleteMissionPassScaleform();
            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
            //Function.Call(Hash.START_PLAYER_SWITCH, Game.Player.Character, Game.Player.Character, 513, ePlayerSwitchTypes.SWITCH_TYPE_LONG);
            PlayerSwitch._SWITCH_OUT_PLAYER(player, 3, 1);
            FailCam.Delete();
            FailCam = null;
            World.RenderingCamera = null;
            Function.Call(Hash.ANIMPOSTFX_STOP_ALL);
            Function.Call(Hash.SET_HIDOF_OVERRIDE, 0, 0, 0f, 0f, 0f, 0f);
            Function.Call(Hash.STOP_AUDIO_SCENES);
            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
            walltimer = Game.GameTime + 5000;
            while (Game.GameTime < walltimer)
            {
                Wait(0);
            }
            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "LEADER_BOARD", "HUD_FRONTEND_DEFAULT_SOUNDSET", true);
            while (!Game.IsControlJustPressed(GTA.Control.FrontendRt))
            {
                var InstructionButtons = new Scaleform("instructional_buttons");
                InstructionButtons.CallFunction("CLEAR_ALL");
                InstructionButtons.CallFunction("TOGGLE_MOUSE_BUTTONS", 0);
                InstructionButtons.CallFunction("CREATE_CONTAINER");
                InstructionButtons.CallFunction("SET_DATA_SLOT", 0, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 0, (int)GTA.Control.FrontendRt, 0), "Quick Restart ");
                InstructionButtons.CallFunction("DRAW_INSTRUCTIONAL_BUTTONS", -1);
                InstructionButtons.Render2D();
                Wait(0);
            }
            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "LEADER_BOARD", "HUD_FRONTEND_DEFAULT_SOUNDSET", true);
            LoadingPrompt.Show("Loading", LoadingSpinnerType.Clockwise1);
            walltimer = Game.GameTime + 1000;
            while (Game.GameTime < walltimer)
            {
                Wait(0);
            }
            Audios.TRIGGER_MUSIC_EVENT(musicarg[0]);
            Audios.TRIGGER_MUSIC_EVENT(musicarg[1]);
            walltimer = Game.GameTime + 5000;
            while (Game.GameTime < walltimer)
            {
                Wait(0);
            }
            LoadingPrompt.Show("Loading", LoadingSpinnerType.SocialClubSaving);
            index = rand.Next(pos.Length);
            player.Position = pos[index];
            player.Heading = heading[index];
            //Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
            walltimer = Game.GameTime + 1000;
            while (Game.GameTime < walltimer)
            {
                LOAD_SCENES.LOAD_SCENE(pos[index].X, pos[index].Y, pos[index].Z);
                Wait(0);
            }
            Cameras.RESET_GAMEPLAY_CAM();
            //PlayerSwitch.SwitchBetweenPeds(Game.Player.Character, clone);
            Function.Call((Hash)0xAD5FDF34B81BFE79);
            Function.Call((Hash)0x43D1680C6D19A8E9);
            PlayerSwitch.SWITCH_IN_PLAYER(player);
            string[] RandomLetter = { "a", "b", "c", "d", "e", "a" };
            while (Main.CutsceneCam == null)
            {
                Main.CutsceneCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", false);
                Wait(0);
            }
            while (Main.CutsceneCam2 == null)
            {
                Main.CutsceneCam2 = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", false);
                Wait(0);
            }
            while (PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
            {
                LOAD_SCENES.LOAD_SCENE(pos[index].X, pos[index].Y, pos[index].Z);
                HudHandler.HudandRadar(false, false);
                Wait(0);
            }
            while (World.RenderingCamera != Main.CutsceneCam)
            {
                World.RenderingCamera = Main.CutsceneCam;
                Wait(0);
            }
            Game.Player.Character.Position = pos[index];
            Game.Player.Character.Heading = heading[index];
            Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 1f, 0f, 0f, true);
            Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, -1f, 0f, true);
            Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 50f);

            Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0.5f, 2f, 0.5f, true);
            Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0f, 0f, 0.3f, true);
            Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam2, 26f);
            Function.Call(Hash.SET_CAM_ACTIVE, Main.CutsceneCam2, true);
            Function.Call(Hash.SET_CAM_ACTIVE_WITH_INTERP, Main.CutsceneCam2, Main.CutsceneCam, 5000, 3, 1);
            int randomrespawn = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, 2);
            int randomrespawnlet = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, 5);
            Game.Player.Character.Task.PlayAnimation("anim@deathmatch_intros@unarmed", "intro_male_unarmed_" + RandomLetter[randomrespawnlet], 1000.0f, 1.0f, -1, AnimationFlags.None, 0.0f);
            LoadingPrompt.Hide();
            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
            Groups.SET_PED_USING_ACTION_MODE(Game.Player.Character, usingactionmode);
            Wall_Creator.Mission_Shard_In(6000, "HUD_COLOUR_HSHARD", missionTextLabel, selectedmission, challengetext, challengepart, targetTypeText, targetValue, 5, "$", true, textcolor, pausedur2, alpha2, walltype2);
            while (Wall_In_Progress)
            {
                Wait(0);
            }
            Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 0.7983f, -0.9226f, 0.5243f, true);
            Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, -0.2782f, 1.8498f, 0.1298f, true);
            Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 30f);
            Function.Call(Hash.SET_CAM_NEAR_CLIP, Main.CutsceneCam2, 0.15f);
            Function.Call(Hash.SET_GAMEPLAY_CAM_RELATIVE_HEADING, 0f);
            Function.Call(Hash.SET_GAMEPLAY_CAM_RELATIVE_PITCH, 0f, 1f);
            Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0.1208f, -1.7733f, 0.6538f, true);
            Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0.4472f, 1.154f, 0.0844f, true);
            Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam2, 50f);
            Function.Call(Hash.SET_CAM_ACTIVE, Main.CutsceneCam2, true);
            Function.Call(Hash.SET_CAM_ACTIVE_WITH_INTERP, Main.CutsceneCam2, Main.CutsceneCam, 3000, 3, 1);
            walltimer = Game.GameTime + 3000;
            while (Game.GameTime < walltimer)
            {
                HudHandler.HudandRadar(false, false);
                Wait(0);
            }
            if (Main.CutsceneCam != null)
            {
                Main.CutsceneCam.Delete();
                Main.CutsceneCam = null;
            }
            if (Main.CutsceneCam2 != null)
            {
                Main.CutsceneCam2.Delete();
                Main.CutsceneCam2 = null;
            }
            Function.Call(Hash.SET_FOLLOW_PED_CAM_VIEW_MODE, 0);
            Function.Call(Hash.RENDER_SCRIPT_CAMS, false, true, 1000, false, false, 0);
            walltimer = Game.GameTime + 1000;
            while (Game.GameTime < walltimer)
            {
                Wait(0);
            }
            Audios.TRIGGER_MUSIC_EVENT(musicarg[2]);
            Screen_Effects.PlayAnimPostFX("MinigameTransitionOut", 1000, false);
            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Hit", "RESPAWN_SOUNDSET", true);
            HudHandler.HudandRadar(true, true);
            Game.Player.CanControlCharacter = true;
            Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player, false);
            player.IsInvincible = false;
            player.CanRagdoll = true;
            Function.Call(Hash.SET_PED_CONFIG_FLAG, player, 188, false);
            WallFail_In_Progress = false;
        }
        public static void Mission_Fail_In_New(int timer = 6000, string color = "HUD_COLOUR_WAYPOINTDARK", string missionTextLabel = "", string passFailTextLabel = "", string messageLabel = "", bool isMessageRawText = true, bool isPassFailRawText = true, bool isMissionTextRawText = true, int pausedur = 3, int alpha = 75, int walltype = 1, string[] musicarg = null, Vector3[] pos = null, float[] heading = null, string selectedmission = "", string challengetext = "", string challengepart = "", string targetTypeText = "", string targetValue = "", string textcolor = "HUD_COLOUR_WHITE", int pausedur2 = 3, int alpha2 = 75, int walltype2 = 1, bool usingactionmode = true, Vector3 beforepos = new Vector3(), float beforehead = 0f, string shardincolor = "HUD_COLOUR_HSHARD")
        {
            bool wasdead = false;
            int walltimer = 0;
            Ped player = Game.Player.Character;
            Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player, true);
            Weapons.Anim_Weapon_Off();
            player.IsInvincible = true;
            Main.LoadDict("anim@deathmatch_intros@unarmed");
            Main.LoadDict("anim@heists@team_respawn@variations@variation_c");
            if (!Game.Player.Character.IsDead)
            {
                player.CanRagdoll = false;
                Function.Call(Hash.SET_PED_CONFIG_FLAG, player, 188, true);
                Audios.Stop_Music_Event();
                Function.Call(Hash.SET_HIDOF_OVERRIDE, 1, 1, 0f, Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_NEAR_DOF), Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_FAR_DOF), (Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_FAR_DOF) + 25f));
                WallFail_In_Progress = true;
                Groups.SET_PED_USING_ACTION_MODE(Game.Player.Character, usingactionmode);
                Game.Player.CanControlCharacter = false;
                HudHandler.HudandRadar(false, false);
                Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
                Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFail", 0, false);
                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FAILED_SCREEN_SOUNDS", true);
                walltimer = Game.GameTime + 2000;
                while (Game.GameTime < walltimer)
                {
                    Wait(0);
                }
            }
            else
            {
                wasdead = true;
            }
            while (Game.Player.Character.IsDead)
            {
                Wait(0);
            }
            if (wasdead)
            {
                Screen.FadeOut(0);
                Audios.Stop_Music_Event();
                Function.Call(Hash.SET_HIDOF_OVERRIDE, 1, 1, 0f, Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_NEAR_DOF), Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_FAR_DOF), (Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_FAR_DOF) + 25f));
                WallFail_In_Progress = true;
                Groups.SET_PED_USING_ACTION_MODE(Game.Player.Character, usingactionmode);
                Game.Player.CanControlCharacter = false;
                HudHandler.HudandRadar(false, false);
                Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
                Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFail", 0, false);
                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FAILED_SCREEN_SOUNDS", true);
                Game.Player.Character.Position = beforepos;
                Game.Player.Character.Heading = beforehead;
            }
            walltimer = Game.GameTime + 2000;
            while (Game.GameTime < walltimer)
            {
                Wait(0);
            }
            while (FailCam == null)
            {
                FailCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", 0);
                Wait(0);
            }
            Random rand = new Random();
            int index = rand.Next(1, 8);
            if (index == 1)
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, FailCam, Game.Player.Character, 2.0f, 3.0f, 0.6f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                Function.Call(Hash.SET_CAM_FOV, FailCam, 10f);
            }
            if (index == 2)
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, FailCam, Game.Player.Character, 1.0f, 3.0f, 0.0f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                Function.Call(Hash.SET_CAM_FOV, FailCam, 10f);
            }
            if (index == 3)
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, FailCam, Game.Player.Character, 0.5f, 3.0f, 0.0f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, FailCam, Game.Player.Character, -0.2f, 0f, 0.6f, true);
                Function.Call(Hash.SET_CAM_FOV, FailCam, 12f);
            }
            if (index == 4)
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, FailCam, Game.Player.Character, 1.0f, 3.0f, -1.0f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, FailCam, Game.Player.Character, -0.2f, 0f, 0.5f, true);
                Function.Call(Hash.SET_CAM_FOV, FailCam, 12f);
            }
            if (index == 5)
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, FailCam, Game.Player.Character, 0f, 2f, 0.6f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, FailCam, Game.Player.Character, 0.0f, 0.0f, 0.6f, true);
                Function.Call(Hash.SET_CAM_FOV, FailCam, 12f);
            }
            if (index == 6)
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, FailCam, Game.Player.Character, 0.5f, 0.5f, -1.0f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, FailCam, Game.Player.Character, -0.2f, 0.0f, 1.0f, true);
                Function.Call(Hash.SET_CAM_FOV, FailCam, 25f);
            }
            if (index == 7)
            {
                Function.Call(Hash.ATTACH_CAM_TO_ENTITY, FailCam, Game.Player.Character, -0.5f, 2f, 0.0f, true);
                Function.Call(Hash.POINT_CAM_AT_ENTITY, FailCam, Game.Player.Character, 0.2f, 0.0f, 0.6f, true);
                Function.Call(Hash.SET_CAM_FOV, FailCam, 15f);
            }
            World.RenderingCamera = FailCam;
            Wait(1500);
            Screen.FadeIn(500);
            while (!Screen.IsFadedIn)
            {
                Wait(0);
            }
            Weapons.Anim_Weapon_Off();
            Function.Call(Hash.SET_SEETHROUGH, false);
            Function.Call(Hash.SET_NIGHTVISION, false);
            Function.Call(Hash.SET_ARTIFICIAL_LIGHTS_STATE, false);
            Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
            Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFail", 0, false);
            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_FAILED_SCREEN_SOUNDS", true);
            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
            Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
            DeleteMissionPassScaleform();
            RequestHeistPassScaleform();
            Wait(1000);
            Wall_In_Progress = true;
            //Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
            //Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
            Function.Call(Hash.START_AUDIO_SCENE, "MP_CELEB_SCREEN_SCENE");
            HudHandler.HudandRadar(false, false);

            CallFunction(MISSIONPASSED, "CLEANUP", "CELEB_FAILED");
            CallFunction(MISSIONPASSED2, "CLEANUP", "CELEB_FAILED");
            CallFunction(MISSIONPASSED3, "CLEANUP", "CELEB_FAILED");
            CallFunction(MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_FAILED", color, 2);
            CallFunction(MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_FAILED", color, 2);
            CallFunction(MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_FAILED", color, 2);
            CallFunction(MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", missionTextLabel, passFailTextLabel, messageLabel, isMessageRawText, isPassFailRawText, isMissionTextRawText);
            CallFunction(MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", missionTextLabel, passFailTextLabel, messageLabel, isMessageRawText, isPassFailRawText, isMissionTextRawText);
            CallFunction(MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_FAILED", missionTextLabel, passFailTextLabel, messageLabel, isMessageRawText, isPassFailRawText, isMissionTextRawText);
            CallFunction(MISSIONPASSED, "PAUSE", "CELEB_FAILED", pausedur);
            CallFunction(MISSIONPASSED2, "PAUSE", "CELEB_FAILED", pausedur);
            CallFunction(MISSIONPASSED3, "PAUSE", "CELEB_FAILED", pausedur);
            CallFunction(MISSIONPASSED, "ADD_CASH_TO_WALL", "CELEB_FAILED", 0, "left");
            CallFunction(MISSIONPASSED2, "ADD_CASH_TO_WALL", "CELEB_FAILED", 0, "left");
            CallFunction(MISSIONPASSED3, "ADD_CASH_TO_WALL", "CELEB_FAILED", 0, "left");
            CallFunction(MISSIONPASSED, "PAUSE", "CELEB_FAILED", pausedur);
            CallFunction(MISSIONPASSED2, "PAUSE", "CELEB_FAILED", pausedur);
            CallFunction(MISSIONPASSED3, "PAUSE", "CELEB_FAILED", pausedur);
            CallFunction(MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", alpha, walltype);
            CallFunction(MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", alpha, walltype);
            CallFunction(MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_FAILED", alpha, walltype);
            CallFunction(MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_FAILED");
            CallFunction(MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_FAILED");
            CallFunction(MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_FAILED");

            walltimer = Game.GameTime + 300;
            while (Game.GameTime < walltimer)
            {
                MissionCelebrate(MISSIONPASSED, MISSIONPASSED2, MISSIONPASSED3);
                Wait(0);
            }
            Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFail");
            Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebFailBW", 0, true);

            walltimer = Game.GameTime + timer;
            while (Game.GameTime < walltimer)
            {
                MissionCelebrate(MISSIONPASSED, MISSIONPASSED2, MISSIONPASSED3);
                Wait(0);
            }
            Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebFailBW");
            Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebEnd", 0, false);
            walltimer = Game.GameTime + 2000;
            while (Game.GameTime < walltimer)
            {
                MissionCelebrate(MISSIONPASSED, MISSIONPASSED2, MISSIONPASSED3);
                Wait(0);
            }
            DeleteMissionPassScaleform();
            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
            //Function.Call(Hash.START_PLAYER_SWITCH, Game.Player.Character, Game.Player.Character, 513, ePlayerSwitchTypes.SWITCH_TYPE_LONG);
            PlayerSwitch._SWITCH_OUT_PLAYER(player, 3, 1);
            FailCam.Delete();
            FailCam = null;
            World.RenderingCamera = null;
            Function.Call(Hash.ANIMPOSTFX_STOP_ALL);
            Function.Call(Hash.SET_HIDOF_OVERRIDE, 0, 0, 0f, 0f, 0f, 0f);
            Function.Call(Hash.STOP_AUDIO_SCENES);
            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
            walltimer = Game.GameTime + 5000;
            while (Game.GameTime < walltimer)
            {
                Wait(0);
            }
            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "LEADER_BOARD", "HUD_FRONTEND_DEFAULT_SOUNDSET", true);
            while (!Game.IsControlJustPressed(GTA.Control.FrontendRt))
            {
                var InstructionButtons = new Scaleform("instructional_buttons");
                InstructionButtons.CallFunction("CLEAR_ALL");
                InstructionButtons.CallFunction("TOGGLE_MOUSE_BUTTONS", 0);
                InstructionButtons.CallFunction("CREATE_CONTAINER");
                InstructionButtons.CallFunction("SET_DATA_SLOT", 0, Function.Call<string>(Hash.GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING, 0, (int)GTA.Control.FrontendRt, 0), "Quick Restart ");
                InstructionButtons.CallFunction("DRAW_INSTRUCTIONAL_BUTTONS", -1);
                InstructionButtons.Render2D();
                Wait(0);
            }
            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "LEADER_BOARD", "HUD_FRONTEND_DEFAULT_SOUNDSET", true);
            LoadingPrompt.Show("Loading", LoadingSpinnerType.Clockwise1);
            walltimer = Game.GameTime + 1000;
            while (Game.GameTime < walltimer)
            {
                Wait(0);
            }
            Audios.TRIGGER_MUSIC_EVENT(musicarg[0]);
            Audios.TRIGGER_MUSIC_EVENT(musicarg[1]);
            walltimer = Game.GameTime + 5000;
            while (Game.GameTime < walltimer)
            {
                Wait(0);
            }
            LoadingPrompt.Show("Loading", LoadingSpinnerType.SocialClubSaving);
            index = rand.Next(pos.Length);
            player.Position = pos[index];
            player.Heading = heading[index];
            //Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
            walltimer = Game.GameTime + 1000;
            while (Game.GameTime < walltimer)
            {
                LOAD_SCENES.LOAD_SCENE(pos[index].X, pos[index].Y, pos[index].Z);
                Wait(0);
            }
            Cameras.RESET_GAMEPLAY_CAM();
            //PlayerSwitch.SwitchBetweenPeds(Game.Player.Character, clone);
            Function.Call((Hash)0xAD5FDF34B81BFE79);
            Function.Call((Hash)0x43D1680C6D19A8E9);
            PlayerSwitch.SWITCH_IN_PLAYER(player);
            string[] RandomLetter = { "a", "b", "c", "d", "e", "a" };
            while (Main.CutsceneCam == null)
            {
                Main.CutsceneCam = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", false);
                Wait(0);
            }
            while (Main.CutsceneCam2 == null)
            {
                Main.CutsceneCam2 = Function.Call<Camera>(Hash.CREATE_CAM, "DEFAULT_SCRIPTED_CAMERA", false);
                Wait(0);
            }
            while (PlayerSwitch.IS_PLAYER_SWITCH_IN_PROGRESS())
            {
                LOAD_SCENES.LOAD_SCENE(pos[index].X, pos[index].Y, pos[index].Z);
                HudHandler.HudandRadar(false, false);
                Wait(0);
            }
            while (World.RenderingCamera != Main.CutsceneCam)
            {
                World.RenderingCamera = Main.CutsceneCam;
                Wait(0);
            }
            Game.Player.Character.Position = pos[index];
            Game.Player.Character.Heading = heading[index];
            Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 1f, 0f, 0f, true);
            Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, 0f, -1f, 0f, true);
            Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 50f);

            Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0.5f, 2f, 0.5f, true);
            Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0f, 0f, 0.3f, true);
            Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam2, 26f);
            Function.Call(Hash.SET_CAM_ACTIVE, Main.CutsceneCam2, true);
            Function.Call(Hash.SET_CAM_ACTIVE_WITH_INTERP, Main.CutsceneCam2, Main.CutsceneCam, 5000, 3, 1);
            int randomrespawn = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, 2);
            int randomrespawnlet = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, 5);
            Game.Player.Character.Task.PlayAnimation("anim@deathmatch_intros@unarmed", "intro_male_unarmed_" + RandomLetter[randomrespawnlet], 1000.0f, 1.0f, -1, AnimationFlags.None, 0.0f);
            LoadingPrompt.Hide();
            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
            Groups.SET_PED_USING_ACTION_MODE(Game.Player.Character, usingactionmode);
            Wall_Creator.Mission_Shard_In(6000, shardincolor, missionTextLabel, selectedmission, challengetext, challengepart, targetTypeText, targetValue, 5, "$", true, textcolor, pausedur2, alpha2, walltype2);
            while (Wall_In_Progress)
            {
                Wait(0);
            }
            Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam, Game.Player.Character, 0.7983f, -0.9226f, 0.5243f, true);
            Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam, Game.Player.Character, -0.2782f, 1.8498f, 0.1298f, true);
            Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam, 30f);
            Function.Call(Hash.SET_CAM_NEAR_CLIP, Main.CutsceneCam2, 0.15f);
            Function.Call(Hash.SET_GAMEPLAY_CAM_RELATIVE_HEADING, 0f);
            Function.Call(Hash.SET_GAMEPLAY_CAM_RELATIVE_PITCH, 0f, 1f);
            Function.Call(Hash.ATTACH_CAM_TO_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0.1208f, -1.7733f, 0.6538f, true);
            Function.Call(Hash.POINT_CAM_AT_ENTITY, Main.CutsceneCam2, Game.Player.Character, 0.4472f, 1.154f, 0.0844f, true);
            Function.Call(Hash.SET_CAM_FOV, Main.CutsceneCam2, 50f);
            Function.Call(Hash.SET_CAM_ACTIVE, Main.CutsceneCam2, true);
            Function.Call(Hash.SET_CAM_ACTIVE_WITH_INTERP, Main.CutsceneCam2, Main.CutsceneCam, 3000, 3, 1);
            walltimer = Game.GameTime + 3000;
            while (Game.GameTime < walltimer)
            {
                HudHandler.HudandRadar(false, false);
                Wait(0);
            }
            if (Main.CutsceneCam != null)
            {
                Main.CutsceneCam.Delete();
                Main.CutsceneCam = null;
            }
            if (Main.CutsceneCam2 != null)
            {
                Main.CutsceneCam2.Delete();
                Main.CutsceneCam2 = null;
            }
            Function.Call(Hash.SIMULATE_PLAYER_INPUT_GAIT, Game.Player, 1.0f, 2000, 0f, 1, 0);
            Function.Call(Hash.FORCE_PED_MOTION_STATE, Game.Player, -668482597, true, 1, 0);
            Function.Call(Hash.SET_FOLLOW_PED_CAM_VIEW_MODE, 0);
            Function.Call(Hash.RENDER_SCRIPT_CAMS, false, true, 1000, false, false, 0);
            walltimer = Game.GameTime + 1000;
            while (Game.GameTime < walltimer)
            {
                Wait(0);
            }
            Audios.TRIGGER_MUSIC_EVENT(musicarg[2]);
            Screen_Effects.PlayAnimPostFX("MinigameTransitionOut", 1000, false);
            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Hit", "RESPAWN_SOUNDSET", true);
            HudHandler.HudandRadar(true, true);
            Game.Player.CanControlCharacter = true;
            Function.Call(Hash.SET_EVERYONE_IGNORE_PLAYER, Game.Player, false);
            player.IsInvincible = false;
            player.CanRagdoll = true;
            Function.Call(Hash.SET_PED_CONFIG_FLAG, player, 188, false);
            WallFail_In_Progress = false;
        }
        public static void Mission_Pass_In(int timer = 7000, string color = "HUD_COLOUR_WAYPOINTDARK", string missionTextLabel = "", string passFailTextLabel = "", string messageLabel = "", bool isMessageRawText = true, bool isPassFailRawText = true, bool isMissionTextRawText = true, int pausedur = 3, int alpha = 75, int walltype = 1, string[] names = null, string[] challenges = null, string[] chaltext = null, bool[] chalcom = null, int totalchal = 0)
        {
            bool wasdead = false;
            int walltimer = 0;
            Ped player = Game.Player.Character;
            player.IsInvincible = true;
            if (!Game.Player.Character.IsDead)
            {
                player.CanRagdoll = false;
                Function.Call(Hash.SET_PED_CONFIG_FLAG, player, 188, true);
                Function.Call(Hash.SET_HIDOF_OVERRIDE, 1, 1, 0f, Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_NEAR_DOF), Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_FAR_DOF), (Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_FAR_DOF) + 25f));
                WallPass_In_Progress = true;
                Game.Player.CanControlCharacter = false;
                HudHandler.HudandRadar(false, false);
                Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebPass");
                Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebPass", 0, false);
                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_PREP_SCREEN_SOUNDS", true);
            }
            else
            {
                wasdead = true;
            }
            while (Game.Player.Character.IsDead)
            {
                Wait(0);
            }
            if (wasdead)
            {
                Function.Call(Hash.SET_HIDOF_OVERRIDE, 1, 1, 0f, Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_NEAR_DOF), Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_FAR_DOF), (Function.Call<float>(Hash.GET_FINAL_RENDERED_CAM_FAR_DOF) + 25f));
                WallPass_In_Progress = true;
                Game.Player.CanControlCharacter = false;
                HudHandler.HudandRadar(false, false);
                Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebPass");
                Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebPass", 0, false);
                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_PREP_SCREEN_SOUNDS", true);
            }
            walltimer = Game.GameTime + 1000;
            while (Game.GameTime < walltimer)
            {
                Wait(0);
            }
            while (!Screen.IsFadedIn)
            {
                Wait(0);
            }
            Function.Call(Hash.SET_SEETHROUGH, false);
            Function.Call(Hash.SET_NIGHTVISION, false);
            Function.Call(Hash.SET_ARTIFICIAL_LIGHTS_STATE, false);
            Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebPass");
            Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebPass", 0, false);
            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_PREP_SCREEN_SOUNDS", true);
            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
            Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "HUD_321_GO", false, -1);
            DeleteMissionPassScaleform();
            RequestHeistPassScaleform();
            Wait(1000);
            //Function.Call(Hash.START_AUDIO_SCENE, "CREATOR_SCENES_AMBIENCE");
            //Function.Call(Hash.START_AUDIO_SCENE, "MP_LEADERBOARD_SCENE");
            Function.Call(Hash.START_AUDIO_SCENE, "MP_CELEB_SCREEN_SCENE");
            HudHandler.HudandRadar(false, false);

            CallFunction(MISSIONPASSED, "CLEANUP", "CELEB_PASSED");
            CallFunction(MISSIONPASSED2, "CLEANUP", "CELEB_PASSED");
            CallFunction(MISSIONPASSED3, "CLEANUP", "CELEB_PASSED");
            CallFunction(MISSIONPASSED, "CREATE_STAT_WALL", "CELEB_PASSED", color, 1);
            CallFunction(MISSIONPASSED2, "CREATE_STAT_WALL", "CELEB_PASSED", color, 1);
            CallFunction(MISSIONPASSED3, "CREATE_STAT_WALL", "CELEB_PASSED", color, 1);
            CallFunction(MISSIONPASSED, "ADD_MISSION_RESULT_TO_WALL", "CELEB_PASSED", missionTextLabel, passFailTextLabel, messageLabel, isMessageRawText, isPassFailRawText, isMissionTextRawText);
            CallFunction(MISSIONPASSED2, "ADD_MISSION_RESULT_TO_WALL", "CELEB_PASSED", missionTextLabel, passFailTextLabel, messageLabel, isMessageRawText, isPassFailRawText, isMissionTextRawText);
            CallFunction(MISSIONPASSED3, "ADD_MISSION_RESULT_TO_WALL", "CELEB_PASSED", missionTextLabel, passFailTextLabel, messageLabel, isMessageRawText, isPassFailRawText, isMissionTextRawText);
            CallFunction(MISSIONPASSED, "CREATE_STAT_TABLE", "CELEB_PASSED", "CELEB_PSCORE");
            CallFunction(MISSIONPASSED2, "CREATE_STAT_TABLE", "CELEB_PASSED", "CELEB_PSCORE");
            CallFunction(MISSIONPASSED3, "CREATE_STAT_TABLE", "CELEB_PASSED", "CELEB_PSCORE");
            if (names[0] != "") CallFunction(MISSIONPASSED, "ADD_STAT_TO_TABLE", "CELEB_PASSED", "CELEB_PSCORE", names[0], "PLATINUM", names[0], true, true, false, "HUD_COLOUR_PLATINUM");
            if (names[0] != "") CallFunction(MISSIONPASSED2, "ADD_STAT_TO_TABLE", "CELEB_PASSED", "CELEB_PSCORE", names[0], "PLATINUM", names[0], true, true, false, "HUD_COLOUR_PLATINUM");
            if (names[0] != "") CallFunction(MISSIONPASSED3, "ADD_STAT_TO_TABLE", "CELEB_PASSED", "CELEB_PSCORE", names[0], "PLATINUM", names[0], true, true, false, "HUD_COLOUR_PLATINUM");
            if (names[1] != "") CallFunction(MISSIONPASSED, "ADD_STAT_TO_TABLE", "CELEB_PASSED", "CELEB_PSCORE", names[1], "GOLD", names[1], true, true, false, "HUD_COLOUR_GOLD");
            if (names[1] != "") CallFunction(MISSIONPASSED2, "ADD_STAT_TO_TABLE", "CELEB_PASSED", "CELEB_PSCORE", names[1], "GOLD", names[1], true, true, false, "HUD_COLOUR_GOLD");
            if (names[1] != "") CallFunction(MISSIONPASSED3, "ADD_STAT_TO_TABLE", "CELEB_PASSED", "CELEB_PSCORE", names[1], "GOLD", names[1], true, true, false, "HUD_COLOUR_GOLD");
            if (names[2] != "") CallFunction(MISSIONPASSED, "ADD_STAT_TO_TABLE", "CELEB_PASSED", "CELEB_PSCORE", names[2], "SILVER", names[2], true, true, false, "HUD_COLOUR_SILVER");
            if (names[2] != "") CallFunction(MISSIONPASSED2, "ADD_STAT_TO_TABLE", "CELEB_PASSED", "CELEB_PSCORE", names[2], "SILVER", names[2], true, true, false, "HUD_COLOUR_SILVER");
            if (names[2] != "") CallFunction(MISSIONPASSED3, "ADD_STAT_TO_TABLE", "CELEB_PASSED", "CELEB_PSCORE", names[2], "SILVER", names[2], true, true, false, "HUD_COLOUR_SILVER");
            if (names[3] != "") CallFunction(MISSIONPASSED, "ADD_STAT_TO_TABLE", "CELEB_PASSED", "CELEB_PSCORE", names[3], "BRONZE", names[3], true, true, false, "HUD_COLOUR_BRONZE");
            if (names[3] != "") CallFunction(MISSIONPASSED2, "ADD_STAT_TO_TABLE", "CELEB_PASSED", "CELEB_PSCORE", names[3], "BRONZE", names[3], true, true, false, "HUD_COLOUR_BRONZE");
            if (names[3] != "") CallFunction(MISSIONPASSED3, "ADD_STAT_TO_TABLE", "CELEB_PASSED", "CELEB_PSCORE", names[3], "BRONZE", names[3], true, true, false, "HUD_COLOUR_BRONZE");
            CallFunction(MISSIONPASSED, "ADD_STAT_TABLE_TO_WALL", "CELEB_PASSED", "CELEB_PSCORE");
            CallFunction(MISSIONPASSED2, "ADD_STAT_TABLE_TO_WALL", "CELEB_PASSED", "CELEB_PSCORE");
            CallFunction(MISSIONPASSED3, "ADD_STAT_TABLE_TO_WALL", "CELEB_PASSED", "CELEB_PSCORE");
            CallFunction(MISSIONPASSED, "ADD_JOB_POINTS_TO_WALL", "CELEB_PASSED", 15, "right");
            CallFunction(MISSIONPASSED2, "ADD_JOB_POINTS_TO_WALL", "CELEB_PASSED", 15, "right");
            CallFunction(MISSIONPASSED3, "ADD_JOB_POINTS_TO_WALL", "CELEB_PASSED", 15, "right");

            if (challenges != null && chalcom != null && chaltext != null)
            {
                bool[] com = { false, false, false, false, false, false, false };
                CallFunction(MISSIONPASSED, "CREATE_INCREMENTAL_CASH_ANIMATION", "CELEB_PASSED", "SUMMARY");
                CallFunction(MISSIONPASSED2, "CREATE_INCREMENTAL_CASH_ANIMATION", "CELEB_PASSED", "SUMMARY");
                CallFunction(MISSIONPASSED3, "CREATE_INCREMENTAL_CASH_ANIMATION", "CELEB_PASSED", "SUMMARY");

                if (challenges[0] != "")
                {
                    if (chalcom[0])
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, 1, "ELITE CHALLENGE", challenges[0], chaltext[0], 1, 3, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, 1, "ELITE CHALLENGE", challenges[0], chaltext[0], 1, 3, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, 1, "ELITE CHALLENGE", challenges[0], chaltext[0], 1, 3, 1);
                        com[0] = true;
                    }
                    else
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, 1, "ELITE CHALLENGE", challenges[0], chaltext[0], 2, 1, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, 1, "ELITE CHALLENGE", challenges[0], chaltext[0], 2, 1, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, 1, "ELITE CHALLENGE", challenges[0], chaltext[0], 2, 1, 1);
                    }
                }

                if (challenges[1] != "")
                {
                    if (chalcom[1])
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 1, 2, "ELITE CHALLENGE", challenges[1], chaltext[1], 1, 3, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 1, 2, "ELITE CHALLENGE", challenges[1], chaltext[1], 1, 3, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 1, 2, "ELITE CHALLENGE", challenges[1], chaltext[1], 1, 3, 1);
                        com[1] = true;
                    }
                    else
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 1, 2, "ELITE CHALLENGE", challenges[1], chaltext[1], 2, 1, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 1, 2, "ELITE CHALLENGE", challenges[1], chaltext[1], 2, 1, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 1, 2, "ELITE CHALLENGE", challenges[1], chaltext[1], 2, 1, 1);
                    }
                }

                if (challenges[2] != "")
                {
                    if (chalcom[2])
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 2, 3, "ELITE CHALLENGE", challenges[2], chaltext[2], 1, 3, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 2, 3, "ELITE CHALLENGE", challenges[2], chaltext[2], 1, 3, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 2, 3, "ELITE CHALLENGE", challenges[2], chaltext[2], 1, 3, 1);
                        com[2] = true;
                    }
                    else
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 2, 3, "ELITE CHALLENGE", challenges[2], chaltext[2], 2, 1, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 2, 3, "ELITE CHALLENGE", challenges[2], chaltext[2], 2, 1, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 2, 3, "ELITE CHALLENGE", challenges[2], chaltext[2], 2, 1, 1);
                    }
                }

                if (challenges[3] != "")
                {
                    if (chalcom[3])
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 3, 4, "ELITE CHALLENGE", challenges[3], chaltext[3], 1, 3, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 3, 4, "ELITE CHALLENGE", challenges[3], chaltext[3], 1, 3, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 3, 4, "ELITE CHALLENGE", challenges[3], chaltext[3], 1, 3, 1);
                        com[3] = true;
                    }
                    else
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 3, 4, "ELITE CHALLENGE", challenges[3], chaltext[3], 2, 1, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 3, 4, "ELITE CHALLENGE", challenges[3], chaltext[3], 2, 1, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 3, 4, "ELITE CHALLENGE", challenges[3], chaltext[3], 2, 1, 1);
                    }
                }

                if (challenges[4] != "")
                {
                    if (chalcom[4])
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 4, 5, "ELITE CHALLENGE", challenges[4], chaltext[4], 1, 3, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 4, 5, "ELITE CHALLENGE", challenges[4], chaltext[4], 1, 3, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 4, 5, "ELITE CHALLENGE", challenges[4], chaltext[4], 1, 3, 1);
                        com[4] = true;
                    }
                    else
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 4, 5, "ELITE CHALLENGE", challenges[4], chaltext[4], 2, 1, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 4, 5, "ELITE CHALLENGE", challenges[4], chaltext[4], 2, 1, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 4, 5, "ELITE CHALLENGE", challenges[4], chaltext[4], 2, 1, 1);
                    }
                }

                if (challenges[5] != "")
                {
                    if (chalcom[5])
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 5, 6, "ELITE CHALLENGE", challenges[5], chaltext[5], 1, 3, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 5, 6, "ELITE CHALLENGE", challenges[5], chaltext[5], 1, 3, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 5, 6, "ELITE CHALLENGE", challenges[5], chaltext[5], 1, 3, 1);
                        com[5] = true;
                    }
                    else
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 5, 6, "ELITE CHALLENGE", challenges[5], chaltext[5], 2, 1, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 5, 6, "ELITE CHALLENGE", challenges[5], chaltext[5], 2, 1, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 5, 6, "ELITE CHALLENGE", challenges[5], chaltext[5], 2, 1, 1);
                    }
                }

                if (totalchal == 1)
                {
                    if (com[0])
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                    }
                    else
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                    }
                }
                if (totalchal == 2)
                {
                    if (com[0] && com[1])
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                    }
                    else
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                    }
                }
                if (totalchal == 3)
                {
                    if (com[0] && com[1] && com[2])
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                    }
                    else
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                    }
                }
                if (totalchal == 4)
                {
                    if (com[0] && com[1] && com[2] && com[3])
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                    }
                    else
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                    }
                }
                if (totalchal == 5)
                {
                    if (com[0] && com[1] && com[2] && com[3] && com[4])
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                    }
                    else
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                    }
                }
                if (totalchal == 6)
                {
                    if (com[0] && com[1] && com[2] && com[3] && com[4] && com[5])
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE COMPLETE", "", "", 3, 3);
                    }
                    else
                    {
                        CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                        CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                        CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_WON_STEP", "CELEB_PASSED", "SUMMARY", 0, totalchal, "ELITE CHALLENGE INCOMPLETE", "", "", 3, 1);
                    }
                }

                CallFunction(MISSIONPASSED, "ADD_INCREMENTAL_CASH_ANIMATION_TO_WALL", "CELEB_PASSED", "SUMMARY");
                CallFunction(MISSIONPASSED2, "ADD_INCREMENTAL_CASH_ANIMATION_TO_WALL", "CELEB_PASSED", "SUMMARY");
                CallFunction(MISSIONPASSED3, "ADD_INCREMENTAL_CASH_ANIMATION_TO_WALL", "CELEB_PASSED", "SUMMARY");
            }

            CallFunction(MISSIONPASSED, "ADD_BACKGROUND_TO_WALL", "CELEB_PASSED", alpha, walltype);
            CallFunction(MISSIONPASSED2, "ADD_BACKGROUND_TO_WALL", "CELEB_PASSED", alpha, walltype);
            CallFunction(MISSIONPASSED3, "ADD_BACKGROUND_TO_WALL", "CELEB_PASSED", alpha, walltype);
            CallFunction(MISSIONPASSED, "SHOW_STAT_WALL", "CELEB_PASSED");
            CallFunction(MISSIONPASSED2, "SHOW_STAT_WALL", "CELEB_PASSED");
            CallFunction(MISSIONPASSED3, "SHOW_STAT_WALL", "CELEB_PASSED");

            walltimer = Game.GameTime + 300;
            while (Game.GameTime < walltimer)
            {
                MissionCelebrate(MISSIONPASSED, MISSIONPASSED2, MISSIONPASSED3);
                Wait(0);
            }
            Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebPass");
            Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebPassBW", 0, true);
            Audios.TRIGGER_MUSIC_EVENT("HEIST_STATS_SCREEN_START");

            walltimer = Game.GameTime + timer;
            while (Game.GameTime < walltimer)
            {
                MissionCelebrate(MISSIONPASSED, MISSIONPASSED2, MISSIONPASSED3);
                Wait(0);
            }
            Function.Call(Hash.ANIMPOSTFX_STOP, "HeistCelebPassBW");
            Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebEnd", 0, false);
            walltimer = Game.GameTime + 2000;
            while (Game.GameTime < walltimer)
            {
                MissionCelebrate(MISSIONPASSED, MISSIONPASSED2, MISSIONPASSED3);
                Wait(0);
            }
            Heist_Hud.CHALLENGE_RESET();
            DeleteMissionPassScaleform();
            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "HUD_321_GO");
            Screen.FadeOut(2000);
            while (Screen.IsFadingOut)
            {
                Wait(0);
            }
            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
            Function.Call(Hash.ANIMPOSTFX_STOP_ALL);
            Function.Call(Hash.SET_HIDOF_OVERRIDE, 0, 0, 0f, 0f, 0f, 0f);
            Function.Call(Hash.STOP_AUDIO_SCENES);
            walltimer = Game.GameTime + 1000;
            while (Game.GameTime < walltimer)
            {
                MissionCelebrate(MISSIONPASSED, MISSIONPASSED2, MISSIONPASSED3);
                Wait(0);
            }
            LoadingPrompt.Show("Loading", LoadingSpinnerType.Clockwise1);
            walltimer = Game.GameTime + 5000;
            while (Game.GameTime < walltimer)
            {
                MissionCelebrate(MISSIONPASSED, MISSIONPASSED2, MISSIONPASSED3);
                Wait(0);
            }
            LoadingPrompt.Show("Saving", LoadingSpinnerType.Clockwise1);
            Audios.TRIGGER_MUSIC_EVENT("HEIST_STATS_SCREEN_STOP");
            walltimer = Game.GameTime + 2000;
            while (Game.GameTime < walltimer)
            {
                MissionCelebrate(MISSIONPASSED, MISSIONPASSED2, MISSIONPASSED3);
                Wait(0);
            }
            LoadingPrompt.Hide();
            player.IsInvincible = false;
            player.CanRagdoll = true;
            Function.Call(Hash.SET_PED_CONFIG_FLAG, player, 188, false);
            WallPass_In_Progress = false;
        }//base wall seconds == 7000, 1 challenge wall seconds == 13000, 2 challenge wall seconds == 7000, 3 challenge wall seconds == 7000, 4 challenge wall seconds == 7000, 5 challenge wall seconds == 7000, 6 challenge wall seconds == 30000
        enum ePlayerSwitchTypes
        {
            SWITCH_TYPE_AUTO,
            SWITCH_TYPE_LONG,
            SWITCH_TYPE_MEDIUM,
            SWITCH_TYPE_SHORT
        };
        public static void CallFunction(int Handle, string name, params object[] args)
        {
            Function.Call((Hash)0xf6e48914c7a8694e, Handle, name);
            pushArgs(args);
            Function.Call((Hash)0xc6796a8ffa375e53);
        }
        public static bool CallFunctionBool(int Handle, string name, params object[] args)
        {
            Function.Call((Hash)0xf6e48914c7a8694e, Handle, name);
            pushArgs(args);
            int ret = Function.Call<int>((Hash)0xC50AA39A577AF886);
            while (!Function.Call<bool>((Hash)0x768FF8961BA904D6, ret)) Yield();
            return Function.Call<bool>((Hash)0xD80A80346A45D761, ret);
        }
        public static int CallFunctionInt(int Handle, string name, params object[] args)
        {
            Function.Call((Hash)0xf6e48914c7a8694e, Handle, name);
            pushArgs(args);
            int ret = Function.Call<int>((Hash)0xC50AA39A577AF886);
            while (!Function.Call<bool>((Hash)0x768FF8961BA904D6, ret)) Yield();
            return Function.Call<int>((Hash)0x2DE7EFA66B906036, ret);
        }
        public static string CallFunctionString(int Handle, string name, params object[] args)
        {
            Function.Call((Hash)0xf6e48914c7a8694e, Handle, name);
            pushArgs(args);
            int ret = Function.Call<int>((Hash)0xC50AA39A577AF886);
            while (!Function.Call<bool>((Hash)0x768FF8961BA904D6, ret)) Yield();
            return Function.Call<string>((Hash)0xE1E258829A885245, ret);
        }

        public static void func_string_parm(string text)
        {
            Function.Call((Hash)0xBA7148484BD90365, text);
        }
        public static void func_string_parm2(string textheading)
        {
            Function.Call((Hash)0xBA7148484BD90365, textheading);
        }
        public static void ScaleformINT(int uParam2)
        {
            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT, uParam2);
        }
        public static void ScaleformFLOAT(float uParam1)
        {
            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT, uParam1);
        }
        public static void ScaleformBOOL(bool uParam0)
        {
            Function.Call(Hash.SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL, uParam0);
        }

        public static int GET_TOTAL_WALL_DURATION()
        {
            Function.Call(Hash.BEGIN_SCALEFORM_MOVIE_METHOD, Wall_Creator.MISSIONPASSED, "GET_TOTAL_WALL_DURATION");
            int currentduration = Function.Call<int>(Hash.END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE);

            int getcurrentduration = 0;
            while (!Function.Call<bool>(Hash.IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY, currentduration))
            {
                Wait(0);
            }
            getcurrentduration = MPGeraldCMS.GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(currentduration);
            if (Main.DEBUG) Notification.Show($"{getcurrentduration}");
            return getcurrentduration;
        }

        protected static void pushArgs(object[] args)
        {
            foreach (object x in args)
            {
                if (x.GetType() == typeof(int)) Function.Call<int>((Hash)0xc3d0841a0cc546a6, (int)x);
                else if (x.GetType() == typeof(float)) Function.Call((Hash)0xd69736aae04db51a, (float)x);
                else if (x.GetType() == typeof(double)) Function.Call((Hash)0xd69736aae04db51a, (float)(double)x);
                else if (x.GetType() == typeof(bool)) Function.Call((Hash)0xc58424ba936eb458, (bool)x);
                else if (x.GetType() == typeof(string))
                {
                    Function.Call((Hash)0x80338406f3475e55, "STRING");
                    Function.Call((Hash)0x6c188be134e074aa, (string)x);
                    Function.Call((Hash)0x362e2d3fe93a9959);
                }
                else if (x.GetType() == typeof(char))
                {
                    Function.Call((Hash)0x80338406f3475e55, "STRING");
                    Function.Call((Hash)0x6c188be134e074aa, ((char)x).ToString());
                    Function.Call((Hash)0x362e2d3fe93a9959);
                }
            }
        }
    }
    internal class LOAD_SCENES
    {
        public static void LOAD_SCENE(float x, float y, float z)
        {
            Function.Call(Hash.LOAD_​SCENE, x, y, z);
        }
        public static bool IS_​NEW_​LOAD_​SCENE_​ACTIVE()
        {
            return Function.Call<bool>(Hash.IS_NEW_LOAD_SCENE_ACTIVE);
        }
        public static bool IS_NEW_LOAD_SCENE_LOADED()
        {
            return Function.Call<bool>(Hash.IS_NEW_LOAD_SCENE_LOADED);
        }
        public static void NEW_LOAD_SCENE_START(float posX, float posY, float posZ, float offsetX, float offsetY, float offsetZ, float radius, int p7)
        {
            if (!IS_​NEW_​LOAD_​SCENE_​ACTIVE())
            {
                if (!IS_NEW_LOAD_SCENE_LOADED())
                {
                    Function.Call(Hash.NEW_LOAD_SCENE_START, posX, posY, posZ, offsetX, offsetY, offsetZ, radius, p7);
                }
            }
        }
        public static void NEW_​LOAD_​SCENE_​STOP()
        {
            if (IS_​NEW_​LOAD_​SCENE_​ACTIVE())
            {
                Function.Call(Hash.NEW_​LOAD_​SCENE_​STOP);
            }
        }
    }
    internal class Heist_Hud : Script
    {
        public static int Potential_Take = 250000;
        public static int Actual_Take = 0;
        public static float PreActual_Take = 0;
        public static int TakeFlashGreen = 0;
        public static int TakeFlashRed = 0;
        public static int TeamLives = 0;
        public static int PreTeamLives = 0;
        public static int LivesFlashRed = 0;
        public static int CheckList_Show = 0;

        public static bool TAKE_BAR_SHOW = false;
        public static bool ITEM_BAR_SHOW = false;
        public static string ItemType = "";
        public static int Items = 0;
        public static bool[] Grabbed = { false, false, false, false, false };
        public static bool[] Delivered = { false, false, false, false, false };
        public static int[] ColorRGB = { 255, 255, 255, 0 };

        public static bool COP_BAR_SHOW = false;
        public static DateTime CopTime;
        public static int Coptime = 0;


        public static float Bag_Capacity = 0f;
        public static int Loot_Bag = 0;

        public static bool[] Challenges = { false, false, false, false, false, false, false };

        public Heist_Hud()
        {
            Tick += onTick;
        }
        public void onTick(object sender, EventArgs e)
        {
            if (TAKE_BAR_SHOW)
            {
                TAKE_BAR();
            }
            if (ITEM_BAR_SHOW)
            {
                ITEM_BAR(ItemType, Items, Grabbed, Delivered, ColorRGB);
            }
            if (COP_BAR_SHOW)
            {
                COP_BAR(Coptime);
            }
        }
        public static void TAKE_BAR()
        {
            //Actual_Take += 50;
            drawSprite2("timerbars", "all_black_bg", 0.88f, 0.906f, 0.260f, 0.05f, 255, 255, 255, 130);

            drawText("TAKE", 0.800f, 0.885f, 0.56f, 255, 255, 255);
            if (Heist_Hud.Actual_Take < 0f)
            {
                Heist_Hud.Actual_Take = 0;
            }
            if (Heist_Hud.Actual_Take > PreActual_Take)
            {
                Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "LOCAL_PLYR_CASH_COUNTER_INCREASE", "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS", 1);
                PreActual_Take = Heist_Hud.Actual_Take;
                TakeFlashGreen = Game.GameTime + 300;
            }
            else if (Heist_Hud.Actual_Take < PreActual_Take)
            {
                PreActual_Take = Heist_Hud.Actual_Take;
                TakeFlashRed = Game.GameTime + 300;
            }
            if (TakeFlashRed < Game.GameTime)
            {
                drawText2("$ " + Heist_Hud.Actual_Take.ToString("#,##0"), 0.850f, 0.885f, 0.56f, 255, 255, 255, true);
            }
            if (TakeFlashRed > Game.GameTime)
            {
                drawText2("$ " + Heist_Hud.Actual_Take.ToString("#,##0"), 0.850f, 0.885f, 0.56f, 215, 0, 0, true);
            }
            if (TakeFlashGreen < Game.GameTime)
            {

            }
            if (TakeFlashGreen > Game.GameTime)
            {
                drawText2("$ " + Heist_Hud.Actual_Take.ToString("#,##0"), 0.850f, 0.885f, 0.56f, 0, 215, 0, true);
            }
            OutputArgument bone = new OutputArgument();
            if (Function.Call<bool>(Hash.GET_​PED_​LAST_​DAMAGE_​BONE, Game.Player.Character, bone))
            {
                Function.Call(Hash.CLEAR_​PED_​LAST_​DAMAGE_​BONE, Game.Player.Character);
                int boneID = bone.GetResult<int>();
                if (boneID == 24817)
                {
                    if (Actual_Take > 0)
                    {
                        Actual_Take -= Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 2000, 4001);
                    }
                }
                if (Main.DEBUG) Notification.Show($"You got shot in bone: {boneID}");
            }
        }
        public static void ITEM_BAR(string itemtype, int items, bool[] grabbed, bool[] delivered, int[] colorrgb)
        {
            Heist_Hud.drawSprite2("timerbars", "all_black_bg", 0.88f, 0.850f, 0.200f, 0.03f, 255, 255, 255, 130);
            if (items >= 1)
            {
                Heist_Hud.drawSprite2("timerbars", "circle_checkpoints_outline", 0.97f, 0.850f, 30f / 1920f, 30f / 1080f, 255, 255, 255, 130);
                if (grabbed[0])
                {
                    Heist_Hud.drawSprite2("timerbars", "circle_checkpoints", 0.97f, 0.850f, 30f / 1920f, 30f / 1080f, colorrgb[0], colorrgb[1], colorrgb[2], 255);
                    if (delivered[0])
                    {
                        Heist_Hud.drawSprite3("timerbar_sr", "timer_cross", 0.97f, 0.850f, 25f / 1920f, 25f / 1080f, 0, 0, 0, 0, 250);
                    }
                }
            }
            if (items >= 2)
            {
                Heist_Hud.drawSprite2("timerbars", "circle_checkpoints_outline", 0.9580f, 0.850f, 30f / 1920f, 30f / 1080f, 255, 255, 255, 130);
                if (grabbed[1])
                {
                    Heist_Hud.drawSprite2("timerbars", "circle_checkpoints", 0.9580f, 0.850f, 30f / 1920f, 30f / 1080f, colorrgb[0], colorrgb[1], colorrgb[2], 255);
                    if (delivered[1])
                    {
                        Heist_Hud.drawSprite3("timerbar_sr", "timer_cross", 0.9580f, 0.850f, 25f / 1920f, 25f / 1080f, 0, 0, 0, 0, 250);
                    }
                }
            }
            if (items >= 3)
            {
                Heist_Hud.drawSprite2("timerbars", "circle_checkpoints_outline", 0.9460f, 0.850f, 30f / 1920f, 30f / 1080f, 255, 255, 255, 130);
                if (grabbed[2])
                {
                    Heist_Hud.drawSprite2("timerbars", "circle_checkpoints", 0.9460f, 0.850f, 30f / 1920f, 30f / 1080f, colorrgb[0], colorrgb[1], colorrgb[2], 255);
                    if (delivered[2])
                    {
                        Heist_Hud.drawSprite3("timerbar_sr", "timer_cross", 0.9460f, 0.850f, 25f / 1920f, 25f / 1080f, 0, 0, 0, 0, 250);
                    }
                }
            }
            if (items >= 4)
            {
                Heist_Hud.drawSprite2("timerbars", "circle_checkpoints_outline", 0.9340f, 0.850f, 30f / 1920f, 30f / 1080f, 255, 255, 255, 130);
                if (grabbed[3])
                {
                    Heist_Hud.drawSprite2("timerbars", "circle_checkpoints", 0.9340f, 0.850f, 30f / 1920f, 30f / 1080f, colorrgb[0], colorrgb[1], colorrgb[2], 255);
                    if (delivered[3])
                    {
                        Heist_Hud.drawSprite3("timerbar_sr", "timer_cross", 0.9340f, 0.850f, 25f / 1920f, 25f / 1080f, 0, 0, 0, 0, 250);
                    }
                }
            }

            Heist_Hud.drawText(itemtype, 0.810f, 0.836f, 0.35f, 255, 255, 255);
        }
        public static void ITEM_BAR_RESET()
        {
            Heist_Hud.ITEM_BAR_SHOW = false;
            Heist_Hud.Items = 0;
            Heist_Hud.ItemType = "";
            Heist_Hud.ColorRGB[0] = 255;
            Heist_Hud.ColorRGB[1] = 255;
            Heist_Hud.ColorRGB[2] = 255;
            Heist_Hud.Grabbed[0] = false;
            Heist_Hud.Grabbed[1] = false;
            Heist_Hud.Grabbed[2] = false;
            Heist_Hud.Grabbed[3] = false;
            Heist_Hud.Delivered[0] = false;
            Heist_Hud.Delivered[1] = false;
            Heist_Hud.Delivered[2] = false;
            Heist_Hud.Delivered[3] = false;
        }
        public static void CHALLENGE_RESET()
        {
            int iVar0 = 0;
            while (iVar0 < Challenges.Length)
            {
                Challenges[iVar0] = false;
                iVar0++;
            }
        }
        public static void CHALLENGE_SET(int chal, bool set)
        {
            Challenges[chal] = set;
        }
        public static void COP_BAR(int coptime)
        {
            TimeSpan availableNext = CopTime.AddSeconds(coptime) - DateTime.Now;
            //Actual_Take += 50;
            drawSprite2("timerbars", "all_black_bg", 0.88f, 0.960f, 0.260f, 0.05f, 255, 255, 255, 130);

            drawText("DISPATCH:", 0.800f, 0.940f, 0.56f, 255, 255, 255);
            drawText2($"{availableNext:mm\\:ss}", 0.800f, 0.940f, 0.56f, 255, 255, 255, true);
            if (availableNext.Seconds == 5)
            {
                if (Main.SoundID6 == 0)
                {
                    Main.SoundID6 = Function.Call<int>(Hash.GET_SOUND_ID);
                    Function.Call(Hash.PLAY_SOUND_FRONTEND, Main.SoundID6, "5S", "MP_MISSION_COUNTDOWN_SOUNDSET", false);
                }
            }
            if (availableNext.Seconds <= 5 && availableNext.Minutes == 0)
            {
                drawText("DISPATCH:", 0.800f, 0.940f, 0.56f, 255, 0, 0);
                drawText2($"{availableNext:mm\\:ss}", 0.800f, 0.940f, 0.56f, 255, 0, 0, true);
            }
            if (availableNext <= TimeSpan.Zero)
            {
                Audio.StopSound(Main.SoundID6);
                Audio.ReleaseSound(Main.SoundID6);
                Main.SoundID6 = 0;
                COP_BAR_SHOW = false;
            }

        }
        public static void drawSprite2(string textureDict, string textureName, float screenX, float screenY, float width, float height, int r, int g, int b, int alpha)
        {
            Function.Call((Hash)0xDFA2EF8E04127DD5, textureDict, 0);
            if (Function.Call<bool>(Hash.HAS_STREAMED_TEXTURE_DICT_LOADED, textureDict))
            {
                Function.Call((Hash)0xE7FFAE5EBF23D890, textureDict, textureName, screenX, screenY, width, height, 0, r, g, b, alpha, 0);
            }
        }
        public static void drawSprite3(string textureDict, string textureName, float screenX, float screenY, float width, float height, float heading, int r, int g, int b, int alpha)
        {
            Function.Call((Hash)0xDFA2EF8E04127DD5, textureDict, 0);
            if (Function.Call<bool>(Hash.HAS_STREAMED_TEXTURE_DICT_LOADED, textureDict))
            {
                Function.Call(Hash.DRAW_SPRITE, textureDict, textureName, screenX, screenY, width, height, heading, r, g, b, alpha, 0, 0);
            }
        }
        public static void drawText2(string text, float x, float y, float scale, int r, int g, int b, bool drawright)
        {
            Function.Call(Hash.SET_TEXT_RIGHT_JUSTIFY, drawright);
            Function.Call(Hash.SET_TEXT_WRAP, 0.0f, 1f);
            Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, text);
            Function.Call(Hash.SET_TEXT_COLOUR, r, g, b, 255);
            Function.Call(Hash.SET_TEXT_SCALE, 0f, scale);
            Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, x, y, 0.1);
        }
        public static void drawText(string text, float x, float y, float scale, int r, int g, int b)
        {
            Function.Call(Hash.BEGIN_TEXT_COMMAND_DISPLAY_TEXT, "STRING");
            Function.Call(Hash.ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME, text);
            Function.Call(Hash.SET_TEXT_COLOUR, r, g, b, 255);
            Function.Call(Hash.SET_TEXT_SCALE, 0f, scale);
            Function.Call(Hash.END_TEXT_COMMAND_DISPLAY_TEXT, x, y, 0.1);
        }
        public static float progresswidth(float percent)
        {
            //empty 0f
            //full 0.08f
            float calc = 0.08f * percent;
            return calc;
        }
        public static float progressxcoord(float percent)
        {
            float val1 = 0.04f * percent;
            float val2 = 0.9f + val1;
            return val2;
        }
        public static void Display_Context(string text)
        {
            if (Game.GameTime > Main.lastHelpTime + Main.helpInterval)
            {
                Main.lastHelpTime = Game.GameTime;
                Main.DisplayHelpText(text);
            }
        }
        public static void DrawArrow(int markertype, float x, float y, float z, float x2, float y2, float z2, float rotx, float roty, float rotz, float scalex, float scaley, float scalez, int r, int g, int b, int alpha, bool bobupanddown, bool facecamera, bool rotate, string texturedict, string texturename, bool drawonents)
        {
            Function.Call(Hash.DRAW_MARKER, markertype, x, y, z, x2, y2, z2, rotx, roty, rotz, scalex, scaley, scalez, r, g, b, alpha, bobupanddown, facecamera, 2, rotate, texturedict, texturename, drawonents);
        }
    }
    internal class HudHandler
    {
        public static float traveldistance;
        public static List<Blip> SearchAreas = new List<Blip>()
        {

        };
        public HudHandler()
        {

        }
        public static void SET_GPS(Blip blip, int color, bool displayonfoot, bool followplayer)
        {
            if (blip != null)
            {
                Function.Call(Hash.CLEAR_GPS_MULTI_ROUTE);
                Function.Call(Hash.START_GPS_MULTI_ROUTE, color, followplayer, displayonfoot);
                Function.Call(Hash.SET_GPS_MULTI_ROUTE_RENDER, true);
                Function.Call(Hash.ADD_POINT_TO_GPS_MULTI_ROUTE, blip.Position.X, blip.Position.Y, blip.Position.Z);
            }
        }
        public static void CLEAR_GPS_ROUTE() => Function.Call(Hash.CLEAR_GPS_MULTI_ROUTE);
        public static bool DOES_BLIP_HAVE_GPS_ROUTE(Blip blip) => Function.Call<bool>(Hash.DOES_BLIP_HAVE_GPS_ROUTE, blip);
        public static void FLASH_MINIMAP_DISPLAY() => Function.Call(Hash.FLASH_MINIMAP_DISPLAY);
        public static void CLEAR_ALL_HELP_MESSAGES() => Function.Call(Hash.CLEAR_ALL_HELP_MESSAGES);
        public static void HudandRadar(bool Hud, bool Radar)
        {
            Function.Call(Hash.DISPLAY_HUD, Hud);
            Function.Call(Hash.DISPLAY_RADAR, Radar);
        }
        public static void Remove_Wanted_Level() => Game.Player.WantedLevel = 0;
        public static void Set_Fake_Wanted_Level(int level) => Function.Call(Hash.SET_FAKE_WANTED_LEVEL, level);
        public static void MissionBlipGPSController(Blip missionBlip)
        {
            if (missionBlip != null)
            {
                traveldistance = Function.Call<float>(Hash.CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS, missionBlip.Position.X, missionBlip.Position.Y, missionBlip.Position.Z, Game.Player.Character.Position.X, Game.Player.Character.Position.Y, Game.Player.Character.Position.Z);
            }
        }
        public static void DrawArrow(int markertype, float x, float y, float z, float x2, float y2, float z2, float rotx, float roty, float rotz, float scalex, float scaley, float scalez, int r, int g, int b, int alpha, bool bobupanddown, bool facecamera, bool rotate, string texturedict, string texturename, bool drawonents) => Function.Call(Hash.DRAW_MARKER, markertype, x, y, z, x2, y2, z2, rotx, roty, rotz, scalex, scaley, scalez, r, g, b, alpha, bobupanddown, facecamera, 2, rotate, texturedict, texturename, drawonents);
        public static void End_Mission_Ring()
        {
            Audio.SetAudioFlag(AudioFlags.LoadMPData, true);
            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_PREP_SCREEN_SOUNDS", true);
            Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebEnd", 5000, false);

        }
        public static void BlipUpBlips(List<Blip> list)
        {
            if (list.Count > 0)
            {
                foreach (Blip blip in list)
                {
                    if (blip != null)
                    {
                        blip.Sprite = (BlipSprite)1;
                        blip.Color = BlipColor.Yellow;
                    }
                }
            }
        }
        public static void CheckBlips(List<Blip> list, int radius)
        {
            if (list.Count > 0)
            {
                foreach (Blip blip in list.ToList())
                {
                    if (blip != null && Game.Player.Character.Position.DistanceTo(blip.Position) < radius)
                    {
                        blip.Alpha = 155;
                    }
                    else if (blip != null && Game.Player.Character.Position.DistanceTo(blip.Position) > radius)
                    {
                        blip.Alpha = 255;
                    }
                }
            }
        }
        public static void RemoveBlips(List<Blip> list)
        {
            if (list.Count > 0)
            {
                foreach (Blip blip in list.ToList())
                {
                    if (blip != null)
                    {
                        blip.Delete();
                    }
                }
            }
        }
        public static Blip CREATE_BLIP(Vector3 position) => World.CreateBlip(position);
        public static Blip CREATE_BLIP_WITH_RADIUS(Vector3 position, float radius) => World.CreateBlip(position, radius);
        public static void ADD_BLIP_TO_LIST(List<Blip> list, Blip blip)
        {
            if (blip != null) list.Add(blip);
        }
        public static void SET_​PLAYER_​WANTED_​LEVEL_​NO_​DROP(Player player, int wantedLevel) => Function.Call(Hash.SET_​PLAYER_​WANTED_​LEVEL_​NO_​DROP, player, wantedLevel, false);
        public static string GetStreetName(Blip ObjectOfreference)
        {
            if (ObjectOfreference != null)
            {
                Vector3 coords;
                coords = ObjectOfreference.Position;

                Hash streetNameHash = 0, crossingRoadHash = 0;
                unsafe
                {
                    Function.Call(Hash.GET_STREET_NAME_AT_COORD, coords.X, coords.Y, coords.Z, &streetNameHash, &crossingRoadHash);
                }

                string streetName;
                streetName = Function.Call<string>(Hash.GET_STREET_NAME_FROM_HASH_KEY, streetNameHash);
                string zoneNameLabel;
                zoneNameLabel = Function.Call<string>(Hash.GET_NAME_OF_ZONE, coords.X, coords.Y, coords.Z);
                string zoneName;
                zoneName = Function.Call<string>(Hash.GET_FILENAME_FOR_AUDIO_CONVERSATION, zoneNameLabel);

                return streetName;
            }
            return "";
        }
        public static string GetZoneName(Blip ObjectOfreference)
        {
            if (ObjectOfreference != null)
            {
                Vector3 coords;
                coords = ObjectOfreference.Position;

                string zoneNameLabel;
                zoneNameLabel = Function.Call<string>(Hash.GET_NAME_OF_ZONE, coords.X, coords.Y, coords.Z);

                return zoneNameLabel;
            }
            return "";
        }
        public static void SET_BLIP_FLASH(Blip blip = null, bool isFlashing = true, int flashInterval = 800, int flashTimeLeft = 5000)
        {
            if (blip != null)
            {
                blip.IsFlashing = isFlashing;
                blip.FlashInterval = flashInterval;
                blip.FlashTimeLeft = flashTimeLeft;
            }
        }
    }
    internal class Alarms : Script
    {
        public static int Alarm_Sounds = 0;
        public static int AlarmSwitch = 0;

        public static bool[] AlarmActive = { false, false, false, false, false, false, false, false };
        public Alarms()
        {
            Tick += onTick;
        }
        public void onTick(object sender, EventArgs e)
        {
            if (AlarmActive[0])//Cayo Perico Alarm
            {
                Alarms.Cayo_Perico_Alarm();
            }
            if (AlarmActive[1])//Morgue Alarm
            {
                Alarms.MORGUE_Alarm(false);
            }
            else
            {
                Alarms.MORGUE_Alarm(true);
            }
            if (AlarmActive[2])//Fleeca Alarm Route 66
            {
                Alarms.FLEECA_Alarm(false);
            }
            if (AlarmActive[5])//Sub Alarm
            {
                Alarms.Sub_Alarm(false);
            }
            if (AlarmActive[6])//Silo Alarm
            {
                Alarms.Silo_Alarm(false);
            }
        }
        public static void Cayo_Perico_Alarm()
        {
            Prop[] doors = World.GetAllProps(Main.RequestModel("collision_921o1po"));
            foreach (Prop door in doors)
            {
                if (door != null)
                {
                    door.IsPositionFrozen = false;
                }
            }
            switch (AlarmSwitch)
            {
                case 0:
                    {
                        Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "DLC_HEI4/DLCHEI4_GENERIC_01", false, -1);
                        Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "DLC_HEI4/DLCHEI4_GENERIC_01", false, -1);
                        AlarmSwitch = 1;
                    }
                    break;
                case 1:
                    {
                        if (Alarm_Sounds == 0)
                        {
                            Alarm_Sounds = Function.Call<int>(Hash.GET_SOUND_ID);
                        }
                        else
                        {
                            Function.Call(Hash.PLAY_SOUND_FROM_COORD, Alarm_Sounds, "Alarm_Oneshot", 5019.995f, -5730.475f, 50.4737f, "DLC_H4_Island_Alarms_Sounds", false, 200f, false);
                            AlarmSwitch = 2;
                        }
                    }
                    break;
                case 2:
                    {
                        if (Audio.HasSoundFinished(Alarm_Sounds))
                        {
                            Audio.StopSound(Alarms.Alarm_Sounds);
                            Audio.ReleaseSound(Alarms.Alarm_Sounds);
                            Alarm_Sounds = 0;
                            AlarmSwitch = 1;
                        }
                    }
                    break;
            }
        }
        public static void IAA_Facility_Alarm(bool cleanup)
        {
            switch (AlarmSwitch)
            {
                case 0:
                    {
                        if (!cleanup)
                        {
                            Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "ALARM_KLAXON_02", false, -1);
                            Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "ALARM_KLAXON_02", false, -1);
                            Wait(50);
                            AlarmSwitch = 1;
                        }
                    }
                    break;
                case 1:
                    {
                        if (Alarm_Sounds == 0)
                        {
                            Alarm_Sounds = Function.Call<int>(Hash.GET_SOUND_ID);
                        }
                        else
                        {
                            Function.Call(Hash.PLAY_SOUND_FROM_COORD, Alarm_Sounds, "Klaxon_02", 2051.412f, 2969.325f, -58.96179f, "ALARMS_SOUNDSET", true, 200f, 0);
                            AlarmSwitch = 2;
                        }
                    }
                    break;
                case 2:
                    {
                        if (cleanup)
                        {
                            Audio.StopSound(Alarms.Alarm_Sounds);
                            Audio.ReleaseSound(Alarms.Alarm_Sounds);
                            Alarm_Sounds = 0;
                            AlarmSwitch = 0;
                        }
                    }
                    break;
            }
        }
        public static void FLEECA_Alarm(bool cleanup)
        {
            switch (AlarmSwitch)
            {
                case 0:
                    {
                        if (!cleanup)
                        {
                            Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "ALARM_BELL_01", false, -1);
                            Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "ALARM_BELL_01", false, -1);
                            Wait(50);
                            AlarmSwitch = 1;
                        }
                    }
                    break;
                case 1:
                    {
                        if (Alarm_Sounds == 0)
                        {
                            Alarm_Sounds = Function.Call<int>(Hash.GET_SOUND_ID);
                        }
                        else
                        {
                            Function.Call(Hash.PLAY_SOUND_FROM_COORD, Alarm_Sounds, "Bell_01", 1173.424f, 2712.193f, 39.58252f, "ALARMS_SOUNDSET", true, 50f, 0);
                            AlarmSwitch = 2;
                        }
                    }
                    break;
                case 2:
                    {
                        if (cleanup)
                        {
                            Audio.StopSound(Alarms.Alarm_Sounds);
                            Audio.ReleaseSound(Alarms.Alarm_Sounds);
                            Alarm_Sounds = 0;
                            AlarmSwitch = 0;
                        }
                    }
                    break;
            }
        }
        public static void The_Union_Depository_Alarm(bool cleanup)
        {
            switch (AlarmSwitch)
            {
                case 0:
                    {
                        if (!cleanup)
                        {
                            if (!Function.Call<bool>(Hash.IS_ALARM_PLAYING, "BIG_SCORE_HEIST_VAULT_ALARMS"))
                            {
                                if (Function.Call<bool>(Hash.PREPARE_ALARM, "BIG_SCORE_HEIST_VAULT_ALARMS"))
                                {
                                    Function.Call(Hash.START_ALARM, "BIG_SCORE_HEIST_VAULT_ALARMS", true);
                                }
                            }
                            if (Function.Call<bool>(Hash.IS_ALARM_PLAYING, "BIG_SCORE_HEIST_VAULT_ALARMS"))
                            {
                                AlarmSwitch = 1;
                            }
                        }
                    }
                    break;
                case 1:
                    {
                        if (cleanup)
                        {
                            if (Function.Call<bool>(Hash.IS_ALARM_PLAYING, "BIG_SCORE_HEIST_VAULT_ALARMS"))
                            {
                                Function.Call(Hash.STOP_ALARM, "BIG_SCORE_HEIST_VAULT_ALARMS", true);
                            }
                            else
                            {
                                AlarmSwitch = 0;
                            }
                        }
                    }
                    break;
            }
        }
        public static void Prologue_Alarm(bool cleanup)
        {
            switch (AlarmSwitch)
            {
                case 0:
                    {
                        if (!cleanup)
                        {
                            if (!Function.Call<bool>(Hash.IS_ALARM_PLAYING, "PROLOGUE_VAULT_ALARMS"))
                            {
                                if (Function.Call<bool>(Hash.PREPARE_ALARM, "PROLOGUE_VAULT_ALARMS"))
                                {
                                    Function.Call(Hash.START_ALARM, "PROLOGUE_VAULT_ALARMS", true);
                                }
                            }
                            if (Function.Call<bool>(Hash.IS_ALARM_PLAYING, "PROLOGUE_VAULT_ALARMS"))
                            {
                                AlarmSwitch = 1;
                            }
                        }
                    }
                    break;
                case 1:
                    {
                        if (cleanup)
                        {
                            if (Function.Call<bool>(Hash.IS_ALARM_PLAYING, "PROLOGUE_VAULT_ALARMS"))
                            {
                                Function.Call(Hash.STOP_ALARM, "PROLOGUE_VAULT_ALARMS", true);
                            }
                            else
                            {
                                AlarmSwitch = 0;
                            }
                        }
                    }
                    break;
            }
        }
        public static void FIB_Alarm(bool cleanup)
        {
            switch (AlarmSwitch)
            {
                case 0:
                    {
                        if (!cleanup)
                        {
                            while (!Function.Call<bool>(Hash.IS_ALARM_PLAYING, "AGENCY_HEIST_FIB_TOWER_ALARMS"))
                            {
                                if (Function.Call<bool>(Hash.PREPARE_ALARM, "AGENCY_HEIST_FIB_TOWER_ALARMS"))
                                {
                                    Function.Call(Hash.START_ALARM, "AGENCY_HEIST_FIB_TOWER_ALARMS", true);
                                }
                                Script.Yield();
                            }
                            while (!Function.Call<bool>(Hash.IS_ALARM_PLAYING, "AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER"))
                            {
                                if (Function.Call<bool>(Hash.PREPARE_ALARM, "AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER"))
                                {
                                    Function.Call(Hash.START_ALARM, "AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER", true);
                                }
                                Script.Yield();
                            }
                            while (!Function.Call<bool>(Hash.IS_ALARM_PLAYING, "AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B"))
                            {
                                if (Function.Call<bool>(Hash.PREPARE_ALARM, "AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B"))
                                {
                                    Function.Call(Hash.START_ALARM, "AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B", true);
                                }
                                Script.Yield();
                            }
                            if (Function.Call<bool>(Hash.IS_ALARM_PLAYING, "AGENCY_HEIST_FIB_TOWER_ALARMS") && Function.Call<bool>(Hash.IS_ALARM_PLAYING, "AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER") && Function.Call<bool>(Hash.IS_ALARM_PLAYING, "AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B"))
                            {
                                AlarmSwitch = 1;
                            }
                        }
                    }
                    break;
                case 1:
                    {
                        if (cleanup)
                        {
                            while (Function.Call<bool>(Hash.IS_ALARM_PLAYING, "AGENCY_HEIST_FIB_TOWER_ALARMS"))
                            {
                                Function.Call(Hash.STOP_ALARM, "AGENCY_HEIST_FIB_TOWER_ALARMS", true);
                                Script.Yield();
                            }
                            while (Function.Call<bool>(Hash.IS_ALARM_PLAYING, "AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER"))
                            {
                                Function.Call(Hash.STOP_ALARM, "AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER", true);
                                Script.Yield();
                            }
                            while (Function.Call<bool>(Hash.IS_ALARM_PLAYING, "AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B"))
                            {
                                Function.Call(Hash.STOP_ALARM, "AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B", true);
                                Script.Yield();
                            }
                            if (!Function.Call<bool>(Hash.IS_ALARM_PLAYING, "AGENCY_HEIST_FIB_TOWER_ALARMS") && !Function.Call<bool>(Hash.IS_ALARM_PLAYING, "AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER") && !Function.Call<bool>(Hash.IS_ALARM_PLAYING, "AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B"))
                            {
                                AlarmSwitch = 0;
                            }
                        }
                    }
                    break;
            }
        }
        public static void Silo_Alarm(bool cleanup)
        {
            switch (AlarmSwitch)
            {
                case 0:
                    {
                        if (!cleanup)
                        {
                            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_CHRISTMAS2017/XM_SILO");
                            Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "DLC_CHRISTMAS2017/XM_SILO", false, -1);
                            Wait(500);
                            AlarmSwitch = 1;
                        }
                    }
                    break;
                case 1:
                    {
                        if (Alarm_Sounds == 0)
                        {
                            Alarm_Sounds = Function.Call<int>(Hash.GET_SOUND_ID);
                        }
                        else
                        {
                            Function.Call(Hash.PLAY_SOUND_FROM_ENTITY, -1, "missile_system_armed", Game.Player.Character, "dlc_xm_silo_finale_sounds", false, 0);
                            Function.Call(Hash.PLAY_SOUND_FROM_ENTITY, Alarm_Sounds, "launch_alarm_loop", Game.Player.Character, "dlc_xm_silo_finale_sounds", false, 0);
                            AlarmSwitch = 2;
                        }
                    }
                    break;
                case 2:
                    {
                        if (cleanup)
                        {
                            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_CHRISTMAS2017/XM_SILO");
                            Audio.StopSound(Alarms.Alarm_Sounds);
                            Audio.ReleaseSound(Alarms.Alarm_Sounds);
                            Alarm_Sounds = 0;
                            AlarmSwitch = 0;
                        }
                    }
                    break;
            }
        }
        public static void Sub_Alarm(bool cleanup)
        {
            switch (AlarmSwitch)
            {
                case 0:
                    {
                        if (!cleanup)
                        {
                            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_CHRISTMAS2017/XM_SUBMARINE");
                            Function.Call(Hash.REQUEST_SCRIPT_AUDIO_BANK, "DLC_CHRISTMAS2017/XM_SUBMARINE", false, -1);
                            Wait(500);
                            AlarmSwitch = 1;
                        }
                    }
                    break;
                case 1:
                    {
                        if (Alarm_Sounds == 0)
                        {
                            Alarm_Sounds = Function.Call<int>(Hash.GET_SOUND_ID);
                        }
                        else
                        {
                            Function.Call(Hash.PLAY_SOUND_FROM_COORD, Alarm_Sounds, "alarm_loop", 514.3f, 4838.5f, -61.7f, "dlc_xm_submarine_sounds", false, 0, 0);
                            AlarmSwitch = 2;
                        }
                    }
                    break;
                case 2:
                    {
                        if (cleanup)
                        {
                            Function.Call(Hash.RELEASE_NAMED_SCRIPT_AUDIO_BANK, "DLC_CHRISTMAS2017/XM_SUBMARINE");
                            Audio.StopSound(Alarms.Alarm_Sounds);
                            Audio.ReleaseSound(Alarms.Alarm_Sounds);
                            Alarm_Sounds = 0;
                            AlarmSwitch = 0;
                        }
                    }
                    break;
            }
        }
        public static void MORGUE_Alarm(bool cleanup)
        {
            switch (AlarmSwitch)
            {
                case 0:
                    {
                        if (!cleanup)
                        {
                            while (!Function.Call<bool>(Hash.IS_ALARM_PLAYING, "FBI_01_MORGUE_ALARMS"))
                            {
                                if (Function.Call<bool>(Hash.PREPARE_ALARM, "FBI_01_MORGUE_ALARMS"))
                                {
                                    Function.Call(Hash.START_ALARM, "FBI_01_MORGUE_ALARMS", true);
                                }
                                Script.Yield();
                            }
                            if (Function.Call<bool>(Hash.IS_ALARM_PLAYING, "FBI_01_MORGUE_ALARMS"))
                            {
                                AlarmSwitch = 1;
                            }
                        }
                    }
                    break;
                case 1:
                    {
                        if (cleanup)
                        {
                            while (Function.Call<bool>(Hash.IS_ALARM_PLAYING, "FBI_01_MORGUE_ALARMS"))
                            {
                                Function.Call(Hash.STOP_ALARM, "FBI_01_MORGUE_ALARMS", true);
                                Script.Yield();
                            }
                            if (!Function.Call<bool>(Hash.IS_ALARM_PLAYING, "FBI_01_MORGUE_ALARMS"))
                            {
                                AlarmSwitch = 0;
                            }
                        }
                    }
                    break;
            }
        }
        public static void STOP_ALL_ALARMS(bool stop) => Function.Call(Hash.STOP_ALL_ALARMS, stop);
    }
    internal class Vehicles : Script
    {
        public Vehicles()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }
        public static List<Vehicle> vehList = new List<Vehicle>()
        {

        };
        public void onTick(object sender, EventArgs e)
        {
            CheckVehicles();
        }
        public void onShutdown(object sender, EventArgs e)
        {
            var A_0 = true;
            if (A_0)
            {
                #region Vehicles
                RemoveVehicles();
                #endregion
                #region Peds
                #endregion
                #region Props
                #endregion
                #region Blips
                #endregion
                #region Cameras
                #endregion
                #region Pickups
                #endregion
            }
        }//<------here
        public static void CheckVehicles()
        {
            if (vehList.Count > 0)
            {
                foreach (Vehicle veh in vehList.ToList())
                {
                    if (veh != null && veh.IsDead)
                    {
                        if (veh.AttachedBlip != null)
                        {
                            veh.AttachedBlip.Delete();
                        }
                        veh.MarkAsNoLongerNeeded();
                        vehList.Remove(veh);
                    }
                    if (veh != null)
                    {
                        if (Game.Player.Character.CurrentVehicle == veh)
                        {
                            if (veh.AttachedBlip != null)
                            {
                                veh.AttachedBlip.Alpha = 0;
                            }
                        }
                        else
                        {
                            if (veh.AttachedBlip != null)
                            {
                                veh.AttachedBlip.Alpha = 255;
                            }
                        }
                    }
                }
            }
        }
        public static void RemoveVehicles()
        {
            if (vehList.Count > 0)
            {
                foreach (Vehicle veh in vehList.ToList())
                {
                    if (veh != null)
                    {
                        if (veh.AttachedBlip != null)
                        {
                            veh.AttachedBlip.Delete();
                        }
                        veh.Delete();
                        vehList.Remove(veh);
                    }
                }
            }
        }
        public static void SET_VEHICLE_DOORS_LOCKED(Vehicle vehicle, int doorLockStatus)
        {
            Function.Call(Hash.SET_VEHICLE_DOORS_LOCKED, vehicle, doorLockStatus);
        }
        public static void REMOVE_AMBIANT_MISSION_VEHICLES(Vector3 position, float radius)
        {
            Vehicle[] vehicles = World.GetNearbyVehicles(position, radius);
            foreach (Vehicle vehicle in vehicles)
            {
                if (vehicle != null)
                {
                    vehicle.MarkAsNoLongerNeeded();
                }
            }
        }
        public static void REMOVE_AMBIANT_MISSION_VEHICLES_BESIDES(Vector3 position, float radius, Vehicle dontdelete)
        {
            Vehicle[] vehicles = World.GetNearbyVehicles(position, radius);
            foreach (Vehicle vehicle in vehicles)
            {
                if (vehicle != null && vehicle != dontdelete)
                {
                    vehicle.MarkAsNoLongerNeeded();
                }
            }
        }
        public static void SET_​VEHICLE_​DOOR_​BROKEN(Vehicle vehicle, int doorIndex, bool deleteDoor)
        {
            if (vehicle != null)
            {
                Function.Call(Hash.SET_VEHICLE_DOOR_BROKEN, vehicle, doorIndex, deleteDoor);
            }
        }
        public static void SET_​VEHICLE_​DOOR_​OPEN(Vehicle vehicle, int doorIndex, bool loose, bool openInstantly)
        {
            if (vehicle != null)
            {
                Function.Call(Hash.SET_​VEHICLE_​DOOR_​OPEN, vehicle, doorIndex, loose, openInstantly);
            }
        }
        public static void SET_​VEHICLE_​DOOR_SHUT(Vehicle vehicle, int doorIndex, bool openInstantly)
        {
            if (vehicle != null)
            {
                Function.Call(Hash.SET_​VEHICLE_​DOOR_SHUT, vehicle, doorIndex, openInstantly);
            }
        }
        public static bool IS_VEHICLE_DOOR_FULLY_OPEN(Vehicle vehicle, int doorid) => Function.Call<bool>(Hash.IS_VEHICLE_DOOR_FULLY_OPEN, vehicle, doorid);
        public static void SPAWN_VEHICLE(VehicleHash vehiclehash, Vector3 positiontospawn, float heading, bool sirenactive, bool IsInvincible)
        {
            Vehicle vehicle = World.CreateVehicle(vehiclehash, positiontospawn, heading);
            if (vehicle.HasSiren)
            {
                vehicle.IsSirenActive = sirenactive;
            }
            vehicle.IsInvincible = IsInvincible;
            Vehicles.vehList.Add(vehicle);
        }
    }
    internal class Props : Script
    {
        public static List<Prop> propList = new List<Prop>()
        {

        };
        public static List<Prop> gspropList = new List<Prop>()
        {

        };
        public Props()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }
        public void onTick(object sender, EventArgs e)
        {

        }
        public void onShutdown(object sender, EventArgs e)
        {
            var A_0 = true;
            if (A_0)
            {
                #region Vehicles
                #endregion
                #region Peds
                #endregion
                #region Props
                RemoveProps();
                #endregion
                #region Blips
                #endregion
                #region Cameras
                #endregion
                #region Pickups
                #endregion
            }
        }//<------here
        public static void BlipUpProp(int sprite, BlipColor color, string name)
        {
            if (propList.Count > 0)
            {
                foreach (Prop prop in propList)
                {
                    if (prop != null)
                    {
                        if (prop.AttachedBlip == null)
                        {
                            prop.AddBlip();
                        }
                        else
                        {
                            prop.AttachedBlip.Sprite = (BlipSprite)sprite;
                            prop.AttachedBlip.Color = color;
                            prop.AttachedBlip.Name = name;
                        }
                    }
                }
            }
        }
        public static bool Does_Blip_Exist(Prop prop) => prop.AttachedBlip != null;
        public static void CheckBlips()
        {
            if (propList.Count > 0)
            {
                foreach (Prop prop in propList.ToList())
                {
                    if (prop != null && prop.HasBeenDamagedByAnyWeapon())
                    {
                        if (Does_Blip_Exist(prop)) prop.AttachedBlip.Delete();
                        prop.MarkAsNoLongerNeeded();
                        propList.Remove(prop);
                    }
                }
            }
        }
        public static void RemoveProps()
        {
            if (propList.Count > 0)
            {
                foreach (Prop prop in propList.ToList())
                {
                    if (prop != null)
                    {
                        if (Does_Blip_Exist(prop)) prop.AttachedBlip.Delete();
                        prop.Delete();
                        propList.Remove(prop);
                    }
                }
            }
        }
        public static void SPAWN_PROP(string modelhash, Vector3 loc, Vector3 rot, bool dynamic, bool placeonground, bool frozen, bool collision, bool IsInvincible, bool IsVisible)
        {
            Prop prop = World.CreateProp(Main.RequestModel(modelhash), loc, rot, dynamic, placeonground);
            while (prop == null)
            {
                prop = World.CreateProp(Main.RequestModel(modelhash), loc, rot, dynamic, placeonground);
                Wait(0);
            }
            prop.IsPositionFrozen = frozen;
            prop.IsCollisionEnabled = collision;
            prop.IsInvincible = IsInvincible;
            prop.IsVisible = IsVisible;
            propList.Add(prop);
        }
        public static void SPAWN_PROP(int modelhash, Vector3 loc, Vector3 rot, bool dynamic, bool placeonground, bool frozen, bool collision, bool IsInvincible, bool IsVisible)
        {
            Prop prop = World.CreateProp(Main.RequestModel(modelhash), loc, rot, dynamic, placeonground);
            while (prop == null)
            {
                prop = World.CreateProp(Main.RequestModel(modelhash), loc, rot, dynamic, placeonground);
                Wait(0);
            }
            prop.IsPositionFrozen = frozen;
            prop.IsCollisionEnabled = collision;
            prop.IsInvincible = IsInvincible;
            prop.IsVisible = IsVisible;
            propList.Add(prop);
        }
        public static void SPAWN_PROP_NO_OFFSET(string modelhash, Vector3 loc, Vector3 rot, bool dynamic, bool frozen, bool collision, bool IsInvincible, bool IsVisible)
        {
            Prop prop = World.CreatePropNoOffset(Main.RequestModel(modelhash), loc, rot, dynamic);
            while (prop == null)
            {
                prop = World.CreatePropNoOffset(Main.RequestModel(modelhash), loc, rot, dynamic);
                Wait(0);
            }
            prop.IsPositionFrozen = frozen;
            prop.IsCollisionEnabled = collision;
            prop.IsInvincible = IsInvincible;
            prop.IsVisible = IsVisible;
            propList.Add(prop);
        }
        public static void SPAWN_PROP_NO_OFFSET(int modelhash, Vector3 loc, Vector3 rot, bool dynamic, bool frozen, bool collision, bool IsInvincible, bool IsVisible)
        {
            Prop prop = World.CreatePropNoOffset(Main.RequestModel(modelhash), loc, rot, dynamic);
            while (prop == null)
            {
                prop = World.CreatePropNoOffset(Main.RequestModel(modelhash), loc, rot, dynamic);
                Wait(0);
            }
            prop.IsPositionFrozen = frozen;
            prop.IsCollisionEnabled = collision;
            prop.IsInvincible = IsInvincible;
            prop.IsVisible = IsVisible;
            propList.Add(prop);
        }
        public static void SPAWN_PROP_NO_OFFSET_WITH_BLIP(string modelhash, Vector3 loc, Vector3 rot, bool dynamic, bool frozen, bool collision, bool IsInvincible, bool IsVisible, int blipid, BlipColor color, string name = "", bool minimaledge = true)
        {
            Prop prop = World.CreatePropNoOffset(Main.RequestModel(modelhash), loc, rot, dynamic);
            while (prop == null)
            {
                prop = World.CreatePropNoOffset(Main.RequestModel(modelhash), loc, rot, dynamic);
                Wait(0);
            }
            prop.IsPositionFrozen = frozen;
            prop.IsCollisionEnabled = collision;
            prop.IsInvincible = IsInvincible;
            prop.IsVisible = IsVisible;
            while (prop.AttachedBlip == null)
            {
                prop.AddBlip();
                Wait(0);
            }
            prop.AttachedBlip.Sprite = (BlipSprite)blipid;
            prop.AttachedBlip.Color = color;
            prop.AttachedBlip.Name = name;
            Function.Call(Hash.SET_BLIP_AS_SHORT_RANGE, prop.AttachedBlip, minimaledge);
            propList.Add(prop);
        }
        public static void SPAWN_PROP_NO_OFFSET_WITH_BLIP(int modelhash, Vector3 loc, Vector3 rot, bool dynamic, bool frozen, bool collision, bool IsInvincible, bool IsVisible, int blipid, BlipColor color, string name = "", bool minimaledge = true)
        {
            Prop prop = World.CreatePropNoOffset(Main.RequestModel(modelhash), loc, rot, dynamic);
            while (prop == null)
            {
                prop = World.CreatePropNoOffset(Main.RequestModel(modelhash), loc, rot, dynamic);
                Wait(0);
            }
            prop.IsPositionFrozen = frozen;
            prop.IsCollisionEnabled = collision;
            prop.IsInvincible = IsInvincible;
            prop.IsVisible = IsVisible;
            while (prop.AttachedBlip == null)
            {
                prop.AddBlip();
                Wait(0);
            }
            prop.AttachedBlip.Sprite = (BlipSprite)blipid;
            prop.AttachedBlip.Color = color;
            prop.AttachedBlip.Name = name;
            Function.Call(Hash.SET_BLIP_AS_SHORT_RANGE, prop.AttachedBlip, minimaledge);
            propList.Add(prop);
        }
    }
    internal class Groups : Script
    {
        public static int AiTeam = World.AddRelationshipGroup("aiteam").Hash;
        public static int ExtrasTeam = World.AddRelationshipGroup("aiteam2").Hash;
        public static int playersTeam = Function.Call<int>(Hash.GET_HASH_KEY, "PLAYER");
        public static List<Ped> pedList = new List<Ped>()
        {

        };
        public static List<Ped> pedList2 = new List<Ped>()
        {

        };
        public static bool GangHassle = false;
        public Groups()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }
        public void onTick(object sender, EventArgs e)
        {
            Function.Call(Hash.SET_CUTSCENE_CAN_BE_SKIPPED, false);
            Function.Call(Hash.ENABLE_MOVIE_SUBTITLES, false);
            Audio.SetAudioFlag(AudioFlags.LoadMPData, true);
            Audio.SetAudioFlag(AudioFlags.WantedMusicDisabled, true);
            Audio.SetAudioFlag(AudioFlags.DisableFlightMusic, true);
            //if (Function.Call<bool>(Hash.IS_CINEMATIC_IDLE_CAM_RENDERING))
            {
                Function.Call(Hash.INVALIDATE_IDLE_CAM);
                Function.Call(Hash.INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE);
            }
            if (Game.Player.Character.Model == PedHash.FreemodeMale01)
            {
                Main.IsFreemodeFemale = false;
                Main.IsFreemodeMale = true;
            }
            if (Game.Player.Character.Model == PedHash.FreemodeFemale01)
            {
                Main.IsFreemodeMale = false;
                Main.IsFreemodeFemale = true;
            }
            if (Game.Player.Character.Model == PedHash.Michael || Game.Player.Character.Model == PedHash.Franklin || Game.Player.Character.Model == PedHash.Trevor)
            {
                Main.IsFreemodeMale = false;
                Main.IsFreemodeFemale = false;
            }
            CheckEnemyPeds();
            if (Main.NoCopsOnMission)
            {
                Game.Player.WantedLevel = 0;
                Function.Call(Hash.SET_MAX_WANTED_LEVEL, 0);
            }
            else
            {
                Function.Call(Hash.SET_MAX_WANTED_LEVEL, 5);
            }
            if (Main.FuckOffCivilians)
            {
                Function.Call(Hash.SET_PED_DENSITY_MULTIPLIER_THIS_FRAME, 0.0f);

                Function.Call(Hash.SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME, 0.0f);

                Function.Call(Hash.SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME, 0.0f);

                Function.Call((Hash)0x90B6DA738A9A25DA, 0.0f);
            }
            if (!Main.RadioAllowed)
            {
                if (Game.Player.Character.CurrentVehicle != null)
                {
                    Function.Call(Hash.SET_VEHICLE_RADIO_ENABLED, Game.Player.Character.CurrentVehicle, false);
                }
            }
            else
            {
                if (Game.Player.Character.CurrentVehicle != null)
                {
                    Function.Call(Hash.SET_VEHICLE_RADIO_ENABLED, Game.Player.Character.CurrentVehicle, true);
                }
            }
            if (Main.OnMission)
            {
                if (!GangHassle)
                {
                    Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 2, 1862763509, 296331235);
                    Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 2, 1862763509, 1166638144);
                    Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 2, 1862763509, 2037579709);
                    Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 2, 1862763509, 2017343592);
                    Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 2, 1862763509, -1821475077);
                    Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 2, 1862763509, 1782292358);
                    Function.Call(Hash.SET_PLAYER_CAN_BE_HASSLED_BY_GANGS, Game.Player, false);
                    GangHassle = true;
                }
            }
            else
            {
                if (GangHassle)
                {
                    Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 255, 1862763509, 296331235);
                    Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 255, 1862763509, 1166638144);
                    Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 255, 1862763509, 2037579709);
                    Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 255, 1862763509, 2017343592);
                    Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 255, 1862763509, -1821475077);
                    Function.Call(Hash.SET_RELATIONSHIP_BETWEEN_GROUPS, 255, 1862763509, 1782292358);
                    Function.Call(Hash.SET_PLAYER_CAN_BE_HASSLED_BY_GANGS, Game.Player, true);
                    GangHassle = false;
                }
            }
        }
        public void onShutdown(object sender, EventArgs e)
        {
            var A_0 = true;
            if (A_0)
            {
                #region Vehicles
                #endregion
                #region Peds
                RemoveEnemyPeds();
                RemoveEnemyPeds2();
                //EnemyHandler.RemoveEnemies();
                #endregion
                #region Props
                #endregion
                #region Blips
                #endregion
                #region Cameras
                #endregion
                #region Pickups
                #endregion
            }
        }//<------here
        public static void SET_​PED_​COMBAT_​ATTRIBUTES(Ped enemy, int attribute, bool enabled) => Function.Call(Hash.SET_​PED_​COMBAT_​ATTRIBUTES, enemy, attribute, enabled);
        public static bool IS_PED_IN_GROUP(Ped ped, int groupId) => Function.Call<bool>(Hash.IS_PED_GROUP_MEMBER, ped, groupId);
        public static void SET_INTO_GROUP(Ped ped)
        {
            int player_group = Function.Call<int>(Hash.GET_PED_GROUP_INDEX, Game.Player.Character);
            ped.RelationshipGroup = playersTeam;
            Function.Call(Hash.SET_PED_AS_GROUP_MEMBER, ped, player_group);
            ped.NeverLeavesGroup = true;
        }
        public static bool IS_PED_USING_ACTION_MODE(Ped player) => Function.Call<bool>(Hash.IS_PED_USING_ACTION_MODE, player);
        public static void SET_PED_STEALTH_MOVEMENT(Ped ped, int use = 0, int mode = 0) => Function.Call(Hash.SET_PED_USING_ACTION_MODE, ped, use, mode);
        public static void SET_PED_USING_ACTION_MODE(Ped ped, bool use, string mode = "DEFAULT_ACTION")
        {
            Function.Call(Hash.SET_PED_USING_ACTION_MODE, ped, use, -1, mode);
        }
        public static void SET_PED_COMBAT_MOVEMENT_ABILITY(Ped ped, int combat_Movement, int combat_Ability)
        {
            Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, ped, combat_Movement);
            Function.Call(Hash.SET_PED_COMBAT_ABILITY, ped, combat_Ability);
        }
        public static bool IS_PED_AT_DESTINATION(Ped ped, Vector3 destination, int distanceto) => ped.Position.DistanceTo(destination) < distanceto;
        public static bool IS_PED_AT_DESTINATION_FLOAT(Ped ped, Vector3 destination, float distanceto) => ped.Position.DistanceTo(destination) < distanceto;
        public static bool HAS_PLAYER_TRIGGERED_COMBAT()
        {
            if (Game.Player.Character.IsShooting)
            {
                return true;
            }
            foreach (Ped ped in Groups.pedList)
            {
                if (Game.Player.Character.IsAiming && CanSee(ped, Game.Player.Character))
                {
                    return true;
                }
                else if (Function.Call<bool>(Hash.IS_PED_PERFORMING_MELEE_ACTION, Game.Player.Character) && CanSee(ped, Game.Player.Character))
                {
                    return true;
                }
            }
            return false;
        }
        public static bool HAS_PLAYER_TRIGGERED_COMBAT_WITH_VEHICLE(Vehicle vehicle)
        {
            if (Game.Player.Character.IsShooting)
            {
                return true;
            }
            foreach (Ped ped in Groups.pedList)
            {
                if (Game.Player.Character.IsAiming && CanSee(ped, Game.Player.Character))
                {
                    return true;
                }
                else if (Function.Call<bool>(Hash.IS_PED_PERFORMING_MELEE_ACTION, Game.Player.Character) && CanSee(ped, Game.Player.Character))
                {
                    return true;
                }
            }
            if (vehicle != null && Game.Player.Character.CurrentVehicle == vehicle)
            {
                return true;
            }
            return false;
        }
        public static bool CanSee(Entity _ent, Entity _target) => Function.Call<bool>(Hash.HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT, _ent, _target);
        public static void ArmEnemyPeds()
        {
            if (Groups.pedList.Count > 0)
            {
                foreach (Ped ped in Groups.pedList)
                {
                    if (ped != null)
                    {
                        Function.Call(Hash.SET_PED_COMBAT_ABILITY, ped, 2);
                        Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, ped, 1);
                        ped.Armor = 100;
                    }
                }
            }
        }
        public static void SetEnemyPedsParams(int shootrate, int accuracy, float health, float armor, bool criticalhits, bool canragdoll)
        {
            if (Groups.pedList.Count > 0)
            {
                foreach (Ped ped in Groups.pedList)
                {
                    if (ped != null)
                    {
                        Function.Call(Hash.SET_PED_SHOOT_RATE, ped, shootrate);
                        ped.Accuracy = accuracy;
                        ped.HealthFloat = health;
                        ped.ArmorFloat = armor;
                        ped.CanSufferCriticalHits = criticalhits;
                        ped.CanRagdoll = canragdoll;
                    }
                }
            }
        }
        public static void SetEnemyPedsConfig(int configflag, bool set)
        {
            if (Groups.pedList.Count > 0)
            {
                foreach (Ped ped in Groups.pedList)
                {
                    if (ped != null)
                    {
                        Function.Call(Hash.SET_PED_CONFIG_FLAG, ped, configflag, set);
                    }
                }
            }
        }
        public static void GIVE_AI_RANDOM_WEAPON()
        {
            if (Groups.pedList.Count > 0)
            {
                foreach (Ped ped in Groups.pedList)
                {
                    if (ped != null)
                    {
                        int RandomWeaponn;
                        RandomWeaponn = Function.Call<int>(Hash.GET_RANDOM_INT_IN_RANGE, 0, 7);
                        switch (RandomWeaponn)
                        {
                            case 0:
                                {
                                    ped.Weapons.Give(WeaponHash.AdvancedRifle, 10000, true, true);
                                }
                                break;
                            case 1:
                                {
                                    ped.Weapons.Give(WeaponHash.Pistol, 10000, true, true);
                                }
                                break;
                            case 2:
                                {
                                    ped.Weapons.Give(WeaponHash.PumpShotgun, 10000, true, true);
                                }
                                break;
                            case 3:
                                {
                                    ped.Weapons.Give(WeaponHash.AssaultSMG, 10000, true, true);
                                }
                                break;
                            case 4:
                                {
                                    ped.Weapons.Give(WeaponHash.CarbineRifle, 10000, true, true);
                                }
                                break;
                            case 5:
                                {
                                    ped.Weapons.Give(WeaponHash.SMG, 10000, true, true);
                                }
                                break;
                            case 6:
                                {
                                    ped.Weapons.Give((WeaponHash)0x1BC4FDB9, 10000, true, true);
                                }
                                break;
                        }
                    }
                }
            }
        }
        public static void BlipUpEnemyPeds()
        {
            if (Groups.pedList.Count > 0)
            {
                foreach (Ped ped in Groups.pedList)
                {
                    if (ped != null && ped.IsAlive)
                    {
                        while (ped.AttachedBlip == null)
                        {
                            ped.AddBlip();
                            Script.Yield();
                        }
                        ped.AttachedBlip.Sprite = (BlipSprite)270;
                        if (ped.Model == PedHash.Juggernaut01M)
                        {
                            ped.AttachedBlip.Sprite = (BlipSprite)630;
                        }
                        ped.AttachedBlip.Color = BlipColor.Red;
                        ped.AttachedBlip.Name = "Enemy";
                        ped.AttachedBlip.IsShortRange = true;
                        if (Interiors.GET_INTERIOR_FROM_ENTITY(ped) != 0)
                        {
                            ped.AttachedBlip.Scale = 0.7f;
                        }
                        ped.RelationshipGroup = AiTeam;
                    }
                }
            }
        }
        public static void BlipUpEnemyPeds2()
        {
            if (Groups.pedList2.Count > 0)
            {
                foreach (Ped ped in Groups.pedList2)
                {
                    if (ped != null && ped.IsAlive)
                    {
                        while (ped.AttachedBlip == null)
                        {
                            ped.AddBlip();
                            Script.Yield();
                        }
                        ped.AttachedBlip.Sprite = (BlipSprite)270;
                        ped.AttachedBlip.Color = BlipColor.Red;
                        ped.AttachedBlip.Name = "Enemy";
                        ped.RelationshipGroup = AiTeam;
                    }
                }
            }
        }
        public static void CheckEnemyPeds2()
        {
            if (Groups.pedList.Count > 0)
            {
                foreach (Ped ped in Groups.pedList.ToList())
                {
                    if (ped != null && ped.IsDead)
                    {
                        if (ped.AttachedBlip != null)
                        {
                            ped.AttachedBlip.Delete();
                        }
                    }
                }
            }
            if (Groups.pedList2.Count > 0)
            {
                foreach (Ped ped in Groups.pedList2.ToList())
                {
                    if (ped != null && ped.IsDead)
                    {
                        if (ped.AttachedBlip != null)
                        {
                            ped.AttachedBlip.Delete();
                        }
                    }
                }
            }
        }
        public static void CheckEnemyPeds()
        {
            if (Groups.pedList.Count > 0)
            {
                foreach (Ped ped in Groups.pedList.ToList())
                {
                    if (ped != null && ped.IsDead)
                    {
                        if (ped.AttachedBlip != null)
                        {
                            ped.AttachedBlip.Delete();
                        }
                        ped.MarkAsNoLongerNeeded();
                        Groups.pedList.Remove(ped);
                    }
                }
            }
            if (Groups.pedList2.Count > 0)
            {
                foreach (Ped ped in Groups.pedList2.ToList())
                {
                    if (ped != null && ped.IsDead)
                    {
                        if (ped.AttachedBlip != null)
                        {
                            ped.AttachedBlip.Delete();
                        }
                        //ped.MarkAsNoLongerNeeded();
                        //Groups.pedList2.Remove(ped);
                    }
                }
            }
        }
        public static void ClearEnemyPedsList()
        {
            if (Groups.pedList.Count > 0)
            {
                foreach (Ped ped in Groups.pedList.ToList())
                {
                    if (ped != null)
                    {
                        Groups.pedList.Remove(ped);
                    }
                }
            }
            if (Groups.pedList2.Count > 0)
            {
                foreach (Ped ped in Groups.pedList2.ToList())
                {
                    if (ped != null)
                    {
                        Groups.pedList2.Remove(ped);
                    }
                }
            }
        }
        public static void ClearEnemyPedsList2()
        {
            if (Groups.pedList.Count > 0)
            {
                foreach (Ped ped in Groups.pedList.ToList())
                {
                    if (ped != null)
                    {
                        ped.MarkAsNoLongerNeeded();
                        Groups.pedList.Remove(ped);
                    }
                }
            }
            if (Groups.pedList2.Count > 0)
            {
                foreach (Ped ped in Groups.pedList2.ToList())
                {
                    if (ped != null)
                    {
                        ped.MarkAsNoLongerNeeded();
                        Groups.pedList2.Remove(ped);
                    }
                }
            }
        }
        public static void RemoveEnemyPeds()
        {
            if (Groups.pedList.Count > 0)
            {
                foreach (Ped ped in Groups.pedList.ToList())
                {
                    if (ped != null)
                    {
                        if (ped.AttachedBlip != null)
                        {
                            ped.AttachedBlip.Delete();
                        }
                        ped.Delete();
                        Groups.pedList.Remove(ped);
                    }
                }
            }
            if (Groups.pedList2.Count > 0)
            {
                foreach (Ped ped in Groups.pedList2.ToList())
                {
                    if (ped != null)
                    {
                        if (ped.AttachedBlip != null)
                        {
                            ped.AttachedBlip.Delete();
                        }
                        ped.Delete();
                        Groups.pedList2.Remove(ped);
                    }
                }
            }
        }
        public static void RemoveEnemyPeds2()
        {
            if (Groups.pedList2.Count > 0)
            {
                foreach (Ped ped in Groups.pedList2.ToList())
                {
                    if (ped != null)
                    {
                        if (ped.AttachedBlip != null)
                        {
                            ped.AttachedBlip.Delete();
                        }
                        ped.Delete();
                        Groups.pedList2.Remove(ped);
                    }
                }
            }
        }
        public static void TaskEnemyPeds()
        {
            if (Groups.pedList.Count > 0)
            {
                foreach (Ped ped in Groups.pedList.ToList())
                {
                    if (ped != null)
                    {
                        foreach (Ped p in Groups.pedList)
                        {
                            if (p != null)
                            {
                                Function.Call(Hash.TASK_COMBAT_PED, p, Game.Player.Character, -1);
                                Function.Call(Hash.SET_COMBAT_FLOAT, p, 5, 1f);
                                Function.Call(Hash.SET_COMBAT_FLOAT, p, 8, 1f);
                                Function.Call(Hash.SET_PED_SPHERE_DEFENSIVE_AREA, p, p.Position.X, p.Position.Y, p.Position.Z, 10f, 1, 0);
                                Function.Call(Hash.SET_PED_COMBAT_RANGE, p, 1);
                            }
                        }
                    }
                }
            }
        }
        public static void TaskEnemyPeds2()
        {
            if (Groups.pedList2.Count > 0)
            {
                foreach (Ped ped in Groups.pedList2.ToList())
                {
                    if (ped != null)
                    {
                        ped.Task.FightAgainst(Game.Player.Character);
                        ped.AlwaysKeepTask = true;
                        ped.BlockPermanentEvents = true;
                    }
                }
            }
        }
        public static void SPAWN_AI(PedHash pedmodel, Vector3 positiontospawn, float heading, WeaponHash weaponmodel, int armor, int accuracy, bool setascop, int combatability, int combatmovement, Relationship relation, bool AlwaysKeppTask, bool BlockPermenentEvents)
        {
            Ped ai = World.CreatePed(pedmodel, positiontospawn, heading);
            ai.Weapons.Give(weaponmodel, 10000, true, true);
            ai.RelationshipGroup = Groups.AiTeam;
            ai.Armor = armor;
            ai.Accuracy = accuracy;
            Function.Call(Hash.SET_PED_AS_COP, ai, setascop);
            if (setascop)
            {
                Function.Call(Hash.SET_PED_PROP_INDEX, ai, 0, 1, true);
            }
            Function.Call(Hash.SET_PED_COMBAT_ABILITY, ai, combatability);
            Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, ai, combatmovement);
            Main.SetRelationshipBetweenGroups(relation, Groups.AiTeam, Groups.playersTeam);
            Main.SetRelationshipBetweenGroups(relation, Groups.playersTeam, Groups.AiTeam);
            ai.AlwaysKeepTask = AlwaysKeppTask;
            ai.BlockPermanentEvents = BlockPermenentEvents;
            ai.DropsEquippedWeaponOnDeath = false;
            while (!Groups.pedList.Contains(ai))
            {
                Groups.pedList.Add(ai);
                Wait(0);
            }
        }
        public static void SPAWN_AI2(PedHash pedmodel, Vector3 positiontospawn, float heading, WeaponHash weaponmodel, int armor, int accuracy, bool setascop, int combatability, int combatmovement, Relationship relation, bool AlwaysKeppTask, bool BlockPermenentEvents)
        {
            Ped ai = World.CreatePed(pedmodel, positiontospawn, heading);
            ai.Weapons.Give(weaponmodel, 10000, true, true);
            ai.RelationshipGroup = Groups.AiTeam;
            ai.Armor = armor;
            ai.Accuracy = accuracy;
            Function.Call(Hash.SET_PED_AS_COP, ai, setascop);
            if (setascop)
            {
                Function.Call(Hash.SET_PED_PROP_INDEX, ai, 0, 1, true);
            }
            Function.Call(Hash.SET_PED_COMBAT_ABILITY, ai, combatability);
            Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, ai, combatmovement);
            Groups.pedList2.Add(ai);
            Main.SetRelationshipBetweenGroups(relation, Groups.AiTeam, Groups.playersTeam);
            Main.SetRelationshipBetweenGroups(relation, Groups.playersTeam, Groups.AiTeam);
            ai.AlwaysKeepTask = AlwaysKeppTask;
            ai.BlockPermanentEvents = BlockPermenentEvents;
            ai.DropsEquippedWeaponOnDeath = false;
        }
        public enum COMBAT_ATTRIBUTE_FLOATS
        {
            CCF_BLIND_FIRE_CHANCE,              // Chance to blind fire from cover, range is 0.0-1.0 (default is 0.05 for civilians, law doesn't blind fire)
            CCF_BURST_DURATION_IN_COVER,        // How long each burst from cover should last (default is 2.0)
            CCF_MAX_SHOOTING_DISTANCE,          // The maximum distance the ped will try to shoot from (will override weapon range if set to anything > 0.0, default is -1.0)
            CCF_TIME_BETWEEN_BURSTS_IN_COVER,   // How long to wait, in cover, between firing bursts (< 0.0 will disable firing, unless cover fire is requested, default is 1.25)
            CCF_TIME_BETWEEN_PEEKS,             // How long to wait before attempting to peek again (default is 10.0)
            CCF_STRAFE_WHEN_MOVING_CHANCE,      // A chance to strafe to cover, range is 0.0-1.0 (0.0 will force them to run, 1.0 will force strafe and shoot, default is 1.0)
            CCF_WEAPON_ACCURACY,                // default is 0.4
            CCF_FIGHT_PROFICIENCY,              // How well an opponent can melee fight, range is 0.0-1.0 (default is 0.5)
            CCF_WALK_WHEN_STRAFING_CHANCE,      // The possibility of a ped walking while strafing rather than jog/run, range is 0.0-1.0 (default is 0.0)
            CCF_HELI_SPEED_MODIFIER,            // The speed modifier when driving a heli in combat
            CCF_HELI_SENSES_RANGE,              // The range of the ped's senses (sight, identification, hearing) when in a heli
            CCF_ATTACK_WINDOW_DISTANCE_FOR_COVER, // The distance we'll use for cover based behaviour in attack windows Default is -1.0 (disabled), range is -1.0 to 150.0
            CCF_TIME_TO_INVALIDATE_INJURED_TARGET,  // How long to stop combat an injured target if there is no other valid target, if target is player in singleplayer
                                                    // this will happen indefinitely unless explicitly disabled by setting to 0.0, default = 10.0 range = 0-50
            CCF_MIN_DISTANCE_TO_TARGET,         // Min distance the ped will use if CA_MAINTAIN_MIN_DISTANCE_TO_TARGET is set, default 5.0 (currently only for cover search + usage)
            CCF_BULLET_IMPACT_DETECTION_RANGE,  // The range at which the ped will detect the bullet impact event
            CCF_AIM_TURN_THRESHOLD,             // The threshold at which the ped will perform an aim turn
            CCF_OPTIMAL_COVER_DISTANCE,         //
            CCF_AUTOMOBILE_SPEED_MODIFIER,      // The speed modifier when driving an automobile in combat
            CCF_SPEED_TO_FLEE_IN_VEHICLE,       //
            CCF_TRIGGER_CHARGE_TIME_NEAR,       // How long to wait before charging a close target hiding in cover
            CCF_TRIGGER_CHARGE_TIME_FAR,        // How long to wait before charging a distant target hiding in cover
            CCF_MAX_DISTANCE_TO_HEAR_EVENTS, // Max distance peds can hear an event from, even if the sound is louder
            CCF_MAX_DISTANCE_TO_HEAR_EVENTS_USING_LOS, // Max distance peds can hear an event from, even if the sound is louder if the ped is using LOS to hear events (CPED_CONFIG_FLAG_CheckLoSForSoundEvents)				
            CCF_HOMING_ROCKET_BREAK_LOCK_ANGLE,             // Angle between the rocket and target where lock-on will stop, range is 0.0-1.0, (default is 0.2), the bigger the number the easier to break lock
            CCF_HOMING_ROCKET_BREAK_LOCK_ANGLE_CLOSE,       // Angle between the rocket and target where lock-on will stop, when rocket is within CCF_HOMING_ROCKET_BREAK_LOCK_CLOSE_DISTANCE, range is 0.0-1.0, (default is 0.6), the bigger the number the easier to break lock
            CCF_HOMING_ROCKET_BREAK_LOCK_CLOSE_DISTANCE,    // Distance at which we check CCF_HOMING_ROCKET_BREAK_LOCK_ANGLE_CLOSE rather than CCF_HOMING_ROCKET_BREAK_LOCK_ANGLE
            CCF_HOMING_ROCKET_TURN_RATE_MODIFIER,           // Alters homing characteristics defined for the weapon (1.0 is default, <1.0 slow turn rates, >1.0 speed them up
            CCF_TIME_BETWEEN_AGGRESSIVE_MOVES_DURING_VEHICLE_CHASE, // Sets the time delay between aggressive moves during vehicle chases. -1.0 means use random values, 0.0 means never
            CCF_MAX_VEHICLE_TURRET_FIRING_RANGE,    // Max firing range for a ped in vehicle turret seat
            CCF_WEAPON_DAMAGE_MODIFIER,             // Multiplies the weapon damage dealt by the ped, range is 0.0-10.0 (default is 1.0)
            MAX_COMBAT_FLOATS,
        };
        public enum COMBAT_ATTRIBUTE //Set a specific combat attribute
        {
            CA_INVALID = -1,
            CA_USE_COVER = 0,   // AI will only use cover if this is set
            CA_USE_VEHICLE = 1, // AI will only use vehicles if this is set
            CA_DO_DRIVEBYS = 2, // AI will only driveby from a vehicle if this is set
            CA_LEAVE_VEHICLES = 3,  // Will be forced to stay in a ny vehicel if this isn't set
            CA_CAN_USE_DYNAMIC_STRAFE_DECISIONS = 4,    // This ped can make decisions on whether to strafe or not based on distance to destination, recent bullet events, etc.
            CA_ALWAYS_FIGHT = 5,    // Ped will always fight upon getting threat response task
            CA_FLEE_WHILST_IN_VEHICLE = 6,  // If in combat and in a vehicle, the ped will flee rather than attacking
            CA_JUST_FOLLOW_VEHICLE = 7, // If in combat and chasing in a vehicle, the ped will keep a distance behind rather than ramming
            CA_PLAY_REACTION_ANIMS = 8, // Deprecated
            CA_WILL_SCAN_FOR_DEAD_PEDS = 9, // Peds will scan for and react to dead peds found
            CA_IS_A_GUARD = 10, // Deprecated
            CA_JUST_SEEK_COVER = 11,    // The ped will seek cover only 
            CA_BLIND_FIRE_IN_COVER = 12,    // Ped will only blind fire when in cover
            CA_AGGRESSIVE = 13, // Ped may advance
            CA_CAN_INVESTIGATE = 14,    // Ped can investigate events such as distant gunfire, footsteps, explosions etc
            CA_CAN_USE_RADIO = 15,  // Ped can use a radio to call for backup (happens after a reaction)
            CA_CAN_CAPTURE_ENEMY_PEDS = 16, // Deprecated
            CA_ALWAYS_FLEE = 17,    // Ped will always flee upon getting threat response task
            CA_CAN_TAUNT_IN_VEHICLE = 20,   // Ped can do unarmed taunts in vehicle
            CA_CAN_CHASE_TARGET_ON_FOOT = 21,   // Ped will be able to chase their targets if both are on foot and the target is running away
            CA_WILL_DRAG_INJURED_PEDS_TO_SAFETY = 22, // Ped can drag injured peds to safety
            CA_REQUIRES_LOS_TO_SHOOT = 23,  // Ped will require LOS to the target it is aiming at before shooting
            CA_USE_PROXIMITY_FIRING_RATE = 24,  // Ped is allowed to use proximity based fire rate (increasing fire rate at closer distances)
            CA_DISABLE_SECONDARY_TARGET = 25,   // Normally peds can switch briefly to a secondary target in combat, setting this will prevent that
            CA_DISABLE_ENTRY_REACTIONS = 26,    // This will disable the flinching combat entry reactions for peds, instead only playing the turn and aim anims
            CA_PERFECT_ACCURACY = 27,   // Force ped to be 100% accurate in all situations (added by Jay Reinebold)
            CA_CAN_USE_FRUSTRATED_ADVANCE = 28, // If we don't have cover and can't see our target it's possible we will advance, even if the target is in cover
            CA_MOVE_TO_LOCATION_BEFORE_COVER_SEARCH = 29, // This will have the ped move to defensive areas and within attack windows before performing the cover search
            CA_CAN_SHOOT_WITHOUT_LOS = 30,  // Allow shooting of our weapon even if we don't have LOS (this isn't X-ray vision as it only affects weapon firing)
            CA_MAINTAIN_MIN_DISTANCE_TO_TARGET = 31, // Ped will try to maintain a min distance to the target, even if using defensive areas (currently only for cover finding + usage) 
            CA_CAN_USE_PEEKING_VARIATIONS = 34, // Allows ped to use steamed variations of peeking anims
            CA_DISABLE_PINNED_DOWN = 35,    // Disables pinned down behaviors
            CA_DISABLE_PIN_DOWN_OTHERS = 36,    // Disables pinning down others
            CA_OPEN_COMBAT_WHEN_DEFENSIVE_AREA_IS_REACHED = 37, // When defensive area is reached the area is cleared and the ped is set to use defensive combat movement
            CA_DISABLE_BULLET_REACTIONS = 38,   // Disables bullet reactions
            CA_CAN_BUST = 39,   // Allows ped to bust the player
            CA_IGNORED_BY_OTHER_PEDS_WHEN_WANTED = 40,  // This ped is ignored by other peds when wanted
            CA_CAN_COMMANDEER_VEHICLES = 41,    // Ped is allowed to "jack" vehicles when needing to chase a target in combat
            CA_CAN_FLANK = 42,  // Ped is allowed to flank
            CA_SWITCH_TO_ADVANCE_IF_CANT_FIND_COVER = 43,   // Ped will switch to advance if they can't find cover
            CA_SWITCH_TO_DEFENSIVE_IF_IN_COVER = 44,    // Ped will switch to defensive if they are in cover
            CA_CLEAR_PRIMARY_DEFENSIVE_AREA_WHEN_REACHED = 45,  // Ped will clear their primary defensive area when it is reached
            CA_CAN_FIGHT_ARMED_PEDS_WHEN_NOT_ARMED = 46, // Ped is allowed to fight armed peds when not armed
            CA_ENABLE_TACTICAL_POINTS_WHEN_DEFENSIVE = 47, // Ped is not allowed to use tactical points if set to use defensive movement (will only use cover)
            CA_DISABLE_COVER_ARC_ADJUSTMENTS = 48,  // Ped cannot adjust cover arcs when testing cover safety (atm done on corner cover points when  ped usingdefensive area + no LOS)
            CA_USE_ENEMY_ACCURACY_SCALING = 49, // Ped may use reduced accuracy with large number of enemies attacking the same local player target
            CA_CAN_CHARGE = 50, // Ped is allowed to charge the enemy position
            CA_REMOVE_AREA_SET_WILL_ADVANCE_WHEN_DEFENSIVE_AREA_REACHED = 51, // When defensive area is reached the area is cleared and the ped is set to use will advance movement
            CA_USE_VEHICLE_ATTACK = 52, // Use the vehicle attack mission during combat (only works on driver)
            CA_USE_VEHICLE_ATTACK_IF_VEHICLE_HAS_MOUNTED_GUNS = 53, // Use the vehicle attack mission during combat if the vehicle has mounted guns (only works on driver)
            CA_ALWAYS_EQUIP_BEST_WEAPON = 54, // Always equip best weapon in combat
            CA_CAN_SEE_UNDERWATER_PEDS = 55, // Ignores in water at depth visibility check
            CA_DISABLE_AIM_AT_AI_TARGETS_IN_HELIS = 56, // Will prevent this ped from aiming at any AI targets that are in helicopters
            CA_DISABLE_SEEK_DUE_TO_LINE_OF_SIGHT = 57,  // Disables peds seeking due to no clear line of sight
            CA_DISABLE_FLEE_FROM_COMBAT = 58, // To be used when releasing missions peds if we don't want them fleeing from combat (mission peds already prevent flee)
            CA_DISABLE_TARGET_CHANGES_DURING_VEHICLE_PURSUIT = 59, // Disables target changes during vehicle pursuit
            CA_CAN_THROW_SMOKE_GRENADE = 60, // Ped may throw a smoke grenade at player loitering in combat
            CA_CLEAR_AREA_SET_DEFENSIVE_IF_DEFENSIVE_CANNOT_BE_REACHED = 62, // Will clear a set defensive area if that area cannot be reached
            CA_DISABLE_BLOCK_FROM_PURSUE_DURING_VEHICLE_CHASE = 64, // Disable block from pursue during vehicle chases
            CA_DISABLE_SPIN_OUT_DURING_VEHICLE_CHASE = 65, // Disable spin out during vehicle chases
            CA_DISABLE_CRUISE_IN_FRONT_DURING_BLOCK_DURING_VEHICLE_CHASE = 66, // Disable cruise in front during block during vehicle chases
            CA_CAN_IGNORE_BLOCKED_LOS_WEIGHTING = 67, // Makes it more likely that the ped will continue targeting a target with blocked los for a few seconds
            CA_DISABLE_REACT_TO_BUDDY_SHOT = 68, // Disables the react to buddy shot behaviour.
            CA_PREFER_NAVMESH_DURING_VEHICLE_CHASE = 69, // Prefer pathing using navmesh over road nodes
            CA_ALLOWED_TO_AVOID_OFFROAD_DURING_VEHICLE_CHASE = 70, // Ignore road edges when avoiding
            CA_PERMIT_CHARGE_BEYOND_DEFENSIVE_AREA = 71, // Permits ped to charge a target outside the assigned defensive area.
            CA_USE_ROCKETS_AGAINST_VEHICLES_ONLY = 72, // This ped will switch to an RPG if target is in a vehicle, otherwise will use alternate weapon.
            CA_DISABLE_TACTICAL_POINTS_WITHOUT_CLEAR_LOS = 73, // Disables peds moving to a tactical point without clear los
            CA_DISABLE_PULL_ALONGSIDE_DURING_VEHICLE_CHASE = 74, // Disables pull alongside during vehicle chase
            CA_DISABLE_ALL_RANDOMS_FLEE = 78,   // If set on a ped, they will not flee when all random peds flee is set to TRUE (they are still able to flee due to other reasons)
            CA_WILL_GENERATE_DEAD_PED_SEEN_SCRIPT_EVENTS = 79, // This ped will send out a script DeadPedSeenEvent when they see a dead ped
            CA_USE_MAX_SENSE_RANGE_WHEN_RECEIVING_EVENTS = 80, // This will use the receiving peds sense range rather than the range supplied to the communicate event
            CA_RESTRICT_IN_VEHICLE_AIMING_TO_CURRENT_SIDE = 81, // When aiming from a vehicle the ped will only aim at targets on his side of the vehicle
            CA_USE_DEFAULT_BLOCKED_LOS_POSITION_AND_DIRECTION = 82, // LOS to the target is blocked we return to our default position and direction until we have LOS (no aiming)
            CA_REQUIRES_LOS_TO_AIM = 83, // LOS to the target is blocked we return to our default position and direction until we have LOS (no aiming)
            CA_CAN_CRUISE_AND_BLOCK_IN_VEHICLE = 84, // Allow vehicles spawned infront of target facing away to enter cruise and wait to block approaching target
            CA_PREFER_AIR_COMBAT_WHEN_IN_AIRCRAFT = 85, // Peds flying aircraft will prefer to target other aircraft over entities on the ground
            CA_ALLOW_DOG_FIGHTING = 86, //Allow peds flying aircraft to use dog fighting behaviours
            CA_PREFER_NON_AIRCRAFT_TARGETS = 87,    // This will make the weight of targets who aircraft vehicles be reduced greatly compared to targets on foot or in ground based vehicles
            CA_PREFER_KNOWN_TARGETS_WHEN_COMBAT_CLOSEST_TARGET = 88, //When peds are tasked to go to combat, they keep searching for a known target for a while before forcing an unknown one
            CA_FORCE_CHECK_ATTACK_ANGLE_FOR_MOUNTED_GUNS = 89, // Only allow mounted weapons to fire if within the correct attack angle (default 25-degree cone). On a flag in order to keep exiting behaviour and only fix in specific cases.
            CA_BLOCK_FIRE_FOR_VEHICLE_PASSENGER_MOUNTED_GUNS = 90 // Blocks the firing state for passenger-controlled mounted weapons. Existing flags CA_USE_VEHICLE_ATTACK and CA_USE_VEHICLE_ATTACK_IF_VEHICLE_HAS_MOUNTED_GUNS only work for drivers.
        };
    }
    internal class Cutscenes : Script
    {
        public static int GET_CUTSCENE_TIME() => Function.Call<int>(Hash.GET_CUTSCENE_TIME);
        public static bool HAS_CUTSCENE_FINISHED() => Function.Call<bool>(Hash.HAS_CUTSCENE_FINISHED);
        public static bool HAS_CUTSCENE_LOADED() => Function.Call<bool>(Hash.HAS_CUTSCENE_LOADED);
        public static void RegisterEntityForCutscene(Entity entity, string cutsceneEntityName, int p2 = 2, int p4 = 0) => Function.Call(Hash.REGISTER_ENTITY_FOR_CUTSCENE, entity, cutsceneEntityName, p2, 0, p4);

        public enum CUTSCENE_SECTION//for playback lists
        {
            CS_SECTION_1 = 1,                   //index into an array on the codes so hence the mis match. The cutscene documentation will always refer to section_1. 
            CS_SECTION_2 = 2,
            CS_SECTION_3 = 4,
            CS_SECTION_4 = 8,
            CS_SECTION_5 = 16,
            CS_SECTION_6 = 32,
            CS_SECTION_7 = 64,
            CS_SECTION_8 = 128,
            CS_SECTION_9 = 256,
            CS_SECTION_10 = 512,
            CS_SECTION_11 = 1024,
            CS_SECTION_12 = 2048,
            CS_SECTION_13 = 4096,
            CS_SECTION_14 = 8192,
            CS_SECTION_15 = 16384,
            CS_SECTION_16 = 32768,
            CS_SECTION_17 = 65536,
            CS_SECTION_18 = 131072,
            CS_SECTION_19 = 262144,
            CS_SECTION_20 = 524288,
            CS_SECTION_21 = 1048576,
            CS_SECTION_22 = 2097152,
            CS_SECTION_23 = 4194304,
            CS_SECTION_24 = 8388608,
            CS_SECTION_25 = 16777216,
            CS_SECTION_26 = 33554432,
            CS_SECTION_27 = 67108864,
            CS_SECTION_28 = 134217728,
            CS_SECTION_29 = 268435456,
            CS_SECTION_30 = 536870912,
            CS_SECTION_31 = 1073741824
        };

    }
    internal class Interiors
    {
        public static void IslandLoad(bool isislandloaded)
        {
            Function.Call(Hash.SET_SCENARIO_GROUP_ENABLED, "Heist_Island_Peds", isislandloaded);
            int zone = Function.Call<int>(Hash.GET_ZONE_FROM_NAME_ID, "IsHeist");
            Function.Call(Hash.SET_ZONE_ENABLED, zone, isislandloaded);
            Function.Call((Hash)0x9A9D1BA639675CF1, "HeistIsland", isislandloaded);// Loads the Cayo Perico Map itself
            Function.Call((Hash)0x5E1460624D194A38, isislandloaded);// Loads Cayo Perico MiniMap
            Function.Call(Hash.SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT, "azl_dlc_hei4_island_zones", 1, 1);
            Function.Call(Hash.SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT, "AZL_DLC_Hei4_Island_Disabled_Zones", 1, 1);
            Function.Call(Hash.SET_STATIC_EMITTER_ENABLED, "se_dlc_hei4_island_beach_party_music_new_01_left", isislandloaded);
            Function.Call(Hash.SET_STATIC_EMITTER_ENABLED, "se_dlc_hei4_island_beach_party_music_new_01_right", isislandloaded);
            Function.Call((Hash)0xF74B1FFA4A15FBEA, isislandloaded);
            if (isislandloaded)
            {
                Function.Call((Hash)0x547237AA71AB44DE, 0.02f);
            }
            else
            {
                Function.Call((Hash)0x547237AA71AB44DE, 1f);
            }
            //Function.Call(Hash.SET_AUDIO_FLAG, "PlayerOnDLCHeist4Island", isislandloaded);
            if (!isislandloaded)
            {
                Function.Call(Hash.REMOVE_IPL, "h4_islandx");
                Function.Call(Hash.REMOVE_IPL, "h4_islandx_disc_strandedshark");
                Function.Call(Hash.REMOVE_IPL, "h4_islandx_disc_strandedshark_lod");
                Function.Call(Hash.REMOVE_IPL, "h4_islandx_disc_strandedwhale");
                Function.Call(Hash.REMOVE_IPL, "h4_islandx_disc_strandedwhale_lod");
                Function.Call(Hash.REMOVE_IPL, "h4_islandx_props");
                Function.Call(Hash.REMOVE_IPL, "h4_islandx_props_lod");
                Function.Call(Hash.REMOVE_IPL, "h4_islandx_sea_mines");
            }
            else
            {
                Function.Call(Hash.REQUEST_IPL, "h4_islandx");
                Function.Call(Hash.REQUEST_IPL, "h4_islandx_disc_strandedshark");
                Function.Call(Hash.REQUEST_IPL, "h4_islandx_disc_strandedshark_lod");
                Function.Call(Hash.REQUEST_IPL, "h4_islandx_disc_strandedwhale");
                Function.Call(Hash.REQUEST_IPL, "h4_islandx_disc_strandedwhale_lod");
                Function.Call(Hash.REQUEST_IPL, "h4_islandx_props");
                Function.Call(Hash.REQUEST_IPL, "h4_islandx_props_lod");
                Function.Call(Hash.REQUEST_IPL, "h4_islandx_sea_mines");
            }
            //Function.Call(Hash.REMOVE_MODEL_SWAP, 5011.3105f, -5757.686f, 14.4830f, 0, Main.Main.joaat("h4_prop_h4_safe_01a"), Main.Main.joaat("h4_prop_h4_safe_01b"), 0);
            //Function.Call(Hash.CREATE_MODEL_SWAP, 5011.3105f, -5757.686f, 14.4830f, 0, Main.Main.joaat("h4_prop_h4_safe_01a"), Main.Main.joaat("h4_prop_h4_safe_01b"), 0);
            //Function.Call(Hash.REMOVE_MODEL_SWAP, 5011.3105f, -5757.686f, 14.4830f, 0, Main.Main.joaat("h4_prop_h4_safe_01a"), Main.Main.joaat("h4_prop_h4_safe_01b"), 0);
            //h4_islandx
            //h4_islandx_disc_strandedshark
            //h4_islandx_disc_strandedshark_lod
            //h4_islandx_disc_strandedwhale
            //h4_islandx_disc_strandedwhale_lod
            //h4_islandx_props
            //h4_islandx_props_lod
            //h4_islandx_sea_mines
        }
        public static void LoadNorthYankton()
        {
            Function.Call(Hash.REQUEST_IPL, "plg_01");
            Function.Call(Hash.REQUEST_IPL, "prologue01");
            Function.Call(Hash.REQUEST_IPL, "prologue01_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue01c");
            Function.Call(Hash.REQUEST_IPL, "prologue01c_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue01d");
            Function.Call(Hash.REQUEST_IPL, "prologue01d_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue01e");
            Function.Call(Hash.REQUEST_IPL, "prologue01e_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue01f");
            Function.Call(Hash.REQUEST_IPL, "prologue01f_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue01g");
            Function.Call(Hash.REQUEST_IPL, "prologue01h");
            Function.Call(Hash.REQUEST_IPL, "prologue01h_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue01i");
            Function.Call(Hash.REQUEST_IPL, "prologue01i_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue01j");
            Function.Call(Hash.REQUEST_IPL, "prologue01j_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue01k");
            Function.Call(Hash.REQUEST_IPL, "prologue01k_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue01z");
            Function.Call(Hash.REQUEST_IPL, "prologue01z_lod");
            Function.Call(Hash.REQUEST_IPL, "plg_02");
            Function.Call(Hash.REQUEST_IPL, "prologue02");
            Function.Call(Hash.REQUEST_IPL, "prologue02_lod");
            Function.Call(Hash.REQUEST_IPL, "plg_03");
            Function.Call(Hash.REQUEST_IPL, "prologue03");
            Function.Call(Hash.REQUEST_IPL, "prologue03_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue03b");
            Function.Call(Hash.REQUEST_IPL, "prologue03b_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue03_grv_dug");
            Function.Call(Hash.REQUEST_IPL, "prologue03_grv_dug_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue_grv_torch");
            Function.Call(Hash.REQUEST_IPL, "plg_04");
            Function.Call(Hash.REQUEST_IPL, "prologue04");
            Function.Call(Hash.REQUEST_IPL, "prologue04_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue04b");
            Function.Call(Hash.REQUEST_IPL, "prologue04b_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue04_cover");
            Function.Call(Hash.REQUEST_IPL, "des_protree_end");
            Function.Call(Hash.REQUEST_IPL, "des_protree_start");
            Function.Call(Hash.REQUEST_IPL, "des_protree_start_lod");
            Function.Call(Hash.REQUEST_IPL, "plg_05");
            Function.Call(Hash.REQUEST_IPL, "prologue05");
            Function.Call(Hash.REQUEST_IPL, "prologue05_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue05b");
            Function.Call(Hash.REQUEST_IPL, "prologue05b_lod");
            Function.Call(Hash.REQUEST_IPL, "plg_06");
            Function.Call(Hash.REQUEST_IPL, "prologue06");
            Function.Call(Hash.REQUEST_IPL, "prologue06_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue06b");
            Function.Call(Hash.REQUEST_IPL, "prologue06b_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue06_int");
            Function.Call(Hash.REQUEST_IPL, "prologue06_int_lod");
            Function.Call(Hash.REQUEST_IPL, "prologue06_pannel");
            Function.Call(Hash.REQUEST_IPL, "prologue06_pannel_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue_m2_door");
            Function.Call(Hash.REMOVE_IPL, "prologue_m2_door_lod");
            Function.Call(Hash.REQUEST_IPL, "plg_occl_00");
            Function.Call(Hash.REQUEST_IPL, "prologue_occl");
            Function.Call(Hash.REQUEST_IPL, "plg_rd");
            Function.Call(Hash.REQUEST_IPL, "prologuerd");
            Function.Call(Hash.REQUEST_IPL, "prologuerdb");
            Function.Call(Hash.REQUEST_IPL, "prologuerd_lod");
        }// Co-ordinations to spawn in Ludendorff, North Yankton are X: 3360.19, Y: -4849.67, Z: 111.8
        public static void UnLoadNorthYankton()
        {
            Function.Call(Hash.REMOVE_IPL, "plg_01");
            Function.Call(Hash.REMOVE_IPL, "prologue01");
            Function.Call(Hash.REMOVE_IPL, "prologue01_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue01c");
            Function.Call(Hash.REMOVE_IPL, "prologue01c_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue01d");
            Function.Call(Hash.REMOVE_IPL, "prologue01d_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue01e");
            Function.Call(Hash.REMOVE_IPL, "prologue01e_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue01f");
            Function.Call(Hash.REMOVE_IPL, "prologue01f_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue01g");
            Function.Call(Hash.REMOVE_IPL, "prologue01h");
            Function.Call(Hash.REMOVE_IPL, "prologue01h_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue01i");
            Function.Call(Hash.REMOVE_IPL, "prologue01i_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue01j");
            Function.Call(Hash.REMOVE_IPL, "prologue01j_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue01k");
            Function.Call(Hash.REMOVE_IPL, "prologue01k_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue01z");
            Function.Call(Hash.REMOVE_IPL, "prologue01z_lod");
            Function.Call(Hash.REMOVE_IPL, "plg_02");
            Function.Call(Hash.REMOVE_IPL, "prologue02");
            Function.Call(Hash.REMOVE_IPL, "prologue02_lod");
            Function.Call(Hash.REMOVE_IPL, "plg_03");
            Function.Call(Hash.REMOVE_IPL, "prologue03");
            Function.Call(Hash.REMOVE_IPL, "prologue03_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue03b");
            Function.Call(Hash.REMOVE_IPL, "prologue03b_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue03_grv_dug");
            Function.Call(Hash.REMOVE_IPL, "prologue03_grv_dug_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue_grv_torch");
            Function.Call(Hash.REMOVE_IPL, "plg_04");
            Function.Call(Hash.REMOVE_IPL, "prologue04");
            Function.Call(Hash.REMOVE_IPL, "prologue04_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue04b");
            Function.Call(Hash.REMOVE_IPL, "prologue04b_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue04_cover");
            Function.Call(Hash.REMOVE_IPL, "des_protree_end");
            Function.Call(Hash.REMOVE_IPL, "des_protree_start");
            Function.Call(Hash.REMOVE_IPL, "des_protree_start_lod");
            Function.Call(Hash.REMOVE_IPL, "plg_05");
            Function.Call(Hash.REMOVE_IPL, "prologue05");
            Function.Call(Hash.REMOVE_IPL, "prologue05_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue05b");
            Function.Call(Hash.REMOVE_IPL, "prologue05b_lod");
            Function.Call(Hash.REMOVE_IPL, "plg_06");
            Function.Call(Hash.REMOVE_IPL, "prologue06");
            Function.Call(Hash.REMOVE_IPL, "prologue06_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue06b");
            Function.Call(Hash.REMOVE_IPL, "prologue06b_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue06_int");
            Function.Call(Hash.REMOVE_IPL, "prologue06_int_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue06_pannel");
            Function.Call(Hash.REMOVE_IPL, "prologue06_pannel_lod");
            Function.Call(Hash.REMOVE_IPL, "prologue_m2_door");
            Function.Call(Hash.REMOVE_IPL, "prologue_m2_door_lod");
            Function.Call(Hash.REMOVE_IPL, "plg_occl_00");
            Function.Call(Hash.REMOVE_IPL, "prologue_occl");
            Function.Call(Hash.REMOVE_IPL, "plg_rd");
            Function.Call(Hash.REMOVE_IPL, "prologuerd");
            Function.Call(Hash.REMOVE_IPL, "prologuerdb");
            Function.Call(Hash.REMOVE_IPL, "prologuerd_lod");
        }
        public static void REMOVE_IPL(string iplName) => Function.Call(Hash.REMOVE_IPL, iplName);
        public static void REQUEST_​IPL(string iplName) => Function.Call(Hash.REQUEST_​IPL, iplName);
        public static bool IS_​IPL_​ACTIVE(string iplName) => Function.Call<bool>(Hash.IS_​IPL_​ACTIVE, iplName);
        public static bool IS_​ENTITY_​IN_​ZONE(Entity entity, string zone) => Function.Call<bool>(Hash.IS_​ENTITY_​IN_​ZONE, entity, zone);
        public static bool IS_ENTITY_IN_INTERIOR(Entity entity, float interiorx, float interiory, float interiorz) => Function.Call<int>(Hash.GET_INTERIOR_AT_COORDS, interiorx, interiory, interiorz) == Function.Call<int>(Hash.GET_INTERIOR_FROM_ENTITY, entity);
        public static int GET_INTERIOR_FROM_ENTITY(Entity entity) => Function.Call<int>(Hash.GET_INTERIOR_FROM_ENTITY, entity);
        public static Hash GET_ROOM_KEY_FROM_ENTITY(Entity entity) => Function.Call<Hash>(Hash.GET_ROOM_KEY_FROM_ENTITY, entity);
        public static void PIN_INTERIOR_IN_MEMORY(int interior) => Function.Call(Hash.PIN_INTERIOR_IN_MEMORY, interior);
        public static void UNPIN_INTERIOR(int interior) => Function.Call(Hash.UNPIN_INTERIOR, interior);
        public static bool IS_INTERIOR_READY(int interior) => Function.Call<bool>(Hash.IS_INTERIOR_READY, interior);
        public static void ACTIVATE_INTERIOR_ENTITY_SET(int interior, string entitysetname) => Function.Call(Hash.ACTIVATE_INTERIOR_ENTITY_SET, interior, entitysetname);
        public static void DEACTIVATE_INTERIOR_ENTITY_SET(int interior, string entitysetname) => Function.Call(Hash.DEACTIVATE_INTERIOR_ENTITY_SET, interior, entitysetname);
        public static bool IS_INTERIOR_ENTITY_SET_ACTIVE(int interior, string entitysetname) => Function.Call<bool>(Hash.IS_INTERIOR_ENTITY_SET_ACTIVE, interior, entitysetname);
        public static void _SET_INTERIOR_ENTITY_SET_COLOR(int interior, string entitysetname, int color) => Function.Call(Hash.SET_INTERIOR_ENTITY_SET_TINT_INDEX, interior, entitysetname, color);
        public static void REFRESH_INTERIOR(int interior) => Function.Call(Hash.REFRESH_INTERIOR, interior);
    }
    public class RenderTarget : IDisposable
    {
        public int Handle;
        public string Name;
        public Model Model;

        public bool Valid => Handle != -1;

        public RenderTarget(string name, Model model, bool create = true)
        {
            Name = name;
            Model = model;
            if (create) Create();
        }

        public void Create() => CreateNamedRenderTargetForModel(Name, Model);

        public void Release()
        {
            Function.Call(Hash.RELEASE_NAMED_RENDERTARGET, Name);
        }

        public static int CreateNamedRenderTargetForModel(string name, Model model)
        {
            int handle = 0;
            if (!Function.Call<bool>((Hash)0x78DCDC15C9F116B4, name))
            {
                Function.Call<bool>((Hash)0x57D9C12635E25CE3, name, 0);
            }
            if (!Function.Call<bool>((Hash)0x113750538FA31298, model.Hash))
            {
                Function.Call((Hash)0xF6C09E276AEB3F2D, model.Hash);
            }
            if (Function.Call<bool>((Hash)0x78DCDC15C9F116B4, name))
            {
                handle = Function.Call<int>((Hash)0x1A6478B61C6BDC3B, name);
            }
            return handle;
        }
        public static void DeleteNamedRenderTargetForModel(string name)
        {
            if (Function.Call<bool>(Hash.IS_NAMED_RENDERTARGET_REGISTERED, name))
            {
                Function.Call(Hash.RELEASE_NAMED_RENDERTARGET, name);
            }
        }

        public static void DrawOnRenderTarget(int renderTarget, int scaleform)
        {
            Function.Call((Hash)0x5F15302936E07111, renderTarget);
            Function.Call((Hash)0x61BB1D9B3A95D802, 4);
            Function.Call(Hash.DRAW_SCALEFORM_MOVIE, scaleform, 0.4f, 0.3600f, 0.9400f, 0.9000f, 255, 255, 255, 255);
            Function.Call((Hash)0x5F15302936E07111, 1);
            //SetScaleformFitRenderTarget(scaleform, true);
        }

        public static void SetScaleformFitRenderTarget(int scaleform, bool toggle)
        {
            Function.Call((Hash)0xE6A9F00D4240B519, scaleform, toggle);
        }

        public void Dispose() => Release();
    }
    internal class Cameras : Script
    {
        public static Camera WORLD_CREATE_CAMERA(Vector3 pos, Vector3 rot, float fov) => World.CreateCamera(pos, rot, fov);
        public static void RENDER_SCRIPT_CAMS(bool render, bool ease, int easeTime, bool p3, bool p4, bool p5) => Function.Call(Hash.RENDER_SCRIPT_CAMS, render, ease, easeTime, p3, p4, p5);
        public static void WORLD_RENDERING_CAMERA(Camera cam) => World.RenderingCamera = cam;
        public static float CAM_SPLINE_PHASE(Camera camera) => Function.Call<float>(Hash.GET_CAM_SPLINE_NODE_PHASE, camera);
        public static float GET_​CAM_​ANIM_​CURRENT_​PHASE(Camera cam) => Function.Call<float>(Hash.GET_​CAM_​ANIM_​CURRENT_​PHASE, cam);
        public static bool IS_CAM_INTERPOLATING(Camera cam) => Function.Call<bool>(Hash.IS_CAM_INTERPOLATING, cam);
        public static void RESET_GAMEPLAY_CAM()
        {
            GameplayCamera.RelativeHeading = Game.Player.Character.Heading - Game.Player.Character.Heading;
            GameplayCamera.RelativePitch = 0f;
        }
        public static void SET_NEXT_CAM_PARAMS(Camera cam, Vector3 pos, Vector3 rot, float fov)
        {
            cam.Position = pos;
            cam.Rotation = rot;
            cam.FieldOfView = fov;
        }
    }
    internal class Audios
    {
        public static void TRIGGER_MUSIC_EVENT(string musicevent) => Function.Call(Hash.TRIGGER_MUSIC_EVENT, musicevent);
        public static bool TRIGGER_MUSIC_EVENT_BOOL(string musicevent) => Function.Call<bool>(Hash.TRIGGER_MUSIC_EVENT, musicevent);

        public static void PREPARE_MUSIC_EVENT(string musicevent) => Function.Call(Hash.PREPARE_MUSIC_EVENT, musicevent);
        public static bool PREPARE_MUSIC_EVENT_BOOL(string musicevent) => Function.Call<bool>(Hash.PREPARE_MUSIC_EVENT, musicevent);

        public static void Stop_Music_Event() => Function.Call(Hash.TRIGGER_MUSIC_EVENT, "GTA_ONLINE_STOP_SCORE");
    }
    internal class Screen_Effects
    {
        public static void CLEAR_ALL_HELP_MESSAGES() => Function.Call(Hash.CLEAR_ALL_HELP_MESSAGES);
        public static void End_Mission_Ring()
        {
            Audio.SetAudioFlag(AudioFlags.LoadMPData, true);
            Function.Call(Hash.PLAY_SOUND_FRONTEND, -1, "Pre_Screen_Stinger", "DLC_HEISTS_PREP_SCREEN_SOUNDS", true);
            Function.Call(Hash.ANIMPOSTFX_PLAY, "HeistCelebEnd", 5000, false);
        }
        public static void SET_TIMECYCLE_MODIFIER(string timecycle) => Function.Call(Hash.SET_TIMECYCLE_MODIFIER, timecycle);
        public static void SET_TIMECYCLE_MODIFIER_STRENGTH(float timecyclestrength) => Function.Call(Hash.SET_TIMECYCLE_MODIFIER_STRENGTH, timecyclestrength);
        public static void SET_TRANSITION_TIMECYCLE_MODIFIER(string timecycle, float timecyclestrength) => Function.Call(Hash.SET_TRANSITION_TIMECYCLE_MODIFIER, timecycle, timecyclestrength);
        public static void CLEAR_TIMECYCLE_MODIFIER() => Function.Call(Hash.CLEAR_TIMECYCLE_MODIFIER);
        public static void PlayAnimPostFX(string animpostfxname, int duration, bool looped) => Function.Call(Hash.ANIMPOSTFX_PLAY, animpostfxname, duration, looped);
        public static void StopAllAnimPostFX() => Function.Call(Hash.ANIMPOSTFX_STOP_ALL);
    }
    internal class Weapons
    {
        public static int GET_AMMO_IN_CLIP(Ped ped, WeaponHash weaponHash)
        {
            OutputArgument ammoArg = new OutputArgument();
            bool success = Function.Call<bool>(Hash.GET_AMMO_IN_CLIP, ped, weaponHash, ammoArg);
            return success ? ammoArg.GetResult<int>() : 0;
        }
        public static int GET_AMMO_IN_PED_WEAPON(Ped ped, WeaponHash weaponHash) => Function.Call<int>(Hash.GET_AMMO_IN_PED_WEAPON, ped, weaponHash);
        public static void SET_PED_AMMO(Ped ped, WeaponHash weaponHash, int ammo) => Function.Call(Hash.SET_PED_AMMO, ped, weaponHash, ammo, 0);
        public static void ADD_AMMO_TO_PED(Ped ped, WeaponHash weaponHash, int ammo) => Function.Call(Hash.ADD_AMMO_TO_PED, ped, weaponHash, ammo);
        public static void GiveWeapon(Ped player, WeaponHash weapon, int ammoCount, bool equipNow, bool isAmmoLoaded)
        {
            while (!HAS_WEAPON(player, weapon))
            {
                player.Weapons.Give(weapon, ammoCount, equipNow, isAmmoLoaded);
                Wait(0);
            }
        }
        public static void Give_Component(Ped player, string attachment, WeaponHash weaponhash)
        {
            if (HAS_WEAPON(player, weaponhash))
            {
                Function.Call(Hash.GIVE_WEAPON_COMPONENT_TO_PED, player, (uint)weaponhash, Function.Call<Hash>(Hash.GET_HASH_KEY, attachment));
            }
        }
        public static void Remove_Component(Ped player, string attachment, WeaponHash weaponhash)
        {
            if (HAS_WEAPON(player, weaponhash))
            {
                Function.Call(Hash.REMOVE_WEAPON_COMPONENT_FROM_PED, player, (uint)weaponhash, Function.Call<Hash>(Hash.GET_HASH_KEY, attachment));
            }
        }


        public static void EquipNow(Ped player, WeaponHash weapon, bool equipNow)
        {
            player.Weapons.Select(weapon, equipNow);
        }
        public static void Anim_Weapon_Off()
        {
            Game.Player.Character.Weapons.Select(WeaponHash.Unarmed);
        }
        public static bool HAS_WEAPON(Ped ped, WeaponHash weapon) => ped.Weapons.HasWeapon(weapon);
        public static bool HAS_WEAPON_COMPONENT(Ped ped, WeaponHash weaponhash, string attachment) => Function.Call<bool>(Hash.IS_PED_WEAPON_COMPONENT_ACTIVE, ped, weaponhash, Function.Call<Hash>(Hash.GET_HASH_KEY, attachment));
    }
    internal class Cinema : Script
    {
        TextElement myUIText;
        public static bool CinemaActive = false;
        public static float CinemaBars = 2.0f;
        public static string Cutscene = "";
        public static int ChapterSwitch = 0;
        public static bool[] ChapterActive = { false, false, false, false };
        public Cinema()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }
        public void onTick(object sender, EventArgs e)
        {
            if (CinemaActive)
            {
                DrawBlackBars(CinemaBars);
                //myUIText = new TextElement(Cutscenes.GET_CUTSCENE_TIME().ToString(), new Point(10, 10), 0.4f, Color.WhiteSmoke, 0);
                //myUIText.Draw();
            }
            if (Cutscene != "")
            {
                if (Game.IsControlJustPressed(GTA.Control.Jump) || Game.IsControlJustPressed(GTA.Control.Attack))
                {

                }
            }
        }
        public void onShutdown(object sender, EventArgs e)
        {
            var A_0 = true;
            if (A_0)
            {
                #region Vehicles
                #endregion
                #region Peds
                #endregion
                #region Props
                #endregion
                #region Blips
                #endregion
                #region Cameras
                #endregion
                #region Pickups
                #endregion
            }
        }//<------here
        public enum VehicleNames
        {
            CAR = 0,
            PLANE = 1,
            TRAILER = 2,
            QUADBIKE = 3,
            HELI = 4,
            AUTOGYRO = 5,
            BIKE = 6,
            BICYCLE = 7,
            BOAT = 8,
            TRAIN = 9,
            SUBMARINE = 10,
            ALL = 11,
        };
        public enum CamShakeType
        {
            GRENADE_EXPLOSION_SHAKE,
            gameplay_explosion_shake,
            SMALL_EXPLOSION_SHAKE,
            HAND_SHAKE,
            jolt_SHAKE,
            LARGE_EXPLOSION_SHAKE,
            MEDIUM_EXPLOSION_SHAKE,
            ROAD_VIBRATION_SHAKE,
            SKY_DIVING_SHAKE,
            VIBRATE_SHAKE,
            DRUNK_SHAKE,
            CLUB_DANCE_SHAKE,
            DRONE_BOOST_SHAKE,
            GUNRUNNING_ENGINE_STOP_SHAKE,
            GUNRUNNING_ENGINE_START_SHAKE,
            GUNRUNNING_LOOP_SHAKE,
            GUNRUNNING_BUMP_SHAKE,
            PLANE_PART_SPEED_SHAKE,
            HIGH_FALL_SHAKE,
            FAMILY5_DRUG_TRIP_SHAKE,
            DEATH_FAIL_IN_EFFECT_SHAKE
        }
        public static void DrawBlackBars(float height)
        {
            float y1 = 0.5f * height;
            Function.Call(Hash.DRAW_RECT, 0.5f, y1, 1f, height, 0, 0, 0, 255);
            float y2 = 1f - 0.5f * height;
            Function.Call(Hash.DRAW_RECT, 0.5f, y2, 1f, height, 0, 0, 0, 255);
        }
        public static void CinematicShot(int duration, Entity entity, int VehicleNames)
        {
            Function.Call(Hash.CREATE_CINEMATIC_SHOT, -1096069633, duration, VehicleNames, entity);
            //-1096069633
        }
        public static void ShakeCinematicShot(string shaketype, float intensity)
        {
            Function.Call(Hash.SHAKE_CINEMATIC_CAM, shaketype, intensity);
        }
        public static void Fuck_Off_Idle_Cam()
        {
            Function.Call(Hash.INVALIDATE_IDLE_CAM);
        }
        public static bool IS_CINEMATIC_CAM_RENDERING()
        {
            return Function.Call<bool>(Hash.IS_CINEMATIC_CAM_RENDERING);
        }
        public static bool IS_CINEMATIC_CAM_SHAKING()
        {
            return Function.Call<bool>(Hash.IS_CINEMATIC_CAM_SHAKING);
        }
        public static bool IS_CINEMATIC_CAM_ACTIVE()
        {
            return Function.Call<bool>((Hash)0xF5F1E89A970B7796);
        }
        public static float CAM_SPLINE_PHASE(Camera camera)
        {
            return Function.Call<float>(Hash.GET_CAM_SPLINE_NODE_PHASE, camera);
        }
        public static float GET_​CAM_​ANIM_​CURRENT_​PHASE(Camera cam)
        {
            return Function.Call<float>(Hash.GET_​CAM_​ANIM_​CURRENT_​PHASE, cam);
        }
        public static void SET_CUTSCENE(string cutscene) => Cutscene = cutscene;
        public static void CLEAR_CUTSCENE() => Cutscene = "";
    }

    internal class ONSCREEN_KEYBOARD : Script
    {
        public static int Keyboard_Control = -1;
        public static int Keyboardreturnint = 0;
        public static string Keyboardreturn = "";
        public ONSCREEN_KEYBOARD()
        {
            Tick += onTick;
            Aborted += onShutdown;
        }

        public void onTick(object sender, EventArgs e)
        {
            switch (Keyboard_Control)
            {
                case 0:
                    {

                    }
                    break;
            }
        }
        public void onShutdown(object sender, EventArgs e)
        {
            var A_0 = true;
            if (A_0)
            {
                #region Vehicles
                #endregion
                #region Peds
                #endregion
                #region Props
                #endregion
                #region Blips
                #endregion
                #region Cameras
                #endregion
                #region Pickups
                #endregion
            }
        }

        public static string GetUserInput(string windowTitle, string defaultText, int maxLength)
        {
            Function.Call(Hash.DISABLE_ALL_CONTROL_ACTIONS, 2);

            Function.Call(Hash.DISPLAY_ONSCREEN_KEYBOARD, true, windowTitle, 0, defaultText, 0, 0, 0, maxLength + 1);

            while (Function.Call<int>(Hash.UPDATE_ONSCREEN_KEYBOARD) == 0)
            {
                Script.Yield();
            }

            Function.Call(Hash.ENABLE_ALL_CONTROL_ACTIONS, 2);

            return Function.Call<string>(Hash.GET_ONSCREEN_KEYBOARD_RESULT);
        }
    }
    public static class XMLSerializer
    {
        public static T DeserializeXML<T>(string fileName) where T : class
        {
            XmlSerializer serializer = new(typeof(T));
            StreamReader stream = new(fileName);

            T result = serializer.Deserialize(stream) as T;
            stream.Close();
            return result;
        }

        public static IEnumerable<T> DeserializeXML<T>(string fileName, Predicate<T> predicate) where T : class
        {
            return DeserializeXML<List<T>>(fileName).Where(t => predicate(t));
        }
        
        public static void SaveToXML<T>(T obj, string fileName) where T : class
        {
            XmlSerializer serializer = new(typeof(T));
            StreamWriter stream = new(fileName);

            serializer.Serialize(stream, obj);
            stream.Close();
        }
    }
    internal class Menyoo_Xml_Reader
    {
        static void Main(string[] args)
        {
            XmlDataDocument xmldoc = new XmlDataDocument();
            XmlNodeList xmlnode;
            int i = 0;
            string str = null;
            string strX = null;
            string strY = null;
            string strZ = null;
            string strPitch = null;
            string strRoll = null;
            string strYaw = null;
            FileStream fs = new FileStream("none.xml", FileMode.Open, FileAccess.Read);
            xmldoc.Load(fs);
            xmlnode = xmldoc.GetElementsByTagName("Placement");

            for (i = 0; i <= xmlnode.Count - 1; i++)
            {
                str = xmlnode[i].ChildNodes.Item(4).InnerText.Trim();

                strX = xmlnode[i].ChildNodes.Item(21).ChildNodes.Item(0).InnerText.Trim();
                strY = xmlnode[i].ChildNodes.Item(21).ChildNodes.Item(1).InnerText.Trim();
                strZ = xmlnode[i].ChildNodes.Item(21).ChildNodes.Item(2).InnerText.Trim();
                float strZf = (float)Math.Round(decimal.Parse(strZ), 4);


                strRoll = xmlnode[i].ChildNodes.Item(21).ChildNodes.Item(3).InnerText.Trim();
                decimal decr = Decimal.Parse(strRoll, System.Globalization.NumberStyles.Any);
                float strRollf = (float)Math.Round(decr, 4);

                strPitch = xmlnode[i].ChildNodes.Item(21).ChildNodes.Item(4).InnerText.Trim();
                decimal decp = Decimal.Parse(strPitch, System.Globalization.NumberStyles.Any);
                float strPitchf = (float)Math.Round(decp, 4);

                strYaw = xmlnode[i].ChildNodes.Item(21).ChildNodes.Item(5).InnerText.Trim();
                decimal decy = Decimal.Parse(strYaw, System.Globalization.NumberStyles.Any);
                float strYawf = (float)Math.Round(decy, 4);
                //str = 
                //str = xmlnode[i].ChildNodes.Item(0).InnerText.Trim() + "  " + xmlnode[i].ChildNodes.Item(1).InnerText.Trim() + "  " + xmlnode[i].ChildNodes.Item(2).InnerText.Trim();
                Console.WriteLine("PropSpawnData.Add(new PropSpawnClass(new Model(\"" + str + "\"), new Vector3(" + strX + "f, " + strY + "f, " + strZf + "f),  new Vector3(" + strRollf + "f, " + strPitchf + "f, " + strYawf + "f)));");
            }
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            SoundPlayerEx player = new SoundPlayerEx(@"c:\temp\sorry_dave.wav");
            player.SoundFinished += player_SoundFinished;

            Console.WriteLine("Press any key to play the sound");
            Console.ReadKey(true);
            player.PlayAsync();

            Console.WriteLine("Press a key to stop the sound.");
            Console.ReadKey(true);
            player.Stop();

            Console.WriteLine("Press any key to continue");
        }

        static void player_SoundFinished(object sender, EventArgs e)
        {
            Console.WriteLine("The sound finished playing");
        }
    }
    public static class SoundInfo
    {
        [DllImport("winmm.dll")]
        private static extern uint mciSendString(
            string command,
            StringBuilder returnValue,
            int returnLength,
            IntPtr winHandle);

        public static int GetSoundLength(string fileName)
        {
            StringBuilder lengthBuf = new StringBuilder(32);

            mciSendString(string.Format("open \"{0}\" type waveaudio alias wave", fileName), null, 0, IntPtr.Zero);
            mciSendString("status wave length", lengthBuf, lengthBuf.Capacity, IntPtr.Zero);
            mciSendString("close wave", null, 0, IntPtr.Zero);

            int length = 0;
            int.TryParse(lengthBuf.ToString(), out length);

            return length;
        }
    }
    public class SoundPlayerEx : SoundPlayer
    {
        public bool Finished { get; private set; }

        public static bool Talk = false;
        public bool TalkTimer = false;

        private Task _playTask;
        private CancellationTokenSource _tokenSource = new CancellationTokenSource();
        private CancellationToken _ct;
        private string _fileName;
        private bool _playingAsync = false;

        public event EventHandler SoundFinished;

        public SoundPlayerEx(string soundLocation)
            : base(soundLocation)
        {
            _fileName = soundLocation;
            _ct = _tokenSource.Token;
        }

        public void PlayAsync()
        {
            Finished = false;
            _playingAsync = true;
            Task.Run(() =>
            {
                try
                {
                    double lenMs = SoundInfo.GetSoundLength(_fileName);
                    DateTime stopAt = DateTime.Now.AddMilliseconds(lenMs);
                    this.Play();
                    while (DateTime.Now < stopAt)
                    {
                        _ct.ThrowIfCancellationRequested();
                        //The delay helps reduce processor usage while "spinning"
                        Task.Delay(10).Wait();
                    }
                }
                catch (OperationCanceledException)
                {
                    base.Stop();
                }
                finally
                {
                    OnSoundFinished();
                }

            }, _ct);
        }

        public new void Stop()
        {
            if (_playingAsync)
            {
                _ct.ThrowIfCancellationRequested();
                base.Stop();
                OnSoundFinished();
            }
            else
            {
                base.Stop();   //To stop the SoundPlayer Wave file
            }
        }

        protected virtual void OnSoundFinished()
        {
            Finished = true;
            _playingAsync = false;

            EventHandler handler = SoundFinished;

            if (handler != null)
                handler(this, EventArgs.Empty);
        }
    }
    internal class Anims
    {
        public static bool IS_ENTITY_PLAYING_ANIM(Ped entity, string animDict, string animName) => Function.Call<bool>(Hash.IS_ENTITY_PLAYING_ANIM, entity, animDict, animName, 3);
        public static float GET_SYNCHRONIZED_SCENE_PHASE(int sceneID) => Function.Call<float>(Hash.GET_SYNCHRONIZED_SCENE_PHASE, sceneID);
        public static void SET_SYNCHRONIZED_SCENE_PHASE(int sceneID, float phase) => Function.Call(Hash.SET_SYNCHRONIZED_SCENE_PHASE, sceneID, phase);
        public static void SET_SYNCHRONIZED_SCENE_LOOPED(int sceneID, bool toggle) => Function.Call(Hash.SET_SYNCHRONIZED_SCENE_LOOPED, sceneID, toggle);
        public static void FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(Entity entity) => Function.Call(Hash.FORCE_ENTITY_AI_AND_ANIMATION_UPDATE, entity);
        public static void SET_​SYNCHRONIZED_​SCENE_​RATE(int sceneID, float rate) => Function.Call(Hash.SET_SYNCHRONIZED_SCENE_RATE, sceneID, rate);
        public static void SET_​SYNCHRONIZED_​SCENE_HOLD_LAST_FRAME(int sceneID, bool toggle) => Function.Call((Hash)0xB6C49F8A5E295A5D, sceneID, toggle);
    }
    internal class EnemyHandler : Script
    {
        public static List<Vector3> CayoPericoCompound = new List<Vector3>
        {
           new Vector3 (4962.263f, -5787.381f, 21.03307f -1f),
           new Vector3 (5083.578f, -5733.974f, 15.80494f -1f),
        };
        public static Vector3 ClosePos;
        public static List<Ped> Enemies = new List<Ped>();
        public static int MaxPeds = 5;
        public static int TimeBetweenSpawns = 4000;
        public static int Time;
        public static int Area = -1;
        public static bool Started { get; private set; } = false;
        public static List<PedHash> CayoPericoPeds = new List<PedHash>
        {
            (PedHash)0x7ED5AD78,
            (PedHash)0x6C8C08E5
        };
        public static Random Rand = new Random();

        public EnemyHandler()
        {
            Tick += onTick;
            Aborted += onShutdown;

            Main.SetRelationshipBetweenGroups(Relationship.Hate, Groups.playersTeam, Groups.AiTeam);
            Main.SetRelationshipBetweenGroups(Relationship.Hate, Groups.AiTeam, Groups.playersTeam);
        }
        public void onTick(object sender, EventArgs e)
        {
            Spawn_Ai(Area);
        }

        public void onShutdown(object sender, EventArgs e)
        {
            var A_0 = true;
            if (A_0)
            {
                #region Vehicles
                #endregion
                #region Peds
                #endregion
                #region Props
                #endregion
                #region Blips
                #endregion
                #region Cameras
                #endregion
                #region Pickups
                #endregion
                RemoveEnemies();
            }
        }//<------here

        public static void Spawn_Ai(int Areas)
        {
            switch (Areas)
            {
                case 0://cayo perico compound inside
                    {
                        if (Game.GameTime > Time + TimeBetweenSpawns && Enemies.Count < MaxPeds)
                        {
                            int index = -1;
                            bool posFound = false;
                            ClosePos = CayoPericoCompound[0];
                            foreach (Vector3 v in CayoPericoCompound)
                            {
                                if (v.DistanceTo(Game.Player.Character.Position) < ClosePos.DistanceTo(Game.Player.Character.Position))
                                {
                                    ClosePos = v;
                                }
                            }
                            while (!posFound)
                            {
                                index = Rand.Next(0, CayoPericoCompound.Count);
                                if (CayoPericoCompound[index] != ClosePos)
                                {
                                    posFound = true;
                                }
                            }
                            int pedIndex = Rand.Next(0, CayoPericoPeds.Count);
                            Ped enemy = World.CreatePed(CayoPericoPeds[pedIndex], CayoPericoCompound[index]);
                            while (enemy == null)
                            {
                                Wait(0);
                            }
                            switch (pedIndex)
                            {
                                case 0:
                                    enemy.Weapons.Give(WeaponHash.AssaultRifle, 1000, true, true);
                                    Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, enemy, 2);
                                    break;
                                case 1:
                                    enemy.Weapons.Give(WeaponHash.MilitaryRifle, 1000, true, true);
                                    Function.Call(Hash.SET_PED_COMBAT_MOVEMENT, enemy, 2);
                                    break;
                            }
                            Function.Call(Hash.SET_PED_COMBAT_ABILITY, enemy, 2);
                            Function.Call(Hash.SET_PED_COMBAT_RANGE, enemy, 2);
                            Function.Call(Hash.SET_PED_CONFIG_FLAG, enemy, 132, true);
                            Function.Call(Hash.SET_PED_CONFIG_FLAG, enemy, 32, false);
                            Function.Call(Hash.SET_PED_CONFIG_FLAG, enemy, 118, false);
                            Function.Call(Hash.SET_PED_CONFIG_FLAG, enemy, 208, true);
                            Function.Call(Hash.SET_PED_CONFIG_FLAG, enemy, 188, true);
                            Function.Call(Hash.SET_PED_CONFIG_FLAG, enemy, 281, true);
                            enemy.FiringPattern = FiringPattern.BurstFire;
                            enemy.ShootRate = 60;
                            Function.Call(Hash.SET_PED_SPHERE_DEFENSIVE_AREA, 5018.392f, -5753.753f, 19.85898f, 200f, 1, 0);
                            enemy.FiringPattern = FiringPattern.BurstFire;
                            enemy.Armor = 200;
                            enemy.Accuracy = 15;
                            enemy.RelationshipGroup = Groups.AiTeam;
                            enemy.BlockPermanentEvents = true;
                            enemy.AlwaysKeepTask = true;
                            enemy.Task.FightAgainstHatedTargets(Groups.playersTeam);
                            enemy.AddBlip();
                            enemy.AttachedBlip.Sprite = (BlipSprite)270;
                            enemy.AttachedBlip.Color = BlipColor.Red;
                            enemy.AttachedBlip.Name = "Enemy";
                            enemy.AttachedBlip.Scale = 1.0f;
                            Function.Call(Hash.SET_PED_DROPS_WEAPONS_WHEN_DEAD, enemy, false);
                            Enemies.Add(enemy);
                            Time = Game.GameTime;
                        }
                    }
                    break;
            }
            CheckPeds();
        }

        public static void Start()
        {
            Started = true;
        }

        public static void Stop()
        {
            Started = false;
        }

        public static void CheckPeds()
        {
            if (Enemies.Count > 0)
            {
                foreach (Ped p in Enemies.ToList())
                {
                    if (p == null || !p.Exists())
                    {
                        Enemies.Remove(p);
                    }
                    else if (p.IsDead)
                    {
                        p.AttachedBlip.Delete();
                        p.MarkAsNoLongerNeeded();
                        Enemies.Remove(p);
                    }
                }
            }
        }

        public static void RemoveEnemies()
        {
            foreach (Ped p in Enemies.ToList())
            {
                p.AttachedBlip.Delete();
                p.Delete();
                Enemies.Remove(p);
            }
        }
    }
    public static class PlayerSwitch
    {
        public enum ePlayerSwitchTypes
        {
            SWITCH_TYPE_AUTO,
            SWITCH_TYPE_LONG,
            SWITCH_TYPE_MEDIUM,
            SWITCH_TYPE_SHORT
        };
        public static void SwitchBetweenPeds(Ped ped1, Ped destination)
        {
            ResetSwitch();
            int switchType = Function.Call<int>(Hash.GET_IDEAL_PLAYER_SWITCH_TYPE, ped1.Position.X, ped1.Position.Y, ped1.Position.Z, destination.Position.X, destination.Position.Y, World.GetGroundHeight(new Vector2(destination.Position.X, destination.Position.Y)));
            if (switchType == 3 || switchType == 1 || switchType == 0)
            {
                switchType = 2;
            }
            START_PLAYER_SWITCH(ped1, destination, 0, (ePlayerSwitchTypes)3);

            Wait(1000);
            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, true);
            Function.Call((Hash)0xAD5FDF34B81BFE79);
            Wait(500);
            if ((ePlayerSwitchTypes)switchType == ePlayerSwitchTypes.SWITCH_TYPE_LONG)
            {
                while (GET_PLAYER_SWITCH_STATE() < 8)
                {
                    Script.Yield();
                }
            }

            Function.Call(Hash.CHANGE_PLAYER_PED, Game.Player, destination, 0, true);
            SWITCH_IN_PLAYER(destination);
            Function.Call(Hash.SET_PLAYER_SWITCH_OUTRO, destination.Position.X, destination.Position.Y, World.GetGroundHeight(new Vector2(destination.Position.X, destination.Position.Y)), destination.Rotation.X, destination.Rotation.Y, destination.Rotation.Z, GameplayCamera.FieldOfView, 0f, 2);
            Function.Call(Hash.TOGGLE_PAUSED_RENDERPHASES, false);
            while (IS_PLAYER_SWITCH_IN_PROGRESS())
            {
                Wait(0);
            }

            //STOP_PLAYER_SWITCH();
        }

        public static void ResetSwitch()
        {
            if (IS_PLAYER_SWITCH_IN_PROGRESS()) STOP_PLAYER_SWITCH();
        }

        public static void START_PLAYER_SWITCH(Ped from, Ped to, int flags, ePlayerSwitchTypes switchType)
        {
            Function.Call(Hash.START_PLAYER_SWITCH, from, to, (int)flags, (int)switchType);
        }

        public static bool IS_PLAYER_SWITCH_IN_PROGRESS()
        {
            return Function.Call<bool>(Hash.IS_PLAYER_SWITCH_IN_PROGRESS);
        }

        public static bool IS_SWITCH_READY_FOR_DESCENT()
        {
            return Function.Call<bool>(Hash.IS_SWITCH_READY_FOR_DESCENT);
        }

        public static int GET_PLAYER_SWITCH_STATE()
        {
            return Function.Call<int>(Hash.GET_PLAYER_SWITCH_STATE);
        }

        public static void STOP_PLAYER_SWITCH()
        {
            if (IS_PLAYER_SWITCH_IN_PROGRESS()) Function.Call(Hash.STOP_PLAYER_SWITCH);
        }

        public static ePlayerSwitchTypes GET_IDEAL_PLAYER_SWITCH_TYPE(float startx, float starty, float startz, float endx, float endy, float endz)
        {
            return (ePlayerSwitchTypes)Function.Call<int>(Hash.GET_IDEAL_PLAYER_SWITCH_TYPE, startx, starty, startz, endx, endy, endz);
        }
        public static void _SWITCH_OUT_PLAYER(Ped ped, int flags, int switchType)
        {
            Function.Call(Hash.SWITCH_TO_MULTI_FIRSTPART, ped, flags, switchType);
        }
        public static void SWITCH_IN_PLAYER(Ped ped)
        {
            Function.Call((Hash)0xD8295AF639FD9CB8, ped);
        }
    }
    #endregion
}



